
(function() {
'use strict';

function F2(fun)
{
  function wrapper(a) { return function(b) { return fun(a,b); }; }
  wrapper.arity = 2;
  wrapper.func = fun;
  return wrapper;
}

function F3(fun)
{
  function wrapper(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  }
  wrapper.arity = 3;
  wrapper.func = fun;
  return wrapper;
}

function F4(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  }
  wrapper.arity = 4;
  wrapper.func = fun;
  return wrapper;
}

function F5(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  }
  wrapper.arity = 5;
  wrapper.func = fun;
  return wrapper;
}

function F6(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  }
  wrapper.arity = 6;
  wrapper.func = fun;
  return wrapper;
}

function F7(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  }
  wrapper.arity = 7;
  wrapper.func = fun;
  return wrapper;
}

function F8(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  }
  wrapper.arity = 8;
  wrapper.func = fun;
  return wrapper;
}

function F9(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  }
  wrapper.arity = 9;
  wrapper.func = fun;
  return wrapper;
}

function A2(fun, a, b)
{
  return fun.arity === 2
    ? fun.func(a, b)
    : fun(a)(b);
}
function A3(fun, a, b, c)
{
  return fun.arity === 3
    ? fun.func(a, b, c)
    : fun(a)(b)(c);
}
function A4(fun, a, b, c, d)
{
  return fun.arity === 4
    ? fun.func(a, b, c, d)
    : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e)
{
  return fun.arity === 5
    ? fun.func(a, b, c, d, e)
    : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f)
{
  return fun.arity === 6
    ? fun.func(a, b, c, d, e, f)
    : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g)
{
  return fun.arity === 7
    ? fun.func(a, b, c, d, e, f, g)
    : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h)
{
  return fun.arity === 8
    ? fun.func(a, b, c, d, e, f, g, h)
    : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i)
{
  return fun.arity === 9
    ? fun.func(a, b, c, d, e, f, g, h, i)
    : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

//import Native.Utils //

var _elm_lang$core$Native_Basics = function() {

function div(a, b)
{
	return (a / b) | 0;
}
function rem(a, b)
{
	return a % b;
}
function mod(a, b)
{
	if (b === 0)
	{
		throw new Error('Cannot perform mod 0. Division by zero error.');
	}
	var r = a % b;
	var m = a === 0 ? 0 : (b > 0 ? (a >= 0 ? r : r + b) : -mod(-a, -b));

	return m === b ? 0 : m;
}
function logBase(base, n)
{
	return Math.log(n) / Math.log(base);
}
function negate(n)
{
	return -n;
}
function abs(n)
{
	return n < 0 ? -n : n;
}

function min(a, b)
{
	return _elm_lang$core$Native_Utils.cmp(a, b) < 0 ? a : b;
}
function max(a, b)
{
	return _elm_lang$core$Native_Utils.cmp(a, b) > 0 ? a : b;
}
function clamp(lo, hi, n)
{
	return _elm_lang$core$Native_Utils.cmp(n, lo) < 0
		? lo
		: _elm_lang$core$Native_Utils.cmp(n, hi) > 0
			? hi
			: n;
}

var ord = ['LT', 'EQ', 'GT'];

function compare(x, y)
{
	return { ctor: ord[_elm_lang$core$Native_Utils.cmp(x, y) + 1] };
}

function xor(a, b)
{
	return a !== b;
}
function not(b)
{
	return !b;
}
function isInfinite(n)
{
	return n === Infinity || n === -Infinity;
}

function truncate(n)
{
	return n | 0;
}

function degrees(d)
{
	return d * Math.PI / 180;
}
function turns(t)
{
	return 2 * Math.PI * t;
}
function fromPolar(point)
{
	var r = point._0;
	var t = point._1;
	return _elm_lang$core$Native_Utils.Tuple2(r * Math.cos(t), r * Math.sin(t));
}
function toPolar(point)
{
	var x = point._0;
	var y = point._1;
	return _elm_lang$core$Native_Utils.Tuple2(Math.sqrt(x * x + y * y), Math.atan2(y, x));
}

return {
	div: F2(div),
	rem: F2(rem),
	mod: F2(mod),

	pi: Math.PI,
	e: Math.E,
	cos: Math.cos,
	sin: Math.sin,
	tan: Math.tan,
	acos: Math.acos,
	asin: Math.asin,
	atan: Math.atan,
	atan2: F2(Math.atan2),

	degrees: degrees,
	turns: turns,
	fromPolar: fromPolar,
	toPolar: toPolar,

	sqrt: Math.sqrt,
	logBase: F2(logBase),
	negate: negate,
	abs: abs,
	min: F2(min),
	max: F2(max),
	clamp: F3(clamp),
	compare: F2(compare),

	xor: F2(xor),
	not: not,

	truncate: truncate,
	ceiling: Math.ceil,
	floor: Math.floor,
	round: Math.round,
	toFloat: function(x) { return x; },
	isNaN: isNaN,
	isInfinite: isInfinite
};

}();
//import //

var _elm_lang$core$Native_Utils = function() {

// COMPARISONS

function eq(x, y)
{
	var stack = [];
	var isEqual = eqHelp(x, y, 0, stack);
	var pair;
	while (isEqual && (pair = stack.pop()))
	{
		isEqual = eqHelp(pair.x, pair.y, 0, stack);
	}
	return isEqual;
}


function eqHelp(x, y, depth, stack)
{
	if (depth > 100)
	{
		stack.push({ x: x, y: y });
		return true;
	}

	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object')
	{
		if (typeof x === 'function')
		{
			throw new Error(
				'Trying to use `(==)` on functions. There is no way to know if functions are "the same" in the Elm sense.'
				+ ' Read more about this at http://package.elm-lang.org/packages/elm-lang/core/latest/Basics#=='
				+ ' which describes why it is this way and what the better version will look like.'
			);
		}
		return false;
	}

	if (x === null || y === null)
	{
		return false
	}

	if (x instanceof Date)
	{
		return x.getTime() === y.getTime();
	}

	if (!('ctor' in x))
	{
		for (var key in x)
		{
			if (!eqHelp(x[key], y[key], depth + 1, stack))
			{
				return false;
			}
		}
		return true;
	}

	// convert Dicts and Sets to lists
	if (x.ctor === 'RBNode_elm_builtin' || x.ctor === 'RBEmpty_elm_builtin')
	{
		x = _elm_lang$core$Dict$toList(x);
		y = _elm_lang$core$Dict$toList(y);
	}
	if (x.ctor === 'Set_elm_builtin')
	{
		x = _elm_lang$core$Set$toList(x);
		y = _elm_lang$core$Set$toList(y);
	}

	// check if lists are equal without recursion
	if (x.ctor === '::')
	{
		var a = x;
		var b = y;
		while (a.ctor === '::' && b.ctor === '::')
		{
			if (!eqHelp(a._0, b._0, depth + 1, stack))
			{
				return false;
			}
			a = a._1;
			b = b._1;
		}
		return a.ctor === b.ctor;
	}

	// check if Arrays are equal
	if (x.ctor === '_Array')
	{
		var xs = _elm_lang$core$Native_Array.toJSArray(x);
		var ys = _elm_lang$core$Native_Array.toJSArray(y);
		if (xs.length !== ys.length)
		{
			return false;
		}
		for (var i = 0; i < xs.length; i++)
		{
			if (!eqHelp(xs[i], ys[i], depth + 1, stack))
			{
				return false;
			}
		}
		return true;
	}

	if (!eqHelp(x.ctor, y.ctor, depth + 1, stack))
	{
		return false;
	}

	for (var key in x)
	{
		if (!eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

var LT = -1, EQ = 0, GT = 1;

function cmp(x, y)
{
	if (typeof x !== 'object')
	{
		return x === y ? EQ : x < y ? LT : GT;
	}

	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? EQ : a < b ? LT : GT;
	}

	if (x.ctor === '::' || x.ctor === '[]')
	{
		while (x.ctor === '::' && y.ctor === '::')
		{
			var ord = cmp(x._0, y._0);
			if (ord !== EQ)
			{
				return ord;
			}
			x = x._1;
			y = y._1;
		}
		return x.ctor === y.ctor ? EQ : x.ctor === '[]' ? LT : GT;
	}

	if (x.ctor.slice(0, 6) === '_Tuple')
	{
		var ord;
		var n = x.ctor.slice(6) - 0;
		var err = 'cannot compare tuples with more than 6 elements.';
		if (n === 0) return EQ;
		if (n >= 1) { ord = cmp(x._0, y._0); if (ord !== EQ) return ord;
		if (n >= 2) { ord = cmp(x._1, y._1); if (ord !== EQ) return ord;
		if (n >= 3) { ord = cmp(x._2, y._2); if (ord !== EQ) return ord;
		if (n >= 4) { ord = cmp(x._3, y._3); if (ord !== EQ) return ord;
		if (n >= 5) { ord = cmp(x._4, y._4); if (ord !== EQ) return ord;
		if (n >= 6) { ord = cmp(x._5, y._5); if (ord !== EQ) return ord;
		if (n >= 7) throw new Error('Comparison error: ' + err); } } } } } }
		return EQ;
	}

	throw new Error(
		'Comparison error: comparison is only defined on ints, '
		+ 'floats, times, chars, strings, lists of comparable values, '
		+ 'and tuples of comparable values.'
	);
}


// COMMON VALUES

var Tuple0 = {
	ctor: '_Tuple0'
};

function Tuple2(x, y)
{
	return {
		ctor: '_Tuple2',
		_0: x,
		_1: y
	};
}

function chr(c)
{
	return new String(c);
}


// GUID

var count = 0;
function guid(_)
{
	return count++;
}


// RECORDS

function update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


//// LIST STUFF ////

var Nil = { ctor: '[]' };

function Cons(hd, tl)
{
	return {
		ctor: '::',
		_0: hd,
		_1: tl
	};
}

function append(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (xs.ctor === '[]')
	{
		return ys;
	}
	var root = Cons(xs._0, Nil);
	var curr = root;
	xs = xs._1;
	while (xs.ctor !== '[]')
	{
		curr._1 = Cons(xs._0, Nil);
		xs = xs._1;
		curr = curr._1;
	}
	curr._1 = ys;
	return root;
}


// CRASHES

function crash(moduleName, region)
{
	return function(message) {
		throw new Error(
			'Ran into a `Debug.crash` in module `' + moduleName + '` ' + regionToString(region) + '\n'
			+ 'The message provided by the code author is:\n\n    '
			+ message
		);
	};
}

function crashCase(moduleName, region, value)
{
	return function(message) {
		throw new Error(
			'Ran into a `Debug.crash` in module `' + moduleName + '`\n\n'
			+ 'This was caused by the `case` expression ' + regionToString(region) + '.\n'
			+ 'One of the branches ended with a crash and the following value got through:\n\n    ' + toString(value) + '\n\n'
			+ 'The message provided by the code author is:\n\n    '
			+ message
		);
	};
}

function regionToString(region)
{
	if (region.start.line == region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'between lines ' + region.start.line + ' and ' + region.end.line;
}


// TO STRING

function toString(v)
{
	var type = typeof v;
	if (type === 'function')
	{
		return '<function>';
	}

	if (type === 'boolean')
	{
		return v ? 'True' : 'False';
	}

	if (type === 'number')
	{
		return v + '';
	}

	if (v instanceof String)
	{
		return '\'' + addSlashes(v, true) + '\'';
	}

	if (type === 'string')
	{
		return '"' + addSlashes(v, false) + '"';
	}

	if (v === null)
	{
		return 'null';
	}

	if (type === 'object' && 'ctor' in v)
	{
		var ctorStarter = v.ctor.substring(0, 5);

		if (ctorStarter === '_Tupl')
		{
			var output = [];
			for (var k in v)
			{
				if (k === 'ctor') continue;
				output.push(toString(v[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (ctorStarter === '_Task')
		{
			return '<task>'
		}

		if (v.ctor === '_Array')
		{
			var list = _elm_lang$core$Array$toList(v);
			return 'Array.fromList ' + toString(list);
		}

		if (v.ctor === '<decoder>')
		{
			return '<decoder>';
		}

		if (v.ctor === '_Process')
		{
			return '<process:' + v.id + '>';
		}

		if (v.ctor === '::')
		{
			var output = '[' + toString(v._0);
			v = v._1;
			while (v.ctor === '::')
			{
				output += ',' + toString(v._0);
				v = v._1;
			}
			return output + ']';
		}

		if (v.ctor === '[]')
		{
			return '[]';
		}

		if (v.ctor === 'Set_elm_builtin')
		{
			return 'Set.fromList ' + toString(_elm_lang$core$Set$toList(v));
		}

		if (v.ctor === 'RBNode_elm_builtin' || v.ctor === 'RBEmpty_elm_builtin')
		{
			return 'Dict.fromList ' + toString(_elm_lang$core$Dict$toList(v));
		}

		var output = '';
		for (var i in v)
		{
			if (i === 'ctor') continue;
			var str = toString(v[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return v.ctor + output;
	}

	if (type === 'object')
	{
		if (v instanceof Date)
		{
			return '<' + v.toString() + '>';
		}

		if (v.elm_web_socket)
		{
			return '<websocket>';
		}

		var output = [];
		for (var k in v)
		{
			output.push(k + ' = ' + toString(v[k]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return '<internal structure>';
}

function addSlashes(str, isChar)
{
	var s = str.replace(/\\/g, '\\\\')
			  .replace(/\n/g, '\\n')
			  .replace(/\t/g, '\\t')
			  .replace(/\r/g, '\\r')
			  .replace(/\v/g, '\\v')
			  .replace(/\0/g, '\\0');
	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}


return {
	eq: eq,
	cmp: cmp,
	Tuple0: Tuple0,
	Tuple2: Tuple2,
	chr: chr,
	update: update,
	guid: guid,

	append: F2(append),

	crash: crash,
	crashCase: crashCase,

	toString: toString
};

}();
var _elm_lang$core$Basics$never = function (_p0) {
	never:
	while (true) {
		var _p1 = _p0;
		var _v1 = _p1._0;
		_p0 = _v1;
		continue never;
	}
};
var _elm_lang$core$Basics$uncurry = F2(
	function (f, _p2) {
		var _p3 = _p2;
		return A2(f, _p3._0, _p3._1);
	});
var _elm_lang$core$Basics$curry = F3(
	function (f, a, b) {
		return f(
			{ctor: '_Tuple2', _0: a, _1: b});
	});
var _elm_lang$core$Basics$flip = F3(
	function (f, b, a) {
		return A2(f, a, b);
	});
var _elm_lang$core$Basics$always = F2(
	function (a, _p4) {
		return a;
	});
var _elm_lang$core$Basics$identity = function (x) {
	return x;
};
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<|'] = F2(
	function (f, x) {
		return f(x);
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['|>'] = F2(
	function (x, f) {
		return f(x);
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>>'] = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<<'] = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['++'] = _elm_lang$core$Native_Utils.append;
var _elm_lang$core$Basics$toString = _elm_lang$core$Native_Utils.toString;
var _elm_lang$core$Basics$isInfinite = _elm_lang$core$Native_Basics.isInfinite;
var _elm_lang$core$Basics$isNaN = _elm_lang$core$Native_Basics.isNaN;
var _elm_lang$core$Basics$toFloat = _elm_lang$core$Native_Basics.toFloat;
var _elm_lang$core$Basics$ceiling = _elm_lang$core$Native_Basics.ceiling;
var _elm_lang$core$Basics$floor = _elm_lang$core$Native_Basics.floor;
var _elm_lang$core$Basics$truncate = _elm_lang$core$Native_Basics.truncate;
var _elm_lang$core$Basics$round = _elm_lang$core$Native_Basics.round;
var _elm_lang$core$Basics$not = _elm_lang$core$Native_Basics.not;
var _elm_lang$core$Basics$xor = _elm_lang$core$Native_Basics.xor;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['||'] = _elm_lang$core$Native_Basics.or;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['&&'] = _elm_lang$core$Native_Basics.and;
var _elm_lang$core$Basics$max = _elm_lang$core$Native_Basics.max;
var _elm_lang$core$Basics$min = _elm_lang$core$Native_Basics.min;
var _elm_lang$core$Basics$compare = _elm_lang$core$Native_Basics.compare;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>='] = _elm_lang$core$Native_Basics.ge;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<='] = _elm_lang$core$Native_Basics.le;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>'] = _elm_lang$core$Native_Basics.gt;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<'] = _elm_lang$core$Native_Basics.lt;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['/='] = _elm_lang$core$Native_Basics.neq;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['=='] = _elm_lang$core$Native_Basics.eq;
var _elm_lang$core$Basics$e = _elm_lang$core$Native_Basics.e;
var _elm_lang$core$Basics$pi = _elm_lang$core$Native_Basics.pi;
var _elm_lang$core$Basics$clamp = _elm_lang$core$Native_Basics.clamp;
var _elm_lang$core$Basics$logBase = _elm_lang$core$Native_Basics.logBase;
var _elm_lang$core$Basics$abs = _elm_lang$core$Native_Basics.abs;
var _elm_lang$core$Basics$negate = _elm_lang$core$Native_Basics.negate;
var _elm_lang$core$Basics$sqrt = _elm_lang$core$Native_Basics.sqrt;
var _elm_lang$core$Basics$atan2 = _elm_lang$core$Native_Basics.atan2;
var _elm_lang$core$Basics$atan = _elm_lang$core$Native_Basics.atan;
var _elm_lang$core$Basics$asin = _elm_lang$core$Native_Basics.asin;
var _elm_lang$core$Basics$acos = _elm_lang$core$Native_Basics.acos;
var _elm_lang$core$Basics$tan = _elm_lang$core$Native_Basics.tan;
var _elm_lang$core$Basics$sin = _elm_lang$core$Native_Basics.sin;
var _elm_lang$core$Basics$cos = _elm_lang$core$Native_Basics.cos;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['^'] = _elm_lang$core$Native_Basics.exp;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['%'] = _elm_lang$core$Native_Basics.mod;
var _elm_lang$core$Basics$rem = _elm_lang$core$Native_Basics.rem;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['//'] = _elm_lang$core$Native_Basics.div;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['/'] = _elm_lang$core$Native_Basics.floatDiv;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['*'] = _elm_lang$core$Native_Basics.mul;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['-'] = _elm_lang$core$Native_Basics.sub;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['+'] = _elm_lang$core$Native_Basics.add;
var _elm_lang$core$Basics$toPolar = _elm_lang$core$Native_Basics.toPolar;
var _elm_lang$core$Basics$fromPolar = _elm_lang$core$Native_Basics.fromPolar;
var _elm_lang$core$Basics$turns = _elm_lang$core$Native_Basics.turns;
var _elm_lang$core$Basics$degrees = _elm_lang$core$Native_Basics.degrees;
var _elm_lang$core$Basics$radians = function (t) {
	return t;
};
var _elm_lang$core$Basics$GT = {ctor: 'GT'};
var _elm_lang$core$Basics$EQ = {ctor: 'EQ'};
var _elm_lang$core$Basics$LT = {ctor: 'LT'};
var _elm_lang$core$Basics$JustOneMore = function (a) {
	return {ctor: 'JustOneMore', _0: a};
};

var _elm_lang$core$Maybe$withDefault = F2(
	function ($default, maybe) {
		var _p0 = maybe;
		if (_p0.ctor === 'Just') {
			return _p0._0;
		} else {
			return $default;
		}
	});
var _elm_lang$core$Maybe$Nothing = {ctor: 'Nothing'};
var _elm_lang$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		var _p1 = maybeValue;
		if (_p1.ctor === 'Just') {
			return callback(_p1._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$Just = function (a) {
	return {ctor: 'Just', _0: a};
};
var _elm_lang$core$Maybe$map = F2(
	function (f, maybe) {
		var _p2 = maybe;
		if (_p2.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(
				f(_p2._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map2 = F3(
	function (func, ma, mb) {
		var _p3 = {ctor: '_Tuple2', _0: ma, _1: mb};
		if (((_p3.ctor === '_Tuple2') && (_p3._0.ctor === 'Just')) && (_p3._1.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A2(func, _p3._0._0, _p3._1._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map3 = F4(
	function (func, ma, mb, mc) {
		var _p4 = {ctor: '_Tuple3', _0: ma, _1: mb, _2: mc};
		if ((((_p4.ctor === '_Tuple3') && (_p4._0.ctor === 'Just')) && (_p4._1.ctor === 'Just')) && (_p4._2.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A3(func, _p4._0._0, _p4._1._0, _p4._2._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map4 = F5(
	function (func, ma, mb, mc, md) {
		var _p5 = {ctor: '_Tuple4', _0: ma, _1: mb, _2: mc, _3: md};
		if (((((_p5.ctor === '_Tuple4') && (_p5._0.ctor === 'Just')) && (_p5._1.ctor === 'Just')) && (_p5._2.ctor === 'Just')) && (_p5._3.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A4(func, _p5._0._0, _p5._1._0, _p5._2._0, _p5._3._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map5 = F6(
	function (func, ma, mb, mc, md, me) {
		var _p6 = {ctor: '_Tuple5', _0: ma, _1: mb, _2: mc, _3: md, _4: me};
		if ((((((_p6.ctor === '_Tuple5') && (_p6._0.ctor === 'Just')) && (_p6._1.ctor === 'Just')) && (_p6._2.ctor === 'Just')) && (_p6._3.ctor === 'Just')) && (_p6._4.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A5(func, _p6._0._0, _p6._1._0, _p6._2._0, _p6._3._0, _p6._4._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});

//import Native.Utils //

var _elm_lang$core$Native_List = function() {

var Nil = { ctor: '[]' };

function Cons(hd, tl)
{
	return { ctor: '::', _0: hd, _1: tl };
}

function fromArray(arr)
{
	var out = Nil;
	for (var i = arr.length; i--; )
	{
		out = Cons(arr[i], out);
	}
	return out;
}

function toArray(xs)
{
	var out = [];
	while (xs.ctor !== '[]')
	{
		out.push(xs._0);
		xs = xs._1;
	}
	return out;
}

function foldr(f, b, xs)
{
	var arr = toArray(xs);
	var acc = b;
	for (var i = arr.length; i--; )
	{
		acc = A2(f, arr[i], acc);
	}
	return acc;
}

function map2(f, xs, ys)
{
	var arr = [];
	while (xs.ctor !== '[]' && ys.ctor !== '[]')
	{
		arr.push(A2(f, xs._0, ys._0));
		xs = xs._1;
		ys = ys._1;
	}
	return fromArray(arr);
}

function map3(f, xs, ys, zs)
{
	var arr = [];
	while (xs.ctor !== '[]' && ys.ctor !== '[]' && zs.ctor !== '[]')
	{
		arr.push(A3(f, xs._0, ys._0, zs._0));
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function map4(f, ws, xs, ys, zs)
{
	var arr = [];
	while (   ws.ctor !== '[]'
		   && xs.ctor !== '[]'
		   && ys.ctor !== '[]'
		   && zs.ctor !== '[]')
	{
		arr.push(A4(f, ws._0, xs._0, ys._0, zs._0));
		ws = ws._1;
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function map5(f, vs, ws, xs, ys, zs)
{
	var arr = [];
	while (   vs.ctor !== '[]'
		   && ws.ctor !== '[]'
		   && xs.ctor !== '[]'
		   && ys.ctor !== '[]'
		   && zs.ctor !== '[]')
	{
		arr.push(A5(f, vs._0, ws._0, xs._0, ys._0, zs._0));
		vs = vs._1;
		ws = ws._1;
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function sortBy(f, xs)
{
	return fromArray(toArray(xs).sort(function(a, b) {
		return _elm_lang$core$Native_Utils.cmp(f(a), f(b));
	}));
}

function sortWith(f, xs)
{
	return fromArray(toArray(xs).sort(function(a, b) {
		var ord = f(a)(b).ctor;
		return ord === 'EQ' ? 0 : ord === 'LT' ? -1 : 1;
	}));
}

return {
	Nil: Nil,
	Cons: Cons,
	cons: F2(Cons),
	toArray: toArray,
	fromArray: fromArray,

	foldr: F3(foldr),

	map2: F3(map2),
	map3: F4(map3),
	map4: F5(map4),
	map5: F6(map5),
	sortBy: F2(sortBy),
	sortWith: F2(sortWith)
};

}();
var _elm_lang$core$List$sortWith = _elm_lang$core$Native_List.sortWith;
var _elm_lang$core$List$sortBy = _elm_lang$core$Native_List.sortBy;
var _elm_lang$core$List$sort = function (xs) {
	return A2(_elm_lang$core$List$sortBy, _elm_lang$core$Basics$identity, xs);
};
var _elm_lang$core$List$singleton = function (value) {
	return {
		ctor: '::',
		_0: value,
		_1: {ctor: '[]'}
	};
};
var _elm_lang$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return list;
			} else {
				var _p0 = list;
				if (_p0.ctor === '[]') {
					return list;
				} else {
					var _v1 = n - 1,
						_v2 = _p0._1;
					n = _v1;
					list = _v2;
					continue drop;
				}
			}
		}
	});
var _elm_lang$core$List$map5 = _elm_lang$core$Native_List.map5;
var _elm_lang$core$List$map4 = _elm_lang$core$Native_List.map4;
var _elm_lang$core$List$map3 = _elm_lang$core$Native_List.map3;
var _elm_lang$core$List$map2 = _elm_lang$core$Native_List.map2;
var _elm_lang$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			var _p1 = list;
			if (_p1.ctor === '[]') {
				return false;
			} else {
				if (isOkay(_p1._0)) {
					return true;
				} else {
					var _v4 = isOkay,
						_v5 = _p1._1;
					isOkay = _v4;
					list = _v5;
					continue any;
				}
			}
		}
	});
var _elm_lang$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			_elm_lang$core$List$any,
			function (_p2) {
				return !isOkay(_p2);
			},
			list);
	});
var _elm_lang$core$List$foldr = _elm_lang$core$Native_List.foldr;
var _elm_lang$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			var _p3 = list;
			if (_p3.ctor === '[]') {
				return acc;
			} else {
				var _v7 = func,
					_v8 = A2(func, _p3._0, acc),
					_v9 = _p3._1;
				func = _v7;
				acc = _v8;
				list = _v9;
				continue foldl;
			}
		}
	});
var _elm_lang$core$List$length = function (xs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p4, i) {
				return i + 1;
			}),
		0,
		xs);
};
var _elm_lang$core$List$sum = function (numbers) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return x + y;
			}),
		0,
		numbers);
};
var _elm_lang$core$List$product = function (numbers) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return x * y;
			}),
		1,
		numbers);
};
var _elm_lang$core$List$maximum = function (list) {
	var _p5 = list;
	if (_p5.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A3(_elm_lang$core$List$foldl, _elm_lang$core$Basics$max, _p5._0, _p5._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$minimum = function (list) {
	var _p6 = list;
	if (_p6.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A3(_elm_lang$core$List$foldl, _elm_lang$core$Basics$min, _p6._0, _p6._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$member = F2(
	function (x, xs) {
		return A2(
			_elm_lang$core$List$any,
			function (a) {
				return _elm_lang$core$Native_Utils.eq(a, x);
			},
			xs);
	});
var _elm_lang$core$List$isEmpty = function (xs) {
	var _p7 = xs;
	if (_p7.ctor === '[]') {
		return true;
	} else {
		return false;
	}
};
var _elm_lang$core$List$tail = function (list) {
	var _p8 = list;
	if (_p8.ctor === '::') {
		return _elm_lang$core$Maybe$Just(_p8._1);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$head = function (list) {
	var _p9 = list;
	if (_p9.ctor === '::') {
		return _elm_lang$core$Maybe$Just(_p9._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List_ops = _elm_lang$core$List_ops || {};
_elm_lang$core$List_ops['::'] = _elm_lang$core$Native_List.cons;
var _elm_lang$core$List$map = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, acc) {
					return {
						ctor: '::',
						_0: f(x),
						_1: acc
					};
				}),
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$filter = F2(
	function (pred, xs) {
		var conditionalCons = F2(
			function (front, back) {
				return pred(front) ? {ctor: '::', _0: front, _1: back} : back;
			});
		return A3(
			_elm_lang$core$List$foldr,
			conditionalCons,
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _p10 = f(mx);
		if (_p10.ctor === 'Just') {
			return {ctor: '::', _0: _p10._0, _1: xs};
		} else {
			return xs;
		}
	});
var _elm_lang$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$foldr,
			_elm_lang$core$List$maybeCons(f),
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$reverse = function (list) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return {ctor: '::', _0: x, _1: y};
			}),
		{ctor: '[]'},
		list);
};
var _elm_lang$core$List$scanl = F3(
	function (f, b, xs) {
		var scan1 = F2(
			function (x, accAcc) {
				var _p11 = accAcc;
				if (_p11.ctor === '::') {
					return {
						ctor: '::',
						_0: A2(f, x, _p11._0),
						_1: accAcc
					};
				} else {
					return {ctor: '[]'};
				}
			});
		return _elm_lang$core$List$reverse(
			A3(
				_elm_lang$core$List$foldl,
				scan1,
				{
					ctor: '::',
					_0: b,
					_1: {ctor: '[]'}
				},
				xs));
	});
var _elm_lang$core$List$append = F2(
	function (xs, ys) {
		var _p12 = ys;
		if (_p12.ctor === '[]') {
			return xs;
		} else {
			return A3(
				_elm_lang$core$List$foldr,
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					}),
				ys,
				xs);
		}
	});
var _elm_lang$core$List$concat = function (lists) {
	return A3(
		_elm_lang$core$List$foldr,
		_elm_lang$core$List$append,
		{ctor: '[]'},
		lists);
};
var _elm_lang$core$List$concatMap = F2(
	function (f, list) {
		return _elm_lang$core$List$concat(
			A2(_elm_lang$core$List$map, f, list));
	});
var _elm_lang$core$List$partition = F2(
	function (pred, list) {
		var step = F2(
			function (x, _p13) {
				var _p14 = _p13;
				var _p16 = _p14._0;
				var _p15 = _p14._1;
				return pred(x) ? {
					ctor: '_Tuple2',
					_0: {ctor: '::', _0: x, _1: _p16},
					_1: _p15
				} : {
					ctor: '_Tuple2',
					_0: _p16,
					_1: {ctor: '::', _0: x, _1: _p15}
				};
			});
		return A3(
			_elm_lang$core$List$foldr,
			step,
			{
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: {ctor: '[]'}
			},
			list);
	});
var _elm_lang$core$List$unzip = function (pairs) {
	var step = F2(
		function (_p18, _p17) {
			var _p19 = _p18;
			var _p20 = _p17;
			return {
				ctor: '_Tuple2',
				_0: {ctor: '::', _0: _p19._0, _1: _p20._0},
				_1: {ctor: '::', _0: _p19._1, _1: _p20._1}
			};
		});
	return A3(
		_elm_lang$core$List$foldr,
		step,
		{
			ctor: '_Tuple2',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		},
		pairs);
};
var _elm_lang$core$List$intersperse = F2(
	function (sep, xs) {
		var _p21 = xs;
		if (_p21.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var step = F2(
				function (x, rest) {
					return {
						ctor: '::',
						_0: sep,
						_1: {ctor: '::', _0: x, _1: rest}
					};
				});
			var spersed = A3(
				_elm_lang$core$List$foldr,
				step,
				{ctor: '[]'},
				_p21._1);
			return {ctor: '::', _0: _p21._0, _1: spersed};
		}
	});
var _elm_lang$core$List$takeReverse = F3(
	function (n, list, taken) {
		takeReverse:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return taken;
			} else {
				var _p22 = list;
				if (_p22.ctor === '[]') {
					return taken;
				} else {
					var _v23 = n - 1,
						_v24 = _p22._1,
						_v25 = {ctor: '::', _0: _p22._0, _1: taken};
					n = _v23;
					list = _v24;
					taken = _v25;
					continue takeReverse;
				}
			}
		}
	});
var _elm_lang$core$List$takeTailRec = F2(
	function (n, list) {
		return _elm_lang$core$List$reverse(
			A3(
				_elm_lang$core$List$takeReverse,
				n,
				list,
				{ctor: '[]'}));
	});
var _elm_lang$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
			return {ctor: '[]'};
		} else {
			var _p23 = {ctor: '_Tuple2', _0: n, _1: list};
			_v26_5:
			do {
				_v26_1:
				do {
					if (_p23.ctor === '_Tuple2') {
						if (_p23._1.ctor === '[]') {
							return list;
						} else {
							if (_p23._1._1.ctor === '::') {
								switch (_p23._0) {
									case 1:
										break _v26_1;
									case 2:
										return {
											ctor: '::',
											_0: _p23._1._0,
											_1: {
												ctor: '::',
												_0: _p23._1._1._0,
												_1: {ctor: '[]'}
											}
										};
									case 3:
										if (_p23._1._1._1.ctor === '::') {
											return {
												ctor: '::',
												_0: _p23._1._0,
												_1: {
													ctor: '::',
													_0: _p23._1._1._0,
													_1: {
														ctor: '::',
														_0: _p23._1._1._1._0,
														_1: {ctor: '[]'}
													}
												}
											};
										} else {
											break _v26_5;
										}
									default:
										if ((_p23._1._1._1.ctor === '::') && (_p23._1._1._1._1.ctor === '::')) {
											var _p28 = _p23._1._1._1._0;
											var _p27 = _p23._1._1._0;
											var _p26 = _p23._1._0;
											var _p25 = _p23._1._1._1._1._0;
											var _p24 = _p23._1._1._1._1._1;
											return (_elm_lang$core$Native_Utils.cmp(ctr, 1000) > 0) ? {
												ctor: '::',
												_0: _p26,
												_1: {
													ctor: '::',
													_0: _p27,
													_1: {
														ctor: '::',
														_0: _p28,
														_1: {
															ctor: '::',
															_0: _p25,
															_1: A2(_elm_lang$core$List$takeTailRec, n - 4, _p24)
														}
													}
												}
											} : {
												ctor: '::',
												_0: _p26,
												_1: {
													ctor: '::',
													_0: _p27,
													_1: {
														ctor: '::',
														_0: _p28,
														_1: {
															ctor: '::',
															_0: _p25,
															_1: A3(_elm_lang$core$List$takeFast, ctr + 1, n - 4, _p24)
														}
													}
												}
											};
										} else {
											break _v26_5;
										}
								}
							} else {
								if (_p23._0 === 1) {
									break _v26_1;
								} else {
									break _v26_5;
								}
							}
						}
					} else {
						break _v26_5;
					}
				} while(false);
				return {
					ctor: '::',
					_0: _p23._1._0,
					_1: {ctor: '[]'}
				};
			} while(false);
			return list;
		}
	});
var _elm_lang$core$List$take = F2(
	function (n, list) {
		return A3(_elm_lang$core$List$takeFast, 0, n, list);
	});
var _elm_lang$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return result;
			} else {
				var _v27 = {ctor: '::', _0: value, _1: result},
					_v28 = n - 1,
					_v29 = value;
				result = _v27;
				n = _v28;
				value = _v29;
				continue repeatHelp;
			}
		}
	});
var _elm_lang$core$List$repeat = F2(
	function (n, value) {
		return A3(
			_elm_lang$core$List$repeatHelp,
			{ctor: '[]'},
			n,
			value);
	});
var _elm_lang$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(lo, hi) < 1) {
				var _v30 = lo,
					_v31 = hi - 1,
					_v32 = {ctor: '::', _0: hi, _1: list};
				lo = _v30;
				hi = _v31;
				list = _v32;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var _elm_lang$core$List$range = F2(
	function (lo, hi) {
		return A3(
			_elm_lang$core$List$rangeHelp,
			lo,
			hi,
			{ctor: '[]'});
	});
var _elm_lang$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$map2,
			f,
			A2(
				_elm_lang$core$List$range,
				0,
				_elm_lang$core$List$length(xs) - 1),
			xs);
	});

//import Native.Utils //

var _elm_lang$core$Native_Debug = function() {

function log(tag, value)
{
	var msg = tag + ': ' + _elm_lang$core$Native_Utils.toString(value);
	var process = process || {};
	if (process.stdout)
	{
		process.stdout.write(msg);
	}
	else
	{
		console.log(msg);
	}
	return value;
}

function crash(message)
{
	throw new Error(message);
}

return {
	crash: crash,
	log: F2(log)
};

}();
//import Maybe, Native.List, Native.Utils, Result //

var _elm_lang$core$Native_String = function() {

function isEmpty(str)
{
	return str.length === 0;
}
function cons(chr, str)
{
	return chr + str;
}
function uncons(str)
{
	var hd = str[0];
	if (hd)
	{
		return _elm_lang$core$Maybe$Just(_elm_lang$core$Native_Utils.Tuple2(_elm_lang$core$Native_Utils.chr(hd), str.slice(1)));
	}
	return _elm_lang$core$Maybe$Nothing;
}
function append(a, b)
{
	return a + b;
}
function concat(strs)
{
	return _elm_lang$core$Native_List.toArray(strs).join('');
}
function length(str)
{
	return str.length;
}
function map(f, str)
{
	var out = str.split('');
	for (var i = out.length; i--; )
	{
		out[i] = f(_elm_lang$core$Native_Utils.chr(out[i]));
	}
	return out.join('');
}
function filter(pred, str)
{
	return str.split('').map(_elm_lang$core$Native_Utils.chr).filter(pred).join('');
}
function reverse(str)
{
	return str.split('').reverse().join('');
}
function foldl(f, b, str)
{
	var len = str.length;
	for (var i = 0; i < len; ++i)
	{
		b = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);
	}
	return b;
}
function foldr(f, b, str)
{
	for (var i = str.length; i--; )
	{
		b = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);
	}
	return b;
}
function split(sep, str)
{
	return _elm_lang$core$Native_List.fromArray(str.split(sep));
}
function join(sep, strs)
{
	return _elm_lang$core$Native_List.toArray(strs).join(sep);
}
function repeat(n, str)
{
	var result = '';
	while (n > 0)
	{
		if (n & 1)
		{
			result += str;
		}
		n >>= 1, str += str;
	}
	return result;
}
function slice(start, end, str)
{
	return str.slice(start, end);
}
function left(n, str)
{
	return n < 1 ? '' : str.slice(0, n);
}
function right(n, str)
{
	return n < 1 ? '' : str.slice(-n);
}
function dropLeft(n, str)
{
	return n < 1 ? str : str.slice(n);
}
function dropRight(n, str)
{
	return n < 1 ? str : str.slice(0, -n);
}
function pad(n, chr, str)
{
	var half = (n - str.length) / 2;
	return repeat(Math.ceil(half), chr) + str + repeat(half | 0, chr);
}
function padRight(n, chr, str)
{
	return str + repeat(n - str.length, chr);
}
function padLeft(n, chr, str)
{
	return repeat(n - str.length, chr) + str;
}

function trim(str)
{
	return str.trim();
}
function trimLeft(str)
{
	return str.replace(/^\s+/, '');
}
function trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function words(str)
{
	return _elm_lang$core$Native_List.fromArray(str.trim().split(/\s+/g));
}
function lines(str)
{
	return _elm_lang$core$Native_List.fromArray(str.split(/\r\n|\r|\n/g));
}

function toUpper(str)
{
	return str.toUpperCase();
}
function toLower(str)
{
	return str.toLowerCase();
}

function any(pred, str)
{
	for (var i = str.length; i--; )
	{
		if (pred(_elm_lang$core$Native_Utils.chr(str[i])))
		{
			return true;
		}
	}
	return false;
}
function all(pred, str)
{
	for (var i = str.length; i--; )
	{
		if (!pred(_elm_lang$core$Native_Utils.chr(str[i])))
		{
			return false;
		}
	}
	return true;
}

function contains(sub, str)
{
	return str.indexOf(sub) > -1;
}
function startsWith(sub, str)
{
	return str.indexOf(sub) === 0;
}
function endsWith(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
}
function indexes(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _elm_lang$core$Native_List.Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _elm_lang$core$Native_List.fromArray(is);
}


function toInt(s)
{
	var len = s.length;

	// if empty
	if (len === 0)
	{
		return intErr(s);
	}

	// if hex
	var c = s[0];
	if (c === '0' && s[1] === 'x')
	{
		for (var i = 2; i < len; ++i)
		{
			var c = s[i];
			if (('0' <= c && c <= '9') || ('A' <= c && c <= 'F') || ('a' <= c && c <= 'f'))
			{
				continue;
			}
			return intErr(s);
		}
		return _elm_lang$core$Result$Ok(parseInt(s, 16));
	}

	// is decimal
	if (c > '9' || (c < '0' && c !== '-' && c !== '+'))
	{
		return intErr(s);
	}
	for (var i = 1; i < len; ++i)
	{
		var c = s[i];
		if (c < '0' || '9' < c)
		{
			return intErr(s);
		}
	}

	return _elm_lang$core$Result$Ok(parseInt(s, 10));
}

function intErr(s)
{
	return _elm_lang$core$Result$Err("could not convert string '" + s + "' to an Int");
}


function toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return floatErr(s);
	}
	var n = +s;
	// faster isNaN check
	return n === n ? _elm_lang$core$Result$Ok(n) : floatErr(s);
}

function floatErr(s)
{
	return _elm_lang$core$Result$Err("could not convert string '" + s + "' to a Float");
}


function toList(str)
{
	return _elm_lang$core$Native_List.fromArray(str.split('').map(_elm_lang$core$Native_Utils.chr));
}
function fromList(chars)
{
	return _elm_lang$core$Native_List.toArray(chars).join('');
}

return {
	isEmpty: isEmpty,
	cons: F2(cons),
	uncons: uncons,
	append: F2(append),
	concat: concat,
	length: length,
	map: F2(map),
	filter: F2(filter),
	reverse: reverse,
	foldl: F3(foldl),
	foldr: F3(foldr),

	split: F2(split),
	join: F2(join),
	repeat: F2(repeat),

	slice: F3(slice),
	left: F2(left),
	right: F2(right),
	dropLeft: F2(dropLeft),
	dropRight: F2(dropRight),

	pad: F3(pad),
	padLeft: F3(padLeft),
	padRight: F3(padRight),

	trim: trim,
	trimLeft: trimLeft,
	trimRight: trimRight,

	words: words,
	lines: lines,

	toUpper: toUpper,
	toLower: toLower,

	any: F2(any),
	all: F2(all),

	contains: F2(contains),
	startsWith: F2(startsWith),
	endsWith: F2(endsWith),
	indexes: F2(indexes),

	toInt: toInt,
	toFloat: toFloat,
	toList: toList,
	fromList: fromList
};

}();

//import Native.Utils //

var _elm_lang$core$Native_Char = function() {

return {
	fromCode: function(c) { return _elm_lang$core$Native_Utils.chr(String.fromCharCode(c)); },
	toCode: function(c) { return c.charCodeAt(0); },
	toUpper: function(c) { return _elm_lang$core$Native_Utils.chr(c.toUpperCase()); },
	toLower: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLowerCase()); },
	toLocaleUpper: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLocaleUpperCase()); },
	toLocaleLower: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLocaleLowerCase()); }
};

}();
var _elm_lang$core$Char$fromCode = _elm_lang$core$Native_Char.fromCode;
var _elm_lang$core$Char$toCode = _elm_lang$core$Native_Char.toCode;
var _elm_lang$core$Char$toLocaleLower = _elm_lang$core$Native_Char.toLocaleLower;
var _elm_lang$core$Char$toLocaleUpper = _elm_lang$core$Native_Char.toLocaleUpper;
var _elm_lang$core$Char$toLower = _elm_lang$core$Native_Char.toLower;
var _elm_lang$core$Char$toUpper = _elm_lang$core$Native_Char.toUpper;
var _elm_lang$core$Char$isBetween = F3(
	function (low, high, $char) {
		var code = _elm_lang$core$Char$toCode($char);
		return (_elm_lang$core$Native_Utils.cmp(
			code,
			_elm_lang$core$Char$toCode(low)) > -1) && (_elm_lang$core$Native_Utils.cmp(
			code,
			_elm_lang$core$Char$toCode(high)) < 1);
	});
var _elm_lang$core$Char$isUpper = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('A'),
	_elm_lang$core$Native_Utils.chr('Z'));
var _elm_lang$core$Char$isLower = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('a'),
	_elm_lang$core$Native_Utils.chr('z'));
var _elm_lang$core$Char$isDigit = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('0'),
	_elm_lang$core$Native_Utils.chr('9'));
var _elm_lang$core$Char$isOctDigit = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('0'),
	_elm_lang$core$Native_Utils.chr('7'));
var _elm_lang$core$Char$isHexDigit = function ($char) {
	return _elm_lang$core$Char$isDigit($char) || (A3(
		_elm_lang$core$Char$isBetween,
		_elm_lang$core$Native_Utils.chr('a'),
		_elm_lang$core$Native_Utils.chr('f'),
		$char) || A3(
		_elm_lang$core$Char$isBetween,
		_elm_lang$core$Native_Utils.chr('A'),
		_elm_lang$core$Native_Utils.chr('F'),
		$char));
};

var _elm_lang$core$Result$toMaybe = function (result) {
	var _p0 = result;
	if (_p0.ctor === 'Ok') {
		return _elm_lang$core$Maybe$Just(_p0._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$Result$withDefault = F2(
	function (def, result) {
		var _p1 = result;
		if (_p1.ctor === 'Ok') {
			return _p1._0;
		} else {
			return def;
		}
	});
var _elm_lang$core$Result$Err = function (a) {
	return {ctor: 'Err', _0: a};
};
var _elm_lang$core$Result$andThen = F2(
	function (callback, result) {
		var _p2 = result;
		if (_p2.ctor === 'Ok') {
			return callback(_p2._0);
		} else {
			return _elm_lang$core$Result$Err(_p2._0);
		}
	});
var _elm_lang$core$Result$Ok = function (a) {
	return {ctor: 'Ok', _0: a};
};
var _elm_lang$core$Result$map = F2(
	function (func, ra) {
		var _p3 = ra;
		if (_p3.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(
				func(_p3._0));
		} else {
			return _elm_lang$core$Result$Err(_p3._0);
		}
	});
var _elm_lang$core$Result$map2 = F3(
	function (func, ra, rb) {
		var _p4 = {ctor: '_Tuple2', _0: ra, _1: rb};
		if (_p4._0.ctor === 'Ok') {
			if (_p4._1.ctor === 'Ok') {
				return _elm_lang$core$Result$Ok(
					A2(func, _p4._0._0, _p4._1._0));
			} else {
				return _elm_lang$core$Result$Err(_p4._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p4._0._0);
		}
	});
var _elm_lang$core$Result$map3 = F4(
	function (func, ra, rb, rc) {
		var _p5 = {ctor: '_Tuple3', _0: ra, _1: rb, _2: rc};
		if (_p5._0.ctor === 'Ok') {
			if (_p5._1.ctor === 'Ok') {
				if (_p5._2.ctor === 'Ok') {
					return _elm_lang$core$Result$Ok(
						A3(func, _p5._0._0, _p5._1._0, _p5._2._0));
				} else {
					return _elm_lang$core$Result$Err(_p5._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p5._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p5._0._0);
		}
	});
var _elm_lang$core$Result$map4 = F5(
	function (func, ra, rb, rc, rd) {
		var _p6 = {ctor: '_Tuple4', _0: ra, _1: rb, _2: rc, _3: rd};
		if (_p6._0.ctor === 'Ok') {
			if (_p6._1.ctor === 'Ok') {
				if (_p6._2.ctor === 'Ok') {
					if (_p6._3.ctor === 'Ok') {
						return _elm_lang$core$Result$Ok(
							A4(func, _p6._0._0, _p6._1._0, _p6._2._0, _p6._3._0));
					} else {
						return _elm_lang$core$Result$Err(_p6._3._0);
					}
				} else {
					return _elm_lang$core$Result$Err(_p6._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p6._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p6._0._0);
		}
	});
var _elm_lang$core$Result$map5 = F6(
	function (func, ra, rb, rc, rd, re) {
		var _p7 = {ctor: '_Tuple5', _0: ra, _1: rb, _2: rc, _3: rd, _4: re};
		if (_p7._0.ctor === 'Ok') {
			if (_p7._1.ctor === 'Ok') {
				if (_p7._2.ctor === 'Ok') {
					if (_p7._3.ctor === 'Ok') {
						if (_p7._4.ctor === 'Ok') {
							return _elm_lang$core$Result$Ok(
								A5(func, _p7._0._0, _p7._1._0, _p7._2._0, _p7._3._0, _p7._4._0));
						} else {
							return _elm_lang$core$Result$Err(_p7._4._0);
						}
					} else {
						return _elm_lang$core$Result$Err(_p7._3._0);
					}
				} else {
					return _elm_lang$core$Result$Err(_p7._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p7._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p7._0._0);
		}
	});
var _elm_lang$core$Result$mapError = F2(
	function (f, result) {
		var _p8 = result;
		if (_p8.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(_p8._0);
		} else {
			return _elm_lang$core$Result$Err(
				f(_p8._0));
		}
	});
var _elm_lang$core$Result$fromMaybe = F2(
	function (err, maybe) {
		var _p9 = maybe;
		if (_p9.ctor === 'Just') {
			return _elm_lang$core$Result$Ok(_p9._0);
		} else {
			return _elm_lang$core$Result$Err(err);
		}
	});

var _elm_lang$core$String$fromList = _elm_lang$core$Native_String.fromList;
var _elm_lang$core$String$toList = _elm_lang$core$Native_String.toList;
var _elm_lang$core$String$toFloat = _elm_lang$core$Native_String.toFloat;
var _elm_lang$core$String$toInt = _elm_lang$core$Native_String.toInt;
var _elm_lang$core$String$indices = _elm_lang$core$Native_String.indexes;
var _elm_lang$core$String$indexes = _elm_lang$core$Native_String.indexes;
var _elm_lang$core$String$endsWith = _elm_lang$core$Native_String.endsWith;
var _elm_lang$core$String$startsWith = _elm_lang$core$Native_String.startsWith;
var _elm_lang$core$String$contains = _elm_lang$core$Native_String.contains;
var _elm_lang$core$String$all = _elm_lang$core$Native_String.all;
var _elm_lang$core$String$any = _elm_lang$core$Native_String.any;
var _elm_lang$core$String$toLower = _elm_lang$core$Native_String.toLower;
var _elm_lang$core$String$toUpper = _elm_lang$core$Native_String.toUpper;
var _elm_lang$core$String$lines = _elm_lang$core$Native_String.lines;
var _elm_lang$core$String$words = _elm_lang$core$Native_String.words;
var _elm_lang$core$String$trimRight = _elm_lang$core$Native_String.trimRight;
var _elm_lang$core$String$trimLeft = _elm_lang$core$Native_String.trimLeft;
var _elm_lang$core$String$trim = _elm_lang$core$Native_String.trim;
var _elm_lang$core$String$padRight = _elm_lang$core$Native_String.padRight;
var _elm_lang$core$String$padLeft = _elm_lang$core$Native_String.padLeft;
var _elm_lang$core$String$pad = _elm_lang$core$Native_String.pad;
var _elm_lang$core$String$dropRight = _elm_lang$core$Native_String.dropRight;
var _elm_lang$core$String$dropLeft = _elm_lang$core$Native_String.dropLeft;
var _elm_lang$core$String$right = _elm_lang$core$Native_String.right;
var _elm_lang$core$String$left = _elm_lang$core$Native_String.left;
var _elm_lang$core$String$slice = _elm_lang$core$Native_String.slice;
var _elm_lang$core$String$repeat = _elm_lang$core$Native_String.repeat;
var _elm_lang$core$String$join = _elm_lang$core$Native_String.join;
var _elm_lang$core$String$split = _elm_lang$core$Native_String.split;
var _elm_lang$core$String$foldr = _elm_lang$core$Native_String.foldr;
var _elm_lang$core$String$foldl = _elm_lang$core$Native_String.foldl;
var _elm_lang$core$String$reverse = _elm_lang$core$Native_String.reverse;
var _elm_lang$core$String$filter = _elm_lang$core$Native_String.filter;
var _elm_lang$core$String$map = _elm_lang$core$Native_String.map;
var _elm_lang$core$String$length = _elm_lang$core$Native_String.length;
var _elm_lang$core$String$concat = _elm_lang$core$Native_String.concat;
var _elm_lang$core$String$append = _elm_lang$core$Native_String.append;
var _elm_lang$core$String$uncons = _elm_lang$core$Native_String.uncons;
var _elm_lang$core$String$cons = _elm_lang$core$Native_String.cons;
var _elm_lang$core$String$fromChar = function ($char) {
	return A2(_elm_lang$core$String$cons, $char, '');
};
var _elm_lang$core$String$isEmpty = _elm_lang$core$Native_String.isEmpty;

var _elm_lang$core$Dict$foldr = F3(
	function (f, acc, t) {
		foldr:
		while (true) {
			var _p0 = t;
			if (_p0.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v1 = f,
					_v2 = A3(
					f,
					_p0._1,
					_p0._2,
					A3(_elm_lang$core$Dict$foldr, f, acc, _p0._4)),
					_v3 = _p0._3;
				f = _v1;
				acc = _v2;
				t = _v3;
				continue foldr;
			}
		}
	});
var _elm_lang$core$Dict$keys = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return {ctor: '::', _0: key, _1: keyList};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$values = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return {ctor: '::', _0: value, _1: valueList};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$toList = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: key, _1: value},
					_1: list
				};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$foldl = F3(
	function (f, acc, dict) {
		foldl:
		while (true) {
			var _p1 = dict;
			if (_p1.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v5 = f,
					_v6 = A3(
					f,
					_p1._1,
					_p1._2,
					A3(_elm_lang$core$Dict$foldl, f, acc, _p1._3)),
					_v7 = _p1._4;
				f = _v5;
				acc = _v6;
				dict = _v7;
				continue foldl;
			}
		}
	});
var _elm_lang$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _p2) {
				stepState:
				while (true) {
					var _p3 = _p2;
					var _p9 = _p3._1;
					var _p8 = _p3._0;
					var _p4 = _p8;
					if (_p4.ctor === '[]') {
						return {
							ctor: '_Tuple2',
							_0: _p8,
							_1: A3(rightStep, rKey, rValue, _p9)
						};
					} else {
						var _p7 = _p4._1;
						var _p6 = _p4._0._1;
						var _p5 = _p4._0._0;
						if (_elm_lang$core$Native_Utils.cmp(_p5, rKey) < 0) {
							var _v10 = rKey,
								_v11 = rValue,
								_v12 = {
								ctor: '_Tuple2',
								_0: _p7,
								_1: A3(leftStep, _p5, _p6, _p9)
							};
							rKey = _v10;
							rValue = _v11;
							_p2 = _v12;
							continue stepState;
						} else {
							if (_elm_lang$core$Native_Utils.cmp(_p5, rKey) > 0) {
								return {
									ctor: '_Tuple2',
									_0: _p8,
									_1: A3(rightStep, rKey, rValue, _p9)
								};
							} else {
								return {
									ctor: '_Tuple2',
									_0: _p7,
									_1: A4(bothStep, _p5, _p6, rValue, _p9)
								};
							}
						}
					}
				}
			});
		var _p10 = A3(
			_elm_lang$core$Dict$foldl,
			stepState,
			{
				ctor: '_Tuple2',
				_0: _elm_lang$core$Dict$toList(leftDict),
				_1: initialResult
			},
			rightDict);
		var leftovers = _p10._0;
		var intermediateResult = _p10._1;
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (_p11, result) {
					var _p12 = _p11;
					return A3(leftStep, _p12._0, _p12._1, result);
				}),
			intermediateResult,
			leftovers);
	});
var _elm_lang$core$Dict$reportRemBug = F4(
	function (msg, c, lgot, rgot) {
		return _elm_lang$core$Native_Debug.crash(
			_elm_lang$core$String$concat(
				{
					ctor: '::',
					_0: 'Internal red-black tree invariant violated, expected ',
					_1: {
						ctor: '::',
						_0: msg,
						_1: {
							ctor: '::',
							_0: ' and got ',
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Basics$toString(c),
								_1: {
									ctor: '::',
									_0: '/',
									_1: {
										ctor: '::',
										_0: lgot,
										_1: {
											ctor: '::',
											_0: '/',
											_1: {
												ctor: '::',
												_0: rgot,
												_1: {
													ctor: '::',
													_0: '\nPlease report this bug to <https://github.com/elm-lang/core/issues>',
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}));
	});
var _elm_lang$core$Dict$isBBlack = function (dict) {
	var _p13 = dict;
	_v14_2:
	do {
		if (_p13.ctor === 'RBNode_elm_builtin') {
			if (_p13._0.ctor === 'BBlack') {
				return true;
			} else {
				break _v14_2;
			}
		} else {
			if (_p13._0.ctor === 'LBBlack') {
				return true;
			} else {
				break _v14_2;
			}
		}
	} while(false);
	return false;
};
var _elm_lang$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			var _p14 = dict;
			if (_p14.ctor === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var _v16 = A2(_elm_lang$core$Dict$sizeHelp, n + 1, _p14._4),
					_v17 = _p14._3;
				n = _v16;
				dict = _v17;
				continue sizeHelp;
			}
		}
	});
var _elm_lang$core$Dict$size = function (dict) {
	return A2(_elm_lang$core$Dict$sizeHelp, 0, dict);
};
var _elm_lang$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			var _p15 = dict;
			if (_p15.ctor === 'RBEmpty_elm_builtin') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p16 = A2(_elm_lang$core$Basics$compare, targetKey, _p15._1);
				switch (_p16.ctor) {
					case 'LT':
						var _v20 = targetKey,
							_v21 = _p15._3;
						targetKey = _v20;
						dict = _v21;
						continue get;
					case 'EQ':
						return _elm_lang$core$Maybe$Just(_p15._2);
					default:
						var _v22 = targetKey,
							_v23 = _p15._4;
						targetKey = _v22;
						dict = _v23;
						continue get;
				}
			}
		}
	});
var _elm_lang$core$Dict$member = F2(
	function (key, dict) {
		var _p17 = A2(_elm_lang$core$Dict$get, key, dict);
		if (_p17.ctor === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var _elm_lang$core$Dict$maxWithDefault = F3(
	function (k, v, r) {
		maxWithDefault:
		while (true) {
			var _p18 = r;
			if (_p18.ctor === 'RBEmpty_elm_builtin') {
				return {ctor: '_Tuple2', _0: k, _1: v};
			} else {
				var _v26 = _p18._1,
					_v27 = _p18._2,
					_v28 = _p18._4;
				k = _v26;
				v = _v27;
				r = _v28;
				continue maxWithDefault;
			}
		}
	});
var _elm_lang$core$Dict$NBlack = {ctor: 'NBlack'};
var _elm_lang$core$Dict$BBlack = {ctor: 'BBlack'};
var _elm_lang$core$Dict$Black = {ctor: 'Black'};
var _elm_lang$core$Dict$blackish = function (t) {
	var _p19 = t;
	if (_p19.ctor === 'RBNode_elm_builtin') {
		var _p20 = _p19._0;
		return _elm_lang$core$Native_Utils.eq(_p20, _elm_lang$core$Dict$Black) || _elm_lang$core$Native_Utils.eq(_p20, _elm_lang$core$Dict$BBlack);
	} else {
		return true;
	}
};
var _elm_lang$core$Dict$Red = {ctor: 'Red'};
var _elm_lang$core$Dict$moreBlack = function (color) {
	var _p21 = color;
	switch (_p21.ctor) {
		case 'Black':
			return _elm_lang$core$Dict$BBlack;
		case 'Red':
			return _elm_lang$core$Dict$Black;
		case 'NBlack':
			return _elm_lang$core$Dict$Red;
		default:
			return _elm_lang$core$Native_Debug.crash('Can\'t make a double black node more black!');
	}
};
var _elm_lang$core$Dict$lessBlack = function (color) {
	var _p22 = color;
	switch (_p22.ctor) {
		case 'BBlack':
			return _elm_lang$core$Dict$Black;
		case 'Black':
			return _elm_lang$core$Dict$Red;
		case 'Red':
			return _elm_lang$core$Dict$NBlack;
		default:
			return _elm_lang$core$Native_Debug.crash('Can\'t make a negative black node less black!');
	}
};
var _elm_lang$core$Dict$LBBlack = {ctor: 'LBBlack'};
var _elm_lang$core$Dict$LBlack = {ctor: 'LBlack'};
var _elm_lang$core$Dict$RBEmpty_elm_builtin = function (a) {
	return {ctor: 'RBEmpty_elm_builtin', _0: a};
};
var _elm_lang$core$Dict$empty = _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
var _elm_lang$core$Dict$isEmpty = function (dict) {
	return _elm_lang$core$Native_Utils.eq(dict, _elm_lang$core$Dict$empty);
};
var _elm_lang$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {ctor: 'RBNode_elm_builtin', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _elm_lang$core$Dict$ensureBlackRoot = function (dict) {
	var _p23 = dict;
	if ((_p23.ctor === 'RBNode_elm_builtin') && (_p23._0.ctor === 'Red')) {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p23._1, _p23._2, _p23._3, _p23._4);
	} else {
		return dict;
	}
};
var _elm_lang$core$Dict$lessBlackTree = function (dict) {
	var _p24 = dict;
	if (_p24.ctor === 'RBNode_elm_builtin') {
		return A5(
			_elm_lang$core$Dict$RBNode_elm_builtin,
			_elm_lang$core$Dict$lessBlack(_p24._0),
			_p24._1,
			_p24._2,
			_p24._3,
			_p24._4);
	} else {
		return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
	}
};
var _elm_lang$core$Dict$balancedTree = function (col) {
	return function (xk) {
		return function (xv) {
			return function (yk) {
				return function (yv) {
					return function (zk) {
						return function (zv) {
							return function (a) {
								return function (b) {
									return function (c) {
										return function (d) {
											return A5(
												_elm_lang$core$Dict$RBNode_elm_builtin,
												_elm_lang$core$Dict$lessBlack(col),
												yk,
												yv,
												A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, xk, xv, a, b),
												A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, zk, zv, c, d));
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _elm_lang$core$Dict$blacken = function (t) {
	var _p25 = t;
	if (_p25.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
	} else {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p25._1, _p25._2, _p25._3, _p25._4);
	}
};
var _elm_lang$core$Dict$redden = function (t) {
	var _p26 = t;
	if (_p26.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Native_Debug.crash('can\'t make a Leaf red');
	} else {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Red, _p26._1, _p26._2, _p26._3, _p26._4);
	}
};
var _elm_lang$core$Dict$balanceHelp = function (tree) {
	var _p27 = tree;
	_v36_6:
	do {
		_v36_5:
		do {
			_v36_4:
			do {
				_v36_3:
				do {
					_v36_2:
					do {
						_v36_1:
						do {
							_v36_0:
							do {
								if (_p27.ctor === 'RBNode_elm_builtin') {
									if (_p27._3.ctor === 'RBNode_elm_builtin') {
										if (_p27._4.ctor === 'RBNode_elm_builtin') {
											switch (_p27._3._0.ctor) {
												case 'Red':
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																		break _v36_2;
																	} else {
																		if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																			break _v36_3;
																		} else {
																			break _v36_6;
																		}
																	}
																}
															}
														case 'NBlack':
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																		break _v36_4;
																	} else {
																		break _v36_6;
																	}
																}
															}
														default:
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	break _v36_6;
																}
															}
													}
												case 'NBlack':
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																break _v36_2;
															} else {
																if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																	break _v36_3;
																} else {
																	if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																		break _v36_5;
																	} else {
																		break _v36_6;
																	}
																}
															}
														case 'NBlack':
															if (_p27._0.ctor === 'BBlack') {
																if ((((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																	break _v36_4;
																} else {
																	if ((((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																		break _v36_5;
																	} else {
																		break _v36_6;
																	}
																}
															} else {
																break _v36_6;
															}
														default:
															if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																break _v36_5;
															} else {
																break _v36_6;
															}
													}
												default:
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																break _v36_2;
															} else {
																if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																	break _v36_3;
																} else {
																	break _v36_6;
																}
															}
														case 'NBlack':
															if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																break _v36_4;
															} else {
																break _v36_6;
															}
														default:
															break _v36_6;
													}
											}
										} else {
											switch (_p27._3._0.ctor) {
												case 'Red':
													if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
														break _v36_0;
													} else {
														if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
															break _v36_1;
														} else {
															break _v36_6;
														}
													}
												case 'NBlack':
													if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
														break _v36_5;
													} else {
														break _v36_6;
													}
												default:
													break _v36_6;
											}
										}
									} else {
										if (_p27._4.ctor === 'RBNode_elm_builtin') {
											switch (_p27._4._0.ctor) {
												case 'Red':
													if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
														break _v36_2;
													} else {
														if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
															break _v36_3;
														} else {
															break _v36_6;
														}
													}
												case 'NBlack':
													if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
														break _v36_4;
													} else {
														break _v36_6;
													}
												default:
													break _v36_6;
											}
										} else {
											break _v36_6;
										}
									}
								} else {
									break _v36_6;
								}
							} while(false);
							return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._3._3._1)(_p27._3._3._2)(_p27._3._1)(_p27._3._2)(_p27._1)(_p27._2)(_p27._3._3._3)(_p27._3._3._4)(_p27._3._4)(_p27._4);
						} while(false);
						return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._3._1)(_p27._3._2)(_p27._3._4._1)(_p27._3._4._2)(_p27._1)(_p27._2)(_p27._3._3)(_p27._3._4._3)(_p27._3._4._4)(_p27._4);
					} while(false);
					return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._1)(_p27._2)(_p27._4._3._1)(_p27._4._3._2)(_p27._4._1)(_p27._4._2)(_p27._3)(_p27._4._3._3)(_p27._4._3._4)(_p27._4._4);
				} while(false);
				return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._1)(_p27._2)(_p27._4._1)(_p27._4._2)(_p27._4._4._1)(_p27._4._4._2)(_p27._3)(_p27._4._3)(_p27._4._4._3)(_p27._4._4._4);
			} while(false);
			return A5(
				_elm_lang$core$Dict$RBNode_elm_builtin,
				_elm_lang$core$Dict$Black,
				_p27._4._3._1,
				_p27._4._3._2,
				A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p27._1, _p27._2, _p27._3, _p27._4._3._3),
				A5(
					_elm_lang$core$Dict$balance,
					_elm_lang$core$Dict$Black,
					_p27._4._1,
					_p27._4._2,
					_p27._4._3._4,
					_elm_lang$core$Dict$redden(_p27._4._4)));
		} while(false);
		return A5(
			_elm_lang$core$Dict$RBNode_elm_builtin,
			_elm_lang$core$Dict$Black,
			_p27._3._4._1,
			_p27._3._4._2,
			A5(
				_elm_lang$core$Dict$balance,
				_elm_lang$core$Dict$Black,
				_p27._3._1,
				_p27._3._2,
				_elm_lang$core$Dict$redden(_p27._3._3),
				_p27._3._4._3),
			A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p27._1, _p27._2, _p27._3._4._4, _p27._4));
	} while(false);
	return tree;
};
var _elm_lang$core$Dict$balance = F5(
	function (c, k, v, l, r) {
		var tree = A5(_elm_lang$core$Dict$RBNode_elm_builtin, c, k, v, l, r);
		return _elm_lang$core$Dict$blackish(tree) ? _elm_lang$core$Dict$balanceHelp(tree) : tree;
	});
var _elm_lang$core$Dict$bubble = F5(
	function (c, k, v, l, r) {
		return (_elm_lang$core$Dict$isBBlack(l) || _elm_lang$core$Dict$isBBlack(r)) ? A5(
			_elm_lang$core$Dict$balance,
			_elm_lang$core$Dict$moreBlack(c),
			k,
			v,
			_elm_lang$core$Dict$lessBlackTree(l),
			_elm_lang$core$Dict$lessBlackTree(r)) : A5(_elm_lang$core$Dict$RBNode_elm_builtin, c, k, v, l, r);
	});
var _elm_lang$core$Dict$removeMax = F5(
	function (c, k, v, l, r) {
		var _p28 = r;
		if (_p28.ctor === 'RBEmpty_elm_builtin') {
			return A3(_elm_lang$core$Dict$rem, c, l, r);
		} else {
			return A5(
				_elm_lang$core$Dict$bubble,
				c,
				k,
				v,
				l,
				A5(_elm_lang$core$Dict$removeMax, _p28._0, _p28._1, _p28._2, _p28._3, _p28._4));
		}
	});
var _elm_lang$core$Dict$rem = F3(
	function (color, left, right) {
		var _p29 = {ctor: '_Tuple2', _0: left, _1: right};
		if (_p29._0.ctor === 'RBEmpty_elm_builtin') {
			if (_p29._1.ctor === 'RBEmpty_elm_builtin') {
				var _p30 = color;
				switch (_p30.ctor) {
					case 'Red':
						return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
					case 'Black':
						return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBBlack);
					default:
						return _elm_lang$core$Native_Debug.crash('cannot have bblack or nblack nodes at this point');
				}
			} else {
				var _p33 = _p29._1._0;
				var _p32 = _p29._0._0;
				var _p31 = {ctor: '_Tuple3', _0: color, _1: _p32, _2: _p33};
				if ((((_p31.ctor === '_Tuple3') && (_p31._0.ctor === 'Black')) && (_p31._1.ctor === 'LBlack')) && (_p31._2.ctor === 'Red')) {
					return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p29._1._1, _p29._1._2, _p29._1._3, _p29._1._4);
				} else {
					return A4(
						_elm_lang$core$Dict$reportRemBug,
						'Black/LBlack/Red',
						color,
						_elm_lang$core$Basics$toString(_p32),
						_elm_lang$core$Basics$toString(_p33));
				}
			}
		} else {
			if (_p29._1.ctor === 'RBEmpty_elm_builtin') {
				var _p36 = _p29._1._0;
				var _p35 = _p29._0._0;
				var _p34 = {ctor: '_Tuple3', _0: color, _1: _p35, _2: _p36};
				if ((((_p34.ctor === '_Tuple3') && (_p34._0.ctor === 'Black')) && (_p34._1.ctor === 'Red')) && (_p34._2.ctor === 'LBlack')) {
					return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p29._0._1, _p29._0._2, _p29._0._3, _p29._0._4);
				} else {
					return A4(
						_elm_lang$core$Dict$reportRemBug,
						'Black/Red/LBlack',
						color,
						_elm_lang$core$Basics$toString(_p35),
						_elm_lang$core$Basics$toString(_p36));
				}
			} else {
				var _p40 = _p29._0._2;
				var _p39 = _p29._0._4;
				var _p38 = _p29._0._1;
				var newLeft = A5(_elm_lang$core$Dict$removeMax, _p29._0._0, _p38, _p40, _p29._0._3, _p39);
				var _p37 = A3(_elm_lang$core$Dict$maxWithDefault, _p38, _p40, _p39);
				var k = _p37._0;
				var v = _p37._1;
				return A5(_elm_lang$core$Dict$bubble, color, k, v, newLeft, right);
			}
		}
	});
var _elm_lang$core$Dict$map = F2(
	function (f, dict) {
		var _p41 = dict;
		if (_p41.ctor === 'RBEmpty_elm_builtin') {
			return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
		} else {
			var _p42 = _p41._1;
			return A5(
				_elm_lang$core$Dict$RBNode_elm_builtin,
				_p41._0,
				_p42,
				A2(f, _p42, _p41._2),
				A2(_elm_lang$core$Dict$map, f, _p41._3),
				A2(_elm_lang$core$Dict$map, f, _p41._4));
		}
	});
var _elm_lang$core$Dict$Same = {ctor: 'Same'};
var _elm_lang$core$Dict$Remove = {ctor: 'Remove'};
var _elm_lang$core$Dict$Insert = {ctor: 'Insert'};
var _elm_lang$core$Dict$update = F3(
	function (k, alter, dict) {
		var up = function (dict) {
			var _p43 = dict;
			if (_p43.ctor === 'RBEmpty_elm_builtin') {
				var _p44 = alter(_elm_lang$core$Maybe$Nothing);
				if (_p44.ctor === 'Nothing') {
					return {ctor: '_Tuple2', _0: _elm_lang$core$Dict$Same, _1: _elm_lang$core$Dict$empty};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Dict$Insert,
						_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Red, k, _p44._0, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty)
					};
				}
			} else {
				var _p55 = _p43._2;
				var _p54 = _p43._4;
				var _p53 = _p43._3;
				var _p52 = _p43._1;
				var _p51 = _p43._0;
				var _p45 = A2(_elm_lang$core$Basics$compare, k, _p52);
				switch (_p45.ctor) {
					case 'EQ':
						var _p46 = alter(
							_elm_lang$core$Maybe$Just(_p55));
						if (_p46.ctor === 'Nothing') {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Dict$Remove,
								_1: A3(_elm_lang$core$Dict$rem, _p51, _p53, _p54)
							};
						} else {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Dict$Same,
								_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p46._0, _p53, _p54)
							};
						}
					case 'LT':
						var _p47 = up(_p53);
						var flag = _p47._0;
						var newLeft = _p47._1;
						var _p48 = flag;
						switch (_p48.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Same,
									_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p55, newLeft, _p54)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Insert,
									_1: A5(_elm_lang$core$Dict$balance, _p51, _p52, _p55, newLeft, _p54)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Remove,
									_1: A5(_elm_lang$core$Dict$bubble, _p51, _p52, _p55, newLeft, _p54)
								};
						}
					default:
						var _p49 = up(_p54);
						var flag = _p49._0;
						var newRight = _p49._1;
						var _p50 = flag;
						switch (_p50.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Same,
									_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p55, _p53, newRight)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Insert,
									_1: A5(_elm_lang$core$Dict$balance, _p51, _p52, _p55, _p53, newRight)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Remove,
									_1: A5(_elm_lang$core$Dict$bubble, _p51, _p52, _p55, _p53, newRight)
								};
						}
				}
			}
		};
		var _p56 = up(dict);
		var flag = _p56._0;
		var updatedDict = _p56._1;
		var _p57 = flag;
		switch (_p57.ctor) {
			case 'Same':
				return updatedDict;
			case 'Insert':
				return _elm_lang$core$Dict$ensureBlackRoot(updatedDict);
			default:
				return _elm_lang$core$Dict$blacken(updatedDict);
		}
	});
var _elm_lang$core$Dict$insert = F3(
	function (key, value, dict) {
		return A3(
			_elm_lang$core$Dict$update,
			key,
			_elm_lang$core$Basics$always(
				_elm_lang$core$Maybe$Just(value)),
			dict);
	});
var _elm_lang$core$Dict$singleton = F2(
	function (key, value) {
		return A3(_elm_lang$core$Dict$insert, key, value, _elm_lang$core$Dict$empty);
	});
var _elm_lang$core$Dict$union = F2(
	function (t1, t2) {
		return A3(_elm_lang$core$Dict$foldl, _elm_lang$core$Dict$insert, t2, t1);
	});
var _elm_lang$core$Dict$filter = F2(
	function (predicate, dictionary) {
		var add = F3(
			function (key, value, dict) {
				return A2(predicate, key, value) ? A3(_elm_lang$core$Dict$insert, key, value, dict) : dict;
			});
		return A3(_elm_lang$core$Dict$foldl, add, _elm_lang$core$Dict$empty, dictionary);
	});
var _elm_lang$core$Dict$intersect = F2(
	function (t1, t2) {
		return A2(
			_elm_lang$core$Dict$filter,
			F2(
				function (k, _p58) {
					return A2(_elm_lang$core$Dict$member, k, t2);
				}),
			t1);
	});
var _elm_lang$core$Dict$partition = F2(
	function (predicate, dict) {
		var add = F3(
			function (key, value, _p59) {
				var _p60 = _p59;
				var _p62 = _p60._1;
				var _p61 = _p60._0;
				return A2(predicate, key, value) ? {
					ctor: '_Tuple2',
					_0: A3(_elm_lang$core$Dict$insert, key, value, _p61),
					_1: _p62
				} : {
					ctor: '_Tuple2',
					_0: _p61,
					_1: A3(_elm_lang$core$Dict$insert, key, value, _p62)
				};
			});
		return A3(
			_elm_lang$core$Dict$foldl,
			add,
			{ctor: '_Tuple2', _0: _elm_lang$core$Dict$empty, _1: _elm_lang$core$Dict$empty},
			dict);
	});
var _elm_lang$core$Dict$fromList = function (assocs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p63, dict) {
				var _p64 = _p63;
				return A3(_elm_lang$core$Dict$insert, _p64._0, _p64._1, dict);
			}),
		_elm_lang$core$Dict$empty,
		assocs);
};
var _elm_lang$core$Dict$remove = F2(
	function (key, dict) {
		return A3(
			_elm_lang$core$Dict$update,
			key,
			_elm_lang$core$Basics$always(_elm_lang$core$Maybe$Nothing),
			dict);
	});
var _elm_lang$core$Dict$diff = F2(
	function (t1, t2) {
		return A3(
			_elm_lang$core$Dict$foldl,
			F3(
				function (k, v, t) {
					return A2(_elm_lang$core$Dict$remove, k, t);
				}),
			t1,
			t2);
	});

var _elm_lang$core$Debug$crash = _elm_lang$core$Native_Debug.crash;
var _elm_lang$core$Debug$log = _elm_lang$core$Native_Debug.log;

var _elm_lang$core$Tuple$mapSecond = F2(
	function (func, _p0) {
		var _p1 = _p0;
		return {
			ctor: '_Tuple2',
			_0: _p1._0,
			_1: func(_p1._1)
		};
	});
var _elm_lang$core$Tuple$mapFirst = F2(
	function (func, _p2) {
		var _p3 = _p2;
		return {
			ctor: '_Tuple2',
			_0: func(_p3._0),
			_1: _p3._1
		};
	});
var _elm_lang$core$Tuple$second = function (_p4) {
	var _p5 = _p4;
	return _p5._1;
};
var _elm_lang$core$Tuple$first = function (_p6) {
	var _p7 = _p6;
	return _p7._0;
};

//import //

var _elm_lang$core$Native_Platform = function() {


// PROGRAMS

function program(impl)
{
	return function(flagDecoder)
	{
		return function(object, moduleName)
		{
			object['worker'] = function worker(flags)
			{
				if (typeof flags !== 'undefined')
				{
					throw new Error(
						'The `' + moduleName + '` module does not need flags.\n'
						+ 'Call ' + moduleName + '.worker() with no arguments and you should be all set!'
					);
				}

				return initialize(
					impl.init,
					impl.update,
					impl.subscriptions,
					renderer
				);
			};
		};
	};
}

function programWithFlags(impl)
{
	return function(flagDecoder)
	{
		return function(object, moduleName)
		{
			object['worker'] = function worker(flags)
			{
				if (typeof flagDecoder === 'undefined')
				{
					throw new Error(
						'Are you trying to sneak a Never value into Elm? Trickster!\n'
						+ 'It looks like ' + moduleName + '.main is defined with `programWithFlags` but has type `Program Never`.\n'
						+ 'Use `program` instead if you do not want flags.'
					);
				}

				var result = A2(_elm_lang$core$Native_Json.run, flagDecoder, flags);
				if (result.ctor === 'Err')
				{
					throw new Error(
						moduleName + '.worker(...) was called with an unexpected argument.\n'
						+ 'I tried to convert it to an Elm value, but ran into this problem:\n\n'
						+ result._0
					);
				}

				return initialize(
					impl.init(result._0),
					impl.update,
					impl.subscriptions,
					renderer
				);
			};
		};
	};
}

function renderer(enqueue, _)
{
	return function(_) {};
}


// HTML TO PROGRAM

function htmlToProgram(vnode)
{
	var emptyBag = batch(_elm_lang$core$Native_List.Nil);
	var noChange = _elm_lang$core$Native_Utils.Tuple2(
		_elm_lang$core$Native_Utils.Tuple0,
		emptyBag
	);

	return _elm_lang$virtual_dom$VirtualDom$program({
		init: noChange,
		view: function(model) { return main; },
		update: F2(function(msg, model) { return noChange; }),
		subscriptions: function (model) { return emptyBag; }
	});
}


// INITIALIZE A PROGRAM

function initialize(init, update, subscriptions, renderer)
{
	// ambient state
	var managers = {};
	var updateView;

	// init and update state in main process
	var initApp = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
		var model = init._0;
		updateView = renderer(enqueue, model);
		var cmds = init._1;
		var subs = subscriptions(model);
		dispatchEffects(managers, cmds, subs);
		callback(_elm_lang$core$Native_Scheduler.succeed(model));
	});

	function onMessage(msg, model)
	{
		return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
			var results = A2(update, msg, model);
			model = results._0;
			updateView(model);
			var cmds = results._1;
			var subs = subscriptions(model);
			dispatchEffects(managers, cmds, subs);
			callback(_elm_lang$core$Native_Scheduler.succeed(model));
		});
	}

	var mainProcess = spawnLoop(initApp, onMessage);

	function enqueue(msg)
	{
		_elm_lang$core$Native_Scheduler.rawSend(mainProcess, msg);
	}

	var ports = setupEffects(managers, enqueue);

	return ports ? { ports: ports } : {};
}


// EFFECT MANAGERS

var effectManagers = {};

function setupEffects(managers, callback)
{
	var ports;

	// setup all necessary effect managers
	for (var key in effectManagers)
	{
		var manager = effectManagers[key];

		if (manager.isForeign)
		{
			ports = ports || {};
			ports[key] = manager.tag === 'cmd'
				? setupOutgoingPort(key)
				: setupIncomingPort(key, callback);
		}

		managers[key] = makeManager(manager, callback);
	}

	return ports;
}

function makeManager(info, callback)
{
	var router = {
		main: callback,
		self: undefined
	};

	var tag = info.tag;
	var onEffects = info.onEffects;
	var onSelfMsg = info.onSelfMsg;

	function onMessage(msg, state)
	{
		if (msg.ctor === 'self')
		{
			return A3(onSelfMsg, router, msg._0, state);
		}

		var fx = msg._0;
		switch (tag)
		{
			case 'cmd':
				return A3(onEffects, router, fx.cmds, state);

			case 'sub':
				return A3(onEffects, router, fx.subs, state);

			case 'fx':
				return A4(onEffects, router, fx.cmds, fx.subs, state);
		}
	}

	var process = spawnLoop(info.init, onMessage);
	router.self = process;
	return process;
}

function sendToApp(router, msg)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		router.main(msg);
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function sendToSelf(router, msg)
{
	return A2(_elm_lang$core$Native_Scheduler.send, router.self, {
		ctor: 'self',
		_0: msg
	});
}


// HELPER for STATEFUL LOOPS

function spawnLoop(init, onMessage)
{
	var andThen = _elm_lang$core$Native_Scheduler.andThen;

	function loop(state)
	{
		var handleMsg = _elm_lang$core$Native_Scheduler.receive(function(msg) {
			return onMessage(msg, state);
		});
		return A2(andThen, loop, handleMsg);
	}

	var task = A2(andThen, loop, init);

	return _elm_lang$core$Native_Scheduler.rawSpawn(task);
}


// BAGS

function leaf(home)
{
	return function(value)
	{
		return {
			type: 'leaf',
			home: home,
			value: value
		};
	};
}

function batch(list)
{
	return {
		type: 'node',
		branches: list
	};
}

function map(tagger, bag)
{
	return {
		type: 'map',
		tagger: tagger,
		tree: bag
	}
}


// PIPE BAGS INTO EFFECT MANAGERS

function dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	gatherEffects(true, cmdBag, effectsDict, null);
	gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		var fx = home in effectsDict
			? effectsDict[home]
			: {
				cmds: _elm_lang$core$Native_List.Nil,
				subs: _elm_lang$core$Native_List.Nil
			};

		_elm_lang$core$Native_Scheduler.rawSend(managers[home], { ctor: 'fx', _0: fx });
	}
}

function gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.type)
	{
		case 'leaf':
			var home = bag.home;
			var effect = toEffect(isCmd, home, taggers, bag.value);
			effectsDict[home] = insert(isCmd, effect, effectsDict[home]);
			return;

		case 'node':
			var list = bag.branches;
			while (list.ctor !== '[]')
			{
				gatherEffects(isCmd, list._0, effectsDict, taggers);
				list = list._1;
			}
			return;

		case 'map':
			gatherEffects(isCmd, bag.tree, effectsDict, {
				tagger: bag.tagger,
				rest: taggers
			});
			return;
	}
}

function toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		var temp = taggers;
		while (temp)
		{
			x = temp.tagger(x);
			temp = temp.rest;
		}
		return x;
	}

	var map = isCmd
		? effectManagers[home].cmdMap
		: effectManagers[home].subMap;

	return A2(map, applyTaggers, value)
}

function insert(isCmd, newEffect, effects)
{
	effects = effects || {
		cmds: _elm_lang$core$Native_List.Nil,
		subs: _elm_lang$core$Native_List.Nil
	};
	if (isCmd)
	{
		effects.cmds = _elm_lang$core$Native_List.Cons(newEffect, effects.cmds);
		return effects;
	}
	effects.subs = _elm_lang$core$Native_List.Cons(newEffect, effects.subs);
	return effects;
}


// PORTS

function checkPortName(name)
{
	if (name in effectManagers)
	{
		throw new Error('There can only be one port named `' + name + '`, but your program has multiple.');
	}
}


// OUTGOING PORTS

function outgoingPort(name, converter)
{
	checkPortName(name);
	effectManagers[name] = {
		tag: 'cmd',
		cmdMap: outgoingPortMap,
		converter: converter,
		isForeign: true
	};
	return leaf(name);
}

var outgoingPortMap = F2(function cmdMap(tagger, value) {
	return value;
});

function setupOutgoingPort(name)
{
	var subs = [];
	var converter = effectManagers[name].converter;

	// CREATE MANAGER

	var init = _elm_lang$core$Native_Scheduler.succeed(null);

	function onEffects(router, cmdList, state)
	{
		while (cmdList.ctor !== '[]')
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = converter(cmdList._0);
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
			cmdList = cmdList._1;
		}
		return init;
	}

	effectManagers[name].init = init;
	effectManagers[name].onEffects = F3(onEffects);

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}


// INCOMING PORTS

function incomingPort(name, converter)
{
	checkPortName(name);
	effectManagers[name] = {
		tag: 'sub',
		subMap: incomingPortMap,
		converter: converter,
		isForeign: true
	};
	return leaf(name);
}

var incomingPortMap = F2(function subMap(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});

function setupIncomingPort(name, callback)
{
	var sentBeforeInit = [];
	var subs = _elm_lang$core$Native_List.Nil;
	var converter = effectManagers[name].converter;
	var currentOnEffects = preInitOnEffects;
	var currentSend = preInitSend;

	// CREATE MANAGER

	var init = _elm_lang$core$Native_Scheduler.succeed(null);

	function preInitOnEffects(router, subList, state)
	{
		var postInitResult = postInitOnEffects(router, subList, state);

		for(var i = 0; i < sentBeforeInit.length; i++)
		{
			postInitSend(sentBeforeInit[i]);
		}

		sentBeforeInit = null; // to release objects held in queue
		currentSend = postInitSend;
		currentOnEffects = postInitOnEffects;
		return postInitResult;
	}

	function postInitOnEffects(router, subList, state)
	{
		subs = subList;
		return init;
	}

	function onEffects(router, subList, state)
	{
		return currentOnEffects(router, subList, state);
	}

	effectManagers[name].init = init;
	effectManagers[name].onEffects = F3(onEffects);

	// PUBLIC API

	function preInitSend(value)
	{
		sentBeforeInit.push(value);
	}

	function postInitSend(value)
	{
		var temp = subs;
		while (temp.ctor !== '[]')
		{
			callback(temp._0(value));
			temp = temp._1;
		}
	}

	function send(incomingValue)
	{
		var result = A2(_elm_lang$core$Json_Decode$decodeValue, converter, incomingValue);
		if (result.ctor === 'Err')
		{
			throw new Error('Trying to send an unexpected type of value through port `' + name + '`:\n' + result._0);
		}

		currentSend(result._0);
	}

	return { send: send };
}

return {
	// routers
	sendToApp: F2(sendToApp),
	sendToSelf: F2(sendToSelf),

	// global setup
	effectManagers: effectManagers,
	outgoingPort: outgoingPort,
	incomingPort: incomingPort,

	htmlToProgram: htmlToProgram,
	program: program,
	programWithFlags: programWithFlags,
	initialize: initialize,

	// effect bags
	leaf: leaf,
	batch: batch,
	map: F2(map)
};

}();

//import Native.Utils //

var _elm_lang$core$Native_Scheduler = function() {

var MAX_STEPS = 10000;


// TASKS

function succeed(value)
{
	return {
		ctor: '_Task_succeed',
		value: value
	};
}

function fail(error)
{
	return {
		ctor: '_Task_fail',
		value: error
	};
}

function nativeBinding(callback)
{
	return {
		ctor: '_Task_nativeBinding',
		callback: callback,
		cancel: null
	};
}

function andThen(callback, task)
{
	return {
		ctor: '_Task_andThen',
		callback: callback,
		task: task
	};
}

function onError(callback, task)
{
	return {
		ctor: '_Task_onError',
		callback: callback,
		task: task
	};
}

function receive(callback)
{
	return {
		ctor: '_Task_receive',
		callback: callback
	};
}


// PROCESSES

function rawSpawn(task)
{
	var process = {
		ctor: '_Process',
		id: _elm_lang$core$Native_Utils.guid(),
		root: task,
		stack: null,
		mailbox: []
	};

	enqueue(process);

	return process;
}

function spawn(task)
{
	return nativeBinding(function(callback) {
		var process = rawSpawn(task);
		callback(succeed(process));
	});
}

function rawSend(process, msg)
{
	process.mailbox.push(msg);
	enqueue(process);
}

function send(process, msg)
{
	return nativeBinding(function(callback) {
		rawSend(process, msg);
		callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function kill(process)
{
	return nativeBinding(function(callback) {
		var root = process.root;
		if (root.ctor === '_Task_nativeBinding' && root.cancel)
		{
			root.cancel();
		}

		process.root = null;

		callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function sleep(time)
{
	return nativeBinding(function(callback) {
		var id = setTimeout(function() {
			callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}


// STEP PROCESSES

function step(numSteps, process)
{
	while (numSteps < MAX_STEPS)
	{
		var ctor = process.root.ctor;

		if (ctor === '_Task_succeed')
		{
			while (process.stack && process.stack.ctor === '_Task_onError')
			{
				process.stack = process.stack.rest;
			}
			if (process.stack === null)
			{
				break;
			}
			process.root = process.stack.callback(process.root.value);
			process.stack = process.stack.rest;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_fail')
		{
			while (process.stack && process.stack.ctor === '_Task_andThen')
			{
				process.stack = process.stack.rest;
			}
			if (process.stack === null)
			{
				break;
			}
			process.root = process.stack.callback(process.root.value);
			process.stack = process.stack.rest;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_andThen')
		{
			process.stack = {
				ctor: '_Task_andThen',
				callback: process.root.callback,
				rest: process.stack
			};
			process.root = process.root.task;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_onError')
		{
			process.stack = {
				ctor: '_Task_onError',
				callback: process.root.callback,
				rest: process.stack
			};
			process.root = process.root.task;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_nativeBinding')
		{
			process.root.cancel = process.root.callback(function(newRoot) {
				process.root = newRoot;
				enqueue(process);
			});

			break;
		}

		if (ctor === '_Task_receive')
		{
			var mailbox = process.mailbox;
			if (mailbox.length === 0)
			{
				break;
			}

			process.root = process.root.callback(mailbox.shift());
			++numSteps;
			continue;
		}

		throw new Error(ctor);
	}

	if (numSteps < MAX_STEPS)
	{
		return numSteps + 1;
	}
	enqueue(process);

	return numSteps;
}


// WORK QUEUE

var working = false;
var workQueue = [];

function enqueue(process)
{
	workQueue.push(process);

	if (!working)
	{
		setTimeout(work, 0);
		working = true;
	}
}

function work()
{
	var numSteps = 0;
	var process;
	while (numSteps < MAX_STEPS && (process = workQueue.shift()))
	{
		if (process.root)
		{
			numSteps = step(numSteps, process);
		}
	}
	if (!process)
	{
		working = false;
		return;
	}
	setTimeout(work, 0);
}


return {
	succeed: succeed,
	fail: fail,
	nativeBinding: nativeBinding,
	andThen: F2(andThen),
	onError: F2(onError),
	receive: receive,

	spawn: spawn,
	kill: kill,
	sleep: sleep,
	send: F2(send),

	rawSpawn: rawSpawn,
	rawSend: rawSend
};

}();
var _elm_lang$core$Platform_Cmd$batch = _elm_lang$core$Native_Platform.batch;
var _elm_lang$core$Platform_Cmd$none = _elm_lang$core$Platform_Cmd$batch(
	{ctor: '[]'});
var _elm_lang$core$Platform_Cmd_ops = _elm_lang$core$Platform_Cmd_ops || {};
_elm_lang$core$Platform_Cmd_ops['!'] = F2(
	function (model, commands) {
		return {
			ctor: '_Tuple2',
			_0: model,
			_1: _elm_lang$core$Platform_Cmd$batch(commands)
		};
	});
var _elm_lang$core$Platform_Cmd$map = _elm_lang$core$Native_Platform.map;
var _elm_lang$core$Platform_Cmd$Cmd = {ctor: 'Cmd'};

var _elm_lang$core$Platform_Sub$batch = _elm_lang$core$Native_Platform.batch;
var _elm_lang$core$Platform_Sub$none = _elm_lang$core$Platform_Sub$batch(
	{ctor: '[]'});
var _elm_lang$core$Platform_Sub$map = _elm_lang$core$Native_Platform.map;
var _elm_lang$core$Platform_Sub$Sub = {ctor: 'Sub'};

var _elm_lang$core$Platform$hack = _elm_lang$core$Native_Scheduler.succeed;
var _elm_lang$core$Platform$sendToSelf = _elm_lang$core$Native_Platform.sendToSelf;
var _elm_lang$core$Platform$sendToApp = _elm_lang$core$Native_Platform.sendToApp;
var _elm_lang$core$Platform$programWithFlags = _elm_lang$core$Native_Platform.programWithFlags;
var _elm_lang$core$Platform$program = _elm_lang$core$Native_Platform.program;
var _elm_lang$core$Platform$Program = {ctor: 'Program'};
var _elm_lang$core$Platform$Task = {ctor: 'Task'};
var _elm_lang$core$Platform$ProcessId = {ctor: 'ProcessId'};
var _elm_lang$core$Platform$Router = {ctor: 'Router'};

var _eeue56$elm_all_dict$EveryDict$foldr = F3(
	function (f, acc, t) {
		foldr:
		while (true) {
			var _p0 = t;
			if (_p0.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v1 = f,
					_v2 = A3(
					f,
					_p0._1,
					_p0._2,
					A3(_eeue56$elm_all_dict$EveryDict$foldr, f, acc, _p0._4)),
					_v3 = _p0._3;
				f = _v1;
				acc = _v2;
				t = _v3;
				continue foldr;
			}
		}
	});
var _eeue56$elm_all_dict$EveryDict$keys = function (dict) {
	return A3(
		_eeue56$elm_all_dict$EveryDict$foldr,
		F3(
			function (key, value, keyList) {
				return {ctor: '::', _0: key, _1: keyList};
			}),
		{ctor: '[]'},
		dict);
};
var _eeue56$elm_all_dict$EveryDict$values = function (dict) {
	return A3(
		_eeue56$elm_all_dict$EveryDict$foldr,
		F3(
			function (key, value, valueList) {
				return {ctor: '::', _0: value, _1: valueList};
			}),
		{ctor: '[]'},
		dict);
};
var _eeue56$elm_all_dict$EveryDict$toList = function (dict) {
	return A3(
		_eeue56$elm_all_dict$EveryDict$foldr,
		F3(
			function (key, value, list) {
				return {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: key, _1: value},
					_1: list
				};
			}),
		{ctor: '[]'},
		dict);
};
var _eeue56$elm_all_dict$EveryDict$foldl = F3(
	function (f, acc, dict) {
		foldl:
		while (true) {
			var _p1 = dict;
			if (_p1.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v5 = f,
					_v6 = A3(
					f,
					_p1._1,
					_p1._2,
					A3(_eeue56$elm_all_dict$EveryDict$foldl, f, acc, _p1._3)),
					_v7 = _p1._4;
				f = _v5;
				acc = _v6;
				dict = _v7;
				continue foldl;
			}
		}
	});
var _eeue56$elm_all_dict$EveryDict$isBBlack = function (dict) {
	var _p2 = dict;
	_v8_2:
	do {
		if (_p2.ctor === 'RBNode_elm_builtin') {
			if (_p2._0.ctor === 'BBlack') {
				return true;
			} else {
				break _v8_2;
			}
		} else {
			if (_p2._0.ctor === 'LBBlack') {
				return true;
			} else {
				break _v8_2;
			}
		}
	} while(false);
	return false;
};
var _eeue56$elm_all_dict$EveryDict$showFlag = function (f) {
	var _p3 = f;
	switch (_p3.ctor) {
		case 'Insert':
			return 'Insert';
		case 'Remove':
			return 'Remove';
		default:
			return 'Same';
	}
};
var _eeue56$elm_all_dict$EveryDict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			var _p4 = dict;
			if (_p4.ctor === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var _v11 = A2(_eeue56$elm_all_dict$EveryDict$sizeHelp, n + 1, _p4._4),
					_v12 = _p4._3;
				n = _v11;
				dict = _v12;
				continue sizeHelp;
			}
		}
	});
var _eeue56$elm_all_dict$EveryDict$size = function (dict) {
	return A2(_eeue56$elm_all_dict$EveryDict$sizeHelp, 0, dict);
};
var _eeue56$elm_all_dict$EveryDict$isEmpty = function (dict) {
	var _p5 = dict;
	if (_p5.ctor === 'RBEmpty_elm_builtin') {
		return true;
	} else {
		return false;
	}
};
var _eeue56$elm_all_dict$EveryDict$max = function (dict) {
	max:
	while (true) {
		var _p6 = dict;
		if (_p6.ctor === 'RBNode_elm_builtin') {
			if (_p6._4.ctor === 'RBEmpty_elm_builtin') {
				return {ctor: '_Tuple2', _0: _p6._1, _1: _p6._2};
			} else {
				var _v15 = _p6._4;
				dict = _v15;
				continue max;
			}
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'EveryDict',
				{
					start: {line: 127, column: 5},
					end: {line: 135, column: 51}
				},
				_p6)('(max Empty) is not defined');
		}
	}
};
var _eeue56$elm_all_dict$EveryDict$min = function (dict) {
	min:
	while (true) {
		var _p8 = dict;
		if (_p8.ctor === 'RBNode_elm_builtin') {
			if ((_p8._3.ctor === 'RBEmpty_elm_builtin') && (_p8._3._0.ctor === 'LBlack')) {
				return {ctor: '_Tuple2', _0: _p8._1, _1: _p8._2};
			} else {
				var _v17 = _p8._3;
				dict = _v17;
				continue min;
			}
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'EveryDict',
				{
					start: {line: 115, column: 5},
					end: {line: 123, column: 51}
				},
				_p8)('(min Empty) is not defined');
		}
	}
};
var _eeue56$elm_all_dict$EveryDict$eq = F2(
	function (first, second) {
		return _elm_lang$core$Native_Utils.eq(
			_eeue56$elm_all_dict$EveryDict$toList(first),
			_eeue56$elm_all_dict$EveryDict$toList(second));
	});
var _eeue56$elm_all_dict$EveryDict$ord = _elm_lang$core$Basics$toString;
var _eeue56$elm_all_dict$EveryDict$get_ = F2(
	function (targetKey, dict) {
		get_:
		while (true) {
			var _p10 = dict;
			if (_p10.ctor === 'RBEmpty_elm_builtin') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p11 = A2(
					_elm_lang$core$Basics$compare,
					_eeue56$elm_all_dict$EveryDict$ord(targetKey),
					_eeue56$elm_all_dict$EveryDict$ord(_p10._1));
				switch (_p11.ctor) {
					case 'LT':
						var _v20 = targetKey,
							_v21 = _p10._3;
						targetKey = _v20;
						dict = _v21;
						continue get_;
					case 'EQ':
						return _elm_lang$core$Maybe$Just(_p10._2);
					default:
						var _v22 = targetKey,
							_v23 = _p10._4;
						targetKey = _v22;
						dict = _v23;
						continue get_;
				}
			}
		}
	});
var _eeue56$elm_all_dict$EveryDict$get = F2(
	function (targetKey, dict) {
		return A2(_eeue56$elm_all_dict$EveryDict$get_, targetKey, dict);
	});
var _eeue56$elm_all_dict$EveryDict$member = F2(
	function (key, dict) {
		var _p12 = A2(_eeue56$elm_all_dict$EveryDict$get_, key, dict);
		if (_p12.ctor === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var _eeue56$elm_all_dict$EveryDict$showLColor = function (color) {
	var _p13 = color;
	if (_p13.ctor === 'LBlack') {
		return 'LBlack';
	} else {
		return 'LBBlack';
	}
};
var _eeue56$elm_all_dict$EveryDict$showNColor = function (c) {
	var _p14 = c;
	switch (_p14.ctor) {
		case 'Red':
			return 'Red';
		case 'Black':
			return 'Black';
		case 'BBlack':
			return 'BBlack';
		default:
			return 'NBlack';
	}
};
var _eeue56$elm_all_dict$EveryDict$reportRemBug = F4(
	function (msg, c, lgot, rgot) {
		return _elm_lang$core$Native_Utils.crash(
			'EveryDict',
			{
				start: {line: 320, column: 3},
				end: {line: 320, column: 14}
			})(
			_elm_lang$core$String$concat(
				{
					ctor: '::',
					_0: 'Internal red-black tree invariant violated, expected ',
					_1: {
						ctor: '::',
						_0: msg,
						_1: {
							ctor: '::',
							_0: ' and got ',
							_1: {
								ctor: '::',
								_0: _eeue56$elm_all_dict$EveryDict$showNColor(c),
								_1: {
									ctor: '::',
									_0: '/',
									_1: {
										ctor: '::',
										_0: lgot,
										_1: {
											ctor: '::',
											_0: '/',
											_1: {
												ctor: '::',
												_0: rgot,
												_1: {
													ctor: '::',
													_0: '\nPlease report this bug to <https://github.com/elm-lang/Elm/issues>',
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}));
	});
var _eeue56$elm_all_dict$EveryDict$NBlack = {ctor: 'NBlack'};
var _eeue56$elm_all_dict$EveryDict$BBlack = {ctor: 'BBlack'};
var _eeue56$elm_all_dict$EveryDict$Black = {ctor: 'Black'};
var _eeue56$elm_all_dict$EveryDict$blackish = function (t) {
	var _p15 = t;
	if (_p15.ctor === 'RBNode_elm_builtin') {
		var _p16 = _p15._0;
		return _elm_lang$core$Native_Utils.eq(_p16, _eeue56$elm_all_dict$EveryDict$Black) || _elm_lang$core$Native_Utils.eq(_p16, _eeue56$elm_all_dict$EveryDict$BBlack);
	} else {
		return true;
	}
};
var _eeue56$elm_all_dict$EveryDict$Red = {ctor: 'Red'};
var _eeue56$elm_all_dict$EveryDict$moreBlack = function (color) {
	var _p17 = color;
	switch (_p17.ctor) {
		case 'Black':
			return _eeue56$elm_all_dict$EveryDict$BBlack;
		case 'Red':
			return _eeue56$elm_all_dict$EveryDict$Black;
		case 'NBlack':
			return _eeue56$elm_all_dict$EveryDict$Red;
		default:
			return _elm_lang$core$Native_Utils.crashCase(
				'EveryDict',
				{
					start: {line: 294, column: 5},
					end: {line: 298, column: 73}
				},
				_p17)('Can\'t make a double black node more black!');
	}
};
var _eeue56$elm_all_dict$EveryDict$lessBlack = function (color) {
	var _p19 = color;
	switch (_p19.ctor) {
		case 'BBlack':
			return _eeue56$elm_all_dict$EveryDict$Black;
		case 'Black':
			return _eeue56$elm_all_dict$EveryDict$Red;
		case 'Red':
			return _eeue56$elm_all_dict$EveryDict$NBlack;
		default:
			return _elm_lang$core$Native_Utils.crashCase(
				'EveryDict',
				{
					start: {line: 303, column: 5},
					end: {line: 307, column: 75}
				},
				_p19)('Can\'t make a negative black node less black!');
	}
};
var _eeue56$elm_all_dict$EveryDict$LBBlack = {ctor: 'LBBlack'};
var _eeue56$elm_all_dict$EveryDict$LBlack = {ctor: 'LBlack'};
var _eeue56$elm_all_dict$EveryDict$RBEmpty_elm_builtin = function (a) {
	return {ctor: 'RBEmpty_elm_builtin', _0: a};
};
var _eeue56$elm_all_dict$EveryDict$empty = _eeue56$elm_all_dict$EveryDict$RBEmpty_elm_builtin(_eeue56$elm_all_dict$EveryDict$LBlack);
var _eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {ctor: 'RBNode_elm_builtin', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _eeue56$elm_all_dict$EveryDict$ensureBlackRoot = function (dict) {
	var _p21 = dict;
	if (_p21.ctor === 'RBNode_elm_builtin') {
		switch (_p21._0.ctor) {
			case 'Red':
				return A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _eeue56$elm_all_dict$EveryDict$Black, _p21._1, _p21._2, _p21._3, _p21._4);
			case 'Black':
				return dict;
			default:
				return dict;
		}
	} else {
		return dict;
	}
};
var _eeue56$elm_all_dict$EveryDict$lessBlackTree = function (dict) {
	var _p22 = dict;
	if (_p22.ctor === 'RBNode_elm_builtin') {
		return A5(
			_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin,
			_eeue56$elm_all_dict$EveryDict$lessBlack(_p22._0),
			_p22._1,
			_p22._2,
			_p22._3,
			_p22._4);
	} else {
		if (_p22._0.ctor === 'LBBlack') {
			return _eeue56$elm_all_dict$EveryDict$RBEmpty_elm_builtin(_eeue56$elm_all_dict$EveryDict$LBlack);
		} else {
			return dict;
		}
	}
};
var _eeue56$elm_all_dict$EveryDict$blacken = function (t) {
	var _p23 = t;
	if (_p23.ctor === 'RBEmpty_elm_builtin') {
		return _eeue56$elm_all_dict$EveryDict$RBEmpty_elm_builtin(_eeue56$elm_all_dict$EveryDict$LBlack);
	} else {
		return A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _eeue56$elm_all_dict$EveryDict$Black, _p23._1, _p23._2, _p23._3, _p23._4);
	}
};
var _eeue56$elm_all_dict$EveryDict$redden = function (t) {
	var _p24 = t;
	if (_p24.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Native_Utils.crashCase(
			'EveryDict',
			{
				start: {line: 440, column: 5},
				end: {line: 442, column: 69}
			},
			_p24)('can\'t make a Leaf red');
	} else {
		return A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _eeue56$elm_all_dict$EveryDict$Red, _p24._1, _p24._2, _p24._3, _p24._4);
	}
};
var _eeue56$elm_all_dict$EveryDict$balance_node = function (t) {
	var assemble = function (col) {
		return function (xk) {
			return function (xv) {
				return function (yk) {
					return function (yv) {
						return function (zk) {
							return function (zv) {
								return function (a) {
									return function (b) {
										return function (c) {
											return function (d) {
												return A5(
													_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin,
													_eeue56$elm_all_dict$EveryDict$lessBlack(col),
													yk,
													yv,
													A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _eeue56$elm_all_dict$EveryDict$Black, xk, xv, a, b),
													A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _eeue56$elm_all_dict$EveryDict$Black, zk, zv, c, d));
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
	if (_eeue56$elm_all_dict$EveryDict$blackish(t)) {
		var _p26 = t;
		_v34_6:
		do {
			_v34_5:
			do {
				_v34_4:
				do {
					_v34_3:
					do {
						_v34_2:
						do {
							_v34_1:
							do {
								_v34_0:
								do {
									if (_p26.ctor === 'RBNode_elm_builtin') {
										if (_p26._3.ctor === 'RBNode_elm_builtin') {
											if (_p26._4.ctor === 'RBNode_elm_builtin') {
												switch (_p26._3._0.ctor) {
													case 'Red':
														switch (_p26._4._0.ctor) {
															case 'Red':
																if ((_p26._3._3.ctor === 'RBNode_elm_builtin') && (_p26._3._3._0.ctor === 'Red')) {
																	break _v34_0;
																} else {
																	if ((_p26._3._4.ctor === 'RBNode_elm_builtin') && (_p26._3._4._0.ctor === 'Red')) {
																		break _v34_1;
																	} else {
																		if ((_p26._4._3.ctor === 'RBNode_elm_builtin') && (_p26._4._3._0.ctor === 'Red')) {
																			break _v34_2;
																		} else {
																			if ((_p26._4._4.ctor === 'RBNode_elm_builtin') && (_p26._4._4._0.ctor === 'Red')) {
																				break _v34_3;
																			} else {
																				break _v34_6;
																			}
																		}
																	}
																}
															case 'NBlack':
																if ((_p26._3._3.ctor === 'RBNode_elm_builtin') && (_p26._3._3._0.ctor === 'Red')) {
																	break _v34_0;
																} else {
																	if ((_p26._3._4.ctor === 'RBNode_elm_builtin') && (_p26._3._4._0.ctor === 'Red')) {
																		break _v34_1;
																	} else {
																		if (((_p26._0.ctor === 'BBlack') && (_p26._4._3.ctor === 'RBNode_elm_builtin')) && (_p26._4._3._0.ctor === 'Black')) {
																			break _v34_4;
																		} else {
																			break _v34_6;
																		}
																	}
																}
															default:
																if ((_p26._3._3.ctor === 'RBNode_elm_builtin') && (_p26._3._3._0.ctor === 'Red')) {
																	break _v34_0;
																} else {
																	if ((_p26._3._4.ctor === 'RBNode_elm_builtin') && (_p26._3._4._0.ctor === 'Red')) {
																		break _v34_1;
																	} else {
																		break _v34_6;
																	}
																}
														}
													case 'NBlack':
														switch (_p26._4._0.ctor) {
															case 'Red':
																if ((_p26._4._3.ctor === 'RBNode_elm_builtin') && (_p26._4._3._0.ctor === 'Red')) {
																	break _v34_2;
																} else {
																	if ((_p26._4._4.ctor === 'RBNode_elm_builtin') && (_p26._4._4._0.ctor === 'Red')) {
																		break _v34_3;
																	} else {
																		if (((_p26._0.ctor === 'BBlack') && (_p26._3._4.ctor === 'RBNode_elm_builtin')) && (_p26._3._4._0.ctor === 'Black')) {
																			break _v34_5;
																		} else {
																			break _v34_6;
																		}
																	}
																}
															case 'NBlack':
																if (_p26._0.ctor === 'BBlack') {
																	if ((_p26._4._3.ctor === 'RBNode_elm_builtin') && (_p26._4._3._0.ctor === 'Black')) {
																		break _v34_4;
																	} else {
																		if ((_p26._3._4.ctor === 'RBNode_elm_builtin') && (_p26._3._4._0.ctor === 'Black')) {
																			break _v34_5;
																		} else {
																			break _v34_6;
																		}
																	}
																} else {
																	break _v34_6;
																}
															default:
																if (((_p26._0.ctor === 'BBlack') && (_p26._3._4.ctor === 'RBNode_elm_builtin')) && (_p26._3._4._0.ctor === 'Black')) {
																	break _v34_5;
																} else {
																	break _v34_6;
																}
														}
													default:
														switch (_p26._4._0.ctor) {
															case 'Red':
																if ((_p26._4._3.ctor === 'RBNode_elm_builtin') && (_p26._4._3._0.ctor === 'Red')) {
																	break _v34_2;
																} else {
																	if ((_p26._4._4.ctor === 'RBNode_elm_builtin') && (_p26._4._4._0.ctor === 'Red')) {
																		break _v34_3;
																	} else {
																		break _v34_6;
																	}
																}
															case 'NBlack':
																if (((_p26._0.ctor === 'BBlack') && (_p26._4._3.ctor === 'RBNode_elm_builtin')) && (_p26._4._3._0.ctor === 'Black')) {
																	break _v34_4;
																} else {
																	break _v34_6;
																}
															default:
																break _v34_6;
														}
												}
											} else {
												switch (_p26._3._0.ctor) {
													case 'Red':
														if ((_p26._3._3.ctor === 'RBNode_elm_builtin') && (_p26._3._3._0.ctor === 'Red')) {
															break _v34_0;
														} else {
															if ((_p26._3._4.ctor === 'RBNode_elm_builtin') && (_p26._3._4._0.ctor === 'Red')) {
																break _v34_1;
															} else {
																break _v34_6;
															}
														}
													case 'NBlack':
														if (((_p26._0.ctor === 'BBlack') && (_p26._3._4.ctor === 'RBNode_elm_builtin')) && (_p26._3._4._0.ctor === 'Black')) {
															break _v34_5;
														} else {
															break _v34_6;
														}
													default:
														break _v34_6;
												}
											}
										} else {
											if (_p26._4.ctor === 'RBNode_elm_builtin') {
												switch (_p26._4._0.ctor) {
													case 'Red':
														if ((_p26._4._3.ctor === 'RBNode_elm_builtin') && (_p26._4._3._0.ctor === 'Red')) {
															break _v34_2;
														} else {
															if ((_p26._4._4.ctor === 'RBNode_elm_builtin') && (_p26._4._4._0.ctor === 'Red')) {
																break _v34_3;
															} else {
																break _v34_6;
															}
														}
													case 'NBlack':
														if (((_p26._0.ctor === 'BBlack') && (_p26._4._3.ctor === 'RBNode_elm_builtin')) && (_p26._4._3._0.ctor === 'Black')) {
															break _v34_4;
														} else {
															break _v34_6;
														}
													default:
														break _v34_6;
												}
											} else {
												break _v34_6;
											}
										}
									} else {
										break _v34_6;
									}
								} while(false);
								return assemble(_p26._0)(_p26._3._3._1)(_p26._3._3._2)(_p26._3._1)(_p26._3._2)(_p26._1)(_p26._2)(_p26._3._3._3)(_p26._3._3._4)(_p26._3._4)(_p26._4);
							} while(false);
							return assemble(_p26._0)(_p26._3._1)(_p26._3._2)(_p26._3._4._1)(_p26._3._4._2)(_p26._1)(_p26._2)(_p26._3._3)(_p26._3._4._3)(_p26._3._4._4)(_p26._4);
						} while(false);
						return assemble(_p26._0)(_p26._1)(_p26._2)(_p26._4._3._1)(_p26._4._3._2)(_p26._4._1)(_p26._4._2)(_p26._3)(_p26._4._3._3)(_p26._4._3._4)(_p26._4._4);
					} while(false);
					return assemble(_p26._0)(_p26._1)(_p26._2)(_p26._4._1)(_p26._4._2)(_p26._4._4._1)(_p26._4._4._2)(_p26._3)(_p26._4._3)(_p26._4._4._3)(_p26._4._4._4);
				} while(false);
				var _p28 = _p26._4._4;
				var _p27 = _p28;
				if ((_p27.ctor === 'RBNode_elm_builtin') && (_p27._0.ctor === 'Black')) {
					return A5(
						_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin,
						_eeue56$elm_all_dict$EveryDict$Black,
						_p26._4._3._1,
						_p26._4._3._2,
						A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _eeue56$elm_all_dict$EveryDict$Black, _p26._1, _p26._2, _p26._3, _p26._4._3._3),
						A5(
							_eeue56$elm_all_dict$EveryDict$balance,
							_eeue56$elm_all_dict$EveryDict$Black,
							_p26._4._1,
							_p26._4._2,
							_p26._4._3._4,
							_eeue56$elm_all_dict$EveryDict$redden(_p28)));
				} else {
					return t;
				}
			} while(false);
			var _p30 = _p26._3._3;
			var _p29 = _p30;
			if ((_p29.ctor === 'RBNode_elm_builtin') && (_p29._0.ctor === 'Black')) {
				return A5(
					_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin,
					_eeue56$elm_all_dict$EveryDict$Black,
					_p26._3._4._1,
					_p26._3._4._2,
					A5(
						_eeue56$elm_all_dict$EveryDict$balance,
						_eeue56$elm_all_dict$EveryDict$Black,
						_p26._3._1,
						_p26._3._2,
						_eeue56$elm_all_dict$EveryDict$redden(_p30),
						_p26._3._4._3),
					A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _eeue56$elm_all_dict$EveryDict$Black, _p26._1, _p26._2, _p26._3._4._4, _p26._4));
			} else {
				return t;
			}
		} while(false);
		return t;
	} else {
		return t;
	}
};
var _eeue56$elm_all_dict$EveryDict$balance = F5(
	function (c, k, v, l, r) {
		return _eeue56$elm_all_dict$EveryDict$balance_node(
			A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, c, k, v, l, r));
	});
var _eeue56$elm_all_dict$EveryDict$bubble = F5(
	function (c, k, v, l, r) {
		return (_eeue56$elm_all_dict$EveryDict$isBBlack(l) || _eeue56$elm_all_dict$EveryDict$isBBlack(r)) ? A5(
			_eeue56$elm_all_dict$EveryDict$balance,
			_eeue56$elm_all_dict$EveryDict$moreBlack(c),
			k,
			v,
			_eeue56$elm_all_dict$EveryDict$lessBlackTree(l),
			_eeue56$elm_all_dict$EveryDict$lessBlackTree(r)) : A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, c, k, v, l, r);
	});
var _eeue56$elm_all_dict$EveryDict$remove_max = F5(
	function (c, k, v, l, r) {
		var _p31 = r;
		if (_p31.ctor === 'RBEmpty_elm_builtin') {
			return A3(_eeue56$elm_all_dict$EveryDict$rem, c, l, r);
		} else {
			return A5(
				_eeue56$elm_all_dict$EveryDict$bubble,
				c,
				k,
				v,
				l,
				A5(_eeue56$elm_all_dict$EveryDict$remove_max, _p31._0, _p31._1, _p31._2, _p31._3, _p31._4));
		}
	});
var _eeue56$elm_all_dict$EveryDict$rem = F3(
	function (c, l, r) {
		var _p32 = {ctor: '_Tuple2', _0: l, _1: r};
		if (_p32._0.ctor === 'RBEmpty_elm_builtin') {
			if (_p32._1.ctor === 'RBEmpty_elm_builtin') {
				var _p33 = c;
				switch (_p33.ctor) {
					case 'Red':
						return _eeue56$elm_all_dict$EveryDict$RBEmpty_elm_builtin(_eeue56$elm_all_dict$EveryDict$LBlack);
					case 'Black':
						return _eeue56$elm_all_dict$EveryDict$RBEmpty_elm_builtin(_eeue56$elm_all_dict$EveryDict$LBBlack);
					default:
						return _eeue56$elm_all_dict$Native_Debug.crash('cannot have bblack or nblack nodes at this point');
				}
			} else {
				var _p36 = _p32._1._0;
				var _p35 = _p32._0._0;
				var _p34 = {ctor: '_Tuple3', _0: c, _1: _p35, _2: _p36};
				if ((((_p34.ctor === '_Tuple3') && (_p34._0.ctor === 'Black')) && (_p34._1.ctor === 'LBlack')) && (_p34._2.ctor === 'Red')) {
					return A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _eeue56$elm_all_dict$EveryDict$Black, _p32._1._1, _p32._1._2, _p32._1._3, _p32._1._4);
				} else {
					return A4(
						_eeue56$elm_all_dict$EveryDict$reportRemBug,
						'Black/LBlack/Red',
						c,
						_eeue56$elm_all_dict$EveryDict$showLColor(_p35),
						_eeue56$elm_all_dict$EveryDict$showNColor(_p36));
				}
			}
		} else {
			if (_p32._1.ctor === 'RBEmpty_elm_builtin') {
				var _p39 = _p32._1._0;
				var _p38 = _p32._0._0;
				var _p37 = {ctor: '_Tuple3', _0: c, _1: _p38, _2: _p39};
				if ((((_p37.ctor === '_Tuple3') && (_p37._0.ctor === 'Black')) && (_p37._1.ctor === 'Red')) && (_p37._2.ctor === 'LBlack')) {
					return A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _eeue56$elm_all_dict$EveryDict$Black, _p32._0._1, _p32._0._2, _p32._0._3, _p32._0._4);
				} else {
					return A4(
						_eeue56$elm_all_dict$EveryDict$reportRemBug,
						'Black/Red/LBlack',
						c,
						_eeue56$elm_all_dict$EveryDict$showNColor(_p38),
						_eeue56$elm_all_dict$EveryDict$showLColor(_p39));
				}
			} else {
				var _p45 = _p32._0._2;
				var _p44 = _p32._0._4;
				var _p43 = _p32._0._3;
				var _p42 = _p32._0._1;
				var _p41 = _p32._0._0;
				var l_ = A5(_eeue56$elm_all_dict$EveryDict$remove_max, _p41, _p42, _p45, _p43, _p44);
				var r = A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _p32._1._0, _p32._1._1, _p32._1._2, _p32._1._3, _p32._1._4);
				var l = A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _p41, _p42, _p45, _p43, _p44);
				var _p40 = _eeue56$elm_all_dict$EveryDict$max(l);
				var k = _p40._0;
				var v = _p40._1;
				return A5(_eeue56$elm_all_dict$EveryDict$bubble, c, k, v, l_, r);
			}
		}
	});
var _eeue56$elm_all_dict$EveryDict$map = F2(
	function (f, dict) {
		var _p46 = dict;
		if (_p46.ctor === 'RBEmpty_elm_builtin') {
			return _eeue56$elm_all_dict$EveryDict$RBEmpty_elm_builtin(_p46._0);
		} else {
			var _p47 = _p46._1;
			return A5(
				_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin,
				_p46._0,
				_p47,
				A2(f, _p47, _p46._2),
				A2(_eeue56$elm_all_dict$EveryDict$map, f, _p46._3),
				A2(_eeue56$elm_all_dict$EveryDict$map, f, _p46._4));
		}
	});
var _eeue56$elm_all_dict$EveryDict$Same = {ctor: 'Same'};
var _eeue56$elm_all_dict$EveryDict$Remove = {ctor: 'Remove'};
var _eeue56$elm_all_dict$EveryDict$Insert = {ctor: 'Insert'};
var _eeue56$elm_all_dict$EveryDict$update = F3(
	function (k, alter, dict) {
		var up = function (dict) {
			var _p48 = dict;
			if (_p48.ctor === 'RBEmpty_elm_builtin') {
				var _p49 = alter(_elm_lang$core$Maybe$Nothing);
				if (_p49.ctor === 'Nothing') {
					return {ctor: '_Tuple2', _0: _eeue56$elm_all_dict$EveryDict$Same, _1: _eeue56$elm_all_dict$EveryDict$empty};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _eeue56$elm_all_dict$EveryDict$Insert,
						_1: A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _eeue56$elm_all_dict$EveryDict$Red, k, _p49._0, _eeue56$elm_all_dict$EveryDict$empty, _eeue56$elm_all_dict$EveryDict$empty)
					};
				}
			} else {
				var _p60 = _p48._2;
				var _p59 = _p48._4;
				var _p58 = _p48._3;
				var _p57 = _p48._1;
				var _p56 = _p48._0;
				var _p50 = A2(
					_elm_lang$core$Basics$compare,
					_eeue56$elm_all_dict$EveryDict$ord(k),
					_eeue56$elm_all_dict$EveryDict$ord(_p57));
				switch (_p50.ctor) {
					case 'EQ':
						var _p51 = alter(
							_elm_lang$core$Maybe$Just(_p60));
						if (_p51.ctor === 'Nothing') {
							return {
								ctor: '_Tuple2',
								_0: _eeue56$elm_all_dict$EveryDict$Remove,
								_1: A3(_eeue56$elm_all_dict$EveryDict$rem, _p56, _p58, _p59)
							};
						} else {
							return {
								ctor: '_Tuple2',
								_0: _eeue56$elm_all_dict$EveryDict$Same,
								_1: A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _p56, _p57, _p51._0, _p58, _p59)
							};
						}
					case 'LT':
						var _p52 = up(_p58);
						var flag = _p52._0;
						var newLeft = _p52._1;
						var _p53 = flag;
						switch (_p53.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _eeue56$elm_all_dict$EveryDict$Same,
									_1: A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _p56, _p57, _p60, newLeft, _p59)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _eeue56$elm_all_dict$EveryDict$Insert,
									_1: A5(_eeue56$elm_all_dict$EveryDict$balance, _p56, _p57, _p60, newLeft, _p59)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _eeue56$elm_all_dict$EveryDict$Remove,
									_1: A5(_eeue56$elm_all_dict$EveryDict$bubble, _p56, _p57, _p60, newLeft, _p59)
								};
						}
					default:
						var _p54 = up(_p59);
						var flag = _p54._0;
						var newRight = _p54._1;
						var _p55 = flag;
						switch (_p55.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _eeue56$elm_all_dict$EveryDict$Same,
									_1: A5(_eeue56$elm_all_dict$EveryDict$RBNode_elm_builtin, _p56, _p57, _p60, _p58, newRight)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _eeue56$elm_all_dict$EveryDict$Insert,
									_1: A5(_eeue56$elm_all_dict$EveryDict$balance, _p56, _p57, _p60, _p58, newRight)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _eeue56$elm_all_dict$EveryDict$Remove,
									_1: A5(_eeue56$elm_all_dict$EveryDict$bubble, _p56, _p57, _p60, _p58, newRight)
								};
						}
				}
			}
		};
		var _p61 = up(dict);
		var flag = _p61._0;
		var updatedDict = _p61._1;
		var _p62 = flag;
		switch (_p62.ctor) {
			case 'Same':
				return updatedDict;
			case 'Insert':
				return _eeue56$elm_all_dict$EveryDict$ensureBlackRoot(updatedDict);
			default:
				return _eeue56$elm_all_dict$EveryDict$blacken(updatedDict);
		}
	});
var _eeue56$elm_all_dict$EveryDict$insert = F3(
	function (key, value, dict) {
		return A3(
			_eeue56$elm_all_dict$EveryDict$update,
			key,
			_elm_lang$core$Basics$always(
				_elm_lang$core$Maybe$Just(value)),
			dict);
	});
var _eeue56$elm_all_dict$EveryDict$singleton = F2(
	function (key, value) {
		return A3(_eeue56$elm_all_dict$EveryDict$insert, key, value, _eeue56$elm_all_dict$EveryDict$empty);
	});
var _eeue56$elm_all_dict$EveryDict$union = F2(
	function (t1, t2) {
		return A3(_eeue56$elm_all_dict$EveryDict$foldl, _eeue56$elm_all_dict$EveryDict$insert, t2, t1);
	});
var _eeue56$elm_all_dict$EveryDict$fromList = function (assocs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p63, dict) {
				var _p64 = _p63;
				return A3(_eeue56$elm_all_dict$EveryDict$insert, _p64._0, _p64._1, dict);
			}),
		_eeue56$elm_all_dict$EveryDict$empty,
		assocs);
};
var _eeue56$elm_all_dict$EveryDict$filter = F2(
	function (predicate, dictionary) {
		var add = F3(
			function (key, value, dict) {
				return A2(predicate, key, value) ? A3(_eeue56$elm_all_dict$EveryDict$insert, key, value, dict) : dict;
			});
		return A3(_eeue56$elm_all_dict$EveryDict$foldl, add, _eeue56$elm_all_dict$EveryDict$empty, dictionary);
	});
var _eeue56$elm_all_dict$EveryDict$intersect = F2(
	function (t1, t2) {
		return A2(
			_eeue56$elm_all_dict$EveryDict$filter,
			F2(
				function (k, _p65) {
					return A2(_eeue56$elm_all_dict$EveryDict$member, k, t2);
				}),
			t1);
	});
var _eeue56$elm_all_dict$EveryDict$partition = F2(
	function (predicate, dict) {
		var add = F3(
			function (key, value, _p66) {
				var _p67 = _p66;
				var _p69 = _p67._1;
				var _p68 = _p67._0;
				return A2(predicate, key, value) ? {
					ctor: '_Tuple2',
					_0: A3(_eeue56$elm_all_dict$EveryDict$insert, key, value, _p68),
					_1: _p69
				} : {
					ctor: '_Tuple2',
					_0: _p68,
					_1: A3(_eeue56$elm_all_dict$EveryDict$insert, key, value, _p69)
				};
			});
		return A3(
			_eeue56$elm_all_dict$EveryDict$foldl,
			add,
			{ctor: '_Tuple2', _0: _eeue56$elm_all_dict$EveryDict$empty, _1: _eeue56$elm_all_dict$EveryDict$empty},
			dict);
	});
var _eeue56$elm_all_dict$EveryDict$remove = F2(
	function (key, dict) {
		return A3(
			_eeue56$elm_all_dict$EveryDict$update,
			key,
			_elm_lang$core$Basics$always(_elm_lang$core$Maybe$Nothing),
			dict);
	});
var _eeue56$elm_all_dict$EveryDict$diff = F2(
	function (t1, t2) {
		return A3(
			_eeue56$elm_all_dict$EveryDict$foldl,
			F3(
				function (k, v, t) {
					return A2(_eeue56$elm_all_dict$EveryDict$remove, k, t);
				}),
			t1,
			t2);
	});

var _Gizra$elm_all_set$EverySet$foldr = F3(
	function (f, b, _p0) {
		var _p1 = _p0;
		return A3(
			_eeue56$elm_all_dict$EveryDict$foldr,
			F3(
				function (k, _p2, b) {
					return A2(f, k, b);
				}),
			b,
			_p1._0);
	});
var _Gizra$elm_all_set$EverySet$foldl = F3(
	function (f, b, _p3) {
		var _p4 = _p3;
		return A3(
			_eeue56$elm_all_dict$EveryDict$foldl,
			F3(
				function (k, _p5, b) {
					return A2(f, k, b);
				}),
			b,
			_p4._0);
	});
var _Gizra$elm_all_set$EverySet$toList = function (_p6) {
	var _p7 = _p6;
	return _eeue56$elm_all_dict$EveryDict$keys(_p7._0);
};
var _Gizra$elm_all_set$EverySet$size = function (_p8) {
	var _p9 = _p8;
	return _eeue56$elm_all_dict$EveryDict$size(_p9._0);
};
var _Gizra$elm_all_set$EverySet$member = F2(
	function (k, _p10) {
		var _p11 = _p10;
		return A2(_eeue56$elm_all_dict$EveryDict$member, k, _p11._0);
	});
var _Gizra$elm_all_set$EverySet$isEmpty = function (_p12) {
	var _p13 = _p12;
	return _eeue56$elm_all_dict$EveryDict$isEmpty(_p13._0);
};
var _Gizra$elm_all_set$EverySet$EverySet = function (a) {
	return {ctor: 'EverySet', _0: a};
};
var _Gizra$elm_all_set$EverySet$empty = _Gizra$elm_all_set$EverySet$EverySet(_eeue56$elm_all_dict$EveryDict$empty);
var _Gizra$elm_all_set$EverySet$singleton = function (k) {
	return _Gizra$elm_all_set$EverySet$EverySet(
		A2(
			_eeue56$elm_all_dict$EveryDict$singleton,
			k,
			{ctor: '_Tuple0'}));
};
var _Gizra$elm_all_set$EverySet$insert = F2(
	function (k, _p14) {
		var _p15 = _p14;
		return _Gizra$elm_all_set$EverySet$EverySet(
			A3(
				_eeue56$elm_all_dict$EveryDict$insert,
				k,
				{ctor: '_Tuple0'},
				_p15._0));
	});
var _Gizra$elm_all_set$EverySet$fromList = function (xs) {
	return A3(_elm_lang$core$List$foldl, _Gizra$elm_all_set$EverySet$insert, _Gizra$elm_all_set$EverySet$empty, xs);
};
var _Gizra$elm_all_set$EverySet$map = F2(
	function (f, s) {
		return _Gizra$elm_all_set$EverySet$fromList(
			A2(
				_elm_lang$core$List$map,
				f,
				_Gizra$elm_all_set$EverySet$toList(s)));
	});
var _Gizra$elm_all_set$EverySet$remove = F2(
	function (k, _p16) {
		var _p17 = _p16;
		return _Gizra$elm_all_set$EverySet$EverySet(
			A2(_eeue56$elm_all_dict$EveryDict$remove, k, _p17._0));
	});
var _Gizra$elm_all_set$EverySet$union = F2(
	function (_p19, _p18) {
		var _p20 = _p19;
		var _p21 = _p18;
		return _Gizra$elm_all_set$EverySet$EverySet(
			A2(_eeue56$elm_all_dict$EveryDict$union, _p20._0, _p21._0));
	});
var _Gizra$elm_all_set$EverySet$intersect = F2(
	function (_p23, _p22) {
		var _p24 = _p23;
		var _p25 = _p22;
		return _Gizra$elm_all_set$EverySet$EverySet(
			A2(_eeue56$elm_all_dict$EveryDict$intersect, _p24._0, _p25._0));
	});
var _Gizra$elm_all_set$EverySet$diff = F2(
	function (_p27, _p26) {
		var _p28 = _p27;
		var _p29 = _p26;
		return _Gizra$elm_all_set$EverySet$EverySet(
			A2(_eeue56$elm_all_dict$EveryDict$diff, _p28._0, _p29._0));
	});
var _Gizra$elm_all_set$EverySet$filter = F2(
	function (p, _p30) {
		var _p31 = _p30;
		return _Gizra$elm_all_set$EverySet$EverySet(
			A2(
				_eeue56$elm_all_dict$EveryDict$filter,
				F2(
					function (k, _p32) {
						return p(k);
					}),
				_p31._0));
	});
var _Gizra$elm_all_set$EverySet$partition = F2(
	function (p, _p33) {
		var _p34 = _p33;
		var _p35 = A2(
			_eeue56$elm_all_dict$EveryDict$partition,
			F2(
				function (k, _p36) {
					return p(k);
				}),
			_p34._0);
		var p1 = _p35._0;
		var p2 = _p35._1;
		return {
			ctor: '_Tuple2',
			_0: _Gizra$elm_all_set$EverySet$EverySet(p1),
			_1: _Gizra$elm_all_set$EverySet$EverySet(p2)
		};
	});

var _eeue56$elm_all_dict$AllDict$foldr = F3(
	function (f, acc, t) {
		foldr:
		while (true) {
			var _p0 = t;
			if (_p0.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v1 = f,
					_v2 = A3(
					f,
					_p0._1,
					_p0._2,
					A3(_eeue56$elm_all_dict$AllDict$foldr, f, acc, _p0._4)),
					_v3 = _p0._3;
				f = _v1;
				acc = _v2;
				t = _v3;
				continue foldr;
			}
		}
	});
var _eeue56$elm_all_dict$AllDict$keys = function (dict) {
	return A3(
		_eeue56$elm_all_dict$AllDict$foldr,
		F3(
			function (key, value, keyList) {
				return {ctor: '::', _0: key, _1: keyList};
			}),
		{ctor: '[]'},
		dict);
};
var _eeue56$elm_all_dict$AllDict$values = function (dict) {
	return A3(
		_eeue56$elm_all_dict$AllDict$foldr,
		F3(
			function (key, value, valueList) {
				return {ctor: '::', _0: value, _1: valueList};
			}),
		{ctor: '[]'},
		dict);
};
var _eeue56$elm_all_dict$AllDict$toList = function (dict) {
	return A3(
		_eeue56$elm_all_dict$AllDict$foldr,
		F3(
			function (key, value, list) {
				return {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: key, _1: value},
					_1: list
				};
			}),
		{ctor: '[]'},
		dict);
};
var _eeue56$elm_all_dict$AllDict$foldl = F3(
	function (f, acc, dict) {
		foldl:
		while (true) {
			var _p1 = dict;
			if (_p1.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v5 = f,
					_v6 = A3(
					f,
					_p1._1,
					_p1._2,
					A3(_eeue56$elm_all_dict$AllDict$foldl, f, acc, _p1._3)),
					_v7 = _p1._4;
				f = _v5;
				acc = _v6;
				dict = _v7;
				continue foldl;
			}
		}
	});
var _eeue56$elm_all_dict$AllDict$isBBlack = function (dict) {
	var _p2 = dict;
	_v8_2:
	do {
		if (_p2.ctor === 'RBNode_elm_builtin') {
			if (_p2._0.ctor === 'BBlack') {
				return true;
			} else {
				break _v8_2;
			}
		} else {
			if (_p2._0.ctor === 'LBBlack') {
				return true;
			} else {
				break _v8_2;
			}
		}
	} while(false);
	return false;
};
var _eeue56$elm_all_dict$AllDict$showFlag = function (f) {
	var _p3 = f;
	switch (_p3.ctor) {
		case 'Insert':
			return 'Insert';
		case 'Remove':
			return 'Remove';
		default:
			return 'Same';
	}
};
var _eeue56$elm_all_dict$AllDict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			var _p4 = dict;
			if (_p4.ctor === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var _v11 = A2(_eeue56$elm_all_dict$AllDict$sizeHelp, n + 1, _p4._4),
					_v12 = _p4._3;
				n = _v11;
				dict = _v12;
				continue sizeHelp;
			}
		}
	});
var _eeue56$elm_all_dict$AllDict$size = function (dict) {
	return A2(_eeue56$elm_all_dict$AllDict$sizeHelp, 0, dict);
};
var _eeue56$elm_all_dict$AllDict$isEmpty = function (dict) {
	var _p5 = dict;
	if (_p5.ctor === 'RBEmpty_elm_builtin') {
		return true;
	} else {
		return false;
	}
};
var _eeue56$elm_all_dict$AllDict$getOrd = function (dict) {
	getOrd:
	while (true) {
		var _p6 = dict;
		if (_p6.ctor === 'RBEmpty_elm_builtin') {
			return _p6._1;
		} else {
			var _v15 = _p6._3;
			dict = _v15;
			continue getOrd;
		}
	}
};
var _eeue56$elm_all_dict$AllDict$getHelper = F2(
	function (targetKey, dict) {
		getHelper:
		while (true) {
			var ord = _eeue56$elm_all_dict$AllDict$getOrd(dict);
			var _p7 = dict;
			if (_p7.ctor === 'RBEmpty_elm_builtin') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p8 = A2(
					_elm_lang$core$Basics$compare,
					ord(targetKey),
					ord(_p7._1));
				switch (_p8.ctor) {
					case 'LT':
						var _v18 = targetKey,
							_v19 = _p7._3;
						targetKey = _v18;
						dict = _v19;
						continue getHelper;
					case 'EQ':
						return _elm_lang$core$Maybe$Just(_p7._2);
					default:
						var _v20 = targetKey,
							_v21 = _p7._4;
						targetKey = _v20;
						dict = _v21;
						continue getHelper;
				}
			}
		}
	});
var _eeue56$elm_all_dict$AllDict$get = F2(
	function (targetKey, dict) {
		return A2(_eeue56$elm_all_dict$AllDict$getHelper, targetKey, dict);
	});
var _eeue56$elm_all_dict$AllDict$member = F2(
	function (key, dict) {
		var _p9 = A2(_eeue56$elm_all_dict$AllDict$getHelper, key, dict);
		if (_p9.ctor === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var _eeue56$elm_all_dict$AllDict$max = function (dict) {
	max:
	while (true) {
		var _p10 = dict;
		if (_p10.ctor === 'RBNode_elm_builtin') {
			if (_p10._4.ctor === 'RBEmpty_elm_builtin') {
				return {ctor: '_Tuple2', _0: _p10._1, _1: _p10._2};
			} else {
				var _v24 = _p10._4;
				dict = _v24;
				continue max;
			}
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'AllDict',
				{
					start: {line: 157, column: 5},
					end: {line: 165, column: 51}
				},
				_p10)('(max Empty) is not defined');
		}
	}
};
var _eeue56$elm_all_dict$AllDict$min = function (dict) {
	min:
	while (true) {
		var _p12 = dict;
		if (_p12.ctor === 'RBNode_elm_builtin') {
			if ((_p12._3.ctor === 'RBEmpty_elm_builtin') && (_p12._3._0.ctor === 'LBlack')) {
				return {ctor: '_Tuple2', _0: _p12._1, _1: _p12._2};
			} else {
				var _v26 = _p12._3;
				dict = _v26;
				continue min;
			}
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'AllDict',
				{
					start: {line: 145, column: 5},
					end: {line: 153, column: 51}
				},
				_p12)('(min Empty) is not defined');
		}
	}
};
var _eeue56$elm_all_dict$AllDict$fullEq = F2(
	function (first, second) {
		return _elm_lang$core$Native_Utils.eq(
			_eeue56$elm_all_dict$AllDict$toList(first),
			_eeue56$elm_all_dict$AllDict$toList(second)) && _elm_lang$core$Native_Utils.eq(
			_eeue56$elm_all_dict$AllDict$getOrd(first),
			_eeue56$elm_all_dict$AllDict$getOrd(second));
	});
var _eeue56$elm_all_dict$AllDict$eq = F2(
	function (first, second) {
		return _elm_lang$core$Native_Utils.eq(
			_eeue56$elm_all_dict$AllDict$toList(first),
			_eeue56$elm_all_dict$AllDict$toList(second));
	});
var _eeue56$elm_all_dict$AllDict$showLColor = function (color) {
	var _p14 = color;
	if (_p14.ctor === 'LBlack') {
		return 'LBlack';
	} else {
		return 'LBBlack';
	}
};
var _eeue56$elm_all_dict$AllDict$showNColor = function (c) {
	var _p15 = c;
	switch (_p15.ctor) {
		case 'Red':
			return 'Red';
		case 'Black':
			return 'Black';
		case 'BBlack':
			return 'BBlack';
		default:
			return 'NBlack';
	}
};
var _eeue56$elm_all_dict$AllDict$reportRemBug = F4(
	function (msg, c, lgot, rgot) {
		return _elm_lang$core$Native_Utils.crash(
			'AllDict',
			{
				start: {line: 365, column: 3},
				end: {line: 365, column: 14}
			})(
			_elm_lang$core$String$concat(
				{
					ctor: '::',
					_0: 'Internal red-black tree invariant violated, expected ',
					_1: {
						ctor: '::',
						_0: msg,
						_1: {
							ctor: '::',
							_0: ' and got ',
							_1: {
								ctor: '::',
								_0: _eeue56$elm_all_dict$AllDict$showNColor(c),
								_1: {
									ctor: '::',
									_0: '/',
									_1: {
										ctor: '::',
										_0: lgot,
										_1: {
											ctor: '::',
											_0: '/',
											_1: {
												ctor: '::',
												_0: rgot,
												_1: {
													ctor: '::',
													_0: '\nPlease report this bug to <https://github.com/elm-lang/Elm/issues>',
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}));
	});
var _eeue56$elm_all_dict$AllDict$NBlack = {ctor: 'NBlack'};
var _eeue56$elm_all_dict$AllDict$BBlack = {ctor: 'BBlack'};
var _eeue56$elm_all_dict$AllDict$Black = {ctor: 'Black'};
var _eeue56$elm_all_dict$AllDict$blackish = function (t) {
	var _p16 = t;
	if (_p16.ctor === 'RBNode_elm_builtin') {
		var _p17 = _p16._0;
		return _elm_lang$core$Native_Utils.eq(_p17, _eeue56$elm_all_dict$AllDict$Black) || _elm_lang$core$Native_Utils.eq(_p17, _eeue56$elm_all_dict$AllDict$BBlack);
	} else {
		return true;
	}
};
var _eeue56$elm_all_dict$AllDict$Red = {ctor: 'Red'};
var _eeue56$elm_all_dict$AllDict$moreBlack = function (color) {
	var _p18 = color;
	switch (_p18.ctor) {
		case 'Black':
			return _eeue56$elm_all_dict$AllDict$BBlack;
		case 'Red':
			return _eeue56$elm_all_dict$AllDict$Black;
		case 'NBlack':
			return _eeue56$elm_all_dict$AllDict$Red;
		default:
			return _elm_lang$core$Native_Utils.crashCase(
				'AllDict',
				{
					start: {line: 339, column: 5},
					end: {line: 343, column: 73}
				},
				_p18)('Can\'t make a double black node more black!');
	}
};
var _eeue56$elm_all_dict$AllDict$lessBlack = function (color) {
	var _p20 = color;
	switch (_p20.ctor) {
		case 'BBlack':
			return _eeue56$elm_all_dict$AllDict$Black;
		case 'Black':
			return _eeue56$elm_all_dict$AllDict$Red;
		case 'Red':
			return _eeue56$elm_all_dict$AllDict$NBlack;
		default:
			return _elm_lang$core$Native_Utils.crashCase(
				'AllDict',
				{
					start: {line: 348, column: 5},
					end: {line: 352, column: 75}
				},
				_p20)('Can\'t make a negative black node less black!');
	}
};
var _eeue56$elm_all_dict$AllDict$LBBlack = {ctor: 'LBBlack'};
var _eeue56$elm_all_dict$AllDict$LBlack = {ctor: 'LBlack'};
var _eeue56$elm_all_dict$AllDict$RBEmpty_elm_builtin = F2(
	function (a, b) {
		return {ctor: 'RBEmpty_elm_builtin', _0: a, _1: b};
	});
var _eeue56$elm_all_dict$AllDict$empty = function (ord) {
	return A2(_eeue56$elm_all_dict$AllDict$RBEmpty_elm_builtin, _eeue56$elm_all_dict$AllDict$LBlack, ord);
};
var _eeue56$elm_all_dict$AllDict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {ctor: 'RBNode_elm_builtin', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _eeue56$elm_all_dict$AllDict$ensureBlackRoot = function (dict) {
	var _p22 = dict;
	_v32_2:
	do {
		if (_p22.ctor === 'RBNode_elm_builtin') {
			switch (_p22._0.ctor) {
				case 'Red':
					return A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, _eeue56$elm_all_dict$AllDict$Black, _p22._1, _p22._2, _p22._3, _p22._4);
				case 'Black':
					return dict;
				default:
					break _v32_2;
			}
		} else {
			break _v32_2;
		}
	} while(false);
	return dict;
};
var _eeue56$elm_all_dict$AllDict$lessBlackTree = function (dict) {
	var _p23 = dict;
	if (_p23.ctor === 'RBNode_elm_builtin') {
		return A5(
			_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin,
			_eeue56$elm_all_dict$AllDict$lessBlack(_p23._0),
			_p23._1,
			_p23._2,
			_p23._3,
			_p23._4);
	} else {
		if (_p23._0.ctor === 'LBBlack') {
			return A2(_eeue56$elm_all_dict$AllDict$RBEmpty_elm_builtin, _eeue56$elm_all_dict$AllDict$LBlack, _p23._1);
		} else {
			return dict;
		}
	}
};
var _eeue56$elm_all_dict$AllDict$blacken = function (t) {
	var _p24 = t;
	if (_p24.ctor === 'RBEmpty_elm_builtin') {
		return A2(_eeue56$elm_all_dict$AllDict$RBEmpty_elm_builtin, _eeue56$elm_all_dict$AllDict$LBlack, _p24._1);
	} else {
		return A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, _eeue56$elm_all_dict$AllDict$Black, _p24._1, _p24._2, _p24._3, _p24._4);
	}
};
var _eeue56$elm_all_dict$AllDict$redden = function (t) {
	var _p25 = t;
	if (_p25.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Native_Utils.crashCase(
			'AllDict',
			{
				start: {line: 486, column: 5},
				end: {line: 488, column: 69}
			},
			_p25)('can\'t make a Leaf red');
	} else {
		return A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, _eeue56$elm_all_dict$AllDict$Red, _p25._1, _p25._2, _p25._3, _p25._4);
	}
};
var _eeue56$elm_all_dict$AllDict$balance_node = function (t) {
	var assemble = function (col) {
		return function (xk) {
			return function (xv) {
				return function (yk) {
					return function (yv) {
						return function (zk) {
							return function (zv) {
								return function (a) {
									return function (b) {
										return function (c) {
											return function (d) {
												return A5(
													_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin,
													_eeue56$elm_all_dict$AllDict$lessBlack(col),
													yk,
													yv,
													A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, _eeue56$elm_all_dict$AllDict$Black, xk, xv, a, b),
													A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, _eeue56$elm_all_dict$AllDict$Black, zk, zv, c, d));
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
	if (_eeue56$elm_all_dict$AllDict$blackish(t)) {
		var _p27 = t;
		_v36_6:
		do {
			_v36_5:
			do {
				_v36_4:
				do {
					_v36_3:
					do {
						_v36_2:
						do {
							_v36_1:
							do {
								_v36_0:
								do {
									if (_p27.ctor === 'RBNode_elm_builtin') {
										if (_p27._3.ctor === 'RBNode_elm_builtin') {
											if (_p27._4.ctor === 'RBNode_elm_builtin') {
												switch (_p27._3._0.ctor) {
													case 'Red':
														switch (_p27._4._0.ctor) {
															case 'Red':
																if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																	break _v36_0;
																} else {
																	if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																		break _v36_1;
																	} else {
																		if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																			break _v36_2;
																		} else {
																			if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																				break _v36_3;
																			} else {
																				break _v36_6;
																			}
																		}
																	}
																}
															case 'NBlack':
																if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																	break _v36_0;
																} else {
																	if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																		break _v36_1;
																	} else {
																		if (((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) {
																			break _v36_4;
																		} else {
																			break _v36_6;
																		}
																	}
																}
															default:
																if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																	break _v36_0;
																} else {
																	if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																		break _v36_1;
																	} else {
																		break _v36_6;
																	}
																}
														}
													case 'NBlack':
														switch (_p27._4._0.ctor) {
															case 'Red':
																if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																	break _v36_2;
																} else {
																	if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																		break _v36_3;
																	} else {
																		if (((_p27._0.ctor === 'BBlack') && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																			break _v36_5;
																		} else {
																			break _v36_6;
																		}
																	}
																}
															case 'NBlack':
																if (_p27._0.ctor === 'BBlack') {
																	if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Black')) {
																		break _v36_4;
																	} else {
																		if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Black')) {
																			break _v36_5;
																		} else {
																			break _v36_6;
																		}
																	}
																} else {
																	break _v36_6;
																}
															default:
																if (((_p27._0.ctor === 'BBlack') && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																	break _v36_5;
																} else {
																	break _v36_6;
																}
														}
													default:
														switch (_p27._4._0.ctor) {
															case 'Red':
																if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																	break _v36_2;
																} else {
																	if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																		break _v36_3;
																	} else {
																		break _v36_6;
																	}
																}
															case 'NBlack':
																if (((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) {
																	break _v36_4;
																} else {
																	break _v36_6;
																}
															default:
																break _v36_6;
														}
												}
											} else {
												switch (_p27._3._0.ctor) {
													case 'Red':
														if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
															break _v36_0;
														} else {
															if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																break _v36_1;
															} else {
																break _v36_6;
															}
														}
													case 'NBlack':
														if (((_p27._0.ctor === 'BBlack') && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
															break _v36_5;
														} else {
															break _v36_6;
														}
													default:
														break _v36_6;
												}
											}
										} else {
											if (_p27._4.ctor === 'RBNode_elm_builtin') {
												switch (_p27._4._0.ctor) {
													case 'Red':
														if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
															break _v36_2;
														} else {
															if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																break _v36_3;
															} else {
																break _v36_6;
															}
														}
													case 'NBlack':
														if (((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) {
															break _v36_4;
														} else {
															break _v36_6;
														}
													default:
														break _v36_6;
												}
											} else {
												break _v36_6;
											}
										}
									} else {
										break _v36_6;
									}
								} while(false);
								return assemble(_p27._0)(_p27._3._3._1)(_p27._3._3._2)(_p27._3._1)(_p27._3._2)(_p27._1)(_p27._2)(_p27._3._3._3)(_p27._3._3._4)(_p27._3._4)(_p27._4);
							} while(false);
							return assemble(_p27._0)(_p27._3._1)(_p27._3._2)(_p27._3._4._1)(_p27._3._4._2)(_p27._1)(_p27._2)(_p27._3._3)(_p27._3._4._3)(_p27._3._4._4)(_p27._4);
						} while(false);
						return assemble(_p27._0)(_p27._1)(_p27._2)(_p27._4._3._1)(_p27._4._3._2)(_p27._4._1)(_p27._4._2)(_p27._3)(_p27._4._3._3)(_p27._4._3._4)(_p27._4._4);
					} while(false);
					return assemble(_p27._0)(_p27._1)(_p27._2)(_p27._4._1)(_p27._4._2)(_p27._4._4._1)(_p27._4._4._2)(_p27._3)(_p27._4._3)(_p27._4._4._3)(_p27._4._4._4);
				} while(false);
				var _p29 = _p27._4._4;
				var _p28 = _p29;
				if ((_p28.ctor === 'RBNode_elm_builtin') && (_p28._0.ctor === 'Black')) {
					return A5(
						_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin,
						_eeue56$elm_all_dict$AllDict$Black,
						_p27._4._3._1,
						_p27._4._3._2,
						A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, _eeue56$elm_all_dict$AllDict$Black, _p27._1, _p27._2, _p27._3, _p27._4._3._3),
						A5(
							_eeue56$elm_all_dict$AllDict$balance,
							_eeue56$elm_all_dict$AllDict$Black,
							_p27._4._1,
							_p27._4._2,
							_p27._4._3._4,
							_eeue56$elm_all_dict$AllDict$redden(_p29)));
				} else {
					return t;
				}
			} while(false);
			var _p31 = _p27._3._3;
			var _p30 = _p31;
			if ((_p30.ctor === 'RBNode_elm_builtin') && (_p30._0.ctor === 'Black')) {
				return A5(
					_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin,
					_eeue56$elm_all_dict$AllDict$Black,
					_p27._3._4._1,
					_p27._3._4._2,
					A5(
						_eeue56$elm_all_dict$AllDict$balance,
						_eeue56$elm_all_dict$AllDict$Black,
						_p27._3._1,
						_p27._3._2,
						_eeue56$elm_all_dict$AllDict$redden(_p31),
						_p27._3._4._3),
					A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, _eeue56$elm_all_dict$AllDict$Black, _p27._1, _p27._2, _p27._3._4._4, _p27._4));
			} else {
				return t;
			}
		} while(false);
		return t;
	} else {
		return t;
	}
};
var _eeue56$elm_all_dict$AllDict$balance = F5(
	function (c, k, v, l, r) {
		return _eeue56$elm_all_dict$AllDict$balance_node(
			A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, c, k, v, l, r));
	});
var _eeue56$elm_all_dict$AllDict$bubble = F5(
	function (c, k, v, l, r) {
		return (_eeue56$elm_all_dict$AllDict$isBBlack(l) || _eeue56$elm_all_dict$AllDict$isBBlack(r)) ? A5(
			_eeue56$elm_all_dict$AllDict$balance,
			_eeue56$elm_all_dict$AllDict$moreBlack(c),
			k,
			v,
			_eeue56$elm_all_dict$AllDict$lessBlackTree(l),
			_eeue56$elm_all_dict$AllDict$lessBlackTree(r)) : A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, c, k, v, l, r);
	});
var _eeue56$elm_all_dict$AllDict$remove_max = F5(
	function (c, k, v, l, r) {
		var _p32 = r;
		if (_p32.ctor === 'RBEmpty_elm_builtin') {
			return A3(_eeue56$elm_all_dict$AllDict$rem, c, l, r);
		} else {
			return A5(
				_eeue56$elm_all_dict$AllDict$bubble,
				c,
				k,
				v,
				l,
				A5(_eeue56$elm_all_dict$AllDict$remove_max, _p32._0, _p32._1, _p32._2, _p32._3, _p32._4));
		}
	});
var _eeue56$elm_all_dict$AllDict$rem = F3(
	function (c, l, r) {
		var _p33 = {ctor: '_Tuple2', _0: l, _1: r};
		if (_p33._0.ctor === 'RBEmpty_elm_builtin') {
			if (_p33._1.ctor === 'RBEmpty_elm_builtin') {
				var _p35 = _p33._0._1;
				var _p34 = c;
				switch (_p34.ctor) {
					case 'Red':
						return A2(_eeue56$elm_all_dict$AllDict$RBEmpty_elm_builtin, _eeue56$elm_all_dict$AllDict$LBlack, _p35);
					case 'Black':
						return A2(_eeue56$elm_all_dict$AllDict$RBEmpty_elm_builtin, _eeue56$elm_all_dict$AllDict$LBBlack, _p35);
					default:
						return _eeue56$elm_all_dict$Native_Debug.crash('cannot have bblack or nblack nodes at this point');
				}
			} else {
				var _p38 = _p33._1._0;
				var _p37 = _p33._0._0;
				var _p36 = {ctor: '_Tuple3', _0: c, _1: _p37, _2: _p38};
				if ((((_p36.ctor === '_Tuple3') && (_p36._0.ctor === 'Black')) && (_p36._1.ctor === 'LBlack')) && (_p36._2.ctor === 'Red')) {
					return A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, _eeue56$elm_all_dict$AllDict$Black, _p33._1._1, _p33._1._2, _p33._1._3, _p33._1._4);
				} else {
					return A4(
						_eeue56$elm_all_dict$AllDict$reportRemBug,
						'Black/LBlack/Red',
						c,
						_eeue56$elm_all_dict$AllDict$showLColor(_p37),
						_eeue56$elm_all_dict$AllDict$showNColor(_p38));
				}
			}
		} else {
			if (_p33._1.ctor === 'RBEmpty_elm_builtin') {
				var _p41 = _p33._1._0;
				var _p40 = _p33._0._0;
				var _p39 = {ctor: '_Tuple3', _0: c, _1: _p40, _2: _p41};
				if ((((_p39.ctor === '_Tuple3') && (_p39._0.ctor === 'Black')) && (_p39._1.ctor === 'Red')) && (_p39._2.ctor === 'LBlack')) {
					return A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, _eeue56$elm_all_dict$AllDict$Black, _p33._0._1, _p33._0._2, _p33._0._3, _p33._0._4);
				} else {
					return A4(
						_eeue56$elm_all_dict$AllDict$reportRemBug,
						'Black/Red/LBlack',
						c,
						_eeue56$elm_all_dict$AllDict$showNColor(_p40),
						_eeue56$elm_all_dict$AllDict$showLColor(_p41));
				}
			} else {
				var _p47 = _p33._0._2;
				var _p46 = _p33._0._4;
				var _p45 = _p33._0._3;
				var _p44 = _p33._0._1;
				var _p43 = _p33._0._0;
				var l_ = A5(_eeue56$elm_all_dict$AllDict$remove_max, _p43, _p44, _p47, _p45, _p46);
				var r = A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, _p33._1._0, _p33._1._1, _p33._1._2, _p33._1._3, _p33._1._4);
				var l = A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, _p43, _p44, _p47, _p45, _p46);
				var _p42 = _eeue56$elm_all_dict$AllDict$max(l);
				var k = _p42._0;
				var v = _p42._1;
				return A5(_eeue56$elm_all_dict$AllDict$bubble, c, k, v, l_, r);
			}
		}
	});
var _eeue56$elm_all_dict$AllDict$map = F2(
	function (f, dict) {
		var _p48 = dict;
		if (_p48.ctor === 'RBEmpty_elm_builtin') {
			return A2(_eeue56$elm_all_dict$AllDict$RBEmpty_elm_builtin, _p48._0, _p48._1);
		} else {
			var _p49 = _p48._1;
			return A5(
				_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin,
				_p48._0,
				_p49,
				A2(f, _p49, _p48._2),
				A2(_eeue56$elm_all_dict$AllDict$map, f, _p48._3),
				A2(_eeue56$elm_all_dict$AllDict$map, f, _p48._4));
		}
	});
var _eeue56$elm_all_dict$AllDict$Same = {ctor: 'Same'};
var _eeue56$elm_all_dict$AllDict$Remove = {ctor: 'Remove'};
var _eeue56$elm_all_dict$AllDict$Insert = {ctor: 'Insert'};
var _eeue56$elm_all_dict$AllDict$update = F3(
	function (k, alter, dict) {
		var ord = _eeue56$elm_all_dict$AllDict$getOrd(dict);
		var empty_ = _eeue56$elm_all_dict$AllDict$empty(ord);
		var up = function (dict) {
			var _p50 = dict;
			if (_p50.ctor === 'RBEmpty_elm_builtin') {
				var _p51 = alter(_elm_lang$core$Maybe$Nothing);
				if (_p51.ctor === 'Nothing') {
					return {ctor: '_Tuple2', _0: _eeue56$elm_all_dict$AllDict$Same, _1: empty_};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _eeue56$elm_all_dict$AllDict$Insert,
						_1: A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, _eeue56$elm_all_dict$AllDict$Red, k, _p51._0, empty_, empty_)
					};
				}
			} else {
				var _p62 = _p50._2;
				var _p61 = _p50._4;
				var _p60 = _p50._3;
				var _p59 = _p50._1;
				var _p58 = _p50._0;
				var _p52 = A2(
					_elm_lang$core$Basics$compare,
					ord(k),
					ord(_p59));
				switch (_p52.ctor) {
					case 'EQ':
						var _p53 = alter(
							_elm_lang$core$Maybe$Just(_p62));
						if (_p53.ctor === 'Nothing') {
							return {
								ctor: '_Tuple2',
								_0: _eeue56$elm_all_dict$AllDict$Remove,
								_1: A3(_eeue56$elm_all_dict$AllDict$rem, _p58, _p60, _p61)
							};
						} else {
							return {
								ctor: '_Tuple2',
								_0: _eeue56$elm_all_dict$AllDict$Same,
								_1: A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, _p58, _p59, _p53._0, _p60, _p61)
							};
						}
					case 'LT':
						var _p54 = up(_p60);
						var flag = _p54._0;
						var newLeft = _p54._1;
						var _p55 = flag;
						switch (_p55.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _eeue56$elm_all_dict$AllDict$Same,
									_1: A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, _p58, _p59, _p62, newLeft, _p61)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _eeue56$elm_all_dict$AllDict$Insert,
									_1: A5(_eeue56$elm_all_dict$AllDict$balance, _p58, _p59, _p62, newLeft, _p61)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _eeue56$elm_all_dict$AllDict$Remove,
									_1: A5(_eeue56$elm_all_dict$AllDict$bubble, _p58, _p59, _p62, newLeft, _p61)
								};
						}
					default:
						var _p56 = up(_p61);
						var flag = _p56._0;
						var newRight = _p56._1;
						var _p57 = flag;
						switch (_p57.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _eeue56$elm_all_dict$AllDict$Same,
									_1: A5(_eeue56$elm_all_dict$AllDict$RBNode_elm_builtin, _p58, _p59, _p62, _p60, newRight)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _eeue56$elm_all_dict$AllDict$Insert,
									_1: A5(_eeue56$elm_all_dict$AllDict$balance, _p58, _p59, _p62, _p60, newRight)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _eeue56$elm_all_dict$AllDict$Remove,
									_1: A5(_eeue56$elm_all_dict$AllDict$bubble, _p58, _p59, _p62, _p60, newRight)
								};
						}
				}
			}
		};
		var _p63 = up(dict);
		var flag = _p63._0;
		var updatedDict = _p63._1;
		var _p64 = flag;
		switch (_p64.ctor) {
			case 'Same':
				return updatedDict;
			case 'Insert':
				return _eeue56$elm_all_dict$AllDict$ensureBlackRoot(updatedDict);
			default:
				return _eeue56$elm_all_dict$AllDict$blacken(updatedDict);
		}
	});
var _eeue56$elm_all_dict$AllDict$insert = F3(
	function (key, value, dict) {
		return A3(
			_eeue56$elm_all_dict$AllDict$update,
			key,
			_elm_lang$core$Basics$always(
				_elm_lang$core$Maybe$Just(value)),
			dict);
	});
var _eeue56$elm_all_dict$AllDict$singleton = F3(
	function (ord, key, value) {
		return A3(
			_eeue56$elm_all_dict$AllDict$insert,
			key,
			value,
			_eeue56$elm_all_dict$AllDict$empty(ord));
	});
var _eeue56$elm_all_dict$AllDict$union = F2(
	function (t1, t2) {
		return A3(_eeue56$elm_all_dict$AllDict$foldl, _eeue56$elm_all_dict$AllDict$insert, t2, t1);
	});
var _eeue56$elm_all_dict$AllDict$fromList = F2(
	function (ord, assocs) {
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (_p65, dict) {
					var _p66 = _p65;
					return A3(_eeue56$elm_all_dict$AllDict$insert, _p66._0, _p66._1, dict);
				}),
			_eeue56$elm_all_dict$AllDict$empty(ord),
			assocs);
	});
var _eeue56$elm_all_dict$AllDict$filter = F2(
	function (predicate, dictionary) {
		var add = F3(
			function (key, value, dict) {
				return A2(predicate, key, value) ? A3(_eeue56$elm_all_dict$AllDict$insert, key, value, dict) : dict;
			});
		return A3(
			_eeue56$elm_all_dict$AllDict$foldl,
			add,
			_eeue56$elm_all_dict$AllDict$empty(
				_eeue56$elm_all_dict$AllDict$getOrd(dictionary)),
			dictionary);
	});
var _eeue56$elm_all_dict$AllDict$intersect = F2(
	function (t1, t2) {
		return A2(
			_eeue56$elm_all_dict$AllDict$filter,
			F2(
				function (k, _p67) {
					return A2(_eeue56$elm_all_dict$AllDict$member, k, t2);
				}),
			t1);
	});
var _eeue56$elm_all_dict$AllDict$partition = F2(
	function (predicate, dict) {
		var ord = _eeue56$elm_all_dict$AllDict$getOrd(dict);
		var add = F3(
			function (key, value, _p68) {
				var _p69 = _p68;
				var _p71 = _p69._1;
				var _p70 = _p69._0;
				return A2(predicate, key, value) ? {
					ctor: '_Tuple2',
					_0: A3(_eeue56$elm_all_dict$AllDict$insert, key, value, _p70),
					_1: _p71
				} : {
					ctor: '_Tuple2',
					_0: _p70,
					_1: A3(_eeue56$elm_all_dict$AllDict$insert, key, value, _p71)
				};
			});
		return A3(
			_eeue56$elm_all_dict$AllDict$foldl,
			add,
			{
				ctor: '_Tuple2',
				_0: _eeue56$elm_all_dict$AllDict$empty(ord),
				_1: _eeue56$elm_all_dict$AllDict$empty(ord)
			},
			dict);
	});
var _eeue56$elm_all_dict$AllDict$remove = F2(
	function (key, dict) {
		return A3(
			_eeue56$elm_all_dict$AllDict$update,
			key,
			_elm_lang$core$Basics$always(_elm_lang$core$Maybe$Nothing),
			dict);
	});
var _eeue56$elm_all_dict$AllDict$diff = F2(
	function (t1, t2) {
		return A3(
			_eeue56$elm_all_dict$AllDict$foldl,
			F3(
				function (k, v, t) {
					return A2(_eeue56$elm_all_dict$AllDict$remove, k, t);
				}),
			t1,
			t2);
	});

//import Native.List //

var _elm_lang$core$Native_Array = function() {

// A RRB-Tree has two distinct data types.
// Leaf -> "height"  is always 0
//         "table"   is an array of elements
// Node -> "height"  is always greater than 0
//         "table"   is an array of child nodes
//         "lengths" is an array of accumulated lengths of the child nodes

// M is the maximal table size. 32 seems fast. E is the allowed increase
// of search steps when concatting to find an index. Lower values will
// decrease balancing, but will increase search steps.
var M = 32;
var E = 2;

// An empty array.
var empty = {
	ctor: '_Array',
	height: 0,
	table: []
};


function get(i, array)
{
	if (i < 0 || i >= length(array))
	{
		throw new Error(
			'Index ' + i + ' is out of range. Check the length of ' +
			'your array first or use getMaybe or getWithDefault.');
	}
	return unsafeGet(i, array);
}


function unsafeGet(i, array)
{
	for (var x = array.height; x > 0; x--)
	{
		var slot = i >> (x * 5);
		while (array.lengths[slot] <= i)
		{
			slot++;
		}
		if (slot > 0)
		{
			i -= array.lengths[slot - 1];
		}
		array = array.table[slot];
	}
	return array.table[i];
}


// Sets the value at the index i. Only the nodes leading to i will get
// copied and updated.
function set(i, item, array)
{
	if (i < 0 || length(array) <= i)
	{
		return array;
	}
	return unsafeSet(i, item, array);
}


function unsafeSet(i, item, array)
{
	array = nodeCopy(array);

	if (array.height === 0)
	{
		array.table[i] = item;
	}
	else
	{
		var slot = getSlot(i, array);
		if (slot > 0)
		{
			i -= array.lengths[slot - 1];
		}
		array.table[slot] = unsafeSet(i, item, array.table[slot]);
	}
	return array;
}


function initialize(len, f)
{
	if (len <= 0)
	{
		return empty;
	}
	var h = Math.floor( Math.log(len) / Math.log(M) );
	return initialize_(f, h, 0, len);
}

function initialize_(f, h, from, to)
{
	if (h === 0)
	{
		var table = new Array((to - from) % (M + 1));
		for (var i = 0; i < table.length; i++)
		{
		  table[i] = f(from + i);
		}
		return {
			ctor: '_Array',
			height: 0,
			table: table
		};
	}

	var step = Math.pow(M, h);
	var table = new Array(Math.ceil((to - from) / step));
	var lengths = new Array(table.length);
	for (var i = 0; i < table.length; i++)
	{
		table[i] = initialize_(f, h - 1, from + (i * step), Math.min(from + ((i + 1) * step), to));
		lengths[i] = length(table[i]) + (i > 0 ? lengths[i-1] : 0);
	}
	return {
		ctor: '_Array',
		height: h,
		table: table,
		lengths: lengths
	};
}

function fromList(list)
{
	if (list.ctor === '[]')
	{
		return empty;
	}

	// Allocate M sized blocks (table) and write list elements to it.
	var table = new Array(M);
	var nodes = [];
	var i = 0;

	while (list.ctor !== '[]')
	{
		table[i] = list._0;
		list = list._1;
		i++;

		// table is full, so we can push a leaf containing it into the
		// next node.
		if (i === M)
		{
			var leaf = {
				ctor: '_Array',
				height: 0,
				table: table
			};
			fromListPush(leaf, nodes);
			table = new Array(M);
			i = 0;
		}
	}

	// Maybe there is something left on the table.
	if (i > 0)
	{
		var leaf = {
			ctor: '_Array',
			height: 0,
			table: table.splice(0, i)
		};
		fromListPush(leaf, nodes);
	}

	// Go through all of the nodes and eventually push them into higher nodes.
	for (var h = 0; h < nodes.length - 1; h++)
	{
		if (nodes[h].table.length > 0)
		{
			fromListPush(nodes[h], nodes);
		}
	}

	var head = nodes[nodes.length - 1];
	if (head.height > 0 && head.table.length === 1)
	{
		return head.table[0];
	}
	else
	{
		return head;
	}
}

// Push a node into a higher node as a child.
function fromListPush(toPush, nodes)
{
	var h = toPush.height;

	// Maybe the node on this height does not exist.
	if (nodes.length === h)
	{
		var node = {
			ctor: '_Array',
			height: h + 1,
			table: [],
			lengths: []
		};
		nodes.push(node);
	}

	nodes[h].table.push(toPush);
	var len = length(toPush);
	if (nodes[h].lengths.length > 0)
	{
		len += nodes[h].lengths[nodes[h].lengths.length - 1];
	}
	nodes[h].lengths.push(len);

	if (nodes[h].table.length === M)
	{
		fromListPush(nodes[h], nodes);
		nodes[h] = {
			ctor: '_Array',
			height: h + 1,
			table: [],
			lengths: []
		};
	}
}

// Pushes an item via push_ to the bottom right of a tree.
function push(item, a)
{
	var pushed = push_(item, a);
	if (pushed !== null)
	{
		return pushed;
	}

	var newTree = create(item, a.height);
	return siblise(a, newTree);
}

// Recursively tries to push an item to the bottom-right most
// tree possible. If there is no space left for the item,
// null will be returned.
function push_(item, a)
{
	// Handle resursion stop at leaf level.
	if (a.height === 0)
	{
		if (a.table.length < M)
		{
			var newA = {
				ctor: '_Array',
				height: 0,
				table: a.table.slice()
			};
			newA.table.push(item);
			return newA;
		}
		else
		{
		  return null;
		}
	}

	// Recursively push
	var pushed = push_(item, botRight(a));

	// There was space in the bottom right tree, so the slot will
	// be updated.
	if (pushed !== null)
	{
		var newA = nodeCopy(a);
		newA.table[newA.table.length - 1] = pushed;
		newA.lengths[newA.lengths.length - 1]++;
		return newA;
	}

	// When there was no space left, check if there is space left
	// for a new slot with a tree which contains only the item
	// at the bottom.
	if (a.table.length < M)
	{
		var newSlot = create(item, a.height - 1);
		var newA = nodeCopy(a);
		newA.table.push(newSlot);
		newA.lengths.push(newA.lengths[newA.lengths.length - 1] + length(newSlot));
		return newA;
	}
	else
	{
		return null;
	}
}

// Converts an array into a list of elements.
function toList(a)
{
	return toList_(_elm_lang$core$Native_List.Nil, a);
}

function toList_(list, a)
{
	for (var i = a.table.length - 1; i >= 0; i--)
	{
		list =
			a.height === 0
				? _elm_lang$core$Native_List.Cons(a.table[i], list)
				: toList_(list, a.table[i]);
	}
	return list;
}

// Maps a function over the elements of an array.
function map(f, a)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: new Array(a.table.length)
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths;
	}
	for (var i = 0; i < a.table.length; i++)
	{
		newA.table[i] =
			a.height === 0
				? f(a.table[i])
				: map(f, a.table[i]);
	}
	return newA;
}

// Maps a function over the elements with their index as first argument.
function indexedMap(f, a)
{
	return indexedMap_(f, a, 0);
}

function indexedMap_(f, a, from)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: new Array(a.table.length)
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths;
	}
	for (var i = 0; i < a.table.length; i++)
	{
		newA.table[i] =
			a.height === 0
				? A2(f, from + i, a.table[i])
				: indexedMap_(f, a.table[i], i == 0 ? from : from + a.lengths[i - 1]);
	}
	return newA;
}

function foldl(f, b, a)
{
	if (a.height === 0)
	{
		for (var i = 0; i < a.table.length; i++)
		{
			b = A2(f, a.table[i], b);
		}
	}
	else
	{
		for (var i = 0; i < a.table.length; i++)
		{
			b = foldl(f, b, a.table[i]);
		}
	}
	return b;
}

function foldr(f, b, a)
{
	if (a.height === 0)
	{
		for (var i = a.table.length; i--; )
		{
			b = A2(f, a.table[i], b);
		}
	}
	else
	{
		for (var i = a.table.length; i--; )
		{
			b = foldr(f, b, a.table[i]);
		}
	}
	return b;
}

// TODO: currently, it slices the right, then the left. This can be
// optimized.
function slice(from, to, a)
{
	if (from < 0)
	{
		from += length(a);
	}
	if (to < 0)
	{
		to += length(a);
	}
	return sliceLeft(from, sliceRight(to, a));
}

function sliceRight(to, a)
{
	if (to === length(a))
	{
		return a;
	}

	// Handle leaf level.
	if (a.height === 0)
	{
		var newA = { ctor:'_Array', height:0 };
		newA.table = a.table.slice(0, to);
		return newA;
	}

	// Slice the right recursively.
	var right = getSlot(to, a);
	var sliced = sliceRight(to - (right > 0 ? a.lengths[right - 1] : 0), a.table[right]);

	// Maybe the a node is not even needed, as sliced contains the whole slice.
	if (right === 0)
	{
		return sliced;
	}

	// Create new node.
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice(0, right),
		lengths: a.lengths.slice(0, right)
	};
	if (sliced.table.length > 0)
	{
		newA.table[right] = sliced;
		newA.lengths[right] = length(sliced) + (right > 0 ? newA.lengths[right - 1] : 0);
	}
	return newA;
}

function sliceLeft(from, a)
{
	if (from === 0)
	{
		return a;
	}

	// Handle leaf level.
	if (a.height === 0)
	{
		var newA = { ctor:'_Array', height:0 };
		newA.table = a.table.slice(from, a.table.length + 1);
		return newA;
	}

	// Slice the left recursively.
	var left = getSlot(from, a);
	var sliced = sliceLeft(from - (left > 0 ? a.lengths[left - 1] : 0), a.table[left]);

	// Maybe the a node is not even needed, as sliced contains the whole slice.
	if (left === a.table.length - 1)
	{
		return sliced;
	}

	// Create new node.
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice(left, a.table.length + 1),
		lengths: new Array(a.table.length - left)
	};
	newA.table[0] = sliced;
	var len = 0;
	for (var i = 0; i < newA.table.length; i++)
	{
		len += length(newA.table[i]);
		newA.lengths[i] = len;
	}

	return newA;
}

// Appends two trees.
function append(a,b)
{
	if (a.table.length === 0)
	{
		return b;
	}
	if (b.table.length === 0)
	{
		return a;
	}

	var c = append_(a, b);

	// Check if both nodes can be crunshed together.
	if (c[0].table.length + c[1].table.length <= M)
	{
		if (c[0].table.length === 0)
		{
			return c[1];
		}
		if (c[1].table.length === 0)
		{
			return c[0];
		}

		// Adjust .table and .lengths
		c[0].table = c[0].table.concat(c[1].table);
		if (c[0].height > 0)
		{
			var len = length(c[0]);
			for (var i = 0; i < c[1].lengths.length; i++)
			{
				c[1].lengths[i] += len;
			}
			c[0].lengths = c[0].lengths.concat(c[1].lengths);
		}

		return c[0];
	}

	if (c[0].height > 0)
	{
		var toRemove = calcToRemove(a, b);
		if (toRemove > E)
		{
			c = shuffle(c[0], c[1], toRemove);
		}
	}

	return siblise(c[0], c[1]);
}

// Returns an array of two nodes; right and left. One node _may_ be empty.
function append_(a, b)
{
	if (a.height === 0 && b.height === 0)
	{
		return [a, b];
	}

	if (a.height !== 1 || b.height !== 1)
	{
		if (a.height === b.height)
		{
			a = nodeCopy(a);
			b = nodeCopy(b);
			var appended = append_(botRight(a), botLeft(b));

			insertRight(a, appended[1]);
			insertLeft(b, appended[0]);
		}
		else if (a.height > b.height)
		{
			a = nodeCopy(a);
			var appended = append_(botRight(a), b);

			insertRight(a, appended[0]);
			b = parentise(appended[1], appended[1].height + 1);
		}
		else
		{
			b = nodeCopy(b);
			var appended = append_(a, botLeft(b));

			var left = appended[0].table.length === 0 ? 0 : 1;
			var right = left === 0 ? 1 : 0;
			insertLeft(b, appended[left]);
			a = parentise(appended[right], appended[right].height + 1);
		}
	}

	// Check if balancing is needed and return based on that.
	if (a.table.length === 0 || b.table.length === 0)
	{
		return [a, b];
	}

	var toRemove = calcToRemove(a, b);
	if (toRemove <= E)
	{
		return [a, b];
	}
	return shuffle(a, b, toRemove);
}

// Helperfunctions for append_. Replaces a child node at the side of the parent.
function insertRight(parent, node)
{
	var index = parent.table.length - 1;
	parent.table[index] = node;
	parent.lengths[index] = length(node);
	parent.lengths[index] += index > 0 ? parent.lengths[index - 1] : 0;
}

function insertLeft(parent, node)
{
	if (node.table.length > 0)
	{
		parent.table[0] = node;
		parent.lengths[0] = length(node);

		var len = length(parent.table[0]);
		for (var i = 1; i < parent.lengths.length; i++)
		{
			len += length(parent.table[i]);
			parent.lengths[i] = len;
		}
	}
	else
	{
		parent.table.shift();
		for (var i = 1; i < parent.lengths.length; i++)
		{
			parent.lengths[i] = parent.lengths[i] - parent.lengths[0];
		}
		parent.lengths.shift();
	}
}

// Returns the extra search steps for E. Refer to the paper.
function calcToRemove(a, b)
{
	var subLengths = 0;
	for (var i = 0; i < a.table.length; i++)
	{
		subLengths += a.table[i].table.length;
	}
	for (var i = 0; i < b.table.length; i++)
	{
		subLengths += b.table[i].table.length;
	}

	var toRemove = a.table.length + b.table.length;
	return toRemove - (Math.floor((subLengths - 1) / M) + 1);
}

// get2, set2 and saveSlot are helpers for accessing elements over two arrays.
function get2(a, b, index)
{
	return index < a.length
		? a[index]
		: b[index - a.length];
}

function set2(a, b, index, value)
{
	if (index < a.length)
	{
		a[index] = value;
	}
	else
	{
		b[index - a.length] = value;
	}
}

function saveSlot(a, b, index, slot)
{
	set2(a.table, b.table, index, slot);

	var l = (index === 0 || index === a.lengths.length)
		? 0
		: get2(a.lengths, a.lengths, index - 1);

	set2(a.lengths, b.lengths, index, l + length(slot));
}

// Creates a node or leaf with a given length at their arrays for perfomance.
// Is only used by shuffle.
function createNode(h, length)
{
	if (length < 0)
	{
		length = 0;
	}
	var a = {
		ctor: '_Array',
		height: h,
		table: new Array(length)
	};
	if (h > 0)
	{
		a.lengths = new Array(length);
	}
	return a;
}

// Returns an array of two balanced nodes.
function shuffle(a, b, toRemove)
{
	var newA = createNode(a.height, Math.min(M, a.table.length + b.table.length - toRemove));
	var newB = createNode(a.height, newA.table.length - (a.table.length + b.table.length - toRemove));

	// Skip the slots with size M. More precise: copy the slot references
	// to the new node
	var read = 0;
	while (get2(a.table, b.table, read).table.length % M === 0)
	{
		set2(newA.table, newB.table, read, get2(a.table, b.table, read));
		set2(newA.lengths, newB.lengths, read, get2(a.lengths, b.lengths, read));
		read++;
	}

	// Pulling items from left to right, caching in a slot before writing
	// it into the new nodes.
	var write = read;
	var slot = new createNode(a.height - 1, 0);
	var from = 0;

	// If the current slot is still containing data, then there will be at
	// least one more write, so we do not break this loop yet.
	while (read - write - (slot.table.length > 0 ? 1 : 0) < toRemove)
	{
		// Find out the max possible items for copying.
		var source = get2(a.table, b.table, read);
		var to = Math.min(M - slot.table.length, source.table.length);

		// Copy and adjust size table.
		slot.table = slot.table.concat(source.table.slice(from, to));
		if (slot.height > 0)
		{
			var len = slot.lengths.length;
			for (var i = len; i < len + to - from; i++)
			{
				slot.lengths[i] = length(slot.table[i]);
				slot.lengths[i] += (i > 0 ? slot.lengths[i - 1] : 0);
			}
		}

		from += to;

		// Only proceed to next slots[i] if the current one was
		// fully copied.
		if (source.table.length <= to)
		{
			read++; from = 0;
		}

		// Only create a new slot if the current one is filled up.
		if (slot.table.length === M)
		{
			saveSlot(newA, newB, write, slot);
			slot = createNode(a.height - 1, 0);
			write++;
		}
	}

	// Cleanup after the loop. Copy the last slot into the new nodes.
	if (slot.table.length > 0)
	{
		saveSlot(newA, newB, write, slot);
		write++;
	}

	// Shift the untouched slots to the left
	while (read < a.table.length + b.table.length )
	{
		saveSlot(newA, newB, write, get2(a.table, b.table, read));
		read++;
		write++;
	}

	return [newA, newB];
}

// Navigation functions
function botRight(a)
{
	return a.table[a.table.length - 1];
}
function botLeft(a)
{
	return a.table[0];
}

// Copies a node for updating. Note that you should not use this if
// only updating only one of "table" or "lengths" for performance reasons.
function nodeCopy(a)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice()
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths.slice();
	}
	return newA;
}

// Returns how many items are in the tree.
function length(array)
{
	if (array.height === 0)
	{
		return array.table.length;
	}
	else
	{
		return array.lengths[array.lengths.length - 1];
	}
}

// Calculates in which slot of "table" the item probably is, then
// find the exact slot via forward searching in  "lengths". Returns the index.
function getSlot(i, a)
{
	var slot = i >> (5 * a.height);
	while (a.lengths[slot] <= i)
	{
		slot++;
	}
	return slot;
}

// Recursively creates a tree with a given height containing
// only the given item.
function create(item, h)
{
	if (h === 0)
	{
		return {
			ctor: '_Array',
			height: 0,
			table: [item]
		};
	}
	return {
		ctor: '_Array',
		height: h,
		table: [create(item, h - 1)],
		lengths: [1]
	};
}

// Recursively creates a tree that contains the given tree.
function parentise(tree, h)
{
	if (h === tree.height)
	{
		return tree;
	}

	return {
		ctor: '_Array',
		height: h,
		table: [parentise(tree, h - 1)],
		lengths: [length(tree)]
	};
}

// Emphasizes blood brotherhood beneath two trees.
function siblise(a, b)
{
	return {
		ctor: '_Array',
		height: a.height + 1,
		table: [a, b],
		lengths: [length(a), length(a) + length(b)]
	};
}

function toJSArray(a)
{
	var jsArray = new Array(length(a));
	toJSArray_(jsArray, 0, a);
	return jsArray;
}

function toJSArray_(jsArray, i, a)
{
	for (var t = 0; t < a.table.length; t++)
	{
		if (a.height === 0)
		{
			jsArray[i + t] = a.table[t];
		}
		else
		{
			var inc = t === 0 ? 0 : a.lengths[t - 1];
			toJSArray_(jsArray, i + inc, a.table[t]);
		}
	}
}

function fromJSArray(jsArray)
{
	if (jsArray.length === 0)
	{
		return empty;
	}
	var h = Math.floor(Math.log(jsArray.length) / Math.log(M));
	return fromJSArray_(jsArray, h, 0, jsArray.length);
}

function fromJSArray_(jsArray, h, from, to)
{
	if (h === 0)
	{
		return {
			ctor: '_Array',
			height: 0,
			table: jsArray.slice(from, to)
		};
	}

	var step = Math.pow(M, h);
	var table = new Array(Math.ceil((to - from) / step));
	var lengths = new Array(table.length);
	for (var i = 0; i < table.length; i++)
	{
		table[i] = fromJSArray_(jsArray, h - 1, from + (i * step), Math.min(from + ((i + 1) * step), to));
		lengths[i] = length(table[i]) + (i > 0 ? lengths[i - 1] : 0);
	}
	return {
		ctor: '_Array',
		height: h,
		table: table,
		lengths: lengths
	};
}

return {
	empty: empty,
	fromList: fromList,
	toList: toList,
	initialize: F2(initialize),
	append: F2(append),
	push: F2(push),
	slice: F3(slice),
	get: F2(get),
	set: F3(set),
	map: F2(map),
	indexedMap: F2(indexedMap),
	foldl: F3(foldl),
	foldr: F3(foldr),
	length: length,

	toJSArray: toJSArray,
	fromJSArray: fromJSArray
};

}();
var _elm_lang$core$Array$append = _elm_lang$core$Native_Array.append;
var _elm_lang$core$Array$length = _elm_lang$core$Native_Array.length;
var _elm_lang$core$Array$isEmpty = function (array) {
	return _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$Array$length(array),
		0);
};
var _elm_lang$core$Array$slice = _elm_lang$core$Native_Array.slice;
var _elm_lang$core$Array$set = _elm_lang$core$Native_Array.set;
var _elm_lang$core$Array$get = F2(
	function (i, array) {
		return ((_elm_lang$core$Native_Utils.cmp(0, i) < 1) && (_elm_lang$core$Native_Utils.cmp(
			i,
			_elm_lang$core$Native_Array.length(array)) < 0)) ? _elm_lang$core$Maybe$Just(
			A2(_elm_lang$core$Native_Array.get, i, array)) : _elm_lang$core$Maybe$Nothing;
	});
var _elm_lang$core$Array$push = _elm_lang$core$Native_Array.push;
var _elm_lang$core$Array$empty = _elm_lang$core$Native_Array.empty;
var _elm_lang$core$Array$filter = F2(
	function (isOkay, arr) {
		var update = F2(
			function (x, xs) {
				return isOkay(x) ? A2(_elm_lang$core$Native_Array.push, x, xs) : xs;
			});
		return A3(_elm_lang$core$Native_Array.foldl, update, _elm_lang$core$Native_Array.empty, arr);
	});
var _elm_lang$core$Array$foldr = _elm_lang$core$Native_Array.foldr;
var _elm_lang$core$Array$foldl = _elm_lang$core$Native_Array.foldl;
var _elm_lang$core$Array$indexedMap = _elm_lang$core$Native_Array.indexedMap;
var _elm_lang$core$Array$map = _elm_lang$core$Native_Array.map;
var _elm_lang$core$Array$toIndexedList = function (array) {
	return A3(
		_elm_lang$core$List$map2,
		F2(
			function (v0, v1) {
				return {ctor: '_Tuple2', _0: v0, _1: v1};
			}),
		A2(
			_elm_lang$core$List$range,
			0,
			_elm_lang$core$Native_Array.length(array) - 1),
		_elm_lang$core$Native_Array.toList(array));
};
var _elm_lang$core$Array$toList = _elm_lang$core$Native_Array.toList;
var _elm_lang$core$Array$fromList = _elm_lang$core$Native_Array.fromList;
var _elm_lang$core$Array$initialize = _elm_lang$core$Native_Array.initialize;
var _elm_lang$core$Array$repeat = F2(
	function (n, e) {
		return A2(
			_elm_lang$core$Array$initialize,
			n,
			_elm_lang$core$Basics$always(e));
	});
var _elm_lang$core$Array$Array = {ctor: 'Array'};

//import Maybe, Native.Array, Native.List, Native.Utils, Result //

var _elm_lang$core$Native_Json = function() {


// CORE DECODERS

function succeed(msg)
{
	return {
		ctor: '<decoder>',
		tag: 'succeed',
		msg: msg
	};
}

function fail(msg)
{
	return {
		ctor: '<decoder>',
		tag: 'fail',
		msg: msg
	};
}

function decodePrimitive(tag)
{
	return {
		ctor: '<decoder>',
		tag: tag
	};
}

function decodeContainer(tag, decoder)
{
	return {
		ctor: '<decoder>',
		tag: tag,
		decoder: decoder
	};
}

function decodeNull(value)
{
	return {
		ctor: '<decoder>',
		tag: 'null',
		value: value
	};
}

function decodeField(field, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'field',
		field: field,
		decoder: decoder
	};
}

function decodeIndex(index, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'index',
		index: index,
		decoder: decoder
	};
}

function decodeKeyValuePairs(decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'key-value',
		decoder: decoder
	};
}

function mapMany(f, decoders)
{
	return {
		ctor: '<decoder>',
		tag: 'map-many',
		func: f,
		decoders: decoders
	};
}

function andThen(callback, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'andThen',
		decoder: decoder,
		callback: callback
	};
}

function oneOf(decoders)
{
	return {
		ctor: '<decoder>',
		tag: 'oneOf',
		decoders: decoders
	};
}


// DECODING OBJECTS

function map1(f, d1)
{
	return mapMany(f, [d1]);
}

function map2(f, d1, d2)
{
	return mapMany(f, [d1, d2]);
}

function map3(f, d1, d2, d3)
{
	return mapMany(f, [d1, d2, d3]);
}

function map4(f, d1, d2, d3, d4)
{
	return mapMany(f, [d1, d2, d3, d4]);
}

function map5(f, d1, d2, d3, d4, d5)
{
	return mapMany(f, [d1, d2, d3, d4, d5]);
}

function map6(f, d1, d2, d3, d4, d5, d6)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6]);
}

function map7(f, d1, d2, d3, d4, d5, d6, d7)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
}

function map8(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
}


// DECODE HELPERS

function ok(value)
{
	return { tag: 'ok', value: value };
}

function badPrimitive(type, value)
{
	return { tag: 'primitive', type: type, value: value };
}

function badIndex(index, nestedProblems)
{
	return { tag: 'index', index: index, rest: nestedProblems };
}

function badField(field, nestedProblems)
{
	return { tag: 'field', field: field, rest: nestedProblems };
}

function badIndex(index, nestedProblems)
{
	return { tag: 'index', index: index, rest: nestedProblems };
}

function badOneOf(problems)
{
	return { tag: 'oneOf', problems: problems };
}

function bad(msg)
{
	return { tag: 'fail', msg: msg };
}

function badToString(problem)
{
	var context = '_';
	while (problem)
	{
		switch (problem.tag)
		{
			case 'primitive':
				return 'Expecting ' + problem.type
					+ (context === '_' ? '' : ' at ' + context)
					+ ' but instead got: ' + jsToString(problem.value);

			case 'index':
				context += '[' + problem.index + ']';
				problem = problem.rest;
				break;

			case 'field':
				context += '.' + problem.field;
				problem = problem.rest;
				break;

			case 'oneOf':
				var problems = problem.problems;
				for (var i = 0; i < problems.length; i++)
				{
					problems[i] = badToString(problems[i]);
				}
				return 'I ran into the following problems'
					+ (context === '_' ? '' : ' at ' + context)
					+ ':\n\n' + problems.join('\n');

			case 'fail':
				return 'I ran into a `fail` decoder'
					+ (context === '_' ? '' : ' at ' + context)
					+ ': ' + problem.msg;
		}
	}
}

function jsToString(value)
{
	return value === undefined
		? 'undefined'
		: JSON.stringify(value);
}


// DECODE

function runOnString(decoder, string)
{
	var json;
	try
	{
		json = JSON.parse(string);
	}
	catch (e)
	{
		return _elm_lang$core$Result$Err('Given an invalid JSON: ' + e.message);
	}
	return run(decoder, json);
}

function run(decoder, value)
{
	var result = runHelp(decoder, value);
	return (result.tag === 'ok')
		? _elm_lang$core$Result$Ok(result.value)
		: _elm_lang$core$Result$Err(badToString(result));
}

function runHelp(decoder, value)
{
	switch (decoder.tag)
	{
		case 'bool':
			return (typeof value === 'boolean')
				? ok(value)
				: badPrimitive('a Bool', value);

		case 'int':
			if (typeof value !== 'number') {
				return badPrimitive('an Int', value);
			}

			if (-2147483647 < value && value < 2147483647 && (value | 0) === value) {
				return ok(value);
			}

			if (isFinite(value) && !(value % 1)) {
				return ok(value);
			}

			return badPrimitive('an Int', value);

		case 'float':
			return (typeof value === 'number')
				? ok(value)
				: badPrimitive('a Float', value);

		case 'string':
			return (typeof value === 'string')
				? ok(value)
				: (value instanceof String)
					? ok(value + '')
					: badPrimitive('a String', value);

		case 'null':
			return (value === null)
				? ok(decoder.value)
				: badPrimitive('null', value);

		case 'value':
			return ok(value);

		case 'list':
			if (!(value instanceof Array))
			{
				return badPrimitive('a List', value);
			}

			var list = _elm_lang$core$Native_List.Nil;
			for (var i = value.length; i--; )
			{
				var result = runHelp(decoder.decoder, value[i]);
				if (result.tag !== 'ok')
				{
					return badIndex(i, result)
				}
				list = _elm_lang$core$Native_List.Cons(result.value, list);
			}
			return ok(list);

		case 'array':
			if (!(value instanceof Array))
			{
				return badPrimitive('an Array', value);
			}

			var len = value.length;
			var array = new Array(len);
			for (var i = len; i--; )
			{
				var result = runHelp(decoder.decoder, value[i]);
				if (result.tag !== 'ok')
				{
					return badIndex(i, result);
				}
				array[i] = result.value;
			}
			return ok(_elm_lang$core$Native_Array.fromJSArray(array));

		case 'maybe':
			var result = runHelp(decoder.decoder, value);
			return (result.tag === 'ok')
				? ok(_elm_lang$core$Maybe$Just(result.value))
				: ok(_elm_lang$core$Maybe$Nothing);

		case 'field':
			var field = decoder.field;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return badPrimitive('an object with a field named `' + field + '`', value);
			}

			var result = runHelp(decoder.decoder, value[field]);
			return (result.tag === 'ok') ? result : badField(field, result);

		case 'index':
			var index = decoder.index;
			if (!(value instanceof Array))
			{
				return badPrimitive('an array', value);
			}
			if (index >= value.length)
			{
				return badPrimitive('a longer array. Need index ' + index + ' but there are only ' + value.length + ' entries', value);
			}

			var result = runHelp(decoder.decoder, value[index]);
			return (result.tag === 'ok') ? result : badIndex(index, result);

		case 'key-value':
			if (typeof value !== 'object' || value === null || value instanceof Array)
			{
				return badPrimitive('an object', value);
			}

			var keyValuePairs = _elm_lang$core$Native_List.Nil;
			for (var key in value)
			{
				var result = runHelp(decoder.decoder, value[key]);
				if (result.tag !== 'ok')
				{
					return badField(key, result);
				}
				var pair = _elm_lang$core$Native_Utils.Tuple2(key, result.value);
				keyValuePairs = _elm_lang$core$Native_List.Cons(pair, keyValuePairs);
			}
			return ok(keyValuePairs);

		case 'map-many':
			var answer = decoder.func;
			var decoders = decoder.decoders;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = runHelp(decoders[i], value);
				if (result.tag !== 'ok')
				{
					return result;
				}
				answer = answer(result.value);
			}
			return ok(answer);

		case 'andThen':
			var result = runHelp(decoder.decoder, value);
			return (result.tag !== 'ok')
				? result
				: runHelp(decoder.callback(result.value), value);

		case 'oneOf':
			var errors = [];
			var temp = decoder.decoders;
			while (temp.ctor !== '[]')
			{
				var result = runHelp(temp._0, value);

				if (result.tag === 'ok')
				{
					return result;
				}

				errors.push(result);

				temp = temp._1;
			}
			return badOneOf(errors);

		case 'fail':
			return bad(decoder.msg);

		case 'succeed':
			return ok(decoder.msg);
	}
}


// EQUALITY

function equality(a, b)
{
	if (a === b)
	{
		return true;
	}

	if (a.tag !== b.tag)
	{
		return false;
	}

	switch (a.tag)
	{
		case 'succeed':
		case 'fail':
			return a.msg === b.msg;

		case 'bool':
		case 'int':
		case 'float':
		case 'string':
		case 'value':
			return true;

		case 'null':
			return a.value === b.value;

		case 'list':
		case 'array':
		case 'maybe':
		case 'key-value':
			return equality(a.decoder, b.decoder);

		case 'field':
			return a.field === b.field && equality(a.decoder, b.decoder);

		case 'index':
			return a.index === b.index && equality(a.decoder, b.decoder);

		case 'map-many':
			if (a.func !== b.func)
			{
				return false;
			}
			return listEquality(a.decoders, b.decoders);

		case 'andThen':
			return a.callback === b.callback && equality(a.decoder, b.decoder);

		case 'oneOf':
			return listEquality(a.decoders, b.decoders);
	}
}

function listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

function encode(indentLevel, value)
{
	return JSON.stringify(value, null, indentLevel);
}

function identity(value)
{
	return value;
}

function encodeObject(keyValuePairs)
{
	var obj = {};
	while (keyValuePairs.ctor !== '[]')
	{
		var pair = keyValuePairs._0;
		obj[pair._0] = pair._1;
		keyValuePairs = keyValuePairs._1;
	}
	return obj;
}

return {
	encode: F2(encode),
	runOnString: F2(runOnString),
	run: F2(run),

	decodeNull: decodeNull,
	decodePrimitive: decodePrimitive,
	decodeContainer: F2(decodeContainer),

	decodeField: F2(decodeField),
	decodeIndex: F2(decodeIndex),

	map1: F2(map1),
	map2: F3(map2),
	map3: F4(map3),
	map4: F5(map4),
	map5: F6(map5),
	map6: F7(map6),
	map7: F8(map7),
	map8: F9(map8),
	decodeKeyValuePairs: decodeKeyValuePairs,

	andThen: F2(andThen),
	fail: fail,
	succeed: succeed,
	oneOf: oneOf,

	identity: identity,
	encodeNull: null,
	encodeArray: _elm_lang$core$Native_Array.toJSArray,
	encodeList: _elm_lang$core$Native_List.toArray,
	encodeObject: encodeObject,

	equality: equality
};

}();

var _elm_lang$core$Json_Encode$list = _elm_lang$core$Native_Json.encodeList;
var _elm_lang$core$Json_Encode$array = _elm_lang$core$Native_Json.encodeArray;
var _elm_lang$core$Json_Encode$object = _elm_lang$core$Native_Json.encodeObject;
var _elm_lang$core$Json_Encode$null = _elm_lang$core$Native_Json.encodeNull;
var _elm_lang$core$Json_Encode$bool = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$float = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$int = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$string = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$encode = _elm_lang$core$Native_Json.encode;
var _elm_lang$core$Json_Encode$Value = {ctor: 'Value'};

var _elm_lang$core$Json_Decode$null = _elm_lang$core$Native_Json.decodeNull;
var _elm_lang$core$Json_Decode$value = _elm_lang$core$Native_Json.decodePrimitive('value');
var _elm_lang$core$Json_Decode$andThen = _elm_lang$core$Native_Json.andThen;
var _elm_lang$core$Json_Decode$fail = _elm_lang$core$Native_Json.fail;
var _elm_lang$core$Json_Decode$succeed = _elm_lang$core$Native_Json.succeed;
var _elm_lang$core$Json_Decode$lazy = function (thunk) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		thunk,
		_elm_lang$core$Json_Decode$succeed(
			{ctor: '_Tuple0'}));
};
var _elm_lang$core$Json_Decode$decodeValue = _elm_lang$core$Native_Json.run;
var _elm_lang$core$Json_Decode$decodeString = _elm_lang$core$Native_Json.runOnString;
var _elm_lang$core$Json_Decode$map8 = _elm_lang$core$Native_Json.map8;
var _elm_lang$core$Json_Decode$map7 = _elm_lang$core$Native_Json.map7;
var _elm_lang$core$Json_Decode$map6 = _elm_lang$core$Native_Json.map6;
var _elm_lang$core$Json_Decode$map5 = _elm_lang$core$Native_Json.map5;
var _elm_lang$core$Json_Decode$map4 = _elm_lang$core$Native_Json.map4;
var _elm_lang$core$Json_Decode$map3 = _elm_lang$core$Native_Json.map3;
var _elm_lang$core$Json_Decode$map2 = _elm_lang$core$Native_Json.map2;
var _elm_lang$core$Json_Decode$map = _elm_lang$core$Native_Json.map1;
var _elm_lang$core$Json_Decode$oneOf = _elm_lang$core$Native_Json.oneOf;
var _elm_lang$core$Json_Decode$maybe = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'maybe', decoder);
};
var _elm_lang$core$Json_Decode$index = _elm_lang$core$Native_Json.decodeIndex;
var _elm_lang$core$Json_Decode$field = _elm_lang$core$Native_Json.decodeField;
var _elm_lang$core$Json_Decode$at = F2(
	function (fields, decoder) {
		return A3(_elm_lang$core$List$foldr, _elm_lang$core$Json_Decode$field, decoder, fields);
	});
var _elm_lang$core$Json_Decode$keyValuePairs = _elm_lang$core$Native_Json.decodeKeyValuePairs;
var _elm_lang$core$Json_Decode$dict = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$map,
		_elm_lang$core$Dict$fromList,
		_elm_lang$core$Json_Decode$keyValuePairs(decoder));
};
var _elm_lang$core$Json_Decode$array = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'array', decoder);
};
var _elm_lang$core$Json_Decode$list = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'list', decoder);
};
var _elm_lang$core$Json_Decode$nullable = function (decoder) {
	return _elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, decoder),
				_1: {ctor: '[]'}
			}
		});
};
var _elm_lang$core$Json_Decode$float = _elm_lang$core$Native_Json.decodePrimitive('float');
var _elm_lang$core$Json_Decode$int = _elm_lang$core$Native_Json.decodePrimitive('int');
var _elm_lang$core$Json_Decode$bool = _elm_lang$core$Native_Json.decodePrimitive('bool');
var _elm_lang$core$Json_Decode$string = _elm_lang$core$Native_Json.decodePrimitive('string');
var _elm_lang$core$Json_Decode$Decoder = {ctor: 'Decoder'};

var _elm_lang$core$Set$foldr = F3(
	function (f, b, _p0) {
		var _p1 = _p0;
		return A3(
			_elm_lang$core$Dict$foldr,
			F3(
				function (k, _p2, b) {
					return A2(f, k, b);
				}),
			b,
			_p1._0);
	});
var _elm_lang$core$Set$foldl = F3(
	function (f, b, _p3) {
		var _p4 = _p3;
		return A3(
			_elm_lang$core$Dict$foldl,
			F3(
				function (k, _p5, b) {
					return A2(f, k, b);
				}),
			b,
			_p4._0);
	});
var _elm_lang$core$Set$toList = function (_p6) {
	var _p7 = _p6;
	return _elm_lang$core$Dict$keys(_p7._0);
};
var _elm_lang$core$Set$size = function (_p8) {
	var _p9 = _p8;
	return _elm_lang$core$Dict$size(_p9._0);
};
var _elm_lang$core$Set$member = F2(
	function (k, _p10) {
		var _p11 = _p10;
		return A2(_elm_lang$core$Dict$member, k, _p11._0);
	});
var _elm_lang$core$Set$isEmpty = function (_p12) {
	var _p13 = _p12;
	return _elm_lang$core$Dict$isEmpty(_p13._0);
};
var _elm_lang$core$Set$Set_elm_builtin = function (a) {
	return {ctor: 'Set_elm_builtin', _0: a};
};
var _elm_lang$core$Set$empty = _elm_lang$core$Set$Set_elm_builtin(_elm_lang$core$Dict$empty);
var _elm_lang$core$Set$singleton = function (k) {
	return _elm_lang$core$Set$Set_elm_builtin(
		A2(
			_elm_lang$core$Dict$singleton,
			k,
			{ctor: '_Tuple0'}));
};
var _elm_lang$core$Set$insert = F2(
	function (k, _p14) {
		var _p15 = _p14;
		return _elm_lang$core$Set$Set_elm_builtin(
			A3(
				_elm_lang$core$Dict$insert,
				k,
				{ctor: '_Tuple0'},
				_p15._0));
	});
var _elm_lang$core$Set$fromList = function (xs) {
	return A3(_elm_lang$core$List$foldl, _elm_lang$core$Set$insert, _elm_lang$core$Set$empty, xs);
};
var _elm_lang$core$Set$map = F2(
	function (f, s) {
		return _elm_lang$core$Set$fromList(
			A2(
				_elm_lang$core$List$map,
				f,
				_elm_lang$core$Set$toList(s)));
	});
var _elm_lang$core$Set$remove = F2(
	function (k, _p16) {
		var _p17 = _p16;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$remove, k, _p17._0));
	});
var _elm_lang$core$Set$union = F2(
	function (_p19, _p18) {
		var _p20 = _p19;
		var _p21 = _p18;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$union, _p20._0, _p21._0));
	});
var _elm_lang$core$Set$intersect = F2(
	function (_p23, _p22) {
		var _p24 = _p23;
		var _p25 = _p22;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$intersect, _p24._0, _p25._0));
	});
var _elm_lang$core$Set$diff = F2(
	function (_p27, _p26) {
		var _p28 = _p27;
		var _p29 = _p26;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$diff, _p28._0, _p29._0));
	});
var _elm_lang$core$Set$filter = F2(
	function (p, _p30) {
		var _p31 = _p30;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(
				_elm_lang$core$Dict$filter,
				F2(
					function (k, _p32) {
						return p(k);
					}),
				_p31._0));
	});
var _elm_lang$core$Set$partition = F2(
	function (p, _p33) {
		var _p34 = _p33;
		var _p35 = A2(
			_elm_lang$core$Dict$partition,
			F2(
				function (k, _p36) {
					return p(k);
				}),
			_p34._0);
		var p1 = _p35._0;
		var p2 = _p35._1;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Set$Set_elm_builtin(p1),
			_1: _elm_lang$core$Set$Set_elm_builtin(p2)
		};
	});

var _elm_community$list_extra$List_Extra$greedyGroupsOfWithStep = F3(
	function (size, step, xs) {
		var okayXs = _elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(xs),
			0) > 0;
		var okayArgs = (_elm_lang$core$Native_Utils.cmp(size, 0) > 0) && (_elm_lang$core$Native_Utils.cmp(step, 0) > 0);
		var xs_ = A2(_elm_lang$core$List$drop, step, xs);
		var group = A2(_elm_lang$core$List$take, size, xs);
		return (okayArgs && okayXs) ? {
			ctor: '::',
			_0: group,
			_1: A3(_elm_community$list_extra$List_Extra$greedyGroupsOfWithStep, size, step, xs_)
		} : {ctor: '[]'};
	});
var _elm_community$list_extra$List_Extra$greedyGroupsOf = F2(
	function (size, xs) {
		return A3(_elm_community$list_extra$List_Extra$greedyGroupsOfWithStep, size, size, xs);
	});
var _elm_community$list_extra$List_Extra$groupsOfWithStep = F3(
	function (size, step, xs) {
		var okayArgs = (_elm_lang$core$Native_Utils.cmp(size, 0) > 0) && (_elm_lang$core$Native_Utils.cmp(step, 0) > 0);
		var xs_ = A2(_elm_lang$core$List$drop, step, xs);
		var group = A2(_elm_lang$core$List$take, size, xs);
		var okayLength = _elm_lang$core$Native_Utils.eq(
			size,
			_elm_lang$core$List$length(group));
		return (okayArgs && okayLength) ? {
			ctor: '::',
			_0: group,
			_1: A3(_elm_community$list_extra$List_Extra$groupsOfWithStep, size, step, xs_)
		} : {ctor: '[]'};
	});
var _elm_community$list_extra$List_Extra$groupsOf = F2(
	function (size, xs) {
		return A3(_elm_community$list_extra$List_Extra$groupsOfWithStep, size, size, xs);
	});
var _elm_community$list_extra$List_Extra$zip5 = _elm_lang$core$List$map5(
	F5(
		function (v0, v1, v2, v3, v4) {
			return {ctor: '_Tuple5', _0: v0, _1: v1, _2: v2, _3: v3, _4: v4};
		}));
var _elm_community$list_extra$List_Extra$zip4 = _elm_lang$core$List$map4(
	F4(
		function (v0, v1, v2, v3) {
			return {ctor: '_Tuple4', _0: v0, _1: v1, _2: v2, _3: v3};
		}));
var _elm_community$list_extra$List_Extra$zip3 = _elm_lang$core$List$map3(
	F3(
		function (v0, v1, v2) {
			return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
		}));
var _elm_community$list_extra$List_Extra$zip = _elm_lang$core$List$map2(
	F2(
		function (v0, v1) {
			return {ctor: '_Tuple2', _0: v0, _1: v1};
		}));
var _elm_community$list_extra$List_Extra$isSubsequenceOf = F2(
	function (subseq, list) {
		isSubsequenceOf:
		while (true) {
			var _p0 = {ctor: '_Tuple2', _0: subseq, _1: list};
			if (_p0._0.ctor === '[]') {
				return true;
			} else {
				if (_p0._1.ctor === '[]') {
					return false;
				} else {
					var _p1 = _p0._1._1;
					if (_elm_lang$core$Native_Utils.eq(_p0._0._0, _p0._1._0)) {
						var _v1 = _p0._0._1,
							_v2 = _p1;
						subseq = _v1;
						list = _v2;
						continue isSubsequenceOf;
					} else {
						var _v3 = subseq,
							_v4 = _p1;
						subseq = _v3;
						list = _v4;
						continue isSubsequenceOf;
					}
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$isPrefixOf = F2(
	function (prefix, xs) {
		var _p2 = {ctor: '_Tuple2', _0: prefix, _1: xs};
		if (_p2._0.ctor === '[]') {
			return true;
		} else {
			if (_p2._1.ctor === '[]') {
				return false;
			} else {
				return _elm_lang$core$Native_Utils.eq(_p2._0._0, _p2._1._0) && A2(_elm_community$list_extra$List_Extra$isPrefixOf, _p2._0._1, _p2._1._1);
			}
		}
	});
var _elm_community$list_extra$List_Extra$isSuffixOf = F2(
	function (suffix, xs) {
		return A2(
			_elm_community$list_extra$List_Extra$isPrefixOf,
			_elm_lang$core$List$reverse(suffix),
			_elm_lang$core$List$reverse(xs));
	});
var _elm_community$list_extra$List_Extra$isInfixOfHelp = F3(
	function (infixHead, infixTail, list) {
		isInfixOfHelp:
		while (true) {
			var _p3 = list;
			if (_p3.ctor === '[]') {
				return false;
			} else {
				var _p4 = _p3._1;
				if (_elm_lang$core$Native_Utils.eq(_p3._0, infixHead)) {
					return A2(_elm_community$list_extra$List_Extra$isPrefixOf, infixTail, _p4);
				} else {
					var _v7 = infixHead,
						_v8 = infixTail,
						_v9 = _p4;
					infixHead = _v7;
					infixTail = _v8;
					list = _v9;
					continue isInfixOfHelp;
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$isInfixOf = F2(
	function (infixList, list) {
		var _p5 = infixList;
		if (_p5.ctor === '[]') {
			return true;
		} else {
			return A3(_elm_community$list_extra$List_Extra$isInfixOfHelp, _p5._0, _p5._1, list);
		}
	});
var _elm_community$list_extra$List_Extra$selectSplit = function (xs) {
	var _p6 = xs;
	if (_p6.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		var _p10 = _p6._1;
		var _p9 = _p6._0;
		return {
			ctor: '::',
			_0: {
				ctor: '_Tuple3',
				_0: {ctor: '[]'},
				_1: _p9,
				_2: _p10
			},
			_1: A2(
				_elm_lang$core$List$map,
				function (_p7) {
					var _p8 = _p7;
					return {
						ctor: '_Tuple3',
						_0: {ctor: '::', _0: _p9, _1: _p8._0},
						_1: _p8._1,
						_2: _p8._2
					};
				},
				_elm_community$list_extra$List_Extra$selectSplit(_p10))
		};
	}
};
var _elm_community$list_extra$List_Extra$select = function (xs) {
	var _p11 = xs;
	if (_p11.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		var _p15 = _p11._1;
		var _p14 = _p11._0;
		return {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: _p14, _1: _p15},
			_1: A2(
				_elm_lang$core$List$map,
				function (_p12) {
					var _p13 = _p12;
					return {
						ctor: '_Tuple2',
						_0: _p13._0,
						_1: {ctor: '::', _0: _p14, _1: _p13._1}
					};
				},
				_elm_community$list_extra$List_Extra$select(_p15))
		};
	}
};
var _elm_community$list_extra$List_Extra$tailsHelp = F2(
	function (e, list) {
		var _p16 = list;
		if (_p16.ctor === '::') {
			var _p17 = _p16._0;
			return {
				ctor: '::',
				_0: {ctor: '::', _0: e, _1: _p17},
				_1: {ctor: '::', _0: _p17, _1: _p16._1}
			};
		} else {
			return {ctor: '[]'};
		}
	});
var _elm_community$list_extra$List_Extra$tails = A2(
	_elm_lang$core$List$foldr,
	_elm_community$list_extra$List_Extra$tailsHelp,
	{
		ctor: '::',
		_0: {ctor: '[]'},
		_1: {ctor: '[]'}
	});
var _elm_community$list_extra$List_Extra$inits = A2(
	_elm_lang$core$List$foldr,
	F2(
		function (e, acc) {
			return {
				ctor: '::',
				_0: {ctor: '[]'},
				_1: A2(
					_elm_lang$core$List$map,
					F2(
						function (x, y) {
							return {ctor: '::', _0: x, _1: y};
						})(e),
					acc)
			};
		}),
	{
		ctor: '::',
		_0: {ctor: '[]'},
		_1: {ctor: '[]'}
	});
var _elm_community$list_extra$List_Extra$groupWhileTransitivelyHelp = F4(
	function (result, currentGroup, compare, list) {
		groupWhileTransitivelyHelp:
		while (true) {
			var _p18 = list;
			if (_p18.ctor === '[]') {
				return _elm_lang$core$List$reverse(
					_elm_lang$core$List$isEmpty(currentGroup) ? result : _elm_lang$core$List$reverse(
						{ctor: '::', _0: currentGroup, _1: result}));
			} else {
				if (_p18._1.ctor === '[]') {
					return _elm_lang$core$List$reverse(
						{
							ctor: '::',
							_0: _elm_lang$core$List$reverse(
								{ctor: '::', _0: _p18._0, _1: currentGroup}),
							_1: result
						});
				} else {
					var _p20 = _p18._1;
					var _p19 = _p18._0;
					if (A2(compare, _p19, _p18._1._0)) {
						var _v17 = result,
							_v18 = {ctor: '::', _0: _p19, _1: currentGroup},
							_v19 = compare,
							_v20 = _p20;
						result = _v17;
						currentGroup = _v18;
						compare = _v19;
						list = _v20;
						continue groupWhileTransitivelyHelp;
					} else {
						var _v21 = {
							ctor: '::',
							_0: _elm_lang$core$List$reverse(
								{ctor: '::', _0: _p19, _1: currentGroup}),
							_1: result
						},
							_v22 = {ctor: '[]'},
							_v23 = compare,
							_v24 = _p20;
						result = _v21;
						currentGroup = _v22;
						compare = _v23;
						list = _v24;
						continue groupWhileTransitivelyHelp;
					}
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$groupWhileTransitively = F2(
	function (compare, list) {
		return A4(
			_elm_community$list_extra$List_Extra$groupWhileTransitivelyHelp,
			{ctor: '[]'},
			{ctor: '[]'},
			compare,
			list);
	});
var _elm_community$list_extra$List_Extra$stripPrefix = F2(
	function (prefix, xs) {
		var step = F2(
			function (e, m) {
				var _p21 = m;
				if (_p21.ctor === 'Nothing') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					if (_p21._0.ctor === '[]') {
						return _elm_lang$core$Maybe$Nothing;
					} else {
						return _elm_lang$core$Native_Utils.eq(e, _p21._0._0) ? _elm_lang$core$Maybe$Just(_p21._0._1) : _elm_lang$core$Maybe$Nothing;
					}
				}
			});
		return A3(
			_elm_lang$core$List$foldl,
			step,
			_elm_lang$core$Maybe$Just(xs),
			prefix);
	});
var _elm_community$list_extra$List_Extra$dropWhileRight = function (p) {
	return A2(
		_elm_lang$core$List$foldr,
		F2(
			function (x, xs) {
				return (p(x) && _elm_lang$core$List$isEmpty(xs)) ? {ctor: '[]'} : {ctor: '::', _0: x, _1: xs};
			}),
		{ctor: '[]'});
};
var _elm_community$list_extra$List_Extra$takeWhileRight = function (p) {
	var step = F2(
		function (x, _p22) {
			var _p23 = _p22;
			var _p24 = _p23._0;
			return (p(x) && _p23._1) ? {
				ctor: '_Tuple2',
				_0: {ctor: '::', _0: x, _1: _p24},
				_1: true
			} : {ctor: '_Tuple2', _0: _p24, _1: false};
		});
	return function (_p25) {
		return _elm_lang$core$Tuple$first(
			A3(
				_elm_lang$core$List$foldr,
				step,
				{
					ctor: '_Tuple2',
					_0: {ctor: '[]'},
					_1: true
				},
				_p25));
	};
};
var _elm_community$list_extra$List_Extra$splitAt = F2(
	function (n, xs) {
		return {
			ctor: '_Tuple2',
			_0: A2(_elm_lang$core$List$take, n, xs),
			_1: A2(_elm_lang$core$List$drop, n, xs)
		};
	});
var _elm_community$list_extra$List_Extra$groupsOfVarying_ = F3(
	function (listOflengths, list, accu) {
		groupsOfVarying_:
		while (true) {
			var _p26 = {ctor: '_Tuple2', _0: listOflengths, _1: list};
			if (((_p26.ctor === '_Tuple2') && (_p26._0.ctor === '::')) && (_p26._1.ctor === '::')) {
				var _p27 = A2(_elm_community$list_extra$List_Extra$splitAt, _p26._0._0, list);
				var head = _p27._0;
				var tail = _p27._1;
				var _v28 = _p26._0._1,
					_v29 = tail,
					_v30 = {ctor: '::', _0: head, _1: accu};
				listOflengths = _v28;
				list = _v29;
				accu = _v30;
				continue groupsOfVarying_;
			} else {
				return _elm_lang$core$List$reverse(accu);
			}
		}
	});
var _elm_community$list_extra$List_Extra$groupsOfVarying = F2(
	function (listOflengths, list) {
		return A3(
			_elm_community$list_extra$List_Extra$groupsOfVarying_,
			listOflengths,
			list,
			{ctor: '[]'});
	});
var _elm_community$list_extra$List_Extra$unfoldr = F2(
	function (f, seed) {
		var _p28 = f(seed);
		if (_p28.ctor === 'Nothing') {
			return {ctor: '[]'};
		} else {
			return {
				ctor: '::',
				_0: _p28._0._0,
				_1: A2(_elm_community$list_extra$List_Extra$unfoldr, f, _p28._0._1)
			};
		}
	});
var _elm_community$list_extra$List_Extra$mapAccumr = F3(
	function (f, acc0, list) {
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, _p29) {
					var _p30 = _p29;
					var _p31 = A2(f, _p30._0, x);
					var acc2 = _p31._0;
					var y = _p31._1;
					return {
						ctor: '_Tuple2',
						_0: acc2,
						_1: {ctor: '::', _0: y, _1: _p30._1}
					};
				}),
			{
				ctor: '_Tuple2',
				_0: acc0,
				_1: {ctor: '[]'}
			},
			list);
	});
var _elm_community$list_extra$List_Extra$mapAccuml = F3(
	function (f, acc0, list) {
		var _p32 = A3(
			_elm_lang$core$List$foldl,
			F2(
				function (x, _p33) {
					var _p34 = _p33;
					var _p35 = A2(f, _p34._0, x);
					var acc2 = _p35._0;
					var y = _p35._1;
					return {
						ctor: '_Tuple2',
						_0: acc2,
						_1: {ctor: '::', _0: y, _1: _p34._1}
					};
				}),
			{
				ctor: '_Tuple2',
				_0: acc0,
				_1: {ctor: '[]'}
			},
			list);
		var accFinal = _p32._0;
		var generatedList = _p32._1;
		return {
			ctor: '_Tuple2',
			_0: accFinal,
			_1: _elm_lang$core$List$reverse(generatedList)
		};
	});
var _elm_community$list_extra$List_Extra$scanr1 = F2(
	function (f, xs_) {
		var _p36 = xs_;
		if (_p36.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if (_p36._1.ctor === '[]') {
				return {
					ctor: '::',
					_0: _p36._0,
					_1: {ctor: '[]'}
				};
			} else {
				var _p37 = A2(_elm_community$list_extra$List_Extra$scanr1, f, _p36._1);
				if (_p37.ctor === '::') {
					return {
						ctor: '::',
						_0: A2(f, _p36._0, _p37._0),
						_1: _p37
					};
				} else {
					return {ctor: '[]'};
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$scanr = F3(
	function (f, acc, xs_) {
		var _p38 = xs_;
		if (_p38.ctor === '[]') {
			return {
				ctor: '::',
				_0: acc,
				_1: {ctor: '[]'}
			};
		} else {
			var _p39 = A3(_elm_community$list_extra$List_Extra$scanr, f, acc, _p38._1);
			if (_p39.ctor === '::') {
				return {
					ctor: '::',
					_0: A2(f, _p38._0, _p39._0),
					_1: _p39
				};
			} else {
				return {ctor: '[]'};
			}
		}
	});
var _elm_community$list_extra$List_Extra$scanl1 = F2(
	function (f, xs_) {
		var _p40 = xs_;
		if (_p40.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			return A3(_elm_lang$core$List$scanl, f, _p40._0, _p40._1);
		}
	});
var _elm_community$list_extra$List_Extra$indexedFoldr = F3(
	function (func, acc, list) {
		var step = F2(
			function (x, _p41) {
				var _p42 = _p41;
				var _p43 = _p42._0;
				return {
					ctor: '_Tuple2',
					_0: _p43 - 1,
					_1: A3(func, _p43, x, _p42._1)
				};
			});
		return _elm_lang$core$Tuple$second(
			A3(
				_elm_lang$core$List$foldr,
				step,
				{
					ctor: '_Tuple2',
					_0: _elm_lang$core$List$length(list) - 1,
					_1: acc
				},
				list));
	});
var _elm_community$list_extra$List_Extra$indexedFoldl = F3(
	function (func, acc, list) {
		var step = F2(
			function (x, _p44) {
				var _p45 = _p44;
				var _p46 = _p45._0;
				return {
					ctor: '_Tuple2',
					_0: _p46 + 1,
					_1: A3(func, _p46, x, _p45._1)
				};
			});
		return _elm_lang$core$Tuple$second(
			A3(
				_elm_lang$core$List$foldl,
				step,
				{ctor: '_Tuple2', _0: 0, _1: acc},
				list));
	});
var _elm_community$list_extra$List_Extra$foldr1 = F2(
	function (f, xs) {
		var mf = F2(
			function (x, m) {
				return _elm_lang$core$Maybe$Just(
					function () {
						var _p47 = m;
						if (_p47.ctor === 'Nothing') {
							return x;
						} else {
							return A2(f, x, _p47._0);
						}
					}());
			});
		return A3(_elm_lang$core$List$foldr, mf, _elm_lang$core$Maybe$Nothing, xs);
	});
var _elm_community$list_extra$List_Extra$foldl1 = F2(
	function (f, xs) {
		var mf = F2(
			function (x, m) {
				return _elm_lang$core$Maybe$Just(
					function () {
						var _p48 = m;
						if (_p48.ctor === 'Nothing') {
							return x;
						} else {
							return A2(f, _p48._0, x);
						}
					}());
			});
		return A3(_elm_lang$core$List$foldl, mf, _elm_lang$core$Maybe$Nothing, xs);
	});
var _elm_community$list_extra$List_Extra$reverseAppend = F2(
	function (list1, list2) {
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				}),
			list2,
			list1);
	});
var _elm_community$list_extra$List_Extra$interweaveHelp = F3(
	function (acc, list1, list2) {
		interweaveHelp:
		while (true) {
			var _p49 = {ctor: '_Tuple2', _0: list1, _1: list2};
			if (_p49._0.ctor === '::') {
				if (_p49._1.ctor === '::') {
					var _v44 = {
						ctor: '::',
						_0: _p49._1._0,
						_1: {ctor: '::', _0: _p49._0._0, _1: acc}
					},
						_v45 = _p49._0._1,
						_v46 = _p49._1._1;
					acc = _v44;
					list1 = _v45;
					list2 = _v46;
					continue interweaveHelp;
				} else {
					return A2(_elm_community$list_extra$List_Extra$reverseAppend, acc, list1);
				}
			} else {
				return A2(_elm_community$list_extra$List_Extra$reverseAppend, acc, list2);
			}
		}
	});
var _elm_community$list_extra$List_Extra$interweave = _elm_community$list_extra$List_Extra$interweaveHelp(
	{ctor: '[]'});
var _elm_community$list_extra$List_Extra$permutations = function (xs_) {
	var _p50 = xs_;
	if (_p50.ctor === '[]') {
		return {
			ctor: '::',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		};
	} else {
		var f = function (_p51) {
			var _p52 = _p51;
			return A2(
				_elm_lang$core$List$map,
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					})(_p52._0),
				_elm_community$list_extra$List_Extra$permutations(_p52._1));
		};
		return A2(
			_elm_lang$core$List$concatMap,
			f,
			_elm_community$list_extra$List_Extra$select(_p50));
	}
};
var _elm_community$list_extra$List_Extra$isPermutationOf = F2(
	function (permut, xs) {
		return A2(
			_elm_lang$core$List$member,
			permut,
			_elm_community$list_extra$List_Extra$permutations(xs));
	});
var _elm_community$list_extra$List_Extra$subsequencesNonEmpty = function (xs) {
	var _p53 = xs;
	if (_p53.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		var _p54 = _p53._0;
		var f = F2(
			function (ys, r) {
				return {
					ctor: '::',
					_0: ys,
					_1: {
						ctor: '::',
						_0: {ctor: '::', _0: _p54, _1: ys},
						_1: r
					}
				};
			});
		return {
			ctor: '::',
			_0: {
				ctor: '::',
				_0: _p54,
				_1: {ctor: '[]'}
			},
			_1: A3(
				_elm_lang$core$List$foldr,
				f,
				{ctor: '[]'},
				_elm_community$list_extra$List_Extra$subsequencesNonEmpty(_p53._1))
		};
	}
};
var _elm_community$list_extra$List_Extra$subsequences = function (xs) {
	return {
		ctor: '::',
		_0: {ctor: '[]'},
		_1: _elm_community$list_extra$List_Extra$subsequencesNonEmpty(xs)
	};
};
var _elm_community$list_extra$List_Extra$rowsLength = function (listOfLists) {
	var _p55 = listOfLists;
	if (_p55.ctor === '[]') {
		return 0;
	} else {
		return _elm_lang$core$List$length(_p55._0);
	}
};
var _elm_community$list_extra$List_Extra$transpose = function (listOfLists) {
	return A3(
		_elm_lang$core$List$foldr,
		_elm_lang$core$List$map2(
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				})),
		A2(
			_elm_lang$core$List$repeat,
			_elm_community$list_extra$List_Extra$rowsLength(listOfLists),
			{ctor: '[]'}),
		listOfLists);
};
var _elm_community$list_extra$List_Extra$intercalate = function (xs) {
	return function (_p56) {
		return _elm_lang$core$List$concat(
			A2(_elm_lang$core$List$intersperse, xs, _p56));
	};
};
var _elm_community$list_extra$List_Extra$filterNot = F2(
	function (pred, list) {
		return A2(
			_elm_lang$core$List$filter,
			function (_p57) {
				return !pred(_p57);
			},
			list);
	});
var _elm_community$list_extra$List_Extra$removeIfIndex = function (predicate) {
	return A2(
		_elm_community$list_extra$List_Extra$indexedFoldr,
		F3(
			function (index, item, acc) {
				return predicate(index) ? acc : {ctor: '::', _0: item, _1: acc};
			}),
		{ctor: '[]'});
};
var _elm_community$list_extra$List_Extra$removeAt = F2(
	function (index, l) {
		if (_elm_lang$core$Native_Utils.cmp(index, 0) < 0) {
			return l;
		} else {
			var tail = _elm_lang$core$List$tail(
				A2(_elm_lang$core$List$drop, index, l));
			var head = A2(_elm_lang$core$List$take, index, l);
			var _p58 = tail;
			if (_p58.ctor === 'Nothing') {
				return l;
			} else {
				return A2(_elm_lang$core$List$append, head, _p58._0);
			}
		}
	});
var _elm_community$list_extra$List_Extra$stableSortWith = F2(
	function (pred, list) {
		var predWithIndex = F2(
			function (_p60, _p59) {
				var _p61 = _p60;
				var _p62 = _p59;
				var result = A2(pred, _p61._0, _p62._0);
				var _p63 = result;
				if (_p63.ctor === 'EQ') {
					return A2(_elm_lang$core$Basics$compare, _p61._1, _p62._1);
				} else {
					return result;
				}
			});
		var listWithIndex = A2(
			_elm_lang$core$List$indexedMap,
			F2(
				function (i, a) {
					return {ctor: '_Tuple2', _0: a, _1: i};
				}),
			list);
		return A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Tuple$first,
			A2(_elm_lang$core$List$sortWith, predWithIndex, listWithIndex));
	});
var _elm_community$list_extra$List_Extra$remove = F2(
	function (x, xs) {
		var _p64 = xs;
		if (_p64.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p66 = _p64._1;
			var _p65 = _p64._0;
			return _elm_lang$core$Native_Utils.eq(x, _p65) ? _p66 : {
				ctor: '::',
				_0: _p65,
				_1: A2(_elm_community$list_extra$List_Extra$remove, x, _p66)
			};
		}
	});
var _elm_community$list_extra$List_Extra$updateIfIndex = F3(
	function (predicate, update, list) {
		return A2(
			_elm_lang$core$List$indexedMap,
			F2(
				function (i, x) {
					return predicate(i) ? update(x) : x;
				}),
			list);
	});
var _elm_community$list_extra$List_Extra$updateAt = F3(
	function (index, fn, list) {
		if (_elm_lang$core$Native_Utils.cmp(index, 0) < 0) {
			return list;
		} else {
			var tail = A2(_elm_lang$core$List$drop, index, list);
			var head = A2(_elm_lang$core$List$take, index, list);
			var _p67 = tail;
			if (_p67.ctor === '::') {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					head,
					{
						ctor: '::',
						_0: fn(_p67._0),
						_1: _p67._1
					});
			} else {
				return list;
			}
		}
	});
var _elm_community$list_extra$List_Extra$setAt = F2(
	function (index, value) {
		return A2(
			_elm_community$list_extra$List_Extra$updateAt,
			index,
			_elm_lang$core$Basics$always(value));
	});
var _elm_community$list_extra$List_Extra$updateIf = F3(
	function (predicate, update, list) {
		return A2(
			_elm_lang$core$List$map,
			function (item) {
				return predicate(item) ? update(item) : item;
			},
			list);
	});
var _elm_community$list_extra$List_Extra$replaceIf = F3(
	function (predicate, replacement, list) {
		return A3(
			_elm_community$list_extra$List_Extra$updateIf,
			predicate,
			_elm_lang$core$Basics$always(replacement),
			list);
	});
var _elm_community$list_extra$List_Extra$count = function (predicate) {
	return A2(
		_elm_lang$core$List$foldl,
		F2(
			function (x, acc) {
				return predicate(x) ? (acc + 1) : acc;
			}),
		0);
};
var _elm_community$list_extra$List_Extra$findIndices = function (predicate) {
	var consIndexIf = F3(
		function (index, x, acc) {
			return predicate(x) ? {ctor: '::', _0: index, _1: acc} : acc;
		});
	return A2(
		_elm_community$list_extra$List_Extra$indexedFoldr,
		consIndexIf,
		{ctor: '[]'});
};
var _elm_community$list_extra$List_Extra$findIndexHelp = F3(
	function (index, predicate, list) {
		findIndexHelp:
		while (true) {
			var _p68 = list;
			if (_p68.ctor === '[]') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				if (predicate(_p68._0)) {
					return _elm_lang$core$Maybe$Just(index);
				} else {
					var _v58 = index + 1,
						_v59 = predicate,
						_v60 = _p68._1;
					index = _v58;
					predicate = _v59;
					list = _v60;
					continue findIndexHelp;
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$findIndex = _elm_community$list_extra$List_Extra$findIndexHelp(0);
var _elm_community$list_extra$List_Extra$splitWhen = F2(
	function (predicate, list) {
		return A2(
			_elm_lang$core$Maybe$map,
			function (i) {
				return A2(_elm_community$list_extra$List_Extra$splitAt, i, list);
			},
			A2(_elm_community$list_extra$List_Extra$findIndex, predicate, list));
	});
var _elm_community$list_extra$List_Extra$elemIndices = function (x) {
	return _elm_community$list_extra$List_Extra$findIndices(
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(x));
};
var _elm_community$list_extra$List_Extra$elemIndex = function (x) {
	return _elm_community$list_extra$List_Extra$findIndex(
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(x));
};
var _elm_community$list_extra$List_Extra$find = F2(
	function (predicate, list) {
		find:
		while (true) {
			var _p69 = list;
			if (_p69.ctor === '[]') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p70 = _p69._0;
				if (predicate(_p70)) {
					return _elm_lang$core$Maybe$Just(_p70);
				} else {
					var _v62 = predicate,
						_v63 = _p69._1;
					predicate = _v62;
					list = _v63;
					continue find;
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$notMember = function (x) {
	return function (_p71) {
		return !A2(_elm_lang$core$List$member, x, _p71);
	};
};
var _elm_community$list_extra$List_Extra$reverseMap = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (x, acc) {
					return {
						ctor: '::',
						_0: f(x),
						_1: acc
					};
				}),
			{ctor: '[]'},
			xs);
	});
var _elm_community$list_extra$List_Extra$andThen = _elm_lang$core$List$concatMap;
var _elm_community$list_extra$List_Extra$lift2 = F3(
	function (f, la, lb) {
		return A2(
			_elm_community$list_extra$List_Extra$andThen,
			function (a) {
				return A2(
					_elm_community$list_extra$List_Extra$andThen,
					function (b) {
						return {
							ctor: '::',
							_0: A2(f, a, b),
							_1: {ctor: '[]'}
						};
					},
					lb);
			},
			la);
	});
var _elm_community$list_extra$List_Extra$cartesianProduct = function (ll) {
	var _p72 = ll;
	if (_p72.ctor === '[]') {
		return {
			ctor: '::',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		};
	} else {
		return A3(
			_elm_community$list_extra$List_Extra$lift2,
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				}),
			_p72._0,
			_elm_community$list_extra$List_Extra$cartesianProduct(_p72._1));
	}
};
var _elm_community$list_extra$List_Extra$lift3 = F4(
	function (f, la, lb, lc) {
		return A2(
			_elm_community$list_extra$List_Extra$andThen,
			function (a) {
				return A2(
					_elm_community$list_extra$List_Extra$andThen,
					function (b) {
						return A2(
							_elm_community$list_extra$List_Extra$andThen,
							function (c) {
								return {
									ctor: '::',
									_0: A3(f, a, b, c),
									_1: {ctor: '[]'}
								};
							},
							lc);
					},
					lb);
			},
			la);
	});
var _elm_community$list_extra$List_Extra$lift4 = F5(
	function (f, la, lb, lc, ld) {
		return A2(
			_elm_community$list_extra$List_Extra$andThen,
			function (a) {
				return A2(
					_elm_community$list_extra$List_Extra$andThen,
					function (b) {
						return A2(
							_elm_community$list_extra$List_Extra$andThen,
							function (c) {
								return A2(
									_elm_community$list_extra$List_Extra$andThen,
									function (d) {
										return {
											ctor: '::',
											_0: A4(f, a, b, c, d),
											_1: {ctor: '[]'}
										};
									},
									ld);
							},
							lc);
					},
					lb);
			},
			la);
	});
var _elm_community$list_extra$List_Extra$andMap = F2(
	function (l, fl) {
		return A3(
			_elm_lang$core$List$map2,
			F2(
				function (x, y) {
					return x(y);
				}),
			fl,
			l);
	});
var _elm_community$list_extra$List_Extra$uniqueHelp = F4(
	function (f, existing, remaining, accumulator) {
		uniqueHelp:
		while (true) {
			var _p73 = remaining;
			if (_p73.ctor === '[]') {
				return _elm_lang$core$List$reverse(accumulator);
			} else {
				var _p75 = _p73._1;
				var _p74 = _p73._0;
				var computedFirst = f(_p74);
				if (A2(_elm_lang$core$Set$member, computedFirst, existing)) {
					var _v66 = f,
						_v67 = existing,
						_v68 = _p75,
						_v69 = accumulator;
					f = _v66;
					existing = _v67;
					remaining = _v68;
					accumulator = _v69;
					continue uniqueHelp;
				} else {
					var _v70 = f,
						_v71 = A2(_elm_lang$core$Set$insert, computedFirst, existing),
						_v72 = _p75,
						_v73 = {ctor: '::', _0: _p74, _1: accumulator};
					f = _v70;
					existing = _v71;
					remaining = _v72;
					accumulator = _v73;
					continue uniqueHelp;
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$uniqueBy = F2(
	function (f, list) {
		return A4(
			_elm_community$list_extra$List_Extra$uniqueHelp,
			f,
			_elm_lang$core$Set$empty,
			list,
			{ctor: '[]'});
	});
var _elm_community$list_extra$List_Extra$allDifferentBy = F2(
	function (f, list) {
		return _elm_lang$core$Native_Utils.eq(
			_elm_lang$core$List$length(list),
			_elm_lang$core$List$length(
				A2(_elm_community$list_extra$List_Extra$uniqueBy, f, list)));
	});
var _elm_community$list_extra$List_Extra$allDifferent = function (list) {
	return A2(_elm_community$list_extra$List_Extra$allDifferentBy, _elm_lang$core$Basics$identity, list);
};
var _elm_community$list_extra$List_Extra$unique = function (list) {
	return A4(
		_elm_community$list_extra$List_Extra$uniqueHelp,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Set$empty,
		list,
		{ctor: '[]'});
};
var _elm_community$list_extra$List_Extra$dropWhile = F2(
	function (predicate, list) {
		dropWhile:
		while (true) {
			var _p76 = list;
			if (_p76.ctor === '[]') {
				return {ctor: '[]'};
			} else {
				if (predicate(_p76._0)) {
					var _v75 = predicate,
						_v76 = _p76._1;
					predicate = _v75;
					list = _v76;
					continue dropWhile;
				} else {
					return list;
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$takeWhile = function (predicate) {
	var takeWhileMemo = F2(
		function (memo, list) {
			takeWhileMemo:
			while (true) {
				var _p77 = list;
				if (_p77.ctor === '[]') {
					return _elm_lang$core$List$reverse(memo);
				} else {
					var _p78 = _p77._0;
					if (predicate(_p78)) {
						var _v78 = {ctor: '::', _0: _p78, _1: memo},
							_v79 = _p77._1;
						memo = _v78;
						list = _v79;
						continue takeWhileMemo;
					} else {
						return _elm_lang$core$List$reverse(memo);
					}
				}
			}
		});
	return takeWhileMemo(
		{ctor: '[]'});
};
var _elm_community$list_extra$List_Extra$span = F2(
	function (p, xs) {
		return {
			ctor: '_Tuple2',
			_0: A2(_elm_community$list_extra$List_Extra$takeWhile, p, xs),
			_1: A2(_elm_community$list_extra$List_Extra$dropWhile, p, xs)
		};
	});
var _elm_community$list_extra$List_Extra$break = function (p) {
	return _elm_community$list_extra$List_Extra$span(
		function (_p79) {
			return !p(_p79);
		});
};
var _elm_community$list_extra$List_Extra$groupWhile = F2(
	function (eq, xs_) {
		var _p80 = xs_;
		if (_p80.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p82 = _p80._0;
			var _p81 = A2(
				_elm_community$list_extra$List_Extra$span,
				eq(_p82),
				_p80._1);
			var ys = _p81._0;
			var zs = _p81._1;
			return {
				ctor: '::',
				_0: {ctor: '::', _0: _p82, _1: ys},
				_1: A2(_elm_community$list_extra$List_Extra$groupWhile, eq, zs)
			};
		}
	});
var _elm_community$list_extra$List_Extra$group = _elm_community$list_extra$List_Extra$groupWhile(
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.eq(x, y);
		}));
var _elm_community$list_extra$List_Extra$minimumBy = F2(
	function (f, ls) {
		var minBy = F2(
			function (x, _p83) {
				var _p84 = _p83;
				var _p85 = _p84._1;
				var fx = f(x);
				return (_elm_lang$core$Native_Utils.cmp(fx, _p85) < 0) ? {ctor: '_Tuple2', _0: x, _1: fx} : {ctor: '_Tuple2', _0: _p84._0, _1: _p85};
			});
		var _p86 = ls;
		if (_p86.ctor === '::') {
			if (_p86._1.ctor === '[]') {
				return _elm_lang$core$Maybe$Just(_p86._0);
			} else {
				var _p87 = _p86._0;
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Tuple$first(
						A3(
							_elm_lang$core$List$foldl,
							minBy,
							{
								ctor: '_Tuple2',
								_0: _p87,
								_1: f(_p87)
							},
							_p86._1)));
			}
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_community$list_extra$List_Extra$maximumBy = F2(
	function (f, ls) {
		var maxBy = F2(
			function (x, _p88) {
				var _p89 = _p88;
				var _p90 = _p89._1;
				var fx = f(x);
				return (_elm_lang$core$Native_Utils.cmp(fx, _p90) > 0) ? {ctor: '_Tuple2', _0: x, _1: fx} : {ctor: '_Tuple2', _0: _p89._0, _1: _p90};
			});
		var _p91 = ls;
		if (_p91.ctor === '::') {
			if (_p91._1.ctor === '[]') {
				return _elm_lang$core$Maybe$Just(_p91._0);
			} else {
				var _p92 = _p91._0;
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Tuple$first(
						A3(
							_elm_lang$core$List$foldl,
							maxBy,
							{
								ctor: '_Tuple2',
								_0: _p92,
								_1: f(_p92)
							},
							_p91._1)));
			}
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_community$list_extra$List_Extra$uncons = function (xs) {
	var _p93 = xs;
	if (_p93.ctor === '[]') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Maybe$Just(
			{ctor: '_Tuple2', _0: _p93._0, _1: _p93._1});
	}
};
var _elm_community$list_extra$List_Extra$swapAt = F3(
	function (index1, index2, l) {
		swapAt:
		while (true) {
			if (_elm_lang$core$Native_Utils.eq(index1, index2) || (_elm_lang$core$Native_Utils.cmp(index1, 0) < 0)) {
				return l;
			} else {
				if (_elm_lang$core$Native_Utils.cmp(index1, index2) > 0) {
					var _v86 = index2,
						_v87 = index1,
						_v88 = l;
					index1 = _v86;
					index2 = _v87;
					l = _v88;
					continue swapAt;
				} else {
					var _p94 = A2(_elm_community$list_extra$List_Extra$splitAt, index1, l);
					var part1 = _p94._0;
					var tail1 = _p94._1;
					var _p95 = A2(_elm_community$list_extra$List_Extra$splitAt, index2 - index1, tail1);
					var head2 = _p95._0;
					var tail2 = _p95._1;
					var _p96 = {
						ctor: '_Tuple2',
						_0: _elm_community$list_extra$List_Extra$uncons(head2),
						_1: _elm_community$list_extra$List_Extra$uncons(tail2)
					};
					if (((((_p96.ctor === '_Tuple2') && (_p96._0.ctor === 'Just')) && (_p96._0._0.ctor === '_Tuple2')) && (_p96._1.ctor === 'Just')) && (_p96._1._0.ctor === '_Tuple2')) {
						return _elm_lang$core$List$concat(
							{
								ctor: '::',
								_0: part1,
								_1: {
									ctor: '::',
									_0: {ctor: '::', _0: _p96._1._0._0, _1: _p96._0._0._1},
									_1: {
										ctor: '::',
										_0: {ctor: '::', _0: _p96._0._0._0, _1: _p96._1._0._1},
										_1: {ctor: '[]'}
									}
								}
							});
					} else {
						return l;
					}
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$cycleHelp = F3(
	function (acc, n, list) {
		cycleHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) > 0) {
				var _v90 = A2(_elm_community$list_extra$List_Extra$reverseAppend, list, acc),
					_v91 = n - 1,
					_v92 = list;
				acc = _v90;
				n = _v91;
				list = _v92;
				continue cycleHelp;
			} else {
				return acc;
			}
		}
	});
var _elm_community$list_extra$List_Extra$cycle = F2(
	function (len, list) {
		var cycleLength = _elm_lang$core$List$length(list);
		return (_elm_lang$core$Native_Utils.eq(cycleLength, 0) || _elm_lang$core$Native_Utils.eq(cycleLength, len)) ? list : ((_elm_lang$core$Native_Utils.cmp(cycleLength, len) < 0) ? _elm_lang$core$List$reverse(
			A2(
				_elm_community$list_extra$List_Extra$reverseAppend,
				A2(
					_elm_lang$core$List$take,
					A2(_elm_lang$core$Basics$rem, len, cycleLength),
					list),
				A3(
					_elm_community$list_extra$List_Extra$cycleHelp,
					{ctor: '[]'},
					(len / cycleLength) | 0,
					list))) : A2(_elm_lang$core$List$take, len, list));
	});
var _elm_community$list_extra$List_Extra$initialize = F2(
	function (n, f) {
		var step = F2(
			function (i, acc) {
				step:
				while (true) {
					if (_elm_lang$core$Native_Utils.cmp(i, 0) < 0) {
						return acc;
					} else {
						var _v93 = i - 1,
							_v94 = {
							ctor: '::',
							_0: f(i),
							_1: acc
						};
						i = _v93;
						acc = _v94;
						continue step;
					}
				}
			});
		return A2(
			step,
			n - 1,
			{ctor: '[]'});
	});
var _elm_community$list_extra$List_Extra$iterate = F2(
	function (f, x) {
		var _p97 = f(x);
		if (_p97.ctor === 'Just') {
			return {
				ctor: '::',
				_0: x,
				_1: A2(_elm_community$list_extra$List_Extra$iterate, f, _p97._0)
			};
		} else {
			return {
				ctor: '::',
				_0: x,
				_1: {ctor: '[]'}
			};
		}
	});
var _elm_community$list_extra$List_Extra$getAt = F2(
	function (idx, xs) {
		return (_elm_lang$core$Native_Utils.cmp(idx, 0) < 0) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$List$head(
			A2(_elm_lang$core$List$drop, idx, xs));
	});
var _elm_community$list_extra$List_Extra_ops = _elm_community$list_extra$List_Extra_ops || {};
_elm_community$list_extra$List_Extra_ops['!!'] = _elm_lang$core$Basics$flip(_elm_community$list_extra$List_Extra$getAt);
var _elm_community$list_extra$List_Extra$init = function (items) {
	var _p98 = items;
	if (_p98.ctor === '[]') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return A2(
			_elm_lang$core$Maybe$map,
			_elm_lang$core$List$reverse,
			_elm_lang$core$List$tail(
				_elm_lang$core$List$reverse(_p98)));
	}
};
var _elm_community$list_extra$List_Extra$last = function (items) {
	last:
	while (true) {
		var _p99 = items;
		if (_p99.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			if (_p99._1.ctor === '[]') {
				return _elm_lang$core$Maybe$Just(_p99._0);
			} else {
				var _v98 = _p99._1;
				items = _v98;
				continue last;
			}
		}
	}
};

var _Gizra$elm_dictlist$AllDictList$equalKeys = F3(
	function (key1, key2, dict) {
		var ord = _eeue56$elm_all_dict$AllDict$getOrd(dict);
		return _elm_lang$core$Native_Utils.eq(
			ord(key1),
			ord(key2));
	});
var _Gizra$elm_dictlist$AllDictList$removeKey = F3(
	function (key, dict, list) {
		var ord = _eeue56$elm_all_dict$AllDict$getOrd(dict);
		var keyComparable = ord(key);
		return A2(_eeue56$elm_all_dict$AllDict$member, key, dict) ? A2(
			_elm_lang$core$List$filter,
			function (k) {
				return !_elm_lang$core$Native_Utils.eq(
					ord(k),
					keyComparable);
			},
			list) : list;
	});
var _Gizra$elm_dictlist$AllDictList$unsafeGet = F2(
	function (key, dict) {
		var _p0 = A2(_eeue56$elm_all_dict$AllDict$get, key, dict);
		if (_p0.ctor === 'Just') {
			return _p0._0;
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'AllDictList',
				{
					start: {line: 1280, column: 5},
					end: {line: 1285, column: 81}
				},
				_p0)('Internal error: AllDictList list not in sync with dict');
		}
	});
var _Gizra$elm_dictlist$AllDictList$toDict = function (_p2) {
	var _p3 = _p2;
	return A3(_eeue56$elm_all_dict$AllDict$foldl, _elm_lang$core$Dict$insert, _elm_lang$core$Dict$empty, _p3._0);
};
var _Gizra$elm_dictlist$AllDictList$toAllDict = function (_p4) {
	var _p5 = _p4;
	return _p5._0;
};
var _Gizra$elm_dictlist$AllDictList$keys = function (_p6) {
	var _p7 = _p6;
	return _p7._1;
};
var _Gizra$elm_dictlist$AllDictList$foldr = F3(
	function (func, accum, _p8) {
		var _p9 = _p8;
		var go = F2(
			function (key, acc) {
				var _p10 = A2(_eeue56$elm_all_dict$AllDict$get, key, _p9._0);
				if (_p10.ctor === 'Just') {
					return A3(func, key, _p10._0, acc);
				} else {
					return _elm_lang$core$Native_Utils.crashCase(
						'AllDictList',
						{
							start: {line: 1072, column: 13},
							end: {line: 1077, column: 89}
						},
						_p10)('Internal error: AllDictList list not in sync with dict');
				}
			});
		return A3(_elm_lang$core$List$foldr, go, accum, _p9._1);
	});
var _Gizra$elm_dictlist$AllDictList$values = function (dictList) {
	return A3(
		_Gizra$elm_dictlist$AllDictList$foldr,
		F3(
			function (key, value, valueList) {
				return {ctor: '::', _0: value, _1: valueList};
			}),
		{ctor: '[]'},
		dictList);
};
var _Gizra$elm_dictlist$AllDictList$toList = function (dict) {
	return A3(
		_Gizra$elm_dictlist$AllDictList$foldr,
		F3(
			function (key, value, list) {
				return {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: key, _1: value},
					_1: list
				};
			}),
		{ctor: '[]'},
		dict);
};
var _Gizra$elm_dictlist$AllDictList$foldl = F3(
	function (func, accum, _p12) {
		var _p13 = _p12;
		var go = F2(
			function (key, acc) {
				return A3(
					func,
					key,
					A2(_Gizra$elm_dictlist$AllDictList$unsafeGet, key, _p13._0),
					acc);
			});
		return A3(_elm_lang$core$List$foldl, go, accum, _p13._1);
	});
var _Gizra$elm_dictlist$AllDictList$merge = F6(
	function (leftFunc, bothFunc, rightFunc, leftDict, _p14, initialResult) {
		var _p15 = _p14;
		var _p24 = _p15._0;
		var goRight = F3(
			function (remainingRight, rightKey, accumRight) {
				var _p16 = A2(_eeue56$elm_all_dict$AllDict$get, rightKey, remainingRight);
				if (_p16.ctor === 'Just') {
					return A3(rightFunc, rightKey, _p16._0, accumRight);
				} else {
					return accumRight;
				}
			});
		var goLeft = F3(
			function (leftKey, leftValue, _p17) {
				var _p18 = _p17;
				var _p21 = _p18._0;
				var _p20 = _p18._1;
				var _p19 = A2(_eeue56$elm_all_dict$AllDict$get, leftKey, _p24);
				if (_p19.ctor === 'Just') {
					return {
						ctor: '_Tuple2',
						_0: A2(_eeue56$elm_all_dict$AllDict$remove, leftKey, _p21),
						_1: A4(bothFunc, leftKey, leftValue, _p19._0, _p20)
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _p21,
						_1: A3(leftFunc, leftKey, leftValue, _p20)
					};
				}
			});
		return function (_p22) {
			var _p23 = _p22;
			return A3(
				_elm_lang$core$List$foldl,
				goRight(_p23._0),
				_p23._1,
				_p15._1);
		}(
			A3(
				_Gizra$elm_dictlist$AllDictList$foldl,
				goLeft,
				{ctor: '_Tuple2', _0: _p24, _1: initialResult},
				leftDict));
	});
var _Gizra$elm_dictlist$AllDictList$isEmpty = function (_p25) {
	var _p26 = _p25;
	return _elm_lang$core$List$isEmpty(_p26._1);
};
var _Gizra$elm_dictlist$AllDictList$size = function (_p27) {
	var _p28 = _p27;
	return _eeue56$elm_all_dict$AllDict$size(_p28._0);
};
var _Gizra$elm_dictlist$AllDictList$member = F2(
	function (key, _p29) {
		var _p30 = _p29;
		return A2(_eeue56$elm_all_dict$AllDict$member, key, _p30._0);
	});
var _Gizra$elm_dictlist$AllDictList$get = F2(
	function (key, _p31) {
		var _p32 = _p31;
		return A2(_eeue56$elm_all_dict$AllDict$get, key, _p32._0);
	});
var _Gizra$elm_dictlist$AllDictList$getOrd = function (_p33) {
	var _p34 = _p33;
	return _eeue56$elm_all_dict$AllDict$getOrd(_p34._0);
};
var _Gizra$elm_dictlist$AllDictList$fullEq = F2(
	function (first, second) {
		var secondWithOrd = A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Tuple$mapFirst(
				_Gizra$elm_dictlist$AllDictList$getOrd(second)),
			_Gizra$elm_dictlist$AllDictList$toList(second));
		var firstWithOrd = A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Tuple$mapFirst(
				_Gizra$elm_dictlist$AllDictList$getOrd(first)),
			_Gizra$elm_dictlist$AllDictList$toList(first));
		return _elm_lang$core$Native_Utils.eq(firstWithOrd, secondWithOrd);
	});
var _Gizra$elm_dictlist$AllDictList$eq = F2(
	function (first, second) {
		return _elm_lang$core$Native_Utils.eq(
			_Gizra$elm_dictlist$AllDictList$toList(first),
			_Gizra$elm_dictlist$AllDictList$toList(second));
	});
var _Gizra$elm_dictlist$AllDictList$getAt = F2(
	function (index, _p35) {
		var _p36 = _p35;
		return A2(
			_elm_lang$core$Maybe$andThen,
			function (key) {
				return A2(
					_elm_lang$core$Maybe$map,
					function (value) {
						return {ctor: '_Tuple2', _0: key, _1: value};
					},
					A2(_eeue56$elm_all_dict$AllDict$get, key, _p36._0));
			},
			A2(_elm_community$list_extra$List_Extra$getAt, index, _p36._1));
	});
var _Gizra$elm_dictlist$AllDictList$getKeyAt = F2(
	function (index, _p37) {
		var _p38 = _p37;
		return A2(_elm_community$list_extra$List_Extra$getAt, index, _p38._1);
	});
var _Gizra$elm_dictlist$AllDictList$indexOfKey = F2(
	function (key, _p39) {
		var _p40 = _p39;
		var ord = _eeue56$elm_all_dict$AllDict$getOrd(_p40._0);
		var target = ord(key);
		return A2(
			_elm_community$list_extra$List_Extra$findIndex,
			function (k) {
				return _elm_lang$core$Native_Utils.eq(
					ord(k),
					target);
			},
			_p40._1);
	});
var _Gizra$elm_dictlist$AllDictList$next = F2(
	function (key, dictlist) {
		return A2(
			_elm_lang$core$Maybe$andThen,
			function (index) {
				return A2(_Gizra$elm_dictlist$AllDictList$getAt, index + 1, dictlist);
			},
			A2(_Gizra$elm_dictlist$AllDictList$indexOfKey, key, dictlist));
	});
var _Gizra$elm_dictlist$AllDictList$previous = F2(
	function (key, dictlist) {
		return A2(
			_elm_lang$core$Maybe$andThen,
			function (index) {
				return A2(_Gizra$elm_dictlist$AllDictList$getAt, index - 1, dictlist);
			},
			A2(_Gizra$elm_dictlist$AllDictList$indexOfKey, key, dictlist));
	});
var _Gizra$elm_dictlist$AllDictList$atRelativePosition = F2(
	function (position, dictlist) {
		var _p41 = position;
		if (_p41.ctor === 'BeforeKey') {
			return A2(_Gizra$elm_dictlist$AllDictList$previous, _p41._0, dictlist);
		} else {
			return A2(_Gizra$elm_dictlist$AllDictList$next, _p41._0, dictlist);
		}
	});
var _Gizra$elm_dictlist$AllDictList$minimum = function (_p42) {
	var _p43 = _p42;
	var go = F3(
		function (_p44, value, acc) {
			var _p45 = acc;
			if (_p45.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Just(value);
			} else {
				return _elm_lang$core$Maybe$Just(
					A2(_elm_lang$core$Basics$min, _p45._0, value));
			}
		});
	return A3(_eeue56$elm_all_dict$AllDict$foldl, go, _elm_lang$core$Maybe$Nothing, _p43._0);
};
var _Gizra$elm_dictlist$AllDictList$maximum = function (_p46) {
	var _p47 = _p46;
	var go = F3(
		function (_p48, value, acc) {
			var _p49 = acc;
			if (_p49.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Just(value);
			} else {
				return _elm_lang$core$Maybe$Just(
					A2(_elm_lang$core$Basics$max, _p49._0, value));
			}
		});
	return A3(_eeue56$elm_all_dict$AllDict$foldl, go, _elm_lang$core$Maybe$Nothing, _p47._0);
};
var _Gizra$elm_dictlist$AllDictList$product = function (_p50) {
	var _p51 = _p50;
	return A3(
		_eeue56$elm_all_dict$AllDict$foldl,
		_elm_lang$core$Basics$always(
			F2(
				function (x, y) {
					return x * y;
				})),
		1,
		_p51._0);
};
var _Gizra$elm_dictlist$AllDictList$sum = function (_p52) {
	var _p53 = _p52;
	return A3(
		_eeue56$elm_all_dict$AllDict$foldl,
		_elm_lang$core$Basics$always(
			F2(
				function (x, y) {
					return x + y;
				})),
		0,
		_p53._0);
};
var _Gizra$elm_dictlist$AllDictList$any = F2(
	function (func, _p54) {
		var _p55 = _p54;
		var go = function (innerList) {
			go:
			while (true) {
				var _p56 = innerList;
				if (_p56.ctor === '[]') {
					return false;
				} else {
					var _p57 = _p56._0;
					if (A2(
						func,
						_p57,
						A2(_Gizra$elm_dictlist$AllDictList$unsafeGet, _p57, _p55._0))) {
						return true;
					} else {
						var _v29 = _p56._1;
						innerList = _v29;
						continue go;
					}
				}
			}
		};
		return go(_p55._1);
	});
var _Gizra$elm_dictlist$AllDictList$all = F2(
	function (func, dictlist) {
		return !A2(
			_Gizra$elm_dictlist$AllDictList$any,
			F2(
				function (key, value) {
					return !A2(func, key, value);
				}),
			dictlist);
	});
var _Gizra$elm_dictlist$AllDictList$length = _Gizra$elm_dictlist$AllDictList$size;
var _Gizra$elm_dictlist$AllDictList$head = function (_p58) {
	var _p59 = _p58;
	return A2(
		_elm_lang$core$Maybe$andThen,
		function (key) {
			return A2(
				_elm_lang$core$Maybe$map,
				function (value) {
					return {ctor: '_Tuple2', _0: key, _1: value};
				},
				A2(_eeue56$elm_all_dict$AllDict$get, key, _p59._0));
		},
		_elm_lang$core$List$head(_p59._1));
};
var _Gizra$elm_dictlist$AllDictList$AllDictList = F2(
	function (a, b) {
		return {ctor: 'AllDictList', _0: a, _1: b};
	});
var _Gizra$elm_dictlist$AllDictList$cons = F3(
	function (key, value, _p60) {
		var _p61 = _p60;
		var _p62 = _p61._0;
		return A2(
			_Gizra$elm_dictlist$AllDictList$AllDictList,
			A3(_eeue56$elm_all_dict$AllDict$insert, key, value, _p62),
			{
				ctor: '::',
				_0: key,
				_1: A3(_Gizra$elm_dictlist$AllDictList$removeKey, key, _p62, _p61._1)
			});
	});
var _Gizra$elm_dictlist$AllDictList$append = F2(
	function (t1, t2) {
		var go = F3(
			function (key, value, acc) {
				return A2(_Gizra$elm_dictlist$AllDictList$member, key, acc) ? acc : A3(_Gizra$elm_dictlist$AllDictList$cons, key, value, acc);
			});
		return A3(_Gizra$elm_dictlist$AllDictList$foldr, go, t2, t1);
	});
var _Gizra$elm_dictlist$AllDictList$union = F2(
	function (t1, t2) {
		return A3(_Gizra$elm_dictlist$AllDictList$foldr, _Gizra$elm_dictlist$AllDictList$cons, t2, t1);
	});
var _Gizra$elm_dictlist$AllDictList$tail = function (_p63) {
	var _p64 = _p63;
	var _p65 = _p64._1;
	if (_p65.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A2(
				_Gizra$elm_dictlist$AllDictList$AllDictList,
				A2(_eeue56$elm_all_dict$AllDict$remove, _p65._0, _p64._0),
				_p65._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _Gizra$elm_dictlist$AllDictList$reverse = function (_p66) {
	var _p67 = _p66;
	return A2(
		_Gizra$elm_dictlist$AllDictList$AllDictList,
		_p67._0,
		_elm_lang$core$List$reverse(_p67._1));
};
var _Gizra$elm_dictlist$AllDictList$take = F2(
	function (n, _p68) {
		var _p69 = _p68;
		var _p70 = _p69._0;
		var go = function (key) {
			return A2(
				_eeue56$elm_all_dict$AllDict$insert,
				key,
				A2(_Gizra$elm_dictlist$AllDictList$unsafeGet, key, _p70));
		};
		var newList = A2(_elm_lang$core$List$take, n, _p69._1);
		var newDict = A3(
			_elm_lang$core$List$foldl,
			go,
			_eeue56$elm_all_dict$AllDict$empty(
				_eeue56$elm_all_dict$AllDict$getOrd(_p70)),
			newList);
		return A2(_Gizra$elm_dictlist$AllDictList$AllDictList, newDict, newList);
	});
var _Gizra$elm_dictlist$AllDictList$drop = F2(
	function (n, _p71) {
		var _p72 = _p71;
		var _p73 = _p72._0;
		var go = function (key) {
			return A2(
				_eeue56$elm_all_dict$AllDict$insert,
				key,
				A2(_Gizra$elm_dictlist$AllDictList$unsafeGet, key, _p73));
		};
		var newList = A2(_elm_lang$core$List$drop, n, _p72._1);
		var newDict = A3(
			_elm_lang$core$List$foldl,
			go,
			_eeue56$elm_all_dict$AllDict$empty(
				_eeue56$elm_all_dict$AllDict$getOrd(_p73)),
			newList);
		return A2(_Gizra$elm_dictlist$AllDictList$AllDictList, newDict, newList);
	});
var _Gizra$elm_dictlist$AllDictList$sort = function (_p74) {
	var _p75 = _p74;
	return A2(
		_Gizra$elm_dictlist$AllDictList$AllDictList,
		_p75._0,
		A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Tuple$first,
			A2(
				_elm_lang$core$List$sortBy,
				_elm_lang$core$Tuple$second,
				_Gizra$elm_dictlist$AllDictList$toList(_p75))));
};
var _Gizra$elm_dictlist$AllDictList$sortBy = F2(
	function (func, _p76) {
		var _p77 = _p76;
		return A2(
			_Gizra$elm_dictlist$AllDictList$AllDictList,
			_p77._0,
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Tuple$first,
				A2(
					_elm_lang$core$List$sortBy,
					function (_p78) {
						return func(
							_elm_lang$core$Tuple$second(_p78));
					},
					_Gizra$elm_dictlist$AllDictList$toList(_p77))));
	});
var _Gizra$elm_dictlist$AllDictList$sortWith = F2(
	function (func, _p79) {
		var _p80 = _p79;
		return A2(
			_Gizra$elm_dictlist$AllDictList$AllDictList,
			_p80._0,
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Tuple$first,
				A2(
					_elm_lang$core$List$sortWith,
					F2(
						function (v1, v2) {
							return A2(
								func,
								_elm_lang$core$Tuple$second(v1),
								_elm_lang$core$Tuple$second(v2));
						}),
					_Gizra$elm_dictlist$AllDictList$toList(_p80))));
	});
var _Gizra$elm_dictlist$AllDictList$insertAfter = F4(
	function (afterKey, key, value, _p81) {
		var _p82 = _p81;
		var _p87 = _p82._1;
		var _p86 = _p82._0;
		var newList = function () {
			if (A2(_eeue56$elm_all_dict$AllDict$member, afterKey, _p86)) {
				if (A3(_Gizra$elm_dictlist$AllDictList$equalKeys, key, afterKey, _p86)) {
					return _p87;
				} else {
					var ord = _eeue56$elm_all_dict$AllDict$getOrd(_p86);
					var afterKeyComparable = ord(afterKey);
					var listWithoutKey = A3(_Gizra$elm_dictlist$AllDictList$removeKey, key, _p86, _p87);
					var _p83 = A2(
						_elm_community$list_extra$List_Extra$findIndex,
						function (k) {
							return _elm_lang$core$Native_Utils.eq(
								ord(k),
								afterKeyComparable);
						},
						listWithoutKey);
					if (_p83.ctor === 'Just') {
						var _p84 = _p83._0;
						return A2(
							_elm_lang$core$Basics_ops['++'],
							A2(_elm_lang$core$List$take, _p84 + 1, listWithoutKey),
							{
								ctor: '::',
								_0: key,
								_1: A2(_elm_lang$core$List$drop, _p84 + 1, listWithoutKey)
							});
					} else {
						return _elm_lang$core$Native_Utils.crashCase(
							'AllDictList',
							{
								start: {line: 692, column: 25},
								end: {line: 703, column: 101}
							},
							_p83)('Internal error: AllDictList list not in sync with dict');
					}
				}
			} else {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					A3(_Gizra$elm_dictlist$AllDictList$removeKey, key, _p86, _p87),
					{
						ctor: '::',
						_0: key,
						_1: {ctor: '[]'}
					});
			}
		}();
		var newDict = A3(_eeue56$elm_all_dict$AllDict$insert, key, value, _p86);
		return A2(_Gizra$elm_dictlist$AllDictList$AllDictList, newDict, newList);
	});
var _Gizra$elm_dictlist$AllDictList$insertBefore = F4(
	function (beforeKey, key, value, _p88) {
		var _p89 = _p88;
		var _p94 = _p89._1;
		var _p93 = _p89._0;
		var newList = function () {
			if (A2(_eeue56$elm_all_dict$AllDict$member, beforeKey, _p93)) {
				if (A3(_Gizra$elm_dictlist$AllDictList$equalKeys, key, beforeKey, _p93)) {
					return _p94;
				} else {
					var ord = _eeue56$elm_all_dict$AllDict$getOrd(_p93);
					var beforeKeyComparable = ord(beforeKey);
					var listWithoutKey = A3(_Gizra$elm_dictlist$AllDictList$removeKey, key, _p93, _p94);
					var _p90 = A2(
						_elm_community$list_extra$List_Extra$findIndex,
						function (k) {
							return _elm_lang$core$Native_Utils.eq(
								ord(k),
								beforeKeyComparable);
						},
						listWithoutKey);
					if (_p90.ctor === 'Just') {
						var _p91 = _p90._0;
						return A2(
							_elm_lang$core$Basics_ops['++'],
							A2(_elm_lang$core$List$take, _p91, listWithoutKey),
							{
								ctor: '::',
								_0: key,
								_1: A2(_elm_lang$core$List$drop, _p91, listWithoutKey)
							});
					} else {
						return _elm_lang$core$Native_Utils.crashCase(
							'AllDictList',
							{
								start: {line: 747, column: 25},
								end: {line: 758, column: 101}
							},
							_p90)('Internal error: AllDictList list not in sync with dict');
					}
				}
			} else {
				return {
					ctor: '::',
					_0: key,
					_1: A3(_Gizra$elm_dictlist$AllDictList$removeKey, key, _p93, _p94)
				};
			}
		}();
		var newDict = A3(_eeue56$elm_all_dict$AllDict$insert, key, value, _p93);
		return A2(_Gizra$elm_dictlist$AllDictList$AllDictList, newDict, newList);
	});
var _Gizra$elm_dictlist$AllDictList$insertRelativeTo = function (position) {
	var _p95 = position;
	if (_p95.ctor === 'BeforeKey') {
		return _Gizra$elm_dictlist$AllDictList$insertBefore(_p95._0);
	} else {
		return _Gizra$elm_dictlist$AllDictList$insertAfter(_p95._0);
	}
};
var _Gizra$elm_dictlist$AllDictList$empty = function (ord) {
	return A2(
		_Gizra$elm_dictlist$AllDictList$AllDictList,
		_eeue56$elm_all_dict$AllDict$empty(ord),
		{ctor: '[]'});
};
var _Gizra$elm_dictlist$AllDictList$concat = F2(
	function (ord, lists) {
		return A3(
			_elm_lang$core$List$foldr,
			_Gizra$elm_dictlist$AllDictList$append,
			_Gizra$elm_dictlist$AllDictList$empty(ord),
			lists);
	});
var _Gizra$elm_dictlist$AllDictList$emptyWithOrdFrom = function (_p96) {
	return _Gizra$elm_dictlist$AllDictList$empty(
		_Gizra$elm_dictlist$AllDictList$getOrd(_p96));
};
var _Gizra$elm_dictlist$AllDictList$indexedMap = F2(
	function (func, dictlist) {
		var go = F3(
			function (key, value, _p97) {
				var _p98 = _p97;
				var _p99 = _p98._0;
				return {
					ctor: '_Tuple2',
					_0: _p99 + 1,
					_1: A2(
						_Gizra$elm_dictlist$AllDictList$AllDictList,
						A3(
							_eeue56$elm_all_dict$AllDict$insert,
							key,
							A3(func, _p99, key, value),
							_p98._1._0),
						{ctor: '::', _0: key, _1: _p98._1._1})
				};
			});
		return _Gizra$elm_dictlist$AllDictList$reverse(
			_elm_lang$core$Tuple$second(
				A3(
					_Gizra$elm_dictlist$AllDictList$foldl,
					go,
					{
						ctor: '_Tuple2',
						_0: 0,
						_1: _Gizra$elm_dictlist$AllDictList$emptyWithOrdFrom(dictlist)
					},
					dictlist)));
	});
var _Gizra$elm_dictlist$AllDictList$filterMap = F2(
	function (func, dictlist) {
		var go = F3(
			function (key, value, acc) {
				return A2(
					_elm_lang$core$Maybe$withDefault,
					acc,
					A2(
						_elm_lang$core$Maybe$map,
						function (result) {
							return A3(_Gizra$elm_dictlist$AllDictList$cons, key, result, acc);
						},
						A2(func, key, value)));
			});
		return A3(
			_Gizra$elm_dictlist$AllDictList$foldr,
			go,
			_Gizra$elm_dictlist$AllDictList$emptyWithOrdFrom(dictlist),
			dictlist);
	});
var _Gizra$elm_dictlist$AllDictList$reorder = F2(
	function (newKeys, dictlist) {
		var go = F2(
			function (key, acc) {
				var _p100 = A2(_Gizra$elm_dictlist$AllDictList$get, key, dictlist);
				if (_p100.ctor === 'Just') {
					return A3(_Gizra$elm_dictlist$AllDictList$cons, key, _p100._0, acc);
				} else {
					return acc;
				}
			});
		return A3(
			_elm_lang$core$List$foldr,
			go,
			_Gizra$elm_dictlist$AllDictList$emptyWithOrdFrom(dictlist),
			newKeys);
	});
var _Gizra$elm_dictlist$AllDictList$insert = F3(
	function (key, value, _p101) {
		var _p102 = _p101;
		var _p104 = _p102._1;
		var _p103 = _p102._0;
		var newList = A2(_eeue56$elm_all_dict$AllDict$member, key, _p103) ? _p104 : A2(
			_elm_lang$core$Basics_ops['++'],
			_p104,
			{
				ctor: '::',
				_0: key,
				_1: {ctor: '[]'}
			});
		var newDict = A3(_eeue56$elm_all_dict$AllDict$insert, key, value, _p103);
		return A2(_Gizra$elm_dictlist$AllDictList$AllDictList, newDict, newList);
	});
var _Gizra$elm_dictlist$AllDictList$decodeWithKeys = F3(
	function (ord, keys, func) {
		var go = F3(
			function (jsonValue, key, accum) {
				var _p105 = {
					ctor: '_Tuple2',
					_0: accum,
					_1: A2(
						_elm_lang$core$Json_Decode$decodeValue,
						func(key),
						jsonValue)
				};
				if (_p105._0.ctor === 'Ok') {
					if (_p105._1.ctor === 'Ok') {
						return _elm_lang$core$Result$Ok(
							A3(_Gizra$elm_dictlist$AllDictList$insert, key, _p105._1._0, _p105._0._0));
					} else {
						return _elm_lang$core$Result$Err(_p105._1._0);
					}
				} else {
					if (_p105._1.ctor === 'Ok') {
						return accum;
					} else {
						return _elm_lang$core$Result$Err(
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p105._0._0,
								A2(_elm_lang$core$Basics_ops['++'], '\n', _p105._1._0)));
					}
				}
			});
		return A2(
			_elm_lang$core$Json_Decode$andThen,
			function (jsonValue) {
				var _p106 = A3(
					_elm_lang$core$List$foldl,
					go(jsonValue),
					_elm_lang$core$Result$Ok(
						_Gizra$elm_dictlist$AllDictList$empty(ord)),
					keys);
				if (_p106.ctor === 'Ok') {
					return _elm_lang$core$Json_Decode$succeed(_p106._0);
				} else {
					return _elm_lang$core$Json_Decode$fail(_p106._0);
				}
			},
			_elm_lang$core$Json_Decode$value);
	});
var _Gizra$elm_dictlist$AllDictList$decodeKeysAndValues = F3(
	function (ord, keyDecoder, func) {
		return A2(
			_elm_lang$core$Json_Decode$andThen,
			function (keys) {
				return A3(_Gizra$elm_dictlist$AllDictList$decodeWithKeys, ord, keys, func);
			},
			keyDecoder);
	});
var _Gizra$elm_dictlist$AllDictList$filter = F2(
	function (predicate, dictList) {
		var add = F3(
			function (key, value, dict) {
				return A2(predicate, key, value) ? A3(_Gizra$elm_dictlist$AllDictList$insert, key, value, dict) : dict;
			});
		return A3(
			_Gizra$elm_dictlist$AllDictList$foldl,
			add,
			_Gizra$elm_dictlist$AllDictList$emptyWithOrdFrom(dictList),
			dictList);
	});
var _Gizra$elm_dictlist$AllDictList$intersect = F2(
	function (t1, t2) {
		return A2(
			_Gizra$elm_dictlist$AllDictList$filter,
			F2(
				function (k, _p107) {
					return A2(_Gizra$elm_dictlist$AllDictList$member, k, t2);
				}),
			t1);
	});
var _Gizra$elm_dictlist$AllDictList$removeWhen = F2(
	function (pred, dict) {
		return A2(
			_Gizra$elm_dictlist$AllDictList$filter,
			F2(
				function (k, v) {
					return !A2(pred, k, v);
				}),
			dict);
	});
var _Gizra$elm_dictlist$AllDictList$partition = F2(
	function (predicate, dict) {
		var emptyLikeDict = _Gizra$elm_dictlist$AllDictList$emptyWithOrdFrom(dict);
		var add = F3(
			function (key, value, _p108) {
				var _p109 = _p108;
				var _p111 = _p109._1;
				var _p110 = _p109._0;
				return A2(predicate, key, value) ? {
					ctor: '_Tuple2',
					_0: A3(_Gizra$elm_dictlist$AllDictList$insert, key, value, _p110),
					_1: _p111
				} : {
					ctor: '_Tuple2',
					_0: _p110,
					_1: A3(_Gizra$elm_dictlist$AllDictList$insert, key, value, _p111)
				};
			});
		return A3(
			_Gizra$elm_dictlist$AllDictList$foldl,
			add,
			{ctor: '_Tuple2', _0: emptyLikeDict, _1: emptyLikeDict},
			dict);
	});
var _Gizra$elm_dictlist$AllDictList$fromList = F2(
	function (ord, assocs) {
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (_p112, dict) {
					var _p113 = _p112;
					return A3(_Gizra$elm_dictlist$AllDictList$insert, _p113._0, _p113._1, dict);
				}),
			_Gizra$elm_dictlist$AllDictList$empty(ord),
			assocs);
	});
var _Gizra$elm_dictlist$AllDictList$decodeObject = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$map,
		_Gizra$elm_dictlist$AllDictList$fromList(_elm_lang$core$Basics$identity),
		_elm_lang$core$Json_Decode$keyValuePairs(decoder));
};
var _Gizra$elm_dictlist$AllDictList$decodeArray = F3(
	function (ord, keyMapper, valueDecoder) {
		return A2(
			_elm_lang$core$Json_Decode$map,
			function (_p114) {
				return A2(
					_Gizra$elm_dictlist$AllDictList$fromList,
					ord,
					A2(
						_elm_lang$core$List$map,
						function (value) {
							return {
								ctor: '_Tuple2',
								_0: keyMapper(value),
								_1: value
							};
						},
						_p114));
			},
			_elm_lang$core$Json_Decode$list(valueDecoder));
	});
var _Gizra$elm_dictlist$AllDictList$decodeArray2 = F3(
	function (ord, keyDecoder, valueDecoder) {
		return A2(
			_elm_lang$core$Json_Decode$map,
			_Gizra$elm_dictlist$AllDictList$fromList(ord),
			_elm_lang$core$Json_Decode$list(
				A3(
					_elm_lang$core$Json_Decode$map2,
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						}),
					keyDecoder,
					valueDecoder)));
	});
var _Gizra$elm_dictlist$AllDictList$fromListBy = F3(
	function (ord, keyfn, xs) {
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (x, acc) {
					return A3(
						_Gizra$elm_dictlist$AllDictList$insert,
						keyfn(x),
						x,
						acc);
				}),
			_Gizra$elm_dictlist$AllDictList$empty(ord),
			xs);
	});
var _Gizra$elm_dictlist$AllDictList$keepOnly = F2(
	function (set, dict) {
		return A3(
			_elm_lang$core$Set$foldl,
			F2(
				function (k, acc) {
					return A2(
						_elm_lang$core$Maybe$withDefault,
						acc,
						A2(
							_elm_lang$core$Maybe$map,
							function (v) {
								return A3(_Gizra$elm_dictlist$AllDictList$insert, k, v, acc);
							},
							A2(_Gizra$elm_dictlist$AllDictList$get, k, dict)));
				}),
			_Gizra$elm_dictlist$AllDictList$emptyWithOrdFrom(dict),
			set);
	});
var _Gizra$elm_dictlist$AllDictList$mapKeys = F3(
	function (ord, keyMapper, dict) {
		var addKey = F3(
			function (key, value, d) {
				return A3(
					_Gizra$elm_dictlist$AllDictList$insert,
					keyMapper(key),
					value,
					d);
			});
		return A3(
			_Gizra$elm_dictlist$AllDictList$foldl,
			addKey,
			_Gizra$elm_dictlist$AllDictList$empty(ord),
			dict);
	});
var _Gizra$elm_dictlist$AllDictList$remove = F2(
	function (key, _p115) {
		var _p116 = _p115;
		var _p117 = _p116._0;
		return A2(
			_Gizra$elm_dictlist$AllDictList$AllDictList,
			A2(_eeue56$elm_all_dict$AllDict$remove, key, _p117),
			A3(_Gizra$elm_dictlist$AllDictList$removeKey, key, _p117, _p116._1));
	});
var _Gizra$elm_dictlist$AllDictList$update = F3(
	function (key, alter, dictList) {
		var _p118 = alter(
			A2(_Gizra$elm_dictlist$AllDictList$get, key, dictList));
		if (_p118.ctor === 'Nothing') {
			return A2(_Gizra$elm_dictlist$AllDictList$remove, key, dictList);
		} else {
			return A3(_Gizra$elm_dictlist$AllDictList$insert, key, _p118._0, dictList);
		}
	});
var _Gizra$elm_dictlist$AllDictList$groupBy = F3(
	function (ord, keyfn, list) {
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, acc) {
					return A3(
						_Gizra$elm_dictlist$AllDictList$update,
						keyfn(x),
						function (_p119) {
							return _elm_lang$core$Maybe$Just(
								A2(
									_elm_lang$core$Maybe$withDefault,
									{
										ctor: '::',
										_0: x,
										_1: {ctor: '[]'}
									},
									A2(
										_elm_lang$core$Maybe$map,
										F2(
											function (x, y) {
												return {ctor: '::', _0: x, _1: y};
											})(x),
										_p119)));
						},
						acc);
				}),
			_Gizra$elm_dictlist$AllDictList$empty(ord),
			list);
	});
var _Gizra$elm_dictlist$AllDictList$diff = F2(
	function (t1, t2) {
		return A3(
			_Gizra$elm_dictlist$AllDictList$foldl,
			F3(
				function (k, v, t) {
					return A2(_Gizra$elm_dictlist$AllDictList$remove, k, t);
				}),
			t1,
			t2);
	});
var _Gizra$elm_dictlist$AllDictList$removeMany = F2(
	function (set, dict) {
		return A3(
			_elm_lang$core$Set$foldl,
			F2(
				function (k, acc) {
					return A2(_Gizra$elm_dictlist$AllDictList$remove, k, acc);
				}),
			dict,
			set);
	});
var _Gizra$elm_dictlist$AllDictList$singleton = F3(
	function (ord, key, value) {
		return A2(
			_Gizra$elm_dictlist$AllDictList$AllDictList,
			A3(_eeue56$elm_all_dict$AllDict$singleton, ord, key, value),
			{
				ctor: '::',
				_0: key,
				_1: {ctor: '[]'}
			});
	});
var _Gizra$elm_dictlist$AllDictList$map = F2(
	function (func, _p120) {
		var _p121 = _p120;
		return A2(
			_Gizra$elm_dictlist$AllDictList$AllDictList,
			A2(_eeue56$elm_all_dict$AllDict$map, func, _p121._0),
			_p121._1);
	});
var _Gizra$elm_dictlist$AllDictList$fromAllDict = function (dict) {
	return A2(
		_Gizra$elm_dictlist$AllDictList$AllDictList,
		dict,
		_eeue56$elm_all_dict$AllDict$keys(dict));
};
var _Gizra$elm_dictlist$AllDictList$fromDict = function (dict) {
	var allDict = A3(
		_elm_lang$core$Dict$foldl,
		_eeue56$elm_all_dict$AllDict$insert,
		_eeue56$elm_all_dict$AllDict$empty(_elm_lang$core$Basics$identity),
		dict);
	return A2(
		_Gizra$elm_dictlist$AllDictList$AllDictList,
		allDict,
		_elm_lang$core$Dict$keys(dict));
};
var _Gizra$elm_dictlist$AllDictList$AfterKey = function (a) {
	return {ctor: 'AfterKey', _0: a};
};
var _Gizra$elm_dictlist$AllDictList$BeforeKey = function (a) {
	return {ctor: 'BeforeKey', _0: a};
};
var _Gizra$elm_dictlist$AllDictList$relativePosition = F2(
	function (key, dictlist) {
		var _p122 = A2(_Gizra$elm_dictlist$AllDictList$previous, key, dictlist);
		if (_p122.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(
				_Gizra$elm_dictlist$AllDictList$AfterKey(_p122._0._0));
		} else {
			var _p123 = A2(_Gizra$elm_dictlist$AllDictList$next, key, dictlist);
			if (_p123.ctor === 'Just') {
				return _elm_lang$core$Maybe$Just(
					_Gizra$elm_dictlist$AllDictList$BeforeKey(_p123._0._0));
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}
	});

var _Gizra$elm_dictlist$EveryDictList$mapKeys = _Gizra$elm_dictlist$AllDictList$mapKeys(_elm_lang$core$Basics$toString);
var _Gizra$elm_dictlist$EveryDictList$keepOnly = _Gizra$elm_dictlist$AllDictList$keepOnly;
var _Gizra$elm_dictlist$EveryDictList$removeMany = _Gizra$elm_dictlist$AllDictList$removeMany;
var _Gizra$elm_dictlist$EveryDictList$removeWhen = _Gizra$elm_dictlist$AllDictList$removeWhen;
var _Gizra$elm_dictlist$EveryDictList$fromListBy = _Gizra$elm_dictlist$AllDictList$fromListBy(_elm_lang$core$Basics$toString);
var _Gizra$elm_dictlist$EveryDictList$groupBy = _Gizra$elm_dictlist$AllDictList$groupBy(_elm_lang$core$Basics$toString);
var _Gizra$elm_dictlist$EveryDictList$fromAllDictList = _elm_lang$core$Basics$identity;
var _Gizra$elm_dictlist$EveryDictList$toAllDictList = _elm_lang$core$Basics$identity;
var _Gizra$elm_dictlist$EveryDictList$fromDict = _Gizra$elm_dictlist$AllDictList$fromDict;
var _Gizra$elm_dictlist$EveryDictList$toDict = _Gizra$elm_dictlist$AllDictList$toDict;
var _Gizra$elm_dictlist$EveryDictList$fromList = _Gizra$elm_dictlist$AllDictList$fromList(_elm_lang$core$Basics$toString);
var _Gizra$elm_dictlist$EveryDictList$toList = _Gizra$elm_dictlist$AllDictList$toList;
var _Gizra$elm_dictlist$EveryDictList$values = _Gizra$elm_dictlist$AllDictList$values;
var _Gizra$elm_dictlist$EveryDictList$keys = _Gizra$elm_dictlist$AllDictList$keys;
var _Gizra$elm_dictlist$EveryDictList$partition = _Gizra$elm_dictlist$AllDictList$partition;
var _Gizra$elm_dictlist$EveryDictList$filter = _Gizra$elm_dictlist$AllDictList$filter;
var _Gizra$elm_dictlist$EveryDictList$foldr = _Gizra$elm_dictlist$AllDictList$foldr;
var _Gizra$elm_dictlist$EveryDictList$foldl = _Gizra$elm_dictlist$AllDictList$foldl;
var _Gizra$elm_dictlist$EveryDictList$map = _Gizra$elm_dictlist$AllDictList$map;
var _Gizra$elm_dictlist$EveryDictList$merge = _Gizra$elm_dictlist$AllDictList$merge;
var _Gizra$elm_dictlist$EveryDictList$diff = _Gizra$elm_dictlist$AllDictList$diff;
var _Gizra$elm_dictlist$EveryDictList$intersect = _Gizra$elm_dictlist$AllDictList$intersect;
var _Gizra$elm_dictlist$EveryDictList$union = _Gizra$elm_dictlist$AllDictList$union;
var _Gizra$elm_dictlist$EveryDictList$singleton = _Gizra$elm_dictlist$AllDictList$singleton(_elm_lang$core$Basics$toString);
var _Gizra$elm_dictlist$EveryDictList$update = _Gizra$elm_dictlist$AllDictList$update;
var _Gizra$elm_dictlist$EveryDictList$remove = _Gizra$elm_dictlist$AllDictList$remove;
var _Gizra$elm_dictlist$EveryDictList$insert = _Gizra$elm_dictlist$AllDictList$insert;
var _Gizra$elm_dictlist$EveryDictList$isEmpty = _Gizra$elm_dictlist$AllDictList$isEmpty;
var _Gizra$elm_dictlist$EveryDictList$size = _Gizra$elm_dictlist$AllDictList$size;
var _Gizra$elm_dictlist$EveryDictList$member = _Gizra$elm_dictlist$AllDictList$member;
var _Gizra$elm_dictlist$EveryDictList$get = _Gizra$elm_dictlist$AllDictList$get;
var _Gizra$elm_dictlist$EveryDictList$eq = _Gizra$elm_dictlist$AllDictList$eq;
var _Gizra$elm_dictlist$EveryDictList$empty = _Gizra$elm_dictlist$AllDictList$empty(_elm_lang$core$Basics$toString);
var _Gizra$elm_dictlist$EveryDictList$insertRelativeTo = _Gizra$elm_dictlist$AllDictList$insertRelativeTo;
var _Gizra$elm_dictlist$EveryDictList$atRelativePosition = _Gizra$elm_dictlist$AllDictList$atRelativePosition;
var _Gizra$elm_dictlist$EveryDictList$relativePosition = _Gizra$elm_dictlist$AllDictList$relativePosition;
var _Gizra$elm_dictlist$EveryDictList$insertBefore = _Gizra$elm_dictlist$AllDictList$insertBefore;
var _Gizra$elm_dictlist$EveryDictList$insertAfter = _Gizra$elm_dictlist$AllDictList$insertAfter;
var _Gizra$elm_dictlist$EveryDictList$getAt = _Gizra$elm_dictlist$AllDictList$getAt;
var _Gizra$elm_dictlist$EveryDictList$getKeyAt = _Gizra$elm_dictlist$AllDictList$getKeyAt;
var _Gizra$elm_dictlist$EveryDictList$reorder = _Gizra$elm_dictlist$AllDictList$reorder;
var _Gizra$elm_dictlist$EveryDictList$previous = _Gizra$elm_dictlist$AllDictList$previous;
var _Gizra$elm_dictlist$EveryDictList$next = _Gizra$elm_dictlist$AllDictList$next;
var _Gizra$elm_dictlist$EveryDictList$indexOfKey = _Gizra$elm_dictlist$AllDictList$indexOfKey;
var _Gizra$elm_dictlist$EveryDictList$sortWith = _Gizra$elm_dictlist$AllDictList$sortWith;
var _Gizra$elm_dictlist$EveryDictList$sortBy = _Gizra$elm_dictlist$AllDictList$sortBy;
var _Gizra$elm_dictlist$EveryDictList$sort = _Gizra$elm_dictlist$AllDictList$sort;
var _Gizra$elm_dictlist$EveryDictList$drop = _Gizra$elm_dictlist$AllDictList$drop;
var _Gizra$elm_dictlist$EveryDictList$take = _Gizra$elm_dictlist$AllDictList$take;
var _Gizra$elm_dictlist$EveryDictList$minimum = _Gizra$elm_dictlist$AllDictList$minimum;
var _Gizra$elm_dictlist$EveryDictList$maximum = _Gizra$elm_dictlist$AllDictList$maximum;
var _Gizra$elm_dictlist$EveryDictList$product = _Gizra$elm_dictlist$AllDictList$product;
var _Gizra$elm_dictlist$EveryDictList$sum = _Gizra$elm_dictlist$AllDictList$sum;
var _Gizra$elm_dictlist$EveryDictList$concat = _Gizra$elm_dictlist$AllDictList$concat(_elm_lang$core$Basics$toString);
var _Gizra$elm_dictlist$EveryDictList$append = _Gizra$elm_dictlist$AllDictList$append;
var _Gizra$elm_dictlist$EveryDictList$any = _Gizra$elm_dictlist$AllDictList$any;
var _Gizra$elm_dictlist$EveryDictList$all = _Gizra$elm_dictlist$AllDictList$all;
var _Gizra$elm_dictlist$EveryDictList$reverse = _Gizra$elm_dictlist$AllDictList$reverse;
var _Gizra$elm_dictlist$EveryDictList$length = _Gizra$elm_dictlist$AllDictList$length;
var _Gizra$elm_dictlist$EveryDictList$filterMap = _Gizra$elm_dictlist$AllDictList$filterMap;
var _Gizra$elm_dictlist$EveryDictList$indexedMap = _Gizra$elm_dictlist$AllDictList$indexedMap;
var _Gizra$elm_dictlist$EveryDictList$tail = _Gizra$elm_dictlist$AllDictList$tail;
var _Gizra$elm_dictlist$EveryDictList$head = _Gizra$elm_dictlist$AllDictList$head;
var _Gizra$elm_dictlist$EveryDictList$cons = _Gizra$elm_dictlist$AllDictList$cons;
var _Gizra$elm_dictlist$EveryDictList$decodeArray2 = _Gizra$elm_dictlist$AllDictList$decodeArray2(_elm_lang$core$Basics$toString);
var _Gizra$elm_dictlist$EveryDictList$decodeArray = _Gizra$elm_dictlist$AllDictList$decodeArray(_elm_lang$core$Basics$toString);
var _Gizra$elm_dictlist$EveryDictList$decodeKeysAndValues = _Gizra$elm_dictlist$AllDictList$decodeKeysAndValues(_elm_lang$core$Basics$toString);
var _Gizra$elm_dictlist$EveryDictList$decodeWithKeys = _Gizra$elm_dictlist$AllDictList$decodeWithKeys(_elm_lang$core$Basics$toString);
var _Gizra$elm_dictlist$EveryDictList$decodeObject = _Gizra$elm_dictlist$AllDictList$decodeObject;

var _stoeffel$editable$Editable$isDirtyWith = F2(
	function (f, x) {
		var _p0 = x;
		if (_p0.ctor === 'ReadOnly') {
			return false;
		} else {
			return A2(f, _p0._0, _p0._1);
		}
	});
var _stoeffel$editable$Editable$isDirty = function (x) {
	return A2(
		_stoeffel$editable$Editable$isDirtyWith,
		F2(
			function (x, y) {
				return !_elm_lang$core$Native_Utils.eq(x, y);
			}),
		x);
};
var _stoeffel$editable$Editable$value = function (x) {
	var _p1 = x;
	if (_p1.ctor === 'Editable') {
		return _p1._1;
	} else {
		return _p1._0;
	}
};
var _stoeffel$editable$Editable$ReadOnly = function (a) {
	return {ctor: 'ReadOnly', _0: a};
};
var _stoeffel$editable$Editable$save = function (x) {
	var _p2 = x;
	if (_p2.ctor === 'Editable') {
		return _stoeffel$editable$Editable$ReadOnly(_p2._1);
	} else {
		return x;
	}
};
var _stoeffel$editable$Editable$cancel = function (x) {
	var _p3 = x;
	if (_p3.ctor === 'Editable') {
		return _stoeffel$editable$Editable$ReadOnly(_p3._0);
	} else {
		return x;
	}
};
var _stoeffel$editable$Editable$Editable = F2(
	function (a, b) {
		return {ctor: 'Editable', _0: a, _1: b};
	});
var _stoeffel$editable$Editable$edit = function (x) {
	var _p4 = x;
	if (_p4.ctor === 'Editable') {
		return x;
	} else {
		var _p5 = _p4._0;
		return A2(_stoeffel$editable$Editable$Editable, _p5, _p5);
	}
};
var _stoeffel$editable$Editable$map = F2(
	function (f, x) {
		var _p6 = x;
		if (_p6.ctor === 'Editable') {
			return A2(
				_stoeffel$editable$Editable$Editable,
				_p6._0,
				f(_p6._1));
		} else {
			return _stoeffel$editable$Editable$ReadOnly(_p6._0);
		}
	});
var _stoeffel$editable$Editable$update = function (value) {
	return _stoeffel$editable$Editable$map(
		_elm_lang$core$Basics$always(value));
};

var _elm_lang$http$Native_Http = function() {


// ENCODING AND DECODING

function encodeUri(string)
{
	return encodeURIComponent(string);
}

function decodeUri(string)
{
	try
	{
		return _elm_lang$core$Maybe$Just(decodeURIComponent(string));
	}
	catch(e)
	{
		return _elm_lang$core$Maybe$Nothing;
	}
}


// SEND REQUEST

function toTask(request, maybeProgress)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var xhr = new XMLHttpRequest();

		configureProgress(xhr, maybeProgress);

		xhr.addEventListener('error', function() {
			callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'NetworkError' }));
		});
		xhr.addEventListener('timeout', function() {
			callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'Timeout' }));
		});
		xhr.addEventListener('load', function() {
			callback(handleResponse(xhr, request.expect.responseToResult));
		});

		try
		{
			xhr.open(request.method, request.url, true);
		}
		catch (e)
		{
			return callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'BadUrl', _0: request.url }));
		}

		configureRequest(xhr, request);
		send(xhr, request.body);

		return function() { xhr.abort(); };
	});
}

function configureProgress(xhr, maybeProgress)
{
	if (maybeProgress.ctor === 'Nothing')
	{
		return;
	}

	xhr.addEventListener('progress', function(event) {
		if (!event.lengthComputable)
		{
			return;
		}
		_elm_lang$core$Native_Scheduler.rawSpawn(maybeProgress._0({
			bytes: event.loaded,
			bytesExpected: event.total
		}));
	});
}

function configureRequest(xhr, request)
{
	function setHeader(pair)
	{
		xhr.setRequestHeader(pair._0, pair._1);
	}

	A2(_elm_lang$core$List$map, setHeader, request.headers);
	xhr.responseType = request.expect.responseType;
	xhr.withCredentials = request.withCredentials;

	if (request.timeout.ctor === 'Just')
	{
		xhr.timeout = request.timeout._0;
	}
}

function send(xhr, body)
{
	switch (body.ctor)
	{
		case 'EmptyBody':
			xhr.send();
			return;

		case 'StringBody':
			xhr.setRequestHeader('Content-Type', body._0);
			xhr.send(body._1);
			return;

		case 'FormDataBody':
			xhr.send(body._0);
			return;
	}
}


// RESPONSES

function handleResponse(xhr, responseToResult)
{
	var response = toResponse(xhr);

	if (xhr.status < 200 || 300 <= xhr.status)
	{
		response.body = xhr.responseText;
		return _elm_lang$core$Native_Scheduler.fail({
			ctor: 'BadStatus',
			_0: response
		});
	}

	var result = responseToResult(response);

	if (result.ctor === 'Ok')
	{
		return _elm_lang$core$Native_Scheduler.succeed(result._0);
	}
	else
	{
		response.body = xhr.responseText;
		return _elm_lang$core$Native_Scheduler.fail({
			ctor: 'BadPayload',
			_0: result._0,
			_1: response
		});
	}
}

function toResponse(xhr)
{
	return {
		status: { code: xhr.status, message: xhr.statusText },
		headers: parseHeaders(xhr.getAllResponseHeaders()),
		url: xhr.responseURL,
		body: xhr.response
	};
}

function parseHeaders(rawHeaders)
{
	var headers = _elm_lang$core$Dict$empty;

	if (!rawHeaders)
	{
		return headers;
	}

	var headerPairs = rawHeaders.split('\u000d\u000a');
	for (var i = headerPairs.length; i--; )
	{
		var headerPair = headerPairs[i];
		var index = headerPair.indexOf('\u003a\u0020');
		if (index > 0)
		{
			var key = headerPair.substring(0, index);
			var value = headerPair.substring(index + 2);

			headers = A3(_elm_lang$core$Dict$update, key, function(oldValue) {
				if (oldValue.ctor === 'Just')
				{
					return _elm_lang$core$Maybe$Just(value + ', ' + oldValue._0);
				}
				return _elm_lang$core$Maybe$Just(value);
			}, headers);
		}
	}

	return headers;
}


// EXPECTORS

function expectStringResponse(responseToResult)
{
	return {
		responseType: 'text',
		responseToResult: responseToResult
	};
}

function mapExpect(func, expect)
{
	return {
		responseType: expect.responseType,
		responseToResult: function(response) {
			var convertedResponse = expect.responseToResult(response);
			return A2(_elm_lang$core$Result$map, func, convertedResponse);
		}
	};
}


// BODY

function multipart(parts)
{
	var formData = new FormData();

	while (parts.ctor !== '[]')
	{
		var part = parts._0;
		formData.append(part._0, part._1);
		parts = parts._1;
	}

	return { ctor: 'FormDataBody', _0: formData };
}

return {
	toTask: F2(toTask),
	expectStringResponse: expectStringResponse,
	mapExpect: F2(mapExpect),
	multipart: multipart,
	encodeUri: encodeUri,
	decodeUri: decodeUri
};

}();

//import Native.Scheduler //

var _elm_lang$core$Native_Time = function() {

var now = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
{
	callback(_elm_lang$core$Native_Scheduler.succeed(Date.now()));
});

function setInterval_(interval, task)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var id = setInterval(function() {
			_elm_lang$core$Native_Scheduler.rawSpawn(task);
		}, interval);

		return function() { clearInterval(id); };
	});
}

return {
	now: now,
	setInterval_: F2(setInterval_)
};

}();
var _elm_lang$core$Task$onError = _elm_lang$core$Native_Scheduler.onError;
var _elm_lang$core$Task$andThen = _elm_lang$core$Native_Scheduler.andThen;
var _elm_lang$core$Task$spawnCmd = F2(
	function (router, _p0) {
		var _p1 = _p0;
		return _elm_lang$core$Native_Scheduler.spawn(
			A2(
				_elm_lang$core$Task$andThen,
				_elm_lang$core$Platform$sendToApp(router),
				_p1._0));
	});
var _elm_lang$core$Task$fail = _elm_lang$core$Native_Scheduler.fail;
var _elm_lang$core$Task$mapError = F2(
	function (convert, task) {
		return A2(
			_elm_lang$core$Task$onError,
			function (_p2) {
				return _elm_lang$core$Task$fail(
					convert(_p2));
			},
			task);
	});
var _elm_lang$core$Task$succeed = _elm_lang$core$Native_Scheduler.succeed;
var _elm_lang$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return _elm_lang$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var _elm_lang$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return _elm_lang$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map3 = F4(
	function (func, taskA, taskB, taskC) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return _elm_lang$core$Task$succeed(
									A3(func, a, b, c));
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map4 = F5(
	function (func, taskA, taskB, taskC, taskD) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return A2(
									_elm_lang$core$Task$andThen,
									function (d) {
										return _elm_lang$core$Task$succeed(
											A4(func, a, b, c, d));
									},
									taskD);
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map5 = F6(
	function (func, taskA, taskB, taskC, taskD, taskE) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return A2(
									_elm_lang$core$Task$andThen,
									function (d) {
										return A2(
											_elm_lang$core$Task$andThen,
											function (e) {
												return _elm_lang$core$Task$succeed(
													A5(func, a, b, c, d, e));
											},
											taskE);
									},
									taskD);
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$sequence = function (tasks) {
	var _p3 = tasks;
	if (_p3.ctor === '[]') {
		return _elm_lang$core$Task$succeed(
			{ctor: '[]'});
	} else {
		return A3(
			_elm_lang$core$Task$map2,
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				}),
			_p3._0,
			_elm_lang$core$Task$sequence(_p3._1));
	}
};
var _elm_lang$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			_elm_lang$core$Task$map,
			function (_p4) {
				return {ctor: '_Tuple0'};
			},
			_elm_lang$core$Task$sequence(
				A2(
					_elm_lang$core$List$map,
					_elm_lang$core$Task$spawnCmd(router),
					commands)));
	});
var _elm_lang$core$Task$init = _elm_lang$core$Task$succeed(
	{ctor: '_Tuple0'});
var _elm_lang$core$Task$onSelfMsg = F3(
	function (_p7, _p6, _p5) {
		return _elm_lang$core$Task$succeed(
			{ctor: '_Tuple0'});
	});
var _elm_lang$core$Task$command = _elm_lang$core$Native_Platform.leaf('Task');
var _elm_lang$core$Task$Perform = function (a) {
	return {ctor: 'Perform', _0: a};
};
var _elm_lang$core$Task$perform = F2(
	function (toMessage, task) {
		return _elm_lang$core$Task$command(
			_elm_lang$core$Task$Perform(
				A2(_elm_lang$core$Task$map, toMessage, task)));
	});
var _elm_lang$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return _elm_lang$core$Task$command(
			_elm_lang$core$Task$Perform(
				A2(
					_elm_lang$core$Task$onError,
					function (_p8) {
						return _elm_lang$core$Task$succeed(
							resultToMessage(
								_elm_lang$core$Result$Err(_p8)));
					},
					A2(
						_elm_lang$core$Task$andThen,
						function (_p9) {
							return _elm_lang$core$Task$succeed(
								resultToMessage(
									_elm_lang$core$Result$Ok(_p9)));
						},
						task))));
	});
var _elm_lang$core$Task$cmdMap = F2(
	function (tagger, _p10) {
		var _p11 = _p10;
		return _elm_lang$core$Task$Perform(
			A2(_elm_lang$core$Task$map, tagger, _p11._0));
	});
_elm_lang$core$Native_Platform.effectManagers['Task'] = {pkg: 'elm-lang/core', init: _elm_lang$core$Task$init, onEffects: _elm_lang$core$Task$onEffects, onSelfMsg: _elm_lang$core$Task$onSelfMsg, tag: 'cmd', cmdMap: _elm_lang$core$Task$cmdMap};

var _elm_lang$core$Time$setInterval = _elm_lang$core$Native_Time.setInterval_;
var _elm_lang$core$Time$spawnHelp = F3(
	function (router, intervals, processes) {
		var _p0 = intervals;
		if (_p0.ctor === '[]') {
			return _elm_lang$core$Task$succeed(processes);
		} else {
			var _p1 = _p0._0;
			var spawnRest = function (id) {
				return A3(
					_elm_lang$core$Time$spawnHelp,
					router,
					_p0._1,
					A3(_elm_lang$core$Dict$insert, _p1, id, processes));
			};
			var spawnTimer = _elm_lang$core$Native_Scheduler.spawn(
				A2(
					_elm_lang$core$Time$setInterval,
					_p1,
					A2(_elm_lang$core$Platform$sendToSelf, router, _p1)));
			return A2(_elm_lang$core$Task$andThen, spawnRest, spawnTimer);
		}
	});
var _elm_lang$core$Time$addMySub = F2(
	function (_p2, state) {
		var _p3 = _p2;
		var _p6 = _p3._1;
		var _p5 = _p3._0;
		var _p4 = A2(_elm_lang$core$Dict$get, _p5, state);
		if (_p4.ctor === 'Nothing') {
			return A3(
				_elm_lang$core$Dict$insert,
				_p5,
				{
					ctor: '::',
					_0: _p6,
					_1: {ctor: '[]'}
				},
				state);
		} else {
			return A3(
				_elm_lang$core$Dict$insert,
				_p5,
				{ctor: '::', _0: _p6, _1: _p4._0},
				state);
		}
	});
var _elm_lang$core$Time$inMilliseconds = function (t) {
	return t;
};
var _elm_lang$core$Time$millisecond = 1;
var _elm_lang$core$Time$second = 1000 * _elm_lang$core$Time$millisecond;
var _elm_lang$core$Time$minute = 60 * _elm_lang$core$Time$second;
var _elm_lang$core$Time$hour = 60 * _elm_lang$core$Time$minute;
var _elm_lang$core$Time$inHours = function (t) {
	return t / _elm_lang$core$Time$hour;
};
var _elm_lang$core$Time$inMinutes = function (t) {
	return t / _elm_lang$core$Time$minute;
};
var _elm_lang$core$Time$inSeconds = function (t) {
	return t / _elm_lang$core$Time$second;
};
var _elm_lang$core$Time$now = _elm_lang$core$Native_Time.now;
var _elm_lang$core$Time$onSelfMsg = F3(
	function (router, interval, state) {
		var _p7 = A2(_elm_lang$core$Dict$get, interval, state.taggers);
		if (_p7.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(state);
		} else {
			var tellTaggers = function (time) {
				return _elm_lang$core$Task$sequence(
					A2(
						_elm_lang$core$List$map,
						function (tagger) {
							return A2(
								_elm_lang$core$Platform$sendToApp,
								router,
								tagger(time));
						},
						_p7._0));
			};
			return A2(
				_elm_lang$core$Task$andThen,
				function (_p8) {
					return _elm_lang$core$Task$succeed(state);
				},
				A2(_elm_lang$core$Task$andThen, tellTaggers, _elm_lang$core$Time$now));
		}
	});
var _elm_lang$core$Time$subscription = _elm_lang$core$Native_Platform.leaf('Time');
var _elm_lang$core$Time$State = F2(
	function (a, b) {
		return {taggers: a, processes: b};
	});
var _elm_lang$core$Time$init = _elm_lang$core$Task$succeed(
	A2(_elm_lang$core$Time$State, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty));
var _elm_lang$core$Time$onEffects = F3(
	function (router, subs, _p9) {
		var _p10 = _p9;
		var rightStep = F3(
			function (_p12, id, _p11) {
				var _p13 = _p11;
				return {
					ctor: '_Tuple3',
					_0: _p13._0,
					_1: _p13._1,
					_2: A2(
						_elm_lang$core$Task$andThen,
						function (_p14) {
							return _p13._2;
						},
						_elm_lang$core$Native_Scheduler.kill(id))
				};
			});
		var bothStep = F4(
			function (interval, taggers, id, _p15) {
				var _p16 = _p15;
				return {
					ctor: '_Tuple3',
					_0: _p16._0,
					_1: A3(_elm_lang$core$Dict$insert, interval, id, _p16._1),
					_2: _p16._2
				};
			});
		var leftStep = F3(
			function (interval, taggers, _p17) {
				var _p18 = _p17;
				return {
					ctor: '_Tuple3',
					_0: {ctor: '::', _0: interval, _1: _p18._0},
					_1: _p18._1,
					_2: _p18._2
				};
			});
		var newTaggers = A3(_elm_lang$core$List$foldl, _elm_lang$core$Time$addMySub, _elm_lang$core$Dict$empty, subs);
		var _p19 = A6(
			_elm_lang$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			newTaggers,
			_p10.processes,
			{
				ctor: '_Tuple3',
				_0: {ctor: '[]'},
				_1: _elm_lang$core$Dict$empty,
				_2: _elm_lang$core$Task$succeed(
					{ctor: '_Tuple0'})
			});
		var spawnList = _p19._0;
		var existingDict = _p19._1;
		var killTask = _p19._2;
		return A2(
			_elm_lang$core$Task$andThen,
			function (newProcesses) {
				return _elm_lang$core$Task$succeed(
					A2(_elm_lang$core$Time$State, newTaggers, newProcesses));
			},
			A2(
				_elm_lang$core$Task$andThen,
				function (_p20) {
					return A3(_elm_lang$core$Time$spawnHelp, router, spawnList, existingDict);
				},
				killTask));
	});
var _elm_lang$core$Time$Every = F2(
	function (a, b) {
		return {ctor: 'Every', _0: a, _1: b};
	});
var _elm_lang$core$Time$every = F2(
	function (interval, tagger) {
		return _elm_lang$core$Time$subscription(
			A2(_elm_lang$core$Time$Every, interval, tagger));
	});
var _elm_lang$core$Time$subMap = F2(
	function (f, _p21) {
		var _p22 = _p21;
		return A2(
			_elm_lang$core$Time$Every,
			_p22._0,
			function (_p23) {
				return f(
					_p22._1(_p23));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['Time'] = {pkg: 'elm-lang/core', init: _elm_lang$core$Time$init, onEffects: _elm_lang$core$Time$onEffects, onSelfMsg: _elm_lang$core$Time$onSelfMsg, tag: 'sub', subMap: _elm_lang$core$Time$subMap};

var _elm_lang$http$Http_Internal$map = F2(
	function (func, request) {
		return _elm_lang$core$Native_Utils.update(
			request,
			{
				expect: A2(_elm_lang$http$Native_Http.mapExpect, func, request.expect)
			});
	});
var _elm_lang$http$Http_Internal$RawRequest = F7(
	function (a, b, c, d, e, f, g) {
		return {method: a, headers: b, url: c, body: d, expect: e, timeout: f, withCredentials: g};
	});
var _elm_lang$http$Http_Internal$Request = function (a) {
	return {ctor: 'Request', _0: a};
};
var _elm_lang$http$Http_Internal$Expect = {ctor: 'Expect'};
var _elm_lang$http$Http_Internal$FormDataBody = {ctor: 'FormDataBody'};
var _elm_lang$http$Http_Internal$StringBody = F2(
	function (a, b) {
		return {ctor: 'StringBody', _0: a, _1: b};
	});
var _elm_lang$http$Http_Internal$EmptyBody = {ctor: 'EmptyBody'};
var _elm_lang$http$Http_Internal$Header = F2(
	function (a, b) {
		return {ctor: 'Header', _0: a, _1: b};
	});

var _elm_lang$http$Http$decodeUri = _elm_lang$http$Native_Http.decodeUri;
var _elm_lang$http$Http$encodeUri = _elm_lang$http$Native_Http.encodeUri;
var _elm_lang$http$Http$expectStringResponse = _elm_lang$http$Native_Http.expectStringResponse;
var _elm_lang$http$Http$expectJson = function (decoder) {
	return _elm_lang$http$Http$expectStringResponse(
		function (response) {
			return A2(_elm_lang$core$Json_Decode$decodeString, decoder, response.body);
		});
};
var _elm_lang$http$Http$expectString = _elm_lang$http$Http$expectStringResponse(
	function (response) {
		return _elm_lang$core$Result$Ok(response.body);
	});
var _elm_lang$http$Http$multipartBody = _elm_lang$http$Native_Http.multipart;
var _elm_lang$http$Http$stringBody = _elm_lang$http$Http_Internal$StringBody;
var _elm_lang$http$Http$jsonBody = function (value) {
	return A2(
		_elm_lang$http$Http_Internal$StringBody,
		'application/json',
		A2(_elm_lang$core$Json_Encode$encode, 0, value));
};
var _elm_lang$http$Http$emptyBody = _elm_lang$http$Http_Internal$EmptyBody;
var _elm_lang$http$Http$header = _elm_lang$http$Http_Internal$Header;
var _elm_lang$http$Http$request = _elm_lang$http$Http_Internal$Request;
var _elm_lang$http$Http$post = F3(
	function (url, body, decoder) {
		return _elm_lang$http$Http$request(
			{
				method: 'POST',
				headers: {ctor: '[]'},
				url: url,
				body: body,
				expect: _elm_lang$http$Http$expectJson(decoder),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
	});
var _elm_lang$http$Http$get = F2(
	function (url, decoder) {
		return _elm_lang$http$Http$request(
			{
				method: 'GET',
				headers: {ctor: '[]'},
				url: url,
				body: _elm_lang$http$Http$emptyBody,
				expect: _elm_lang$http$Http$expectJson(decoder),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
	});
var _elm_lang$http$Http$getString = function (url) {
	return _elm_lang$http$Http$request(
		{
			method: 'GET',
			headers: {ctor: '[]'},
			url: url,
			body: _elm_lang$http$Http$emptyBody,
			expect: _elm_lang$http$Http$expectString,
			timeout: _elm_lang$core$Maybe$Nothing,
			withCredentials: false
		});
};
var _elm_lang$http$Http$toTask = function (_p0) {
	var _p1 = _p0;
	return A2(_elm_lang$http$Native_Http.toTask, _p1._0, _elm_lang$core$Maybe$Nothing);
};
var _elm_lang$http$Http$send = F2(
	function (resultToMessage, request) {
		return A2(
			_elm_lang$core$Task$attempt,
			resultToMessage,
			_elm_lang$http$Http$toTask(request));
	});
var _elm_lang$http$Http$Response = F4(
	function (a, b, c, d) {
		return {url: a, status: b, headers: c, body: d};
	});
var _elm_lang$http$Http$BadPayload = F2(
	function (a, b) {
		return {ctor: 'BadPayload', _0: a, _1: b};
	});
var _elm_lang$http$Http$BadStatus = function (a) {
	return {ctor: 'BadStatus', _0: a};
};
var _elm_lang$http$Http$NetworkError = {ctor: 'NetworkError'};
var _elm_lang$http$Http$Timeout = {ctor: 'Timeout'};
var _elm_lang$http$Http$BadUrl = function (a) {
	return {ctor: 'BadUrl', _0: a};
};
var _elm_lang$http$Http$StringPart = F2(
	function (a, b) {
		return {ctor: 'StringPart', _0: a, _1: b};
	});
var _elm_lang$http$Http$stringPart = _elm_lang$http$Http$StringPart;

var _krisajenkins$remotedata$RemoteData$isNotAsked = function (data) {
	var _p0 = data;
	if (_p0.ctor === 'NotAsked') {
		return true;
	} else {
		return false;
	}
};
var _krisajenkins$remotedata$RemoteData$isLoading = function (data) {
	var _p1 = data;
	if (_p1.ctor === 'Loading') {
		return true;
	} else {
		return false;
	}
};
var _krisajenkins$remotedata$RemoteData$isFailure = function (data) {
	var _p2 = data;
	if (_p2.ctor === 'Failure') {
		return true;
	} else {
		return false;
	}
};
var _krisajenkins$remotedata$RemoteData$isSuccess = function (data) {
	var _p3 = data;
	if (_p3.ctor === 'Success') {
		return true;
	} else {
		return false;
	}
};
var _krisajenkins$remotedata$RemoteData$withDefault = F2(
	function ($default, data) {
		var _p4 = data;
		if (_p4.ctor === 'Success') {
			return _p4._0;
		} else {
			return $default;
		}
	});
var _krisajenkins$remotedata$RemoteData$Success = function (a) {
	return {ctor: 'Success', _0: a};
};
var _krisajenkins$remotedata$RemoteData$succeed = _krisajenkins$remotedata$RemoteData$Success;
var _krisajenkins$remotedata$RemoteData$prism = {
	reverseGet: _krisajenkins$remotedata$RemoteData$Success,
	getOption: function (data) {
		var _p5 = data;
		if (_p5.ctor === 'Success') {
			return _elm_lang$core$Maybe$Just(_p5._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	}
};
var _krisajenkins$remotedata$RemoteData$Failure = function (a) {
	return {ctor: 'Failure', _0: a};
};
var _krisajenkins$remotedata$RemoteData$fromMaybe = F2(
	function (error, maybe) {
		var _p6 = maybe;
		if (_p6.ctor === 'Nothing') {
			return _krisajenkins$remotedata$RemoteData$Failure(error);
		} else {
			return _krisajenkins$remotedata$RemoteData$Success(_p6._0);
		}
	});
var _krisajenkins$remotedata$RemoteData$fromResult = function (result) {
	var _p7 = result;
	if (_p7.ctor === 'Err') {
		return _krisajenkins$remotedata$RemoteData$Failure(_p7._0);
	} else {
		return _krisajenkins$remotedata$RemoteData$Success(_p7._0);
	}
};
var _krisajenkins$remotedata$RemoteData$asCmd = _elm_lang$core$Task$attempt(_krisajenkins$remotedata$RemoteData$fromResult);
var _krisajenkins$remotedata$RemoteData$sendRequest = _elm_lang$http$Http$send(_krisajenkins$remotedata$RemoteData$fromResult);
var _krisajenkins$remotedata$RemoteData$fromTask = function (_p8) {
	return A2(
		_elm_lang$core$Task$onError,
		function (_p9) {
			return _elm_lang$core$Task$succeed(
				_krisajenkins$remotedata$RemoteData$Failure(_p9));
		},
		A2(_elm_lang$core$Task$map, _krisajenkins$remotedata$RemoteData$Success, _p8));
};
var _krisajenkins$remotedata$RemoteData$Loading = {ctor: 'Loading'};
var _krisajenkins$remotedata$RemoteData$NotAsked = {ctor: 'NotAsked'};
var _krisajenkins$remotedata$RemoteData$map = F2(
	function (f, data) {
		var _p10 = data;
		switch (_p10.ctor) {
			case 'Success':
				return _krisajenkins$remotedata$RemoteData$Success(
					f(_p10._0));
			case 'Loading':
				return _krisajenkins$remotedata$RemoteData$Loading;
			case 'NotAsked':
				return _krisajenkins$remotedata$RemoteData$NotAsked;
			default:
				return _krisajenkins$remotedata$RemoteData$Failure(_p10._0);
		}
	});
var _krisajenkins$remotedata$RemoteData$toMaybe = function (_p11) {
	return A2(
		_krisajenkins$remotedata$RemoteData$withDefault,
		_elm_lang$core$Maybe$Nothing,
		A2(_krisajenkins$remotedata$RemoteData$map, _elm_lang$core$Maybe$Just, _p11));
};
var _krisajenkins$remotedata$RemoteData$mapError = F2(
	function (f, data) {
		var _p12 = data;
		switch (_p12.ctor) {
			case 'Success':
				return _krisajenkins$remotedata$RemoteData$Success(_p12._0);
			case 'Failure':
				return _krisajenkins$remotedata$RemoteData$Failure(
					f(_p12._0));
			case 'Loading':
				return _krisajenkins$remotedata$RemoteData$Loading;
			default:
				return _krisajenkins$remotedata$RemoteData$NotAsked;
		}
	});
var _krisajenkins$remotedata$RemoteData$mapBoth = F2(
	function (successFn, errorFn) {
		return function (_p13) {
			return A2(
				_krisajenkins$remotedata$RemoteData$mapError,
				errorFn,
				A2(_krisajenkins$remotedata$RemoteData$map, successFn, _p13));
		};
	});
var _krisajenkins$remotedata$RemoteData$andThen = F2(
	function (f, data) {
		var _p14 = data;
		switch (_p14.ctor) {
			case 'Success':
				return f(_p14._0);
			case 'Failure':
				return _krisajenkins$remotedata$RemoteData$Failure(_p14._0);
			case 'NotAsked':
				return _krisajenkins$remotedata$RemoteData$NotAsked;
			default:
				return _krisajenkins$remotedata$RemoteData$Loading;
		}
	});
var _krisajenkins$remotedata$RemoteData$andMap = F2(
	function (wrappedValue, wrappedFunction) {
		var _p15 = {ctor: '_Tuple2', _0: wrappedFunction, _1: wrappedValue};
		_v11_5:
		do {
			_v11_4:
			do {
				_v11_3:
				do {
					_v11_2:
					do {
						switch (_p15._0.ctor) {
							case 'Success':
								switch (_p15._1.ctor) {
									case 'Success':
										return _krisajenkins$remotedata$RemoteData$Success(
											_p15._0._0(_p15._1._0));
									case 'Failure':
										break _v11_2;
									case 'Loading':
										break _v11_4;
									default:
										return _krisajenkins$remotedata$RemoteData$NotAsked;
								}
							case 'Failure':
								return _krisajenkins$remotedata$RemoteData$Failure(_p15._0._0);
							case 'Loading':
								switch (_p15._1.ctor) {
									case 'Failure':
										break _v11_2;
									case 'Loading':
										break _v11_3;
									case 'NotAsked':
										break _v11_3;
									default:
										break _v11_3;
								}
							default:
								switch (_p15._1.ctor) {
									case 'Failure':
										break _v11_2;
									case 'Loading':
										break _v11_4;
									case 'NotAsked':
										break _v11_5;
									default:
										break _v11_5;
								}
						}
					} while(false);
					return _krisajenkins$remotedata$RemoteData$Failure(_p15._1._0);
				} while(false);
				return _krisajenkins$remotedata$RemoteData$Loading;
			} while(false);
			return _krisajenkins$remotedata$RemoteData$Loading;
		} while(false);
		return _krisajenkins$remotedata$RemoteData$NotAsked;
	});
var _krisajenkins$remotedata$RemoteData$map2 = F3(
	function (f, a, b) {
		return A2(
			_krisajenkins$remotedata$RemoteData$andMap,
			b,
			A2(_krisajenkins$remotedata$RemoteData$map, f, a));
	});
var _krisajenkins$remotedata$RemoteData$fromList = A2(
	_elm_lang$core$List$foldr,
	_krisajenkins$remotedata$RemoteData$map2(
		F2(
			function (x, y) {
				return {ctor: '::', _0: x, _1: y};
			})),
	_krisajenkins$remotedata$RemoteData$Success(
		{ctor: '[]'}));
var _krisajenkins$remotedata$RemoteData$map3 = F4(
	function (f, a, b, c) {
		return A2(
			_krisajenkins$remotedata$RemoteData$andMap,
			c,
			A2(
				_krisajenkins$remotedata$RemoteData$andMap,
				b,
				A2(_krisajenkins$remotedata$RemoteData$map, f, a)));
	});
var _krisajenkins$remotedata$RemoteData$append = F2(
	function (a, b) {
		return A2(
			_krisajenkins$remotedata$RemoteData$andMap,
			b,
			A2(
				_krisajenkins$remotedata$RemoteData$map,
				F2(
					function (v0, v1) {
						return {ctor: '_Tuple2', _0: v0, _1: v1};
					}),
				a));
	});
var _krisajenkins$remotedata$RemoteData$update = F2(
	function (f, remoteData) {
		var _p16 = remoteData;
		switch (_p16.ctor) {
			case 'Success':
				var _p17 = f(_p16._0);
				var first = _p17._0;
				var second = _p17._1;
				return {
					ctor: '_Tuple2',
					_0: _krisajenkins$remotedata$RemoteData$Success(first),
					_1: second
				};
			case 'NotAsked':
				return {ctor: '_Tuple2', _0: _krisajenkins$remotedata$RemoteData$NotAsked, _1: _elm_lang$core$Platform_Cmd$none};
			case 'Loading':
				return {ctor: '_Tuple2', _0: _krisajenkins$remotedata$RemoteData$Loading, _1: _elm_lang$core$Platform_Cmd$none};
			default:
				return {
					ctor: '_Tuple2',
					_0: _krisajenkins$remotedata$RemoteData$Failure(_p16._0),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});

var _Gizra$elm_editable_webdata$Editable_WebData$toWebData = function (_p0) {
	var _p1 = _p0;
	return _p1._1;
};
var _Gizra$elm_editable_webdata$Editable_WebData$toEditable = function (_p2) {
	var _p3 = _p2;
	return _p3._0;
};
var _Gizra$elm_editable_webdata$Editable_WebData$EditableWebDataWrapper = F2(
	function (a, b) {
		return {ctor: 'EditableWebDataWrapper', _0: a, _1: b};
	});
var _Gizra$elm_editable_webdata$Editable_WebData$create = function (record) {
	return A2(
		_Gizra$elm_editable_webdata$Editable_WebData$EditableWebDataWrapper,
		_stoeffel$editable$Editable$ReadOnly(record),
		_krisajenkins$remotedata$RemoteData$NotAsked);
};
var _Gizra$elm_editable_webdata$Editable_WebData$map = F2(
	function (f, _p4) {
		var _p5 = _p4;
		return A2(
			_Gizra$elm_editable_webdata$Editable_WebData$EditableWebDataWrapper,
			f(_p5._0),
			_p5._1);
	});
var _Gizra$elm_editable_webdata$Editable_WebData$state = F2(
	function (newWebData, _p6) {
		var _p7 = _p6;
		return A2(_Gizra$elm_editable_webdata$Editable_WebData$EditableWebDataWrapper, _p7._0, newWebData);
	});

//import Result //

var _elm_lang$core$Native_Date = function() {

function fromString(str)
{
	var date = new Date(str);
	return isNaN(date.getTime())
		? _elm_lang$core$Result$Err('Unable to parse \'' + str + '\' as a date. Dates must be in the ISO 8601 format.')
		: _elm_lang$core$Result$Ok(date);
}

var dayTable = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
var monthTable =
	['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
	 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];


return {
	fromString: fromString,
	year: function(d) { return d.getFullYear(); },
	month: function(d) { return { ctor: monthTable[d.getMonth()] }; },
	day: function(d) { return d.getDate(); },
	hour: function(d) { return d.getHours(); },
	minute: function(d) { return d.getMinutes(); },
	second: function(d) { return d.getSeconds(); },
	millisecond: function(d) { return d.getMilliseconds(); },
	toTime: function(d) { return d.getTime(); },
	fromTime: function(t) { return new Date(t); },
	dayOfWeek: function(d) { return { ctor: dayTable[d.getDay()] }; }
};

}();
var _elm_lang$core$Date$millisecond = _elm_lang$core$Native_Date.millisecond;
var _elm_lang$core$Date$second = _elm_lang$core$Native_Date.second;
var _elm_lang$core$Date$minute = _elm_lang$core$Native_Date.minute;
var _elm_lang$core$Date$hour = _elm_lang$core$Native_Date.hour;
var _elm_lang$core$Date$dayOfWeek = _elm_lang$core$Native_Date.dayOfWeek;
var _elm_lang$core$Date$day = _elm_lang$core$Native_Date.day;
var _elm_lang$core$Date$month = _elm_lang$core$Native_Date.month;
var _elm_lang$core$Date$year = _elm_lang$core$Native_Date.year;
var _elm_lang$core$Date$fromTime = _elm_lang$core$Native_Date.fromTime;
var _elm_lang$core$Date$toTime = _elm_lang$core$Native_Date.toTime;
var _elm_lang$core$Date$fromString = _elm_lang$core$Native_Date.fromString;
var _elm_lang$core$Date$now = A2(_elm_lang$core$Task$map, _elm_lang$core$Date$fromTime, _elm_lang$core$Time$now);
var _elm_lang$core$Date$Date = {ctor: 'Date'};
var _elm_lang$core$Date$Sun = {ctor: 'Sun'};
var _elm_lang$core$Date$Sat = {ctor: 'Sat'};
var _elm_lang$core$Date$Fri = {ctor: 'Fri'};
var _elm_lang$core$Date$Thu = {ctor: 'Thu'};
var _elm_lang$core$Date$Wed = {ctor: 'Wed'};
var _elm_lang$core$Date$Tue = {ctor: 'Tue'};
var _elm_lang$core$Date$Mon = {ctor: 'Mon'};
var _elm_lang$core$Date$Dec = {ctor: 'Dec'};
var _elm_lang$core$Date$Nov = {ctor: 'Nov'};
var _elm_lang$core$Date$Oct = {ctor: 'Oct'};
var _elm_lang$core$Date$Sep = {ctor: 'Sep'};
var _elm_lang$core$Date$Aug = {ctor: 'Aug'};
var _elm_lang$core$Date$Jul = {ctor: 'Jul'};
var _elm_lang$core$Date$Jun = {ctor: 'Jun'};
var _elm_lang$core$Date$May = {ctor: 'May'};
var _elm_lang$core$Date$Apr = {ctor: 'Apr'};
var _elm_lang$core$Date$Mar = {ctor: 'Mar'};
var _elm_lang$core$Date$Feb = {ctor: 'Feb'};
var _elm_lang$core$Date$Jan = {ctor: 'Jan'};

var _justinmimbs$elm_date_extra$Date_Facts$msPerSecond = 1000;
var _justinmimbs$elm_date_extra$Date_Facts$msPerMinute = 60 * _justinmimbs$elm_date_extra$Date_Facts$msPerSecond;
var _justinmimbs$elm_date_extra$Date_Facts$msPerHour = 60 * _justinmimbs$elm_date_extra$Date_Facts$msPerMinute;
var _justinmimbs$elm_date_extra$Date_Facts$msPerDay = 24 * _justinmimbs$elm_date_extra$Date_Facts$msPerHour;
var _justinmimbs$elm_date_extra$Date_Facts$numberToWeekday = function (n) {
	var _p0 = A2(_elm_lang$core$Basics$max, 1, n);
	switch (_p0) {
		case 1:
			return _elm_lang$core$Date$Mon;
		case 2:
			return _elm_lang$core$Date$Tue;
		case 3:
			return _elm_lang$core$Date$Wed;
		case 4:
			return _elm_lang$core$Date$Thu;
		case 5:
			return _elm_lang$core$Date$Fri;
		case 6:
			return _elm_lang$core$Date$Sat;
		default:
			return _elm_lang$core$Date$Sun;
	}
};
var _justinmimbs$elm_date_extra$Date_Facts$weekdayToNumber = function (d) {
	var _p1 = d;
	switch (_p1.ctor) {
		case 'Mon':
			return 1;
		case 'Tue':
			return 2;
		case 'Wed':
			return 3;
		case 'Thu':
			return 4;
		case 'Fri':
			return 5;
		case 'Sat':
			return 6;
		default:
			return 7;
	}
};
var _justinmimbs$elm_date_extra$Date_Facts$numberToMonth = function (n) {
	var _p2 = A2(_elm_lang$core$Basics$max, 1, n);
	switch (_p2) {
		case 1:
			return _elm_lang$core$Date$Jan;
		case 2:
			return _elm_lang$core$Date$Feb;
		case 3:
			return _elm_lang$core$Date$Mar;
		case 4:
			return _elm_lang$core$Date$Apr;
		case 5:
			return _elm_lang$core$Date$May;
		case 6:
			return _elm_lang$core$Date$Jun;
		case 7:
			return _elm_lang$core$Date$Jul;
		case 8:
			return _elm_lang$core$Date$Aug;
		case 9:
			return _elm_lang$core$Date$Sep;
		case 10:
			return _elm_lang$core$Date$Oct;
		case 11:
			return _elm_lang$core$Date$Nov;
		default:
			return _elm_lang$core$Date$Dec;
	}
};
var _justinmimbs$elm_date_extra$Date_Facts$monthToNumber = function (m) {
	var _p3 = m;
	switch (_p3.ctor) {
		case 'Jan':
			return 1;
		case 'Feb':
			return 2;
		case 'Mar':
			return 3;
		case 'Apr':
			return 4;
		case 'May':
			return 5;
		case 'Jun':
			return 6;
		case 'Jul':
			return 7;
		case 'Aug':
			return 8;
		case 'Sep':
			return 9;
		case 'Oct':
			return 10;
		case 'Nov':
			return 11;
		default:
			return 12;
	}
};
var _justinmimbs$elm_date_extra$Date_Facts$isLeapYear = function (y) {
	return (_elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], y, 4),
		0) && (!_elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], y, 100),
		0))) || _elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], y, 400),
		0);
};
var _justinmimbs$elm_date_extra$Date_Facts$daysInMonth = F2(
	function (y, m) {
		var _p4 = m;
		switch (_p4.ctor) {
			case 'Jan':
				return 31;
			case 'Feb':
				return _justinmimbs$elm_date_extra$Date_Facts$isLeapYear(y) ? 29 : 28;
			case 'Mar':
				return 31;
			case 'Apr':
				return 30;
			case 'May':
				return 31;
			case 'Jun':
				return 30;
			case 'Jul':
				return 31;
			case 'Aug':
				return 31;
			case 'Sep':
				return 30;
			case 'Oct':
				return 31;
			case 'Nov':
				return 30;
			default:
				return 31;
		}
	});
var _justinmimbs$elm_date_extra$Date_Facts$daysBeforeMonth = F2(
	function (y, m) {
		var leapDays = _justinmimbs$elm_date_extra$Date_Facts$isLeapYear(y) ? 1 : 0;
		var _p5 = m;
		switch (_p5.ctor) {
			case 'Jan':
				return 0;
			case 'Feb':
				return 31;
			case 'Mar':
				return 59 + leapDays;
			case 'Apr':
				return 90 + leapDays;
			case 'May':
				return 120 + leapDays;
			case 'Jun':
				return 151 + leapDays;
			case 'Jul':
				return 181 + leapDays;
			case 'Aug':
				return 212 + leapDays;
			case 'Sep':
				return 243 + leapDays;
			case 'Oct':
				return 273 + leapDays;
			case 'Nov':
				return 304 + leapDays;
			default:
				return 334 + leapDays;
		}
	});

var _justinmimbs$elm_date_extra$Date_RataDie$isBetween = F3(
	function (a, b, x) {
		return (_elm_lang$core$Native_Utils.cmp(a, x) < 1) && (_elm_lang$core$Native_Utils.cmp(x, b) < 1);
	});
var _justinmimbs$elm_date_extra$Date_RataDie$daysBeforeYear = function (y1) {
	var y = y1 - 1;
	var leapYears = (((y / 4) | 0) - ((y / 100) | 0)) + ((y / 400) | 0);
	return (365 * y) + leapYears;
};
var _justinmimbs$elm_date_extra$Date_RataDie$fromOrdinalParts = F2(
	function (y, od) {
		return (A3(_justinmimbs$elm_date_extra$Date_RataDie$isBetween, 1, 365, od) || (_elm_lang$core$Native_Utils.eq(od, 366) && _justinmimbs$elm_date_extra$Date_Facts$isLeapYear(y))) ? _elm_lang$core$Result$Ok(
			_justinmimbs$elm_date_extra$Date_RataDie$daysBeforeYear(y) + od) : _elm_lang$core$Result$Err(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Invalid ordinal date (',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(y),
					A2(
						_elm_lang$core$Basics_ops['++'],
						', ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(od),
							')')))));
	});
var _justinmimbs$elm_date_extra$Date_RataDie$fromCalendarParts = F3(
	function (y, mn, d) {
		return (A3(_justinmimbs$elm_date_extra$Date_RataDie$isBetween, 1, 12, mn) && A3(
			_justinmimbs$elm_date_extra$Date_RataDie$isBetween,
			1,
			A2(
				_justinmimbs$elm_date_extra$Date_Facts$daysInMonth,
				y,
				_justinmimbs$elm_date_extra$Date_Facts$numberToMonth(mn)),
			d)) ? _elm_lang$core$Result$Ok(
			(_justinmimbs$elm_date_extra$Date_RataDie$daysBeforeYear(y) + A2(
				_justinmimbs$elm_date_extra$Date_Facts$daysBeforeMonth,
				y,
				_justinmimbs$elm_date_extra$Date_Facts$numberToMonth(mn))) + d) : _elm_lang$core$Result$Err(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Invalid calendar date (',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(y),
					A2(
						_elm_lang$core$Basics_ops['++'],
						', ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(mn),
							A2(
								_elm_lang$core$Basics_ops['++'],
								', ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(d),
									')')))))));
	});
var _justinmimbs$elm_date_extra$Date_RataDie$fromOrdinalDate = F2(
	function (y, od) {
		var daysInY = _justinmimbs$elm_date_extra$Date_Facts$isLeapYear(y) ? 366 : 365;
		return _justinmimbs$elm_date_extra$Date_RataDie$daysBeforeYear(y) + A3(_elm_lang$core$Basics$clamp, 1, daysInY, od);
	});
var _justinmimbs$elm_date_extra$Date_RataDie$fromCalendarDate = F3(
	function (y, m, d) {
		return (_justinmimbs$elm_date_extra$Date_RataDie$daysBeforeYear(y) + A2(_justinmimbs$elm_date_extra$Date_Facts$daysBeforeMonth, y, m)) + A3(
			_elm_lang$core$Basics$clamp,
			1,
			A2(_justinmimbs$elm_date_extra$Date_Facts$daysInMonth, y, m),
			d);
	});
var _justinmimbs$elm_date_extra$Date_RataDie$weekdayNumber = function (rd) {
	var _p0 = A2(_elm_lang$core$Basics_ops['%'], rd, 7);
	if (_p0 === 0) {
		return 7;
	} else {
		return _p0;
	}
};
var _justinmimbs$elm_date_extra$Date_RataDie$daysBeforeWeekYear = function (y) {
	var jan4 = _justinmimbs$elm_date_extra$Date_RataDie$daysBeforeYear(y) + 4;
	return jan4 - _justinmimbs$elm_date_extra$Date_RataDie$weekdayNumber(jan4);
};
var _justinmimbs$elm_date_extra$Date_RataDie$is53WeekYear = function (y) {
	var wdnJan1 = _justinmimbs$elm_date_extra$Date_RataDie$weekdayNumber(
		_justinmimbs$elm_date_extra$Date_RataDie$daysBeforeYear(y) + 1);
	return _elm_lang$core$Native_Utils.eq(wdnJan1, 4) || (_elm_lang$core$Native_Utils.eq(wdnJan1, 3) && _justinmimbs$elm_date_extra$Date_Facts$isLeapYear(y));
};
var _justinmimbs$elm_date_extra$Date_RataDie$fromWeekParts = F3(
	function (wy, wn, wdn) {
		return (A3(_justinmimbs$elm_date_extra$Date_RataDie$isBetween, 1, 7, wdn) && (A3(_justinmimbs$elm_date_extra$Date_RataDie$isBetween, 1, 52, wn) || (_elm_lang$core$Native_Utils.eq(wn, 53) && _justinmimbs$elm_date_extra$Date_RataDie$is53WeekYear(wy)))) ? _elm_lang$core$Result$Ok(
			(_justinmimbs$elm_date_extra$Date_RataDie$daysBeforeWeekYear(wy) + ((wn - 1) * 7)) + wdn) : _elm_lang$core$Result$Err(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Invalid week date (',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(wy),
					A2(
						_elm_lang$core$Basics_ops['++'],
						', ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(wn),
							A2(
								_elm_lang$core$Basics_ops['++'],
								', ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(wdn),
									')')))))));
	});
var _justinmimbs$elm_date_extra$Date_RataDie$fromWeekDate = F3(
	function (wy, wn, wd) {
		var weeksInWY = _justinmimbs$elm_date_extra$Date_RataDie$is53WeekYear(wy) ? 53 : 52;
		return (_justinmimbs$elm_date_extra$Date_RataDie$daysBeforeWeekYear(wy) + ((A3(_elm_lang$core$Basics$clamp, 1, weeksInWY, wn) - 1) * 7)) + _justinmimbs$elm_date_extra$Date_Facts$weekdayToNumber(wd);
	});
var _justinmimbs$elm_date_extra$Date_RataDie$divideInt = F2(
	function (a, b) {
		return {
			ctor: '_Tuple2',
			_0: (a / b) | 0,
			_1: A2(_elm_lang$core$Basics$rem, a, b)
		};
	});
var _justinmimbs$elm_date_extra$Date_RataDie$year = function (rd) {
	var _p1 = A2(_justinmimbs$elm_date_extra$Date_RataDie$divideInt, rd, 146097);
	var n400 = _p1._0;
	var r400 = _p1._1;
	var _p2 = A2(_justinmimbs$elm_date_extra$Date_RataDie$divideInt, r400, 36524);
	var n100 = _p2._0;
	var r100 = _p2._1;
	var _p3 = A2(_justinmimbs$elm_date_extra$Date_RataDie$divideInt, r100, 1461);
	var n4 = _p3._0;
	var r4 = _p3._1;
	var _p4 = A2(_justinmimbs$elm_date_extra$Date_RataDie$divideInt, r4, 365);
	var n1 = _p4._0;
	var r1 = _p4._1;
	var n = _elm_lang$core$Native_Utils.eq(r1, 0) ? 0 : 1;
	return ((((n400 * 400) + (n100 * 100)) + (n4 * 4)) + n1) + n;
};
var _justinmimbs$elm_date_extra$Date_RataDie$weekYear = function (rd) {
	return _justinmimbs$elm_date_extra$Date_RataDie$year(
		rd + (4 - _justinmimbs$elm_date_extra$Date_RataDie$weekdayNumber(rd)));
};
var _justinmimbs$elm_date_extra$Date_RataDie$weekNumber = function (rd) {
	var week1Day1 = _justinmimbs$elm_date_extra$Date_RataDie$daysBeforeWeekYear(
		_justinmimbs$elm_date_extra$Date_RataDie$weekYear(rd)) + 1;
	return (((rd - week1Day1) / 7) | 0) + 1;
};

//import Maybe, Native.List //

var _elm_lang$core$Native_Regex = function() {

function escape(str)
{
	return str.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
}
function caseInsensitive(re)
{
	return new RegExp(re.source, 'gi');
}
function regex(raw)
{
	return new RegExp(raw, 'g');
}

function contains(re, string)
{
	return string.match(re) !== null;
}

function find(n, re, str)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex === re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch === undefined
				? _elm_lang$core$Maybe$Nothing
				: _elm_lang$core$Maybe$Just(submatch);
		}
		out.push({
			match: result[0],
			submatches: _elm_lang$core$Native_List.fromArray(subs),
			index: result.index,
			number: number
		});
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _elm_lang$core$Native_List.fromArray(out);
}

function replace(n, re, replacer, string)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch === undefined
				? _elm_lang$core$Maybe$Nothing
				: _elm_lang$core$Maybe$Just(submatch);
		}
		return replacer({
			match: match,
			submatches: _elm_lang$core$Native_List.fromArray(submatches),
			index: arguments[arguments.length - 2],
			number: count
		});
	}
	return string.replace(re, jsReplacer);
}

function split(n, re, str)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	if (n === Infinity)
	{
		return _elm_lang$core$Native_List.fromArray(str.split(re));
	}
	var string = str;
	var result;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		if (!(result = re.exec(string))) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _elm_lang$core$Native_List.fromArray(out);
}

return {
	regex: regex,
	caseInsensitive: caseInsensitive,
	escape: escape,

	contains: F2(contains),
	find: F3(find),
	replace: F4(replace),
	split: F3(split)
};

}();

var _elm_lang$core$Regex$split = _elm_lang$core$Native_Regex.split;
var _elm_lang$core$Regex$replace = _elm_lang$core$Native_Regex.replace;
var _elm_lang$core$Regex$find = _elm_lang$core$Native_Regex.find;
var _elm_lang$core$Regex$contains = _elm_lang$core$Native_Regex.contains;
var _elm_lang$core$Regex$caseInsensitive = _elm_lang$core$Native_Regex.caseInsensitive;
var _elm_lang$core$Regex$regex = _elm_lang$core$Native_Regex.regex;
var _elm_lang$core$Regex$escape = _elm_lang$core$Native_Regex.escape;
var _elm_lang$core$Regex$Match = F4(
	function (a, b, c, d) {
		return {match: a, submatches: b, index: c, number: d};
	});
var _elm_lang$core$Regex$Regex = {ctor: 'Regex'};
var _elm_lang$core$Regex$AtMost = function (a) {
	return {ctor: 'AtMost', _0: a};
};
var _elm_lang$core$Regex$All = {ctor: 'All'};

var _justinmimbs$elm_date_extra$Date_Extra$numberToWeekday = _justinmimbs$elm_date_extra$Date_Facts$numberToWeekday;
var _justinmimbs$elm_date_extra$Date_Extra$weekdayToNumber = _justinmimbs$elm_date_extra$Date_Facts$weekdayToNumber;
var _justinmimbs$elm_date_extra$Date_Extra$numberToMonth = _justinmimbs$elm_date_extra$Date_Facts$numberToMonth;
var _justinmimbs$elm_date_extra$Date_Extra$monthToNumber = _justinmimbs$elm_date_extra$Date_Facts$monthToNumber;
var _justinmimbs$elm_date_extra$Date_Extra$toRataDie = function (date) {
	return A3(
		_justinmimbs$elm_date_extra$Date_RataDie$fromCalendarDate,
		_elm_lang$core$Date$year(date),
		_elm_lang$core$Date$month(date),
		_elm_lang$core$Date$day(date));
};
var _justinmimbs$elm_date_extra$Date_Extra$clamp = F3(
	function (minimum, maximum, date) {
		return (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$Date$toTime(date),
			_elm_lang$core$Date$toTime(minimum)) < 0) ? minimum : ((_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$Date$toTime(date),
			_elm_lang$core$Date$toTime(maximum)) > 0) ? maximum : date);
	});
var _justinmimbs$elm_date_extra$Date_Extra$isBetween = F3(
	function (a, b, x) {
		return (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$Date$toTime(a),
			_elm_lang$core$Date$toTime(x)) < 1) && (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$Date$toTime(x),
			_elm_lang$core$Date$toTime(b)) < 1);
	});
var _justinmimbs$elm_date_extra$Date_Extra$compare = F2(
	function (a, b) {
		return A2(
			_elm_lang$core$Basics$compare,
			_elm_lang$core$Date$toTime(a),
			_elm_lang$core$Date$toTime(b));
	});
var _justinmimbs$elm_date_extra$Date_Extra$equal = F2(
	function (a, b) {
		return _elm_lang$core$Native_Utils.eq(
			_elm_lang$core$Date$toTime(a),
			_elm_lang$core$Date$toTime(b));
	});
var _justinmimbs$elm_date_extra$Date_Extra$patternMatches = _elm_lang$core$Regex$regex('([yYQMwdDEeabhHmsSXx])\\1*|\'(?:[^\']|\'\')*?\'(?!\')');
var _justinmimbs$elm_date_extra$Date_Extra$ordinalSuffix = function (n) {
	var nn = A2(_elm_lang$core$Basics_ops['%'], n, 100);
	var _p0 = A2(
		_elm_lang$core$Basics$min,
		(_elm_lang$core$Native_Utils.cmp(nn, 20) < 0) ? nn : A2(_elm_lang$core$Basics_ops['%'], nn, 10),
		4);
	switch (_p0) {
		case 1:
			return 'st';
		case 2:
			return 'nd';
		case 3:
			return 'rd';
		default:
			return 'th';
	}
};
var _justinmimbs$elm_date_extra$Date_Extra$withOrdinalSuffix = function (n) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(n),
		_justinmimbs$elm_date_extra$Date_Extra$ordinalSuffix(n));
};
var _justinmimbs$elm_date_extra$Date_Extra$formatTimeOffset = F3(
	function (separator, minutesIsOptional, offset) {
		var mm = A3(
			_elm_lang$core$String$padLeft,
			2,
			_elm_lang$core$Native_Utils.chr('0'),
			_elm_lang$core$Basics$toString(
				A2(
					_elm_lang$core$Basics_ops['%'],
					_elm_lang$core$Basics$abs(offset),
					60)));
		var hh = A3(
			_elm_lang$core$String$padLeft,
			2,
			_elm_lang$core$Native_Utils.chr('0'),
			_elm_lang$core$Basics$toString(
				(_elm_lang$core$Basics$abs(offset) / 60) | 0));
		var sign = (_elm_lang$core$Native_Utils.cmp(offset, 0) > -1) ? '+' : '-';
		return (minutesIsOptional && _elm_lang$core$Native_Utils.eq(mm, '00')) ? A2(_elm_lang$core$Basics_ops['++'], sign, hh) : A2(
			_elm_lang$core$Basics_ops['++'],
			sign,
			A2(
				_elm_lang$core$Basics_ops['++'],
				hh,
				A2(_elm_lang$core$Basics_ops['++'], separator, mm)));
	});
var _justinmimbs$elm_date_extra$Date_Extra$hour12 = function (date) {
	var _p1 = A2(
		_elm_lang$core$Basics_ops['%'],
		_elm_lang$core$Date$hour(date),
		12);
	if (_p1 === 0) {
		return 12;
	} else {
		return _p1;
	}
};
var _justinmimbs$elm_date_extra$Date_Extra$weekdayToName = function (d) {
	var _p2 = d;
	switch (_p2.ctor) {
		case 'Mon':
			return 'Monday';
		case 'Tue':
			return 'Tuesday';
		case 'Wed':
			return 'Wednesday';
		case 'Thu':
			return 'Thursday';
		case 'Fri':
			return 'Friday';
		case 'Sat':
			return 'Saturday';
		default:
			return 'Sunday';
	}
};
var _justinmimbs$elm_date_extra$Date_Extra$monthToName = function (m) {
	var _p3 = m;
	switch (_p3.ctor) {
		case 'Jan':
			return 'January';
		case 'Feb':
			return 'February';
		case 'Mar':
			return 'March';
		case 'Apr':
			return 'April';
		case 'May':
			return 'May';
		case 'Jun':
			return 'June';
		case 'Jul':
			return 'July';
		case 'Aug':
			return 'August';
		case 'Sep':
			return 'September';
		case 'Oct':
			return 'October';
		case 'Nov':
			return 'November';
		default:
			return 'December';
	}
};
var _justinmimbs$elm_date_extra$Date_Extra$weekYear = function (_p4) {
	return _justinmimbs$elm_date_extra$Date_RataDie$weekYear(
		_justinmimbs$elm_date_extra$Date_Extra$toRataDie(_p4));
};
var _justinmimbs$elm_date_extra$Date_Extra$weekNumber = function (_p5) {
	return _justinmimbs$elm_date_extra$Date_RataDie$weekNumber(
		_justinmimbs$elm_date_extra$Date_Extra$toRataDie(_p5));
};
var _justinmimbs$elm_date_extra$Date_Extra$weekdayNumber = function (_p6) {
	return _justinmimbs$elm_date_extra$Date_Extra$weekdayToNumber(
		_elm_lang$core$Date$dayOfWeek(_p6));
};
var _justinmimbs$elm_date_extra$Date_Extra$daysSincePreviousWeekday = F2(
	function (wd, date) {
		return A2(
			_elm_lang$core$Basics_ops['%'],
			(_justinmimbs$elm_date_extra$Date_Extra$weekdayNumber(date) + 7) - _justinmimbs$elm_date_extra$Date_Extra$weekdayToNumber(wd),
			7);
	});
var _justinmimbs$elm_date_extra$Date_Extra$ordinalDay = function (date) {
	return A2(
		_justinmimbs$elm_date_extra$Date_Facts$daysBeforeMonth,
		_elm_lang$core$Date$year(date),
		_elm_lang$core$Date$month(date)) + _elm_lang$core$Date$day(date);
};
var _justinmimbs$elm_date_extra$Date_Extra$monthNumber = function (_p7) {
	return _justinmimbs$elm_date_extra$Date_Extra$monthToNumber(
		_elm_lang$core$Date$month(_p7));
};
var _justinmimbs$elm_date_extra$Date_Extra$quarterToMonth = function (q) {
	return _justinmimbs$elm_date_extra$Date_Extra$numberToMonth((q * 3) - 2);
};
var _justinmimbs$elm_date_extra$Date_Extra$monthToQuarter = function (m) {
	return ((_justinmimbs$elm_date_extra$Date_Extra$monthToNumber(m) + 2) / 3) | 0;
};
var _justinmimbs$elm_date_extra$Date_Extra$quarter = function (_p8) {
	return _justinmimbs$elm_date_extra$Date_Extra$monthToQuarter(
		_elm_lang$core$Date$month(_p8));
};
var _justinmimbs$elm_date_extra$Date_Extra$matchToInt = function ($default) {
	return function (_p9) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			$default,
			A2(
				_elm_lang$core$Maybe$andThen,
				function (_p10) {
					return _elm_lang$core$Result$toMaybe(
						_elm_lang$core$String$toInt(_p10));
				},
				_p9));
	};
};
var _justinmimbs$elm_date_extra$Date_Extra$isoDateRegex = function () {
	var time = 'T(\\d{2})(?:(\\:)?(\\d{2})(?:\\10(\\d{2}))?)?([\\.,]\\d+)?(?:(Z)|(?:([+−\\-])(\\d{2})(?:\\:?(\\d{2}))?))?';
	var ord = '\\-?(\\d{3})';
	var week = '(\\-)?W(\\d{2})(?:\\5(\\d))?';
	var cal = '(\\-)?(\\d{2})(?:\\2(\\d{2}))?';
	var year = '(\\d{4})';
	return _elm_lang$core$Regex$regex(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'^',
			A2(
				_elm_lang$core$Basics_ops['++'],
				year,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'(?:',
					A2(
						_elm_lang$core$Basics_ops['++'],
						cal,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'|',
							A2(
								_elm_lang$core$Basics_ops['++'],
								week,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'|',
									A2(
										_elm_lang$core$Basics_ops['++'],
										ord,
										A2(
											_elm_lang$core$Basics_ops['++'],
											')?',
											A2(
												_elm_lang$core$Basics_ops['++'],
												'(?:',
												A2(_elm_lang$core$Basics_ops['++'], time, ')?$'))))))))))));
}();
var _justinmimbs$elm_date_extra$Date_Extra$fromUnixTime = function (_p11) {
	return _elm_lang$core$Date$fromTime(
		_elm_lang$core$Basics$toFloat(_p11));
};
var _justinmimbs$elm_date_extra$Date_Extra$msFromTimeParts = F4(
	function (hh, mm, ss, ms) {
		return (((_justinmimbs$elm_date_extra$Date_Facts$msPerHour * hh) + (_justinmimbs$elm_date_extra$Date_Facts$msPerMinute * mm)) + (_justinmimbs$elm_date_extra$Date_Facts$msPerSecond * ss)) + ms;
	});
var _justinmimbs$elm_date_extra$Date_Extra$fractionalDay = function (date) {
	var timeOfDayMS = A4(
		_justinmimbs$elm_date_extra$Date_Extra$msFromTimeParts,
		_elm_lang$core$Date$hour(date),
		_elm_lang$core$Date$minute(date),
		_elm_lang$core$Date$second(date),
		_elm_lang$core$Date$millisecond(date));
	return _elm_lang$core$Basics$toFloat(timeOfDayMS) / _elm_lang$core$Basics$toFloat(_justinmimbs$elm_date_extra$Date_Facts$msPerDay);
};
var _justinmimbs$elm_date_extra$Date_Extra$toMonths = function (date) {
	var _p12 = {
		ctor: '_Tuple3',
		_0: _elm_lang$core$Date$year(date),
		_1: _elm_lang$core$Date$month(date),
		_2: _elm_lang$core$Date$day(date)
	};
	var y = _p12._0;
	var m = _p12._1;
	var d = _p12._2;
	var wholeMonths = ((12 * (y - 1)) + _justinmimbs$elm_date_extra$Date_Extra$monthToNumber(m)) - 1;
	return (_elm_lang$core$Basics$toFloat(wholeMonths) + (_elm_lang$core$Basics$toFloat(d) / 100)) + (_justinmimbs$elm_date_extra$Date_Extra$fractionalDay(date) / 100);
};
var _justinmimbs$elm_date_extra$Date_Extra$unixTimeFromRataDie = function (rd) {
	return (rd - 719163) * _justinmimbs$elm_date_extra$Date_Facts$msPerDay;
};
var _justinmimbs$elm_date_extra$Date_Extra$offsetFromUtc = function (date) {
	var utcTime = _elm_lang$core$Date$toTime(date);
	var localTime = _elm_lang$core$Basics$toFloat(
		_justinmimbs$elm_date_extra$Date_Extra$unixTimeFromRataDie(
			A3(
				_justinmimbs$elm_date_extra$Date_RataDie$fromCalendarDate,
				_elm_lang$core$Date$year(date),
				_elm_lang$core$Date$month(date),
				_elm_lang$core$Date$day(date))) + A4(
			_justinmimbs$elm_date_extra$Date_Extra$msFromTimeParts,
			_elm_lang$core$Date$hour(date),
			_elm_lang$core$Date$minute(date),
			_elm_lang$core$Date$second(date),
			_elm_lang$core$Date$millisecond(date)));
	return (_elm_lang$core$Basics$floor(localTime - utcTime) / _justinmimbs$elm_date_extra$Date_Facts$msPerMinute) | 0;
};
var _justinmimbs$elm_date_extra$Date_Extra$fromSpec = F3(
	function (_p14, _p13, offsetSpec) {
		var _p15 = _p14;
		var _p19 = _p15._0;
		var _p16 = _p13;
		var _p18 = _p16._0;
		var _p17 = offsetSpec;
		if (_p17.ctor === 'Offset') {
			return _justinmimbs$elm_date_extra$Date_Extra$fromUnixTime((_p19 + _p18) - (_p17._0 * _justinmimbs$elm_date_extra$Date_Facts$msPerMinute));
		} else {
			var unixTime = _p19 + _p18;
			var offset0 = _justinmimbs$elm_date_extra$Date_Extra$offsetFromUtc(
				_justinmimbs$elm_date_extra$Date_Extra$fromUnixTime(unixTime));
			var date1 = _justinmimbs$elm_date_extra$Date_Extra$fromUnixTime(unixTime - (offset0 * _justinmimbs$elm_date_extra$Date_Facts$msPerMinute));
			var offset1 = _justinmimbs$elm_date_extra$Date_Extra$offsetFromUtc(date1);
			if (_elm_lang$core$Native_Utils.eq(offset0, offset1)) {
				return date1;
			} else {
				var date2 = _justinmimbs$elm_date_extra$Date_Extra$fromUnixTime(unixTime - (offset1 * _justinmimbs$elm_date_extra$Date_Facts$msPerMinute));
				var offset2 = _justinmimbs$elm_date_extra$Date_Extra$offsetFromUtc(date2);
				return _elm_lang$core$Native_Utils.eq(offset1, offset2) ? date2 : date1;
			}
		}
	});
var _justinmimbs$elm_date_extra$Date_Extra$DateMS = function (a) {
	return {ctor: 'DateMS', _0: a};
};
var _justinmimbs$elm_date_extra$Date_Extra$calendarDate = F3(
	function (y, m, d) {
		return _justinmimbs$elm_date_extra$Date_Extra$DateMS(
			_justinmimbs$elm_date_extra$Date_Extra$unixTimeFromRataDie(
				A3(_justinmimbs$elm_date_extra$Date_RataDie$fromCalendarDate, y, m, d)));
	});
var _justinmimbs$elm_date_extra$Date_Extra$ordinalDate = F2(
	function (y, od) {
		return _justinmimbs$elm_date_extra$Date_Extra$DateMS(
			_justinmimbs$elm_date_extra$Date_Extra$unixTimeFromRataDie(
				A2(_justinmimbs$elm_date_extra$Date_RataDie$fromOrdinalDate, y, od)));
	});
var _justinmimbs$elm_date_extra$Date_Extra$weekDate = F3(
	function (wy, wn, wd) {
		return _justinmimbs$elm_date_extra$Date_Extra$DateMS(
			_justinmimbs$elm_date_extra$Date_Extra$unixTimeFromRataDie(
				A3(_justinmimbs$elm_date_extra$Date_RataDie$fromWeekDate, wy, wn, wd)));
	});
var _justinmimbs$elm_date_extra$Date_Extra$dateFromMatches = F6(
	function (yyyy, calMM, calDD, weekWW, weekD, ordDDD) {
		return A2(
			_elm_lang$core$Result$map,
			function (_p20) {
				return _justinmimbs$elm_date_extra$Date_Extra$DateMS(
					_justinmimbs$elm_date_extra$Date_Extra$unixTimeFromRataDie(_p20));
			},
			function () {
				var y = A2(
					_elm_lang$core$Result$withDefault,
					1,
					_elm_lang$core$String$toInt(yyyy));
				var _p21 = {ctor: '_Tuple2', _0: calMM, _1: weekWW};
				_v7_2:
				do {
					if (_p21.ctor === '_Tuple2') {
						if (_p21._0.ctor === 'Just') {
							if (_p21._1.ctor === 'Nothing') {
								return A3(
									_justinmimbs$elm_date_extra$Date_RataDie$fromCalendarParts,
									y,
									A2(_justinmimbs$elm_date_extra$Date_Extra$matchToInt, 1, calMM),
									A2(_justinmimbs$elm_date_extra$Date_Extra$matchToInt, 1, calDD));
							} else {
								break _v7_2;
							}
						} else {
							if (_p21._1.ctor === 'Just') {
								return A3(
									_justinmimbs$elm_date_extra$Date_RataDie$fromWeekParts,
									y,
									A2(_justinmimbs$elm_date_extra$Date_Extra$matchToInt, 1, weekWW),
									A2(_justinmimbs$elm_date_extra$Date_Extra$matchToInt, 1, weekD));
							} else {
								break _v7_2;
							}
						}
					} else {
						break _v7_2;
					}
				} while(false);
				return A2(
					_justinmimbs$elm_date_extra$Date_RataDie$fromOrdinalParts,
					y,
					A2(_justinmimbs$elm_date_extra$Date_Extra$matchToInt, 1, ordDDD));
			}());
	});
var _justinmimbs$elm_date_extra$Date_Extra$TimeMS = function (a) {
	return {ctor: 'TimeMS', _0: a};
};
var _justinmimbs$elm_date_extra$Date_Extra$midnight = _justinmimbs$elm_date_extra$Date_Extra$TimeMS(0);
var _justinmimbs$elm_date_extra$Date_Extra$time = F4(
	function (hh, mm, ss, ms) {
		return _justinmimbs$elm_date_extra$Date_Extra$TimeMS(
			A4(
				_justinmimbs$elm_date_extra$Date_Extra$msFromTimeParts,
				A3(_elm_lang$core$Basics$clamp, 0, 23, hh),
				A3(_elm_lang$core$Basics$clamp, 0, 59, mm),
				A3(_elm_lang$core$Basics$clamp, 0, 59, ss),
				A3(_elm_lang$core$Basics$clamp, 0, 999, ms)));
	});
var _justinmimbs$elm_date_extra$Date_Extra$timeFromMatches = F4(
	function (timeHH, timeMM, timeSS, timeF) {
		var fractional = A2(
			_elm_lang$core$Maybe$withDefault,
			0.0,
			A2(
				_elm_lang$core$Maybe$andThen,
				function (_p22) {
					return _elm_lang$core$Result$toMaybe(
						_elm_lang$core$String$toFloat(
							A4(
								_elm_lang$core$Regex$replace,
								_elm_lang$core$Regex$All,
								_elm_lang$core$Regex$regex(','),
								function (_p23) {
									return '.';
								},
								_p22)));
				},
				timeF));
		var _p24 = function () {
			var _p26 = A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Maybe$andThen(
					function (_p25) {
						return _elm_lang$core$Result$toMaybe(
							_elm_lang$core$String$toFloat(_p25));
					}),
				{
					ctor: '::',
					_0: timeHH,
					_1: {
						ctor: '::',
						_0: timeMM,
						_1: {
							ctor: '::',
							_0: timeSS,
							_1: {ctor: '[]'}
						}
					}
				});
			_v8_3:
			do {
				if (((_p26.ctor === '::') && (_p26._0.ctor === 'Just')) && (_p26._1.ctor === '::')) {
					if (_p26._1._0.ctor === 'Just') {
						if (_p26._1._1.ctor === '::') {
							if (_p26._1._1._0.ctor === 'Just') {
								if (_p26._1._1._1.ctor === '[]') {
									return {ctor: '_Tuple3', _0: _p26._0._0, _1: _p26._1._0._0, _2: _p26._1._1._0._0 + fractional};
								} else {
									break _v8_3;
								}
							} else {
								if (_p26._1._1._1.ctor === '[]') {
									return {ctor: '_Tuple3', _0: _p26._0._0, _1: _p26._1._0._0 + fractional, _2: 0.0};
								} else {
									break _v8_3;
								}
							}
						} else {
							break _v8_3;
						}
					} else {
						if (((_p26._1._1.ctor === '::') && (_p26._1._1._0.ctor === 'Nothing')) && (_p26._1._1._1.ctor === '[]')) {
							return {ctor: '_Tuple3', _0: _p26._0._0 + fractional, _1: 0.0, _2: 0.0};
						} else {
							break _v8_3;
						}
					}
				} else {
					break _v8_3;
				}
			} while(false);
			return {ctor: '_Tuple3', _0: 0.0, _1: 0.0, _2: 0.0};
		}();
		var hh = _p24._0;
		var mm = _p24._1;
		var ss = _p24._2;
		return (_elm_lang$core$Native_Utils.cmp(hh, 24) > -1) ? _elm_lang$core$Result$Err(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Invalid time (hours = ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(hh),
					')'))) : ((_elm_lang$core$Native_Utils.cmp(mm, 60) > -1) ? _elm_lang$core$Result$Err(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Invalid time (minutes = ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(mm),
					')'))) : ((_elm_lang$core$Native_Utils.cmp(ss, 60) > -1) ? _elm_lang$core$Result$Err(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Invalid time (seconds = ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(ss),
					')'))) : _elm_lang$core$Result$Ok(
			_justinmimbs$elm_date_extra$Date_Extra$TimeMS(
				_elm_lang$core$Basics$round(
					((hh * _elm_lang$core$Basics$toFloat(_justinmimbs$elm_date_extra$Date_Facts$msPerHour)) + (mm * _elm_lang$core$Basics$toFloat(_justinmimbs$elm_date_extra$Date_Facts$msPerMinute))) + (ss * _elm_lang$core$Basics$toFloat(_justinmimbs$elm_date_extra$Date_Facts$msPerSecond)))))));
	});
var _justinmimbs$elm_date_extra$Date_Extra$Local = {ctor: 'Local'};
var _justinmimbs$elm_date_extra$Date_Extra$local = _justinmimbs$elm_date_extra$Date_Extra$Local;
var _justinmimbs$elm_date_extra$Date_Extra$fromParts = F7(
	function (y, m, d, hh, mm, ss, ms) {
		return A3(
			_justinmimbs$elm_date_extra$Date_Extra$fromSpec,
			A3(_justinmimbs$elm_date_extra$Date_Extra$calendarDate, y, m, d),
			A4(_justinmimbs$elm_date_extra$Date_Extra$time, hh, mm, ss, ms),
			_justinmimbs$elm_date_extra$Date_Extra$local);
	});
var _justinmimbs$elm_date_extra$Date_Extra$fromCalendarDate = F3(
	function (y, m, d) {
		return A3(
			_justinmimbs$elm_date_extra$Date_Extra$fromSpec,
			A3(_justinmimbs$elm_date_extra$Date_Extra$calendarDate, y, m, d),
			_justinmimbs$elm_date_extra$Date_Extra$midnight,
			_justinmimbs$elm_date_extra$Date_Extra$local);
	});
var _justinmimbs$elm_date_extra$Date_Extra$fromRataDie = function (rd) {
	return A3(
		_justinmimbs$elm_date_extra$Date_Extra$fromSpec,
		_justinmimbs$elm_date_extra$Date_Extra$DateMS(
			_justinmimbs$elm_date_extra$Date_Extra$unixTimeFromRataDie(rd)),
		_justinmimbs$elm_date_extra$Date_Extra$midnight,
		_justinmimbs$elm_date_extra$Date_Extra$local);
};
var _justinmimbs$elm_date_extra$Date_Extra$floor = F2(
	function (interval, date) {
		var _p27 = interval;
		switch (_p27.ctor) {
			case 'Millisecond':
				return date;
			case 'Second':
				return A7(
					_justinmimbs$elm_date_extra$Date_Extra$fromParts,
					_elm_lang$core$Date$year(date),
					_elm_lang$core$Date$month(date),
					_elm_lang$core$Date$day(date),
					_elm_lang$core$Date$hour(date),
					_elm_lang$core$Date$minute(date),
					_elm_lang$core$Date$second(date),
					0);
			case 'Minute':
				return A7(
					_justinmimbs$elm_date_extra$Date_Extra$fromParts,
					_elm_lang$core$Date$year(date),
					_elm_lang$core$Date$month(date),
					_elm_lang$core$Date$day(date),
					_elm_lang$core$Date$hour(date),
					_elm_lang$core$Date$minute(date),
					0,
					0);
			case 'Hour':
				return A7(
					_justinmimbs$elm_date_extra$Date_Extra$fromParts,
					_elm_lang$core$Date$year(date),
					_elm_lang$core$Date$month(date),
					_elm_lang$core$Date$day(date),
					_elm_lang$core$Date$hour(date),
					0,
					0,
					0);
			case 'Day':
				return A3(
					_justinmimbs$elm_date_extra$Date_Extra$fromCalendarDate,
					_elm_lang$core$Date$year(date),
					_elm_lang$core$Date$month(date),
					_elm_lang$core$Date$day(date));
			case 'Month':
				return A3(
					_justinmimbs$elm_date_extra$Date_Extra$fromCalendarDate,
					_elm_lang$core$Date$year(date),
					_elm_lang$core$Date$month(date),
					1);
			case 'Year':
				return A3(
					_justinmimbs$elm_date_extra$Date_Extra$fromCalendarDate,
					_elm_lang$core$Date$year(date),
					_elm_lang$core$Date$Jan,
					1);
			case 'Quarter':
				return A3(
					_justinmimbs$elm_date_extra$Date_Extra$fromCalendarDate,
					_elm_lang$core$Date$year(date),
					_justinmimbs$elm_date_extra$Date_Extra$quarterToMonth(
						_justinmimbs$elm_date_extra$Date_Extra$quarter(date)),
					1);
			case 'Week':
				return _justinmimbs$elm_date_extra$Date_Extra$fromRataDie(
					_justinmimbs$elm_date_extra$Date_Extra$toRataDie(date) - A2(_justinmimbs$elm_date_extra$Date_Extra$daysSincePreviousWeekday, _elm_lang$core$Date$Mon, date));
			case 'Monday':
				return _justinmimbs$elm_date_extra$Date_Extra$fromRataDie(
					_justinmimbs$elm_date_extra$Date_Extra$toRataDie(date) - A2(_justinmimbs$elm_date_extra$Date_Extra$daysSincePreviousWeekday, _elm_lang$core$Date$Mon, date));
			case 'Tuesday':
				return _justinmimbs$elm_date_extra$Date_Extra$fromRataDie(
					_justinmimbs$elm_date_extra$Date_Extra$toRataDie(date) - A2(_justinmimbs$elm_date_extra$Date_Extra$daysSincePreviousWeekday, _elm_lang$core$Date$Tue, date));
			case 'Wednesday':
				return _justinmimbs$elm_date_extra$Date_Extra$fromRataDie(
					_justinmimbs$elm_date_extra$Date_Extra$toRataDie(date) - A2(_justinmimbs$elm_date_extra$Date_Extra$daysSincePreviousWeekday, _elm_lang$core$Date$Wed, date));
			case 'Thursday':
				return _justinmimbs$elm_date_extra$Date_Extra$fromRataDie(
					_justinmimbs$elm_date_extra$Date_Extra$toRataDie(date) - A2(_justinmimbs$elm_date_extra$Date_Extra$daysSincePreviousWeekday, _elm_lang$core$Date$Thu, date));
			case 'Friday':
				return _justinmimbs$elm_date_extra$Date_Extra$fromRataDie(
					_justinmimbs$elm_date_extra$Date_Extra$toRataDie(date) - A2(_justinmimbs$elm_date_extra$Date_Extra$daysSincePreviousWeekday, _elm_lang$core$Date$Fri, date));
			case 'Saturday':
				return _justinmimbs$elm_date_extra$Date_Extra$fromRataDie(
					_justinmimbs$elm_date_extra$Date_Extra$toRataDie(date) - A2(_justinmimbs$elm_date_extra$Date_Extra$daysSincePreviousWeekday, _elm_lang$core$Date$Sat, date));
			default:
				return _justinmimbs$elm_date_extra$Date_Extra$fromRataDie(
					_justinmimbs$elm_date_extra$Date_Extra$toRataDie(date) - A2(_justinmimbs$elm_date_extra$Date_Extra$daysSincePreviousWeekday, _elm_lang$core$Date$Sun, date));
		}
	});
var _justinmimbs$elm_date_extra$Date_Extra$Offset = function (a) {
	return {ctor: 'Offset', _0: a};
};
var _justinmimbs$elm_date_extra$Date_Extra$utc = _justinmimbs$elm_date_extra$Date_Extra$Offset(0);
var _justinmimbs$elm_date_extra$Date_Extra$offset = _justinmimbs$elm_date_extra$Date_Extra$Offset;
var _justinmimbs$elm_date_extra$Date_Extra$offsetFromMatches = F4(
	function (tzZ, tzSign, tzHH, tzMM) {
		var _p28 = {ctor: '_Tuple2', _0: tzZ, _1: tzSign};
		_v10_2:
		do {
			if (_p28.ctor === '_Tuple2') {
				if (_p28._0.ctor === 'Just') {
					if ((_p28._0._0 === 'Z') && (_p28._1.ctor === 'Nothing')) {
						return _elm_lang$core$Result$Ok(_justinmimbs$elm_date_extra$Date_Extra$utc);
					} else {
						break _v10_2;
					}
				} else {
					if (_p28._1.ctor === 'Just') {
						var mm = A2(_justinmimbs$elm_date_extra$Date_Extra$matchToInt, 0, tzMM);
						var hh = A2(_justinmimbs$elm_date_extra$Date_Extra$matchToInt, 0, tzHH);
						return (_elm_lang$core$Native_Utils.cmp(hh, 23) > 0) ? _elm_lang$core$Result$Err(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'Invalid offset (hours = ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(hh),
									')'))) : ((_elm_lang$core$Native_Utils.cmp(mm, 59) > 0) ? _elm_lang$core$Result$Err(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'Invalid offset (minutes = ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(mm),
									')'))) : (_elm_lang$core$Native_Utils.eq(_p28._1._0, '+') ? _elm_lang$core$Result$Ok(
							_justinmimbs$elm_date_extra$Date_Extra$offset((hh * 60) + mm)) : _elm_lang$core$Result$Ok(
							_justinmimbs$elm_date_extra$Date_Extra$offset((hh * -60) - mm))));
					} else {
						break _v10_2;
					}
				}
			} else {
				break _v10_2;
			}
		} while(false);
		return _elm_lang$core$Result$Ok(_justinmimbs$elm_date_extra$Date_Extra$local);
	});
var _justinmimbs$elm_date_extra$Date_Extra$fromMatches = function (matches) {
	var _p29 = matches;
	if (((((((((((((((((((_p29.ctor === '::') && (_p29._0.ctor === 'Just')) && (_p29._1.ctor === '::')) && (_p29._1._1.ctor === '::')) && (_p29._1._1._1.ctor === '::')) && (_p29._1._1._1._1.ctor === '::')) && (_p29._1._1._1._1._1.ctor === '::')) && (_p29._1._1._1._1._1._1.ctor === '::')) && (_p29._1._1._1._1._1._1._1.ctor === '::')) && (_p29._1._1._1._1._1._1._1._1.ctor === '::')) && (_p29._1._1._1._1._1._1._1._1._1.ctor === '::')) && (_p29._1._1._1._1._1._1._1._1._1._1.ctor === '::')) && (_p29._1._1._1._1._1._1._1._1._1._1._1.ctor === '::')) && (_p29._1._1._1._1._1._1._1._1._1._1._1._1.ctor === '::')) && (_p29._1._1._1._1._1._1._1._1._1._1._1._1._1.ctor === '::')) && (_p29._1._1._1._1._1._1._1._1._1._1._1._1._1._1.ctor === '::')) && (_p29._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1.ctor === '::')) && (_p29._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1.ctor === '::')) && (_p29._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1.ctor === '[]')) {
		return A4(
			_elm_lang$core$Result$map3,
			_justinmimbs$elm_date_extra$Date_Extra$fromSpec,
			A6(_justinmimbs$elm_date_extra$Date_Extra$dateFromMatches, _p29._0._0, _p29._1._1._0, _p29._1._1._1._0, _p29._1._1._1._1._1._0, _p29._1._1._1._1._1._1._0, _p29._1._1._1._1._1._1._1._0),
			A4(_justinmimbs$elm_date_extra$Date_Extra$timeFromMatches, _p29._1._1._1._1._1._1._1._1._0, _p29._1._1._1._1._1._1._1._1._1._1._0, _p29._1._1._1._1._1._1._1._1._1._1._1._0, _p29._1._1._1._1._1._1._1._1._1._1._1._1._0),
			A4(_justinmimbs$elm_date_extra$Date_Extra$offsetFromMatches, _p29._1._1._1._1._1._1._1._1._1._1._1._1._1._0, _p29._1._1._1._1._1._1._1._1._1._1._1._1._1._1._0, _p29._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._0, _p29._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._1._0));
	} else {
		return _elm_lang$core$Result$Err('Unexpected matches');
	}
};
var _justinmimbs$elm_date_extra$Date_Extra$fromIsoString = function (s) {
	return A2(
		_elm_lang$core$Result$mapError,
		F2(
			function (x, y) {
				return A2(_elm_lang$core$Basics_ops['++'], x, y);
			})(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Failed to create a Date from string \'',
				A2(_elm_lang$core$Basics_ops['++'], s, '\': '))),
		A2(
			_elm_lang$core$Result$andThen,
			function (_p30) {
				return _justinmimbs$elm_date_extra$Date_Extra$fromMatches(
					function (_) {
						return _.submatches;
					}(_p30));
			},
			A2(
				_elm_lang$core$Result$fromMaybe,
				'Invalid ISO 8601 format',
				_elm_lang$core$List$head(
					A3(
						_elm_lang$core$Regex$find,
						_elm_lang$core$Regex$AtMost(1),
						_justinmimbs$elm_date_extra$Date_Extra$isoDateRegex,
						s)))));
};
var _justinmimbs$elm_date_extra$Date_Extra$PM = {ctor: 'PM'};
var _justinmimbs$elm_date_extra$Date_Extra$Noon = {ctor: 'Noon'};
var _justinmimbs$elm_date_extra$Date_Extra$AM = {ctor: 'AM'};
var _justinmimbs$elm_date_extra$Date_Extra$Midnight = {ctor: 'Midnight'};
var _justinmimbs$elm_date_extra$Date_Extra$dayPeriod = function (date) {
	var onTheHour = _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$Date$minute(date),
		0) && (_elm_lang$core$Native_Utils.eq(
		_elm_lang$core$Date$second(date),
		0) && _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$Date$millisecond(date),
		0));
	var hh = _elm_lang$core$Date$hour(date);
	return (_elm_lang$core$Native_Utils.eq(hh, 0) && onTheHour) ? _justinmimbs$elm_date_extra$Date_Extra$Midnight : ((_elm_lang$core$Native_Utils.cmp(hh, 12) < 0) ? _justinmimbs$elm_date_extra$Date_Extra$AM : ((_elm_lang$core$Native_Utils.eq(hh, 12) && onTheHour) ? _justinmimbs$elm_date_extra$Date_Extra$Noon : _justinmimbs$elm_date_extra$Date_Extra$PM));
};
var _justinmimbs$elm_date_extra$Date_Extra$Invalid = {ctor: 'Invalid'};
var _justinmimbs$elm_date_extra$Date_Extra$Short = {ctor: 'Short'};
var _justinmimbs$elm_date_extra$Date_Extra$Narrow = {ctor: 'Narrow'};
var _justinmimbs$elm_date_extra$Date_Extra$Full = {ctor: 'Full'};
var _justinmimbs$elm_date_extra$Date_Extra$Abbreviated = {ctor: 'Abbreviated'};
var _justinmimbs$elm_date_extra$Date_Extra$formatStyleFromLength = function (length) {
	var _p31 = length;
	switch (_p31) {
		case 1:
			return _justinmimbs$elm_date_extra$Date_Extra$Abbreviated;
		case 2:
			return _justinmimbs$elm_date_extra$Date_Extra$Abbreviated;
		case 3:
			return _justinmimbs$elm_date_extra$Date_Extra$Abbreviated;
		case 4:
			return _justinmimbs$elm_date_extra$Date_Extra$Full;
		case 5:
			return _justinmimbs$elm_date_extra$Date_Extra$Narrow;
		case 6:
			return _justinmimbs$elm_date_extra$Date_Extra$Short;
		default:
			return _justinmimbs$elm_date_extra$Date_Extra$Invalid;
	}
};
var _justinmimbs$elm_date_extra$Date_Extra$format = F3(
	function (asUtc, date, match) {
		format:
		while (true) {
			var length = _elm_lang$core$String$length(match);
			var $char = A2(_elm_lang$core$String$left, 1, match);
			var _p32 = $char;
			switch (_p32) {
				case 'y':
					var _p33 = length;
					if (_p33 === 2) {
						return A2(
							_elm_lang$core$String$right,
							2,
							A3(
								_elm_lang$core$String$padLeft,
								length,
								_elm_lang$core$Native_Utils.chr('0'),
								_elm_lang$core$Basics$toString(
									_elm_lang$core$Date$year(date))));
					} else {
						return A3(
							_elm_lang$core$String$padLeft,
							length,
							_elm_lang$core$Native_Utils.chr('0'),
							_elm_lang$core$Basics$toString(
								_elm_lang$core$Date$year(date)));
					}
				case 'Y':
					var _p34 = length;
					if (_p34 === 2) {
						return A2(
							_elm_lang$core$String$right,
							2,
							A3(
								_elm_lang$core$String$padLeft,
								length,
								_elm_lang$core$Native_Utils.chr('0'),
								_elm_lang$core$Basics$toString(
									_justinmimbs$elm_date_extra$Date_Extra$weekYear(date))));
					} else {
						return A3(
							_elm_lang$core$String$padLeft,
							length,
							_elm_lang$core$Native_Utils.chr('0'),
							_elm_lang$core$Basics$toString(
								_justinmimbs$elm_date_extra$Date_Extra$weekYear(date)));
					}
				case 'Q':
					var _p35 = length;
					switch (_p35) {
						case 1:
							return _elm_lang$core$Basics$toString(
								_justinmimbs$elm_date_extra$Date_Extra$quarter(date));
						case 2:
							return _elm_lang$core$Basics$toString(
								_justinmimbs$elm_date_extra$Date_Extra$quarter(date));
						case 3:
							return A2(
								F2(
									function (x, y) {
										return A2(_elm_lang$core$Basics_ops['++'], x, y);
									}),
								'Q',
								_elm_lang$core$Basics$toString(
									_justinmimbs$elm_date_extra$Date_Extra$quarter(date)));
						case 4:
							return _justinmimbs$elm_date_extra$Date_Extra$withOrdinalSuffix(
								_justinmimbs$elm_date_extra$Date_Extra$quarter(date));
						case 5:
							return _elm_lang$core$Basics$toString(
								_justinmimbs$elm_date_extra$Date_Extra$quarter(date));
						default:
							return '';
					}
				case 'M':
					var _p36 = length;
					switch (_p36) {
						case 1:
							return _elm_lang$core$Basics$toString(
								_justinmimbs$elm_date_extra$Date_Extra$monthNumber(date));
						case 2:
							return A3(
								_elm_lang$core$String$padLeft,
								2,
								_elm_lang$core$Native_Utils.chr('0'),
								_elm_lang$core$Basics$toString(
									_justinmimbs$elm_date_extra$Date_Extra$monthNumber(date)));
						case 3:
							return A2(
								_elm_lang$core$String$left,
								3,
								_justinmimbs$elm_date_extra$Date_Extra$monthToName(
									_elm_lang$core$Date$month(date)));
						case 4:
							return _justinmimbs$elm_date_extra$Date_Extra$monthToName(
								_elm_lang$core$Date$month(date));
						case 5:
							return A2(
								_elm_lang$core$String$left,
								1,
								_justinmimbs$elm_date_extra$Date_Extra$monthToName(
									_elm_lang$core$Date$month(date)));
						default:
							return '';
					}
				case 'w':
					var _p37 = length;
					switch (_p37) {
						case 1:
							return _elm_lang$core$Basics$toString(
								_justinmimbs$elm_date_extra$Date_Extra$weekNumber(date));
						case 2:
							return A3(
								_elm_lang$core$String$padLeft,
								2,
								_elm_lang$core$Native_Utils.chr('0'),
								_elm_lang$core$Basics$toString(
									_justinmimbs$elm_date_extra$Date_Extra$weekNumber(date)));
						default:
							return '';
					}
				case 'd':
					var _p38 = length;
					switch (_p38) {
						case 1:
							return _elm_lang$core$Basics$toString(
								_elm_lang$core$Date$day(date));
						case 2:
							return A3(
								_elm_lang$core$String$padLeft,
								2,
								_elm_lang$core$Native_Utils.chr('0'),
								_elm_lang$core$Basics$toString(
									_elm_lang$core$Date$day(date)));
						case 3:
							return _justinmimbs$elm_date_extra$Date_Extra$withOrdinalSuffix(
								_elm_lang$core$Date$day(date));
						default:
							return '';
					}
				case 'D':
					var _p39 = length;
					switch (_p39) {
						case 1:
							return _elm_lang$core$Basics$toString(
								_justinmimbs$elm_date_extra$Date_Extra$ordinalDay(date));
						case 2:
							return A3(
								_elm_lang$core$String$padLeft,
								2,
								_elm_lang$core$Native_Utils.chr('0'),
								_elm_lang$core$Basics$toString(
									_justinmimbs$elm_date_extra$Date_Extra$ordinalDay(date)));
						case 3:
							return A3(
								_elm_lang$core$String$padLeft,
								3,
								_elm_lang$core$Native_Utils.chr('0'),
								_elm_lang$core$Basics$toString(
									_justinmimbs$elm_date_extra$Date_Extra$ordinalDay(date)));
						default:
							return '';
					}
				case 'E':
					var _p40 = _justinmimbs$elm_date_extra$Date_Extra$formatStyleFromLength(length);
					switch (_p40.ctor) {
						case 'Abbreviated':
							return A2(
								_elm_lang$core$String$left,
								3,
								_justinmimbs$elm_date_extra$Date_Extra$weekdayToName(
									_elm_lang$core$Date$dayOfWeek(date)));
						case 'Full':
							return _justinmimbs$elm_date_extra$Date_Extra$weekdayToName(
								_elm_lang$core$Date$dayOfWeek(date));
						case 'Narrow':
							return A2(
								_elm_lang$core$String$left,
								1,
								_justinmimbs$elm_date_extra$Date_Extra$weekdayToName(
									_elm_lang$core$Date$dayOfWeek(date)));
						case 'Short':
							return A2(
								_elm_lang$core$String$left,
								2,
								_justinmimbs$elm_date_extra$Date_Extra$weekdayToName(
									_elm_lang$core$Date$dayOfWeek(date)));
						default:
							return '';
					}
				case 'e':
					var _p41 = length;
					switch (_p41) {
						case 1:
							return _elm_lang$core$Basics$toString(
								_justinmimbs$elm_date_extra$Date_Extra$weekdayNumber(date));
						case 2:
							return _elm_lang$core$Basics$toString(
								_justinmimbs$elm_date_extra$Date_Extra$weekdayNumber(date));
						default:
							var _v23 = asUtc,
								_v24 = date,
								_v25 = _elm_lang$core$String$toUpper(match);
							asUtc = _v23;
							date = _v24;
							match = _v25;
							continue format;
					}
				case 'a':
					var p = _justinmimbs$elm_date_extra$Date_Extra$dayPeriod(date);
					var m = (_elm_lang$core$Native_Utils.eq(p, _justinmimbs$elm_date_extra$Date_Extra$Midnight) || _elm_lang$core$Native_Utils.eq(p, _justinmimbs$elm_date_extra$Date_Extra$AM)) ? 'A' : 'P';
					var _p42 = _justinmimbs$elm_date_extra$Date_Extra$formatStyleFromLength(length);
					switch (_p42.ctor) {
						case 'Abbreviated':
							return A2(_elm_lang$core$Basics_ops['++'], m, 'M');
						case 'Full':
							return A2(_elm_lang$core$Basics_ops['++'], m, '.M.');
						case 'Narrow':
							return m;
						default:
							return '';
					}
				case 'b':
					var _p43 = _justinmimbs$elm_date_extra$Date_Extra$formatStyleFromLength(length);
					switch (_p43.ctor) {
						case 'Abbreviated':
							var _p44 = _justinmimbs$elm_date_extra$Date_Extra$dayPeriod(date);
							switch (_p44.ctor) {
								case 'Midnight':
									return 'mid.';
								case 'AM':
									return 'am';
								case 'Noon':
									return 'noon';
								default:
									return 'pm';
							}
						case 'Full':
							var _p45 = _justinmimbs$elm_date_extra$Date_Extra$dayPeriod(date);
							switch (_p45.ctor) {
								case 'Midnight':
									return 'midnight';
								case 'AM':
									return 'a.m.';
								case 'Noon':
									return 'noon';
								default:
									return 'p.m.';
							}
						case 'Narrow':
							var _p46 = _justinmimbs$elm_date_extra$Date_Extra$dayPeriod(date);
							switch (_p46.ctor) {
								case 'Midnight':
									return 'md';
								case 'AM':
									return 'a';
								case 'Noon':
									return 'nn';
								default:
									return 'p';
							}
						default:
							return '';
					}
				case 'h':
					var _p47 = length;
					switch (_p47) {
						case 1:
							return _elm_lang$core$Basics$toString(
								_justinmimbs$elm_date_extra$Date_Extra$hour12(date));
						case 2:
							return A3(
								_elm_lang$core$String$padLeft,
								2,
								_elm_lang$core$Native_Utils.chr('0'),
								_elm_lang$core$Basics$toString(
									_justinmimbs$elm_date_extra$Date_Extra$hour12(date)));
						default:
							return '';
					}
				case 'H':
					var _p48 = length;
					switch (_p48) {
						case 1:
							return _elm_lang$core$Basics$toString(
								_elm_lang$core$Date$hour(date));
						case 2:
							return A3(
								_elm_lang$core$String$padLeft,
								2,
								_elm_lang$core$Native_Utils.chr('0'),
								_elm_lang$core$Basics$toString(
									_elm_lang$core$Date$hour(date)));
						default:
							return '';
					}
				case 'm':
					var _p49 = length;
					switch (_p49) {
						case 1:
							return _elm_lang$core$Basics$toString(
								_elm_lang$core$Date$minute(date));
						case 2:
							return A3(
								_elm_lang$core$String$padLeft,
								2,
								_elm_lang$core$Native_Utils.chr('0'),
								_elm_lang$core$Basics$toString(
									_elm_lang$core$Date$minute(date)));
						default:
							return '';
					}
				case 's':
					var _p50 = length;
					switch (_p50) {
						case 1:
							return _elm_lang$core$Basics$toString(
								_elm_lang$core$Date$second(date));
						case 2:
							return A3(
								_elm_lang$core$String$padLeft,
								2,
								_elm_lang$core$Native_Utils.chr('0'),
								_elm_lang$core$Basics$toString(
									_elm_lang$core$Date$second(date)));
						default:
							return '';
					}
				case 'S':
					return A3(
						_elm_lang$core$String$padRight,
						length,
						_elm_lang$core$Native_Utils.chr('0'),
						A2(
							_elm_lang$core$String$left,
							length,
							A3(
								_elm_lang$core$String$padLeft,
								3,
								_elm_lang$core$Native_Utils.chr('0'),
								_elm_lang$core$Basics$toString(
									_elm_lang$core$Date$millisecond(date)))));
				case 'X':
					if ((_elm_lang$core$Native_Utils.cmp(length, 4) < 0) && (asUtc || _elm_lang$core$Native_Utils.eq(
						_justinmimbs$elm_date_extra$Date_Extra$offsetFromUtc(date),
						0))) {
						return 'Z';
					} else {
						var _v35 = asUtc,
							_v36 = date,
							_v37 = _elm_lang$core$String$toLower(match);
						asUtc = _v35;
						date = _v36;
						match = _v37;
						continue format;
					}
				case 'x':
					var offset = asUtc ? 0 : _justinmimbs$elm_date_extra$Date_Extra$offsetFromUtc(date);
					var _p51 = length;
					switch (_p51) {
						case 1:
							return A3(_justinmimbs$elm_date_extra$Date_Extra$formatTimeOffset, '', true, offset);
						case 2:
							return A3(_justinmimbs$elm_date_extra$Date_Extra$formatTimeOffset, '', false, offset);
						case 3:
							return A3(_justinmimbs$elm_date_extra$Date_Extra$formatTimeOffset, ':', false, offset);
						default:
							return '';
					}
				case '\'':
					return _elm_lang$core$Native_Utils.eq(match, '\'\'') ? '\'' : A4(
						_elm_lang$core$Regex$replace,
						_elm_lang$core$Regex$All,
						_elm_lang$core$Regex$regex('\'\''),
						function (_p52) {
							return '\'';
						},
						A3(_elm_lang$core$String$slice, 1, -1, match));
				default:
					return '';
			}
		}
	});
var _justinmimbs$elm_date_extra$Date_Extra$toFormattedString_ = F3(
	function (asUtc, pattern, date) {
		var date_ = asUtc ? _elm_lang$core$Date$fromTime(
			_elm_lang$core$Date$toTime(date) - _elm_lang$core$Basics$toFloat(
				_justinmimbs$elm_date_extra$Date_Extra$offsetFromUtc(date) * _justinmimbs$elm_date_extra$Date_Facts$msPerMinute)) : date;
		return A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_justinmimbs$elm_date_extra$Date_Extra$patternMatches,
			function (_p53) {
				return A3(
					_justinmimbs$elm_date_extra$Date_Extra$format,
					asUtc,
					date_,
					function (_) {
						return _.match;
					}(_p53));
			},
			pattern);
	});
var _justinmimbs$elm_date_extra$Date_Extra$toFormattedString = _justinmimbs$elm_date_extra$Date_Extra$toFormattedString_(false);
var _justinmimbs$elm_date_extra$Date_Extra$toUtcFormattedString = _justinmimbs$elm_date_extra$Date_Extra$toFormattedString_(true);
var _justinmimbs$elm_date_extra$Date_Extra$toIsoString = A2(_justinmimbs$elm_date_extra$Date_Extra$toFormattedString_, false, 'yyyy-MM-dd\'T\'HH:mm:ss.SSSxxx');
var _justinmimbs$elm_date_extra$Date_Extra$toUtcIsoString = A2(_justinmimbs$elm_date_extra$Date_Extra$toFormattedString_, true, 'yyyy-MM-dd\'T\'HH:mm:ss.SSSXXX');
var _justinmimbs$elm_date_extra$Date_Extra$Millisecond = {ctor: 'Millisecond'};
var _justinmimbs$elm_date_extra$Date_Extra$Second = {ctor: 'Second'};
var _justinmimbs$elm_date_extra$Date_Extra$Minute = {ctor: 'Minute'};
var _justinmimbs$elm_date_extra$Date_Extra$Hour = {ctor: 'Hour'};
var _justinmimbs$elm_date_extra$Date_Extra$Day = {ctor: 'Day'};
var _justinmimbs$elm_date_extra$Date_Extra$Sunday = {ctor: 'Sunday'};
var _justinmimbs$elm_date_extra$Date_Extra$Saturday = {ctor: 'Saturday'};
var _justinmimbs$elm_date_extra$Date_Extra$Friday = {ctor: 'Friday'};
var _justinmimbs$elm_date_extra$Date_Extra$Thursday = {ctor: 'Thursday'};
var _justinmimbs$elm_date_extra$Date_Extra$Wednesday = {ctor: 'Wednesday'};
var _justinmimbs$elm_date_extra$Date_Extra$Tuesday = {ctor: 'Tuesday'};
var _justinmimbs$elm_date_extra$Date_Extra$Monday = {ctor: 'Monday'};
var _justinmimbs$elm_date_extra$Date_Extra$Week = {ctor: 'Week'};
var _justinmimbs$elm_date_extra$Date_Extra$Month = {ctor: 'Month'};
var _justinmimbs$elm_date_extra$Date_Extra$add = F3(
	function (interval, n, date) {
		add:
		while (true) {
			var _p54 = interval;
			switch (_p54.ctor) {
				case 'Millisecond':
					return _elm_lang$core$Date$fromTime(
						_elm_lang$core$Date$toTime(date) + _elm_lang$core$Basics$toFloat(n));
				case 'Second':
					return _elm_lang$core$Date$fromTime(
						_elm_lang$core$Date$toTime(date) + _elm_lang$core$Basics$toFloat(n * _justinmimbs$elm_date_extra$Date_Facts$msPerSecond));
				case 'Minute':
					return _elm_lang$core$Date$fromTime(
						_elm_lang$core$Date$toTime(date) + _elm_lang$core$Basics$toFloat(n * _justinmimbs$elm_date_extra$Date_Facts$msPerMinute));
				case 'Hour':
					return _elm_lang$core$Date$fromTime(
						_elm_lang$core$Date$toTime(date) + _elm_lang$core$Basics$toFloat(n * _justinmimbs$elm_date_extra$Date_Facts$msPerHour));
				case 'Day':
					var _p55 = {
						ctor: '_Tuple7',
						_0: _elm_lang$core$Date$year(date),
						_1: _elm_lang$core$Date$month(date),
						_2: _elm_lang$core$Date$day(date),
						_3: _elm_lang$core$Date$hour(date),
						_4: _elm_lang$core$Date$minute(date),
						_5: _elm_lang$core$Date$second(date),
						_6: _elm_lang$core$Date$millisecond(date)
					};
					var y = _p55._0;
					var m = _p55._1;
					var d = _p55._2;
					var hh = _p55._3;
					var mm = _p55._4;
					var ss = _p55._5;
					var ms = _p55._6;
					return A3(
						_justinmimbs$elm_date_extra$Date_Extra$fromSpec,
						_justinmimbs$elm_date_extra$Date_Extra$DateMS(
							_justinmimbs$elm_date_extra$Date_Extra$unixTimeFromRataDie(
								A3(_justinmimbs$elm_date_extra$Date_RataDie$fromCalendarDate, y, m, d) + n)),
						A4(_justinmimbs$elm_date_extra$Date_Extra$time, hh, mm, ss, ms),
						_justinmimbs$elm_date_extra$Date_Extra$local);
				case 'Month':
					var _p56 = {
						ctor: '_Tuple7',
						_0: _elm_lang$core$Date$year(date),
						_1: _justinmimbs$elm_date_extra$Date_Extra$monthNumber(date),
						_2: _elm_lang$core$Date$day(date),
						_3: _elm_lang$core$Date$hour(date),
						_4: _elm_lang$core$Date$minute(date),
						_5: _elm_lang$core$Date$second(date),
						_6: _elm_lang$core$Date$millisecond(date)
					};
					var y = _p56._0;
					var mn = _p56._1;
					var d = _p56._2;
					var hh = _p56._3;
					var mm = _p56._4;
					var ss = _p56._5;
					var ms = _p56._6;
					var wholeMonths = (((12 * (y - 1)) + mn) - 1) + n;
					return A7(
						_justinmimbs$elm_date_extra$Date_Extra$fromParts,
						((wholeMonths / 12) | 0) + 1,
						_justinmimbs$elm_date_extra$Date_Extra$numberToMonth(
							A2(_elm_lang$core$Basics_ops['%'], wholeMonths, 12) + 1),
						d,
						hh,
						mm,
						ss,
						ms);
				case 'Year':
					var _v40 = _justinmimbs$elm_date_extra$Date_Extra$Month,
						_v41 = n * 12,
						_v42 = date;
					interval = _v40;
					n = _v41;
					date = _v42;
					continue add;
				case 'Quarter':
					var _v43 = _justinmimbs$elm_date_extra$Date_Extra$Month,
						_v44 = n * 3,
						_v45 = date;
					interval = _v43;
					n = _v44;
					date = _v45;
					continue add;
				case 'Week':
					var _v46 = _justinmimbs$elm_date_extra$Date_Extra$Day,
						_v47 = n * 7,
						_v48 = date;
					interval = _v46;
					n = _v47;
					date = _v48;
					continue add;
				default:
					var _v49 = _justinmimbs$elm_date_extra$Date_Extra$Day,
						_v50 = n * 7,
						_v51 = date;
					interval = _v49;
					n = _v50;
					date = _v51;
					continue add;
			}
		}
	});
var _justinmimbs$elm_date_extra$Date_Extra$ceiling = F2(
	function (interval, date) {
		var floored = A2(_justinmimbs$elm_date_extra$Date_Extra$floor, interval, date);
		return _elm_lang$core$Native_Utils.eq(
			_elm_lang$core$Date$toTime(date),
			_elm_lang$core$Date$toTime(floored)) ? date : A3(_justinmimbs$elm_date_extra$Date_Extra$add, interval, 1, floored);
	});
var _justinmimbs$elm_date_extra$Date_Extra$rangeHelp = F5(
	function (interval, step, end, revList, date) {
		rangeHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(
				_elm_lang$core$Date$toTime(date),
				_elm_lang$core$Date$toTime(end)) < 0) {
				var _v52 = interval,
					_v53 = step,
					_v54 = end,
					_v55 = {ctor: '::', _0: date, _1: revList},
					_v56 = A3(_justinmimbs$elm_date_extra$Date_Extra$add, interval, step, date);
				interval = _v52;
				step = _v53;
				end = _v54;
				revList = _v55;
				date = _v56;
				continue rangeHelp;
			} else {
				return _elm_lang$core$List$reverse(revList);
			}
		}
	});
var _justinmimbs$elm_date_extra$Date_Extra$range = F4(
	function (interval, step, start, end) {
		var first = A2(_justinmimbs$elm_date_extra$Date_Extra$ceiling, interval, start);
		return (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$Date$toTime(first),
			_elm_lang$core$Date$toTime(end)) < 0) ? A5(
			_justinmimbs$elm_date_extra$Date_Extra$rangeHelp,
			interval,
			A2(_elm_lang$core$Basics$max, 1, step),
			end,
			{ctor: '[]'},
			first) : {ctor: '[]'};
	});
var _justinmimbs$elm_date_extra$Date_Extra$diff = F3(
	function (interval, date1, date2) {
		var _p57 = interval;
		switch (_p57.ctor) {
			case 'Millisecond':
				return _elm_lang$core$Basics$floor(
					_elm_lang$core$Date$toTime(date2) - _elm_lang$core$Date$toTime(date1));
			case 'Second':
				return (A3(_justinmimbs$elm_date_extra$Date_Extra$diff, _justinmimbs$elm_date_extra$Date_Extra$Millisecond, date1, date2) / _justinmimbs$elm_date_extra$Date_Facts$msPerSecond) | 0;
			case 'Minute':
				return (A3(_justinmimbs$elm_date_extra$Date_Extra$diff, _justinmimbs$elm_date_extra$Date_Extra$Millisecond, date1, date2) / _justinmimbs$elm_date_extra$Date_Facts$msPerMinute) | 0;
			case 'Hour':
				return (A3(_justinmimbs$elm_date_extra$Date_Extra$diff, _justinmimbs$elm_date_extra$Date_Extra$Millisecond, date1, date2) / _justinmimbs$elm_date_extra$Date_Facts$msPerHour) | 0;
			case 'Day':
				var rdm2 = _elm_lang$core$Basics$toFloat(
					_justinmimbs$elm_date_extra$Date_Extra$toRataDie(date2)) + _justinmimbs$elm_date_extra$Date_Extra$fractionalDay(date2);
				var rdm1 = _elm_lang$core$Basics$toFloat(
					_justinmimbs$elm_date_extra$Date_Extra$toRataDie(date1)) + _justinmimbs$elm_date_extra$Date_Extra$fractionalDay(date1);
				return _elm_lang$core$Basics$truncate(rdm2 - rdm1);
			case 'Month':
				return _elm_lang$core$Basics$truncate(
					_justinmimbs$elm_date_extra$Date_Extra$toMonths(date2) - _justinmimbs$elm_date_extra$Date_Extra$toMonths(date1));
			case 'Year':
				return (A3(_justinmimbs$elm_date_extra$Date_Extra$diff, _justinmimbs$elm_date_extra$Date_Extra$Month, date1, date2) / 12) | 0;
			case 'Quarter':
				return (A3(_justinmimbs$elm_date_extra$Date_Extra$diff, _justinmimbs$elm_date_extra$Date_Extra$Month, date1, date2) / 3) | 0;
			case 'Week':
				return (A3(_justinmimbs$elm_date_extra$Date_Extra$diff, _justinmimbs$elm_date_extra$Date_Extra$Day, date1, date2) / 7) | 0;
			default:
				var _p58 = _p57;
				return (A3(
					_justinmimbs$elm_date_extra$Date_Extra$diff,
					_justinmimbs$elm_date_extra$Date_Extra$Day,
					A2(_justinmimbs$elm_date_extra$Date_Extra$floor, _p58, date1),
					A2(_justinmimbs$elm_date_extra$Date_Extra$floor, _p58, date2)) / 7) | 0;
		}
	});
var _justinmimbs$elm_date_extra$Date_Extra$Quarter = {ctor: 'Quarter'};
var _justinmimbs$elm_date_extra$Date_Extra$Year = {ctor: 'Year'};
var _justinmimbs$elm_date_extra$Date_Extra$equalBy = F3(
	function (interval, date1, date2) {
		equalBy:
		while (true) {
			var _p59 = interval;
			switch (_p59.ctor) {
				case 'Millisecond':
					return _elm_lang$core$Native_Utils.eq(
						_elm_lang$core$Date$toTime(date1),
						_elm_lang$core$Date$toTime(date2));
				case 'Second':
					return _elm_lang$core$Native_Utils.eq(
						_elm_lang$core$Date$second(date1),
						_elm_lang$core$Date$second(date2)) && A3(_justinmimbs$elm_date_extra$Date_Extra$equalBy, _justinmimbs$elm_date_extra$Date_Extra$Minute, date1, date2);
				case 'Minute':
					return _elm_lang$core$Native_Utils.eq(
						_elm_lang$core$Date$minute(date1),
						_elm_lang$core$Date$minute(date2)) && A3(_justinmimbs$elm_date_extra$Date_Extra$equalBy, _justinmimbs$elm_date_extra$Date_Extra$Hour, date1, date2);
				case 'Hour':
					return _elm_lang$core$Native_Utils.eq(
						_elm_lang$core$Date$hour(date1),
						_elm_lang$core$Date$hour(date2)) && A3(_justinmimbs$elm_date_extra$Date_Extra$equalBy, _justinmimbs$elm_date_extra$Date_Extra$Day, date1, date2);
				case 'Day':
					return _elm_lang$core$Native_Utils.eq(
						_elm_lang$core$Date$day(date1),
						_elm_lang$core$Date$day(date2)) && A3(_justinmimbs$elm_date_extra$Date_Extra$equalBy, _justinmimbs$elm_date_extra$Date_Extra$Month, date1, date2);
				case 'Month':
					return _elm_lang$core$Native_Utils.eq(
						_elm_lang$core$Date$month(date1),
						_elm_lang$core$Date$month(date2)) && A3(_justinmimbs$elm_date_extra$Date_Extra$equalBy, _justinmimbs$elm_date_extra$Date_Extra$Year, date1, date2);
				case 'Year':
					return _elm_lang$core$Native_Utils.eq(
						_elm_lang$core$Date$year(date1),
						_elm_lang$core$Date$year(date2));
				case 'Quarter':
					return _elm_lang$core$Native_Utils.eq(
						_justinmimbs$elm_date_extra$Date_Extra$quarter(date1),
						_justinmimbs$elm_date_extra$Date_Extra$quarter(date2)) && A3(_justinmimbs$elm_date_extra$Date_Extra$equalBy, _justinmimbs$elm_date_extra$Date_Extra$Year, date1, date2);
				case 'Week':
					return _elm_lang$core$Native_Utils.eq(
						_justinmimbs$elm_date_extra$Date_Extra$weekNumber(date1),
						_justinmimbs$elm_date_extra$Date_Extra$weekNumber(date2)) && _elm_lang$core$Native_Utils.eq(
						_justinmimbs$elm_date_extra$Date_Extra$weekYear(date1),
						_justinmimbs$elm_date_extra$Date_Extra$weekYear(date2));
				default:
					var _p60 = _p59;
					var _v59 = _justinmimbs$elm_date_extra$Date_Extra$Day,
						_v60 = A2(_justinmimbs$elm_date_extra$Date_Extra$floor, _p60, date1),
						_v61 = A2(_justinmimbs$elm_date_extra$Date_Extra$floor, _p60, date2);
					interval = _v59;
					date1 = _v60;
					date2 = _v61;
					continue equalBy;
			}
		}
	});

var _elm_community$maybe_extra$Maybe_Extra$foldrValues = F2(
	function (item, list) {
		var _p0 = item;
		if (_p0.ctor === 'Nothing') {
			return list;
		} else {
			return {ctor: '::', _0: _p0._0, _1: list};
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$values = A2(
	_elm_lang$core$List$foldr,
	_elm_community$maybe_extra$Maybe_Extra$foldrValues,
	{ctor: '[]'});
var _elm_community$maybe_extra$Maybe_Extra$filter = F2(
	function (f, m) {
		var _p1 = A2(_elm_lang$core$Maybe$map, f, m);
		if ((_p1.ctor === 'Just') && (_p1._0 === true)) {
			return m;
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$traverseArray = function (f) {
	var step = F2(
		function (e, acc) {
			var _p2 = f(e);
			if (_p2.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				return A2(
					_elm_lang$core$Maybe$map,
					_elm_lang$core$Array$push(_p2._0),
					acc);
			}
		});
	return A2(
		_elm_lang$core$Array$foldl,
		step,
		_elm_lang$core$Maybe$Just(_elm_lang$core$Array$empty));
};
var _elm_community$maybe_extra$Maybe_Extra$combineArray = _elm_community$maybe_extra$Maybe_Extra$traverseArray(_elm_lang$core$Basics$identity);
var _elm_community$maybe_extra$Maybe_Extra$traverse = function (f) {
	var step = F2(
		function (e, acc) {
			var _p3 = f(e);
			if (_p3.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				return A2(
					_elm_lang$core$Maybe$map,
					F2(
						function (x, y) {
							return {ctor: '::', _0: x, _1: y};
						})(_p3._0),
					acc);
			}
		});
	return A2(
		_elm_lang$core$List$foldr,
		step,
		_elm_lang$core$Maybe$Just(
			{ctor: '[]'}));
};
var _elm_community$maybe_extra$Maybe_Extra$combine = _elm_community$maybe_extra$Maybe_Extra$traverse(_elm_lang$core$Basics$identity);
var _elm_community$maybe_extra$Maybe_Extra$toArray = function (m) {
	var _p4 = m;
	if (_p4.ctor === 'Nothing') {
		return _elm_lang$core$Array$empty;
	} else {
		return A2(_elm_lang$core$Array$repeat, 1, _p4._0);
	}
};
var _elm_community$maybe_extra$Maybe_Extra$toList = function (m) {
	var _p5 = m;
	if (_p5.ctor === 'Nothing') {
		return {ctor: '[]'};
	} else {
		return {
			ctor: '::',
			_0: _p5._0,
			_1: {ctor: '[]'}
		};
	}
};
var _elm_community$maybe_extra$Maybe_Extra$orElse = F2(
	function (ma, mb) {
		var _p6 = mb;
		if (_p6.ctor === 'Nothing') {
			return ma;
		} else {
			return mb;
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$orElseLazy = F2(
	function (fma, mb) {
		var _p7 = mb;
		if (_p7.ctor === 'Nothing') {
			return fma(
				{ctor: '_Tuple0'});
		} else {
			return mb;
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$orLazy = F2(
	function (ma, fmb) {
		var _p8 = ma;
		if (_p8.ctor === 'Nothing') {
			return fmb(
				{ctor: '_Tuple0'});
		} else {
			return ma;
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$or = F2(
	function (ma, mb) {
		var _p9 = ma;
		if (_p9.ctor === 'Nothing') {
			return mb;
		} else {
			return ma;
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$prev = _elm_lang$core$Maybe$map2(_elm_lang$core$Basics$always);
var _elm_community$maybe_extra$Maybe_Extra$next = _elm_lang$core$Maybe$map2(
	_elm_lang$core$Basics$flip(_elm_lang$core$Basics$always));
var _elm_community$maybe_extra$Maybe_Extra$andMap = _elm_lang$core$Maybe$map2(
	F2(
		function (x, y) {
			return y(x);
		}));
var _elm_community$maybe_extra$Maybe_Extra$unpack = F3(
	function (d, f, m) {
		var _p10 = m;
		if (_p10.ctor === 'Nothing') {
			return d(
				{ctor: '_Tuple0'});
		} else {
			return f(_p10._0);
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$unwrap = F3(
	function (d, f, m) {
		var _p11 = m;
		if (_p11.ctor === 'Nothing') {
			return d;
		} else {
			return f(_p11._0);
		}
	});
var _elm_community$maybe_extra$Maybe_Extra$isJust = function (m) {
	var _p12 = m;
	if (_p12.ctor === 'Nothing') {
		return false;
	} else {
		return true;
	}
};
var _elm_community$maybe_extra$Maybe_Extra$isNothing = function (m) {
	var _p13 = m;
	if (_p13.ctor === 'Nothing') {
		return true;
	} else {
		return false;
	}
};
var _elm_community$maybe_extra$Maybe_Extra$join = function (mx) {
	var _p14 = mx;
	if (_p14.ctor === 'Just') {
		return _p14._0;
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_community$maybe_extra$Maybe_Extra_ops = _elm_community$maybe_extra$Maybe_Extra_ops || {};
_elm_community$maybe_extra$Maybe_Extra_ops['?'] = F2(
	function (mx, x) {
		return A2(_elm_lang$core$Maybe$withDefault, x, mx);
	});

var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode = _elm_lang$core$Json_Decode$succeed;
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$resolve = _elm_lang$core$Json_Decode$andThen(_elm_lang$core$Basics$identity);
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom = F2(
	function (decoder, wrapped) {
		return A3(
			_elm_lang$core$Json_Decode$map2,
			F2(
				function (x, y) {
					return x(y);
				}),
			wrapped,
			decoder);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$hardcoded = function (_p0) {
	return _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom(
		_elm_lang$core$Json_Decode$succeed(_p0));
};
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalDecoder = F3(
	function (pathDecoder, valDecoder, fallback) {
		var nullOr = function (decoder) {
			return _elm_lang$core$Json_Decode$oneOf(
				{
					ctor: '::',
					_0: decoder,
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Json_Decode$null(fallback),
						_1: {ctor: '[]'}
					}
				});
		};
		var handleResult = function (input) {
			var _p1 = A2(_elm_lang$core$Json_Decode$decodeValue, pathDecoder, input);
			if (_p1.ctor === 'Ok') {
				var _p2 = A2(
					_elm_lang$core$Json_Decode$decodeValue,
					nullOr(valDecoder),
					_p1._0);
				if (_p2.ctor === 'Ok') {
					return _elm_lang$core$Json_Decode$succeed(_p2._0);
				} else {
					return _elm_lang$core$Json_Decode$fail(_p2._0);
				}
			} else {
				var _p3 = A2(
					_elm_lang$core$Json_Decode$decodeValue,
					_elm_lang$core$Json_Decode$keyValuePairs(_elm_lang$core$Json_Decode$value),
					input);
				if (_p3.ctor === 'Ok') {
					return _elm_lang$core$Json_Decode$succeed(fallback);
				} else {
					return _elm_lang$core$Json_Decode$fail(_p3._0);
				}
			}
		};
		return A2(_elm_lang$core$Json_Decode$andThen, handleResult, _elm_lang$core$Json_Decode$value);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalAt = F4(
	function (path, valDecoder, fallback, decoder) {
		return A2(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalDecoder,
				A2(_elm_lang$core$Json_Decode$at, path, _elm_lang$core$Json_Decode$value),
				valDecoder,
				fallback),
			decoder);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional = F4(
	function (key, valDecoder, fallback, decoder) {
		return A2(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalDecoder,
				A2(_elm_lang$core$Json_Decode$field, key, _elm_lang$core$Json_Decode$value),
				valDecoder,
				fallback),
			decoder);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$requiredAt = F3(
	function (path, valDecoder, decoder) {
		return A2(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
			A2(_elm_lang$core$Json_Decode$at, path, valDecoder),
			decoder);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required = F3(
	function (key, valDecoder, decoder) {
		return A2(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
			A2(_elm_lang$core$Json_Decode$field, key, valDecoder),
			decoder);
	});

var _elm_lang$virtual_dom$VirtualDom_Debug$wrap;
var _elm_lang$virtual_dom$VirtualDom_Debug$wrapWithFlags;

var _elm_lang$virtual_dom$Native_VirtualDom = function() {

var STYLE_KEY = 'STYLE';
var EVENT_KEY = 'EVENT';
var ATTR_KEY = 'ATTR';
var ATTR_NS_KEY = 'ATTR_NS';

var localDoc = typeof document !== 'undefined' ? document : {};


////////////  VIRTUAL DOM NODES  ////////////


function text(string)
{
	return {
		type: 'text',
		text: string
	};
}


function node(tag)
{
	return F2(function(factList, kidList) {
		return nodeHelp(tag, factList, kidList);
	});
}


function nodeHelp(tag, factList, kidList)
{
	var organized = organizeFacts(factList);
	var namespace = organized.namespace;
	var facts = organized.facts;

	var children = [];
	var descendantsCount = 0;
	while (kidList.ctor !== '[]')
	{
		var kid = kidList._0;
		descendantsCount += (kid.descendantsCount || 0);
		children.push(kid);
		kidList = kidList._1;
	}
	descendantsCount += children.length;

	return {
		type: 'node',
		tag: tag,
		facts: facts,
		children: children,
		namespace: namespace,
		descendantsCount: descendantsCount
	};
}


function keyedNode(tag, factList, kidList)
{
	var organized = organizeFacts(factList);
	var namespace = organized.namespace;
	var facts = organized.facts;

	var children = [];
	var descendantsCount = 0;
	while (kidList.ctor !== '[]')
	{
		var kid = kidList._0;
		descendantsCount += (kid._1.descendantsCount || 0);
		children.push(kid);
		kidList = kidList._1;
	}
	descendantsCount += children.length;

	return {
		type: 'keyed-node',
		tag: tag,
		facts: facts,
		children: children,
		namespace: namespace,
		descendantsCount: descendantsCount
	};
}


function custom(factList, model, impl)
{
	var facts = organizeFacts(factList).facts;

	return {
		type: 'custom',
		facts: facts,
		model: model,
		impl: impl
	};
}


function map(tagger, node)
{
	return {
		type: 'tagger',
		tagger: tagger,
		node: node,
		descendantsCount: 1 + (node.descendantsCount || 0)
	};
}


function thunk(func, args, thunk)
{
	return {
		type: 'thunk',
		func: func,
		args: args,
		thunk: thunk,
		node: undefined
	};
}

function lazy(fn, a)
{
	return thunk(fn, [a], function() {
		return fn(a);
	});
}

function lazy2(fn, a, b)
{
	return thunk(fn, [a,b], function() {
		return A2(fn, a, b);
	});
}

function lazy3(fn, a, b, c)
{
	return thunk(fn, [a,b,c], function() {
		return A3(fn, a, b, c);
	});
}



// FACTS


function organizeFacts(factList)
{
	var namespace, facts = {};

	while (factList.ctor !== '[]')
	{
		var entry = factList._0;
		var key = entry.key;

		if (key === ATTR_KEY || key === ATTR_NS_KEY || key === EVENT_KEY)
		{
			var subFacts = facts[key] || {};
			subFacts[entry.realKey] = entry.value;
			facts[key] = subFacts;
		}
		else if (key === STYLE_KEY)
		{
			var styles = facts[key] || {};
			var styleList = entry.value;
			while (styleList.ctor !== '[]')
			{
				var style = styleList._0;
				styles[style._0] = style._1;
				styleList = styleList._1;
			}
			facts[key] = styles;
		}
		else if (key === 'namespace')
		{
			namespace = entry.value;
		}
		else if (key === 'className')
		{
			var classes = facts[key];
			facts[key] = typeof classes === 'undefined'
				? entry.value
				: classes + ' ' + entry.value;
		}
 		else
		{
			facts[key] = entry.value;
		}
		factList = factList._1;
	}

	return {
		facts: facts,
		namespace: namespace
	};
}



////////////  PROPERTIES AND ATTRIBUTES  ////////////


function style(value)
{
	return {
		key: STYLE_KEY,
		value: value
	};
}


function property(key, value)
{
	return {
		key: key,
		value: value
	};
}


function attribute(key, value)
{
	return {
		key: ATTR_KEY,
		realKey: key,
		value: value
	};
}


function attributeNS(namespace, key, value)
{
	return {
		key: ATTR_NS_KEY,
		realKey: key,
		value: {
			value: value,
			namespace: namespace
		}
	};
}


function on(name, options, decoder)
{
	return {
		key: EVENT_KEY,
		realKey: name,
		value: {
			options: options,
			decoder: decoder
		}
	};
}


function equalEvents(a, b)
{
	if (a.options !== b.options)
	{
		if (a.options.stopPropagation !== b.options.stopPropagation || a.options.preventDefault !== b.options.preventDefault)
		{
			return false;
		}
	}
	return _elm_lang$core$Native_Json.equality(a.decoder, b.decoder);
}


function mapProperty(func, property)
{
	if (property.key !== EVENT_KEY)
	{
		return property;
	}
	return on(
		property.realKey,
		property.value.options,
		A2(_elm_lang$core$Json_Decode$map, func, property.value.decoder)
	);
}


////////////  RENDER  ////////////


function render(vNode, eventNode)
{
	switch (vNode.type)
	{
		case 'thunk':
			if (!vNode.node)
			{
				vNode.node = vNode.thunk();
			}
			return render(vNode.node, eventNode);

		case 'tagger':
			var subNode = vNode.node;
			var tagger = vNode.tagger;

			while (subNode.type === 'tagger')
			{
				typeof tagger !== 'object'
					? tagger = [tagger, subNode.tagger]
					: tagger.push(subNode.tagger);

				subNode = subNode.node;
			}

			var subEventRoot = { tagger: tagger, parent: eventNode };
			var domNode = render(subNode, subEventRoot);
			domNode.elm_event_node_ref = subEventRoot;
			return domNode;

		case 'text':
			return localDoc.createTextNode(vNode.text);

		case 'node':
			var domNode = vNode.namespace
				? localDoc.createElementNS(vNode.namespace, vNode.tag)
				: localDoc.createElement(vNode.tag);

			applyFacts(domNode, eventNode, vNode.facts);

			var children = vNode.children;

			for (var i = 0; i < children.length; i++)
			{
				domNode.appendChild(render(children[i], eventNode));
			}

			return domNode;

		case 'keyed-node':
			var domNode = vNode.namespace
				? localDoc.createElementNS(vNode.namespace, vNode.tag)
				: localDoc.createElement(vNode.tag);

			applyFacts(domNode, eventNode, vNode.facts);

			var children = vNode.children;

			for (var i = 0; i < children.length; i++)
			{
				domNode.appendChild(render(children[i]._1, eventNode));
			}

			return domNode;

		case 'custom':
			var domNode = vNode.impl.render(vNode.model);
			applyFacts(domNode, eventNode, vNode.facts);
			return domNode;
	}
}



////////////  APPLY FACTS  ////////////


function applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		switch (key)
		{
			case STYLE_KEY:
				applyStyles(domNode, value);
				break;

			case EVENT_KEY:
				applyEvents(domNode, eventNode, value);
				break;

			case ATTR_KEY:
				applyAttrs(domNode, value);
				break;

			case ATTR_NS_KEY:
				applyAttrsNS(domNode, value);
				break;

			case 'value':
				if (domNode[key] !== value)
				{
					domNode[key] = value;
				}
				break;

			default:
				domNode[key] = value;
				break;
		}
	}
}

function applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}

function applyEvents(domNode, eventNode, events)
{
	var allHandlers = domNode.elm_handlers || {};

	for (var key in events)
	{
		var handler = allHandlers[key];
		var value = events[key];

		if (typeof value === 'undefined')
		{
			domNode.removeEventListener(key, handler);
			allHandlers[key] = undefined;
		}
		else if (typeof handler === 'undefined')
		{
			var handler = makeEventHandler(eventNode, value);
			domNode.addEventListener(key, handler);
			allHandlers[key] = handler;
		}
		else
		{
			handler.info = value;
		}
	}

	domNode.elm_handlers = allHandlers;
}

function makeEventHandler(eventNode, info)
{
	function eventHandler(event)
	{
		var info = eventHandler.info;

		var value = A2(_elm_lang$core$Native_Json.run, info.decoder, event);

		if (value.ctor === 'Ok')
		{
			var options = info.options;
			if (options.stopPropagation)
			{
				event.stopPropagation();
			}
			if (options.preventDefault)
			{
				event.preventDefault();
			}

			var message = value._0;

			var currentEventNode = eventNode;
			while (currentEventNode)
			{
				var tagger = currentEventNode.tagger;
				if (typeof tagger === 'function')
				{
					message = tagger(message);
				}
				else
				{
					for (var i = tagger.length; i--; )
					{
						message = tagger[i](message);
					}
				}
				currentEventNode = currentEventNode.parent;
			}
		}
	};

	eventHandler.info = info;

	return eventHandler;
}

function applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		if (typeof value === 'undefined')
		{
			domNode.removeAttribute(key);
		}
		else
		{
			domNode.setAttribute(key, value);
		}
	}
}

function applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.namespace;
		var value = pair.value;

		if (typeof value === 'undefined')
		{
			domNode.removeAttributeNS(namespace, key);
		}
		else
		{
			domNode.setAttributeNS(namespace, key, value);
		}
	}
}



////////////  DIFF  ////////////


function diff(a, b)
{
	var patches = [];
	diffHelp(a, b, patches, 0);
	return patches;
}


function makePatch(type, index, data)
{
	return {
		index: index,
		type: type,
		data: data,
		domNode: undefined,
		eventNode: undefined
	};
}


function diffHelp(a, b, patches, index)
{
	if (a === b)
	{
		return;
	}

	var aType = a.type;
	var bType = b.type;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (aType !== bType)
	{
		patches.push(makePatch('p-redraw', index, b));
		return;
	}

	// Now we know that both nodes are the same type.
	switch (bType)
	{
		case 'thunk':
			var aArgs = a.args;
			var bArgs = b.args;
			var i = aArgs.length;
			var same = a.func === b.func && i === bArgs.length;
			while (same && i--)
			{
				same = aArgs[i] === bArgs[i];
			}
			if (same)
			{
				b.node = a.node;
				return;
			}
			b.node = b.thunk();
			var subPatches = [];
			diffHelp(a.node, b.node, subPatches, 0);
			if (subPatches.length > 0)
			{
				patches.push(makePatch('p-thunk', index, subPatches));
			}
			return;

		case 'tagger':
			// gather nested taggers
			var aTaggers = a.tagger;
			var bTaggers = b.tagger;
			var nesting = false;

			var aSubNode = a.node;
			while (aSubNode.type === 'tagger')
			{
				nesting = true;

				typeof aTaggers !== 'object'
					? aTaggers = [aTaggers, aSubNode.tagger]
					: aTaggers.push(aSubNode.tagger);

				aSubNode = aSubNode.node;
			}

			var bSubNode = b.node;
			while (bSubNode.type === 'tagger')
			{
				nesting = true;

				typeof bTaggers !== 'object'
					? bTaggers = [bTaggers, bSubNode.tagger]
					: bTaggers.push(bSubNode.tagger);

				bSubNode = bSubNode.node;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && aTaggers.length !== bTaggers.length)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !pairwiseRefEqual(aTaggers, bTaggers) : aTaggers !== bTaggers)
			{
				patches.push(makePatch('p-tagger', index, bTaggers));
			}

			// diff everything below the taggers
			diffHelp(aSubNode, bSubNode, patches, index + 1);
			return;

		case 'text':
			if (a.text !== b.text)
			{
				patches.push(makePatch('p-text', index, b.text));
				return;
			}

			return;

		case 'node':
			// Bail if obvious indicators have changed. Implies more serious
			// structural changes such that it's not worth it to diff.
			if (a.tag !== b.tag || a.namespace !== b.namespace)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);

			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			diffChildren(a, b, patches, index);
			return;

		case 'keyed-node':
			// Bail if obvious indicators have changed. Implies more serious
			// structural changes such that it's not worth it to diff.
			if (a.tag !== b.tag || a.namespace !== b.namespace)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);

			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			diffKeyedChildren(a, b, patches, index);
			return;

		case 'custom':
			if (a.impl !== b.impl)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);
			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			var patch = b.impl.diff(a,b);
			if (patch)
			{
				patches.push(makePatch('p-custom', index, patch));
				return;
			}

			return;
	}
}


// assumes the incoming arrays are the same length
function pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function diffFacts(a, b, category)
{
	var diff;

	// look for changes and removals
	for (var aKey in a)
	{
		if (aKey === STYLE_KEY || aKey === EVENT_KEY || aKey === ATTR_KEY || aKey === ATTR_NS_KEY)
		{
			var subDiff = diffFacts(a[aKey], b[aKey] || {}, aKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[aKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(aKey in b))
		{
			diff = diff || {};
			diff[aKey] =
				(typeof category === 'undefined')
					? (typeof a[aKey] === 'string' ? '' : null)
					:
				(category === STYLE_KEY)
					? ''
					:
				(category === EVENT_KEY || category === ATTR_KEY)
					? undefined
					:
				{ namespace: a[aKey].namespace, value: undefined };

			continue;
		}

		var aValue = a[aKey];
		var bValue = b[aKey];

		// reference equal, so don't worry about it
		if (aValue === bValue && aKey !== 'value'
			|| category === EVENT_KEY && equalEvents(aValue, bValue))
		{
			continue;
		}

		diff = diff || {};
		diff[aKey] = bValue;
	}

	// add new stuff
	for (var bKey in b)
	{
		if (!(bKey in a))
		{
			diff = diff || {};
			diff[bKey] = b[bKey];
		}
	}

	return diff;
}


function diffChildren(aParent, bParent, patches, rootIndex)
{
	var aChildren = aParent.children;
	var bChildren = bParent.children;

	var aLen = aChildren.length;
	var bLen = bChildren.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (aLen > bLen)
	{
		patches.push(makePatch('p-remove-last', rootIndex, aLen - bLen));
	}
	else if (aLen < bLen)
	{
		patches.push(makePatch('p-append', rootIndex, bChildren.slice(aLen)));
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	var index = rootIndex;
	var minLen = aLen < bLen ? aLen : bLen;
	for (var i = 0; i < minLen; i++)
	{
		index++;
		var aChild = aChildren[i];
		diffHelp(aChild, bChildren[i], patches, index);
		index += aChild.descendantsCount || 0;
	}
}



////////////  KEYED DIFF  ////////////


function diffKeyedChildren(aParent, bParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var aChildren = aParent.children;
	var bChildren = bParent.children;
	var aLen = aChildren.length;
	var bLen = bChildren.length;
	var aIndex = 0;
	var bIndex = 0;

	var index = rootIndex;

	while (aIndex < aLen && bIndex < bLen)
	{
		var a = aChildren[aIndex];
		var b = bChildren[bIndex];

		var aKey = a._0;
		var bKey = b._0;
		var aNode = a._1;
		var bNode = b._1;

		// check if keys match

		if (aKey === bKey)
		{
			index++;
			diffHelp(aNode, bNode, localPatches, index);
			index += aNode.descendantsCount || 0;

			aIndex++;
			bIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var aLookAhead = aIndex + 1 < aLen;
		var bLookAhead = bIndex + 1 < bLen;

		if (aLookAhead)
		{
			var aNext = aChildren[aIndex + 1];
			var aNextKey = aNext._0;
			var aNextNode = aNext._1;
			var oldMatch = bKey === aNextKey;
		}

		if (bLookAhead)
		{
			var bNext = bChildren[bIndex + 1];
			var bNextKey = bNext._0;
			var bNextNode = bNext._1;
			var newMatch = aKey === bNextKey;
		}


		// swap a and b
		if (aLookAhead && bLookAhead && newMatch && oldMatch)
		{
			index++;
			diffHelp(aNode, bNextNode, localPatches, index);
			insertNode(changes, localPatches, aKey, bNode, bIndex, inserts);
			index += aNode.descendantsCount || 0;

			index++;
			removeNode(changes, localPatches, aKey, aNextNode, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 2;
			continue;
		}

		// insert b
		if (bLookAhead && newMatch)
		{
			index++;
			insertNode(changes, localPatches, bKey, bNode, bIndex, inserts);
			diffHelp(aNode, bNextNode, localPatches, index);
			index += aNode.descendantsCount || 0;

			aIndex += 1;
			bIndex += 2;
			continue;
		}

		// remove a
		if (aLookAhead && oldMatch)
		{
			index++;
			removeNode(changes, localPatches, aKey, aNode, index);
			index += aNode.descendantsCount || 0;

			index++;
			diffHelp(aNextNode, bNode, localPatches, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 1;
			continue;
		}

		// remove a, insert b
		if (aLookAhead && bLookAhead && aNextKey === bNextKey)
		{
			index++;
			removeNode(changes, localPatches, aKey, aNode, index);
			insertNode(changes, localPatches, bKey, bNode, bIndex, inserts);
			index += aNode.descendantsCount || 0;

			index++;
			diffHelp(aNextNode, bNextNode, localPatches, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (aIndex < aLen)
	{
		index++;
		var a = aChildren[aIndex];
		var aNode = a._1;
		removeNode(changes, localPatches, a._0, aNode, index);
		index += aNode.descendantsCount || 0;
		aIndex++;
	}

	var endInserts;
	while (bIndex < bLen)
	{
		endInserts = endInserts || [];
		var b = bChildren[bIndex];
		insertNode(changes, localPatches, b._0, b._1, undefined, endInserts);
		bIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || typeof endInserts !== 'undefined')
	{
		patches.push(makePatch('p-reorder', rootIndex, {
			patches: localPatches,
			inserts: inserts,
			endInserts: endInserts
		}));
	}
}



////////////  CHANGES FROM KEYED DIFF  ////////////


var POSTFIX = '_elmW6BL';


function insertNode(changes, localPatches, key, vnode, bIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (typeof entry === 'undefined')
	{
		entry = {
			tag: 'insert',
			vnode: vnode,
			index: bIndex,
			data: undefined
		};

		inserts.push({ index: bIndex, entry: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.tag === 'remove')
	{
		inserts.push({ index: bIndex, entry: entry });

		entry.tag = 'move';
		var subPatches = [];
		diffHelp(entry.vnode, vnode, subPatches, entry.index);
		entry.index = bIndex;
		entry.data.data = {
			patches: subPatches,
			entry: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	insertNode(changes, localPatches, key + POSTFIX, vnode, bIndex, inserts);
}


function removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (typeof entry === 'undefined')
	{
		var patch = makePatch('p-remove', index, undefined);
		localPatches.push(patch);

		changes[key] = {
			tag: 'remove',
			vnode: vnode,
			index: index,
			data: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.tag === 'insert')
	{
		entry.tag = 'move';
		var subPatches = [];
		diffHelp(vnode, entry.vnode, subPatches, index);

		var patch = makePatch('p-remove', index, {
			patches: subPatches,
			entry: entry
		});
		localPatches.push(patch);

		return;
	}

	// this key has already been removed or moved, a duplicate!
	removeNode(changes, localPatches, key + POSTFIX, vnode, index);
}



////////////  ADD DOM NODES  ////////////
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function addDomNodes(domNode, vNode, patches, eventNode)
{
	addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.descendantsCount, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.index;

	while (index === low)
	{
		var patchType = patch.type;

		if (patchType === 'p-thunk')
		{
			addDomNodes(domNode, vNode.node, patch.data, eventNode);
		}
		else if (patchType === 'p-reorder')
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;

			var subPatches = patch.data.patches;
			if (subPatches.length > 0)
			{
				addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 'p-remove')
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;

			var data = patch.data;
			if (typeof data !== 'undefined')
			{
				data.entry.data = domNode;
				var subPatches = data.patches;
				if (subPatches.length > 0)
				{
					addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.index) > high)
		{
			return i;
		}
	}

	switch (vNode.type)
	{
		case 'tagger':
			var subNode = vNode.node;

			while (subNode.type === "tagger")
			{
				subNode = subNode.node;
			}

			return addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);

		case 'node':
			var vChildren = vNode.children;
			var childNodes = domNode.childNodes;
			for (var j = 0; j < vChildren.length; j++)
			{
				low++;
				var vChild = vChildren[j];
				var nextLow = low + (vChild.descendantsCount || 0);
				if (low <= index && index <= nextLow)
				{
					i = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);
					if (!(patch = patches[i]) || (index = patch.index) > high)
					{
						return i;
					}
				}
				low = nextLow;
			}
			return i;

		case 'keyed-node':
			var vChildren = vNode.children;
			var childNodes = domNode.childNodes;
			for (var j = 0; j < vChildren.length; j++)
			{
				low++;
				var vChild = vChildren[j]._1;
				var nextLow = low + (vChild.descendantsCount || 0);
				if (low <= index && index <= nextLow)
				{
					i = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);
					if (!(patch = patches[i]) || (index = patch.index) > high)
					{
						return i;
					}
				}
				low = nextLow;
			}
			return i;

		case 'text':
		case 'thunk':
			throw new Error('should never traverse `text` or `thunk` nodes like this');
	}
}



////////////  APPLY PATCHES  ////////////


function applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return applyPatchesHelp(rootDomNode, patches);
}

function applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.domNode
		var newNode = applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function applyPatch(domNode, patch)
{
	switch (patch.type)
	{
		case 'p-redraw':
			return applyPatchRedraw(domNode, patch.data, patch.eventNode);

		case 'p-facts':
			applyFacts(domNode, patch.eventNode, patch.data);
			return domNode;

		case 'p-text':
			domNode.replaceData(0, domNode.length, patch.data);
			return domNode;

		case 'p-thunk':
			return applyPatchesHelp(domNode, patch.data);

		case 'p-tagger':
			if (typeof domNode.elm_event_node_ref !== 'undefined')
			{
				domNode.elm_event_node_ref.tagger = patch.data;
			}
			else
			{
				domNode.elm_event_node_ref = { tagger: patch.data, parent: patch.eventNode };
			}
			return domNode;

		case 'p-remove-last':
			var i = patch.data;
			while (i--)
			{
				domNode.removeChild(domNode.lastChild);
			}
			return domNode;

		case 'p-append':
			var newNodes = patch.data;
			for (var i = 0; i < newNodes.length; i++)
			{
				domNode.appendChild(render(newNodes[i], patch.eventNode));
			}
			return domNode;

		case 'p-remove':
			var data = patch.data;
			if (typeof data === 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.entry;
			if (typeof entry.index !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.data = applyPatchesHelp(domNode, data.patches);
			return domNode;

		case 'p-reorder':
			return applyPatchReorder(domNode, patch);

		case 'p-custom':
			var impl = patch.data;
			return impl.applyPatch(domNode, impl.data);

		default:
			throw new Error('Ran into an unknown patch!');
	}
}


function applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = render(vNode, eventNode);

	if (typeof newNode.elm_event_node_ref === 'undefined')
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function applyPatchReorder(domNode, patch)
{
	var data = patch.data;

	// remove end inserts
	var frag = applyPatchReorderEndInsertsHelp(data.endInserts, patch);

	// removals
	domNode = applyPatchesHelp(domNode, data.patches);

	// inserts
	var inserts = data.inserts;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.entry;
		var node = entry.tag === 'move'
			? entry.data
			: render(entry.vnode, patch.eventNode);
		domNode.insertBefore(node, domNode.childNodes[insert.index]);
	}

	// add end inserts
	if (typeof frag !== 'undefined')
	{
		domNode.appendChild(frag);
	}

	return domNode;
}


function applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (typeof endInserts === 'undefined')
	{
		return;
	}

	var frag = localDoc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.entry;
		frag.appendChild(entry.tag === 'move'
			? entry.data
			: render(entry.vnode, patch.eventNode)
		);
	}
	return frag;
}


// PROGRAMS

var program = makeProgram(checkNoFlags);
var programWithFlags = makeProgram(checkYesFlags);

function makeProgram(flagChecker)
{
	return F2(function(debugWrap, impl)
	{
		return function(flagDecoder)
		{
			return function(object, moduleName, debugMetadata)
			{
				var checker = flagChecker(flagDecoder, moduleName);
				if (typeof debugMetadata === 'undefined')
				{
					normalSetup(impl, object, moduleName, checker);
				}
				else
				{
					debugSetup(A2(debugWrap, debugMetadata, impl), object, moduleName, checker);
				}
			};
		};
	});
}

function staticProgram(vNode)
{
	var nothing = _elm_lang$core$Native_Utils.Tuple2(
		_elm_lang$core$Native_Utils.Tuple0,
		_elm_lang$core$Platform_Cmd$none
	);
	return A2(program, _elm_lang$virtual_dom$VirtualDom_Debug$wrap, {
		init: nothing,
		view: function() { return vNode; },
		update: F2(function() { return nothing; }),
		subscriptions: function() { return _elm_lang$core$Platform_Sub$none; }
	})();
}


// FLAG CHECKERS

function checkNoFlags(flagDecoder, moduleName)
{
	return function(init, flags, domNode)
	{
		if (typeof flags === 'undefined')
		{
			return init;
		}

		var errorMessage =
			'The `' + moduleName + '` module does not need flags.\n'
			+ 'Initialize it with no arguments and you should be all set!';

		crash(errorMessage, domNode);
	};
}

function checkYesFlags(flagDecoder, moduleName)
{
	return function(init, flags, domNode)
	{
		if (typeof flagDecoder === 'undefined')
		{
			var errorMessage =
				'Are you trying to sneak a Never value into Elm? Trickster!\n'
				+ 'It looks like ' + moduleName + '.main is defined with `programWithFlags` but has type `Program Never`.\n'
				+ 'Use `program` instead if you do not want flags.'

			crash(errorMessage, domNode);
		}

		var result = A2(_elm_lang$core$Native_Json.run, flagDecoder, flags);
		if (result.ctor === 'Ok')
		{
			return init(result._0);
		}

		var errorMessage =
			'Trying to initialize the `' + moduleName + '` module with an unexpected flag.\n'
			+ 'I tried to convert it to an Elm value, but ran into this problem:\n\n'
			+ result._0;

		crash(errorMessage, domNode);
	};
}

function crash(errorMessage, domNode)
{
	if (domNode)
	{
		domNode.innerHTML =
			'<div style="padding-left:1em;">'
			+ '<h2 style="font-weight:normal;"><b>Oops!</b> Something went wrong when starting your Elm program.</h2>'
			+ '<pre style="padding-left:1em;">' + errorMessage + '</pre>'
			+ '</div>';
	}

	throw new Error(errorMessage);
}


//  NORMAL SETUP

function normalSetup(impl, object, moduleName, flagChecker)
{
	object['embed'] = function embed(node, flags)
	{
		while (node.lastChild)
		{
			node.removeChild(node.lastChild);
		}

		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, node),
			impl.update,
			impl.subscriptions,
			normalRenderer(node, impl.view)
		);
	};

	object['fullscreen'] = function fullscreen(flags)
	{
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, document.body),
			impl.update,
			impl.subscriptions,
			normalRenderer(document.body, impl.view)
		);
	};
}

function normalRenderer(parentNode, view)
{
	return function(tagger, initialModel)
	{
		var eventNode = { tagger: tagger, parent: undefined };
		var initialVirtualNode = view(initialModel);
		var domNode = render(initialVirtualNode, eventNode);
		parentNode.appendChild(domNode);
		return makeStepper(domNode, view, initialVirtualNode, eventNode);
	};
}


// STEPPER

var rAF =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { setTimeout(callback, 1000 / 60); };

function makeStepper(domNode, view, initialVirtualNode, eventNode)
{
	var state = 'NO_REQUEST';
	var currNode = initialVirtualNode;
	var nextModel;

	function updateIfNeeded()
	{
		switch (state)
		{
			case 'NO_REQUEST':
				throw new Error(
					'Unexpected draw callback.\n' +
					'Please report this to <https://github.com/elm-lang/virtual-dom/issues>.'
				);

			case 'PENDING_REQUEST':
				rAF(updateIfNeeded);
				state = 'EXTRA_REQUEST';

				var nextNode = view(nextModel);
				var patches = diff(currNode, nextNode);
				domNode = applyPatches(domNode, currNode, patches, eventNode);
				currNode = nextNode;

				return;

			case 'EXTRA_REQUEST':
				state = 'NO_REQUEST';
				return;
		}
	}

	return function stepper(model)
	{
		if (state === 'NO_REQUEST')
		{
			rAF(updateIfNeeded);
		}
		state = 'PENDING_REQUEST';
		nextModel = model;
	};
}


// DEBUG SETUP

function debugSetup(impl, object, moduleName, flagChecker)
{
	object['fullscreen'] = function fullscreen(flags)
	{
		var popoutRef = { doc: undefined };
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, document.body),
			impl.update(scrollTask(popoutRef)),
			impl.subscriptions,
			debugRenderer(moduleName, document.body, popoutRef, impl.view, impl.viewIn, impl.viewOut)
		);
	};

	object['embed'] = function fullscreen(node, flags)
	{
		var popoutRef = { doc: undefined };
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, node),
			impl.update(scrollTask(popoutRef)),
			impl.subscriptions,
			debugRenderer(moduleName, node, popoutRef, impl.view, impl.viewIn, impl.viewOut)
		);
	};
}

function scrollTask(popoutRef)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var doc = popoutRef.doc;
		if (doc)
		{
			var msgs = doc.getElementsByClassName('debugger-sidebar-messages')[0];
			if (msgs)
			{
				msgs.scrollTop = msgs.scrollHeight;
			}
		}
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}


function debugRenderer(moduleName, parentNode, popoutRef, view, viewIn, viewOut)
{
	return function(tagger, initialModel)
	{
		var appEventNode = { tagger: tagger, parent: undefined };
		var eventNode = { tagger: tagger, parent: undefined };

		// make normal stepper
		var appVirtualNode = view(initialModel);
		var appNode = render(appVirtualNode, appEventNode);
		parentNode.appendChild(appNode);
		var appStepper = makeStepper(appNode, view, appVirtualNode, appEventNode);

		// make overlay stepper
		var overVirtualNode = viewIn(initialModel)._1;
		var overNode = render(overVirtualNode, eventNode);
		parentNode.appendChild(overNode);
		var wrappedViewIn = wrapViewIn(appEventNode, overNode, viewIn);
		var overStepper = makeStepper(overNode, wrappedViewIn, overVirtualNode, eventNode);

		// make debugger stepper
		var debugStepper = makeDebugStepper(initialModel, viewOut, eventNode, parentNode, moduleName, popoutRef);

		return function stepper(model)
		{
			appStepper(model);
			overStepper(model);
			debugStepper(model);
		}
	};
}

function makeDebugStepper(initialModel, view, eventNode, parentNode, moduleName, popoutRef)
{
	var curr;
	var domNode;

	return function stepper(model)
	{
		if (!model.isDebuggerOpen)
		{
			return;
		}

		if (!popoutRef.doc)
		{
			curr = view(model);
			domNode = openDebugWindow(moduleName, popoutRef, curr, eventNode);
			return;
		}

		// switch to document of popout
		localDoc = popoutRef.doc;

		var next = view(model);
		var patches = diff(curr, next);
		domNode = applyPatches(domNode, curr, patches, eventNode);
		curr = next;

		// switch back to normal document
		localDoc = document;
	};
}

function openDebugWindow(moduleName, popoutRef, virtualNode, eventNode)
{
	var w = 900;
	var h = 360;
	var x = screen.width - w;
	var y = screen.height - h;
	var debugWindow = window.open('', '', 'width=' + w + ',height=' + h + ',left=' + x + ',top=' + y);

	// switch to window document
	localDoc = debugWindow.document;

	popoutRef.doc = localDoc;
	localDoc.title = 'Debugger - ' + moduleName;
	localDoc.body.style.margin = '0';
	localDoc.body.style.padding = '0';
	var domNode = render(virtualNode, eventNode);
	localDoc.body.appendChild(domNode);

	localDoc.addEventListener('keydown', function(event) {
		if (event.metaKey && event.which === 82)
		{
			window.location.reload();
		}
		if (event.which === 38)
		{
			eventNode.tagger({ ctor: 'Up' });
			event.preventDefault();
		}
		if (event.which === 40)
		{
			eventNode.tagger({ ctor: 'Down' });
			event.preventDefault();
		}
	});

	function close()
	{
		popoutRef.doc = undefined;
		debugWindow.close();
	}
	window.addEventListener('unload', close);
	debugWindow.addEventListener('unload', function() {
		popoutRef.doc = undefined;
		window.removeEventListener('unload', close);
		eventNode.tagger({ ctor: 'Close' });
	});

	// switch back to the normal document
	localDoc = document;

	return domNode;
}


// BLOCK EVENTS

function wrapViewIn(appEventNode, overlayNode, viewIn)
{
	var ignorer = makeIgnorer(overlayNode);
	var blocking = 'Normal';
	var overflow;

	var normalTagger = appEventNode.tagger;
	var blockTagger = function() {};

	return function(model)
	{
		var tuple = viewIn(model);
		var newBlocking = tuple._0.ctor;
		appEventNode.tagger = newBlocking === 'Normal' ? normalTagger : blockTagger;
		if (blocking !== newBlocking)
		{
			traverse('removeEventListener', ignorer, blocking);
			traverse('addEventListener', ignorer, newBlocking);

			if (blocking === 'Normal')
			{
				overflow = document.body.style.overflow;
				document.body.style.overflow = 'hidden';
			}

			if (newBlocking === 'Normal')
			{
				document.body.style.overflow = overflow;
			}

			blocking = newBlocking;
		}
		return tuple._1;
	}
}

function traverse(verbEventListener, ignorer, blocking)
{
	switch(blocking)
	{
		case 'Normal':
			return;

		case 'Pause':
			return traverseHelp(verbEventListener, ignorer, mostEvents);

		case 'Message':
			return traverseHelp(verbEventListener, ignorer, allEvents);
	}
}

function traverseHelp(verbEventListener, handler, eventNames)
{
	for (var i = 0; i < eventNames.length; i++)
	{
		document.body[verbEventListener](eventNames[i], handler, true);
	}
}

function makeIgnorer(overlayNode)
{
	return function(event)
	{
		if (event.type === 'keydown' && event.metaKey && event.which === 82)
		{
			return;
		}

		var isScroll = event.type === 'scroll' || event.type === 'wheel';

		var node = event.target;
		while (node !== null)
		{
			if (node.className === 'elm-overlay-message-details' && isScroll)
			{
				return;
			}

			if (node === overlayNode && !isScroll)
			{
				return;
			}
			node = node.parentNode;
		}

		event.stopPropagation();
		event.preventDefault();
	}
}

var mostEvents = [
	'click', 'dblclick', 'mousemove',
	'mouseup', 'mousedown', 'mouseenter', 'mouseleave',
	'touchstart', 'touchend', 'touchcancel', 'touchmove',
	'pointerdown', 'pointerup', 'pointerover', 'pointerout',
	'pointerenter', 'pointerleave', 'pointermove', 'pointercancel',
	'dragstart', 'drag', 'dragend', 'dragenter', 'dragover', 'dragleave', 'drop',
	'keyup', 'keydown', 'keypress',
	'input', 'change',
	'focus', 'blur'
];

var allEvents = mostEvents.concat('wheel', 'scroll');


return {
	node: node,
	text: text,
	custom: custom,
	map: F2(map),

	on: F3(on),
	style: style,
	property: F2(property),
	attribute: F2(attribute),
	attributeNS: F3(attributeNS),
	mapProperty: F2(mapProperty),

	lazy: F2(lazy),
	lazy2: F3(lazy2),
	lazy3: F4(lazy3),
	keyedNode: F3(keyedNode),

	program: program,
	programWithFlags: programWithFlags,
	staticProgram: staticProgram
};

}();

var _elm_lang$virtual_dom$VirtualDom$programWithFlags = function (impl) {
	return A2(_elm_lang$virtual_dom$Native_VirtualDom.programWithFlags, _elm_lang$virtual_dom$VirtualDom_Debug$wrapWithFlags, impl);
};
var _elm_lang$virtual_dom$VirtualDom$program = function (impl) {
	return A2(_elm_lang$virtual_dom$Native_VirtualDom.program, _elm_lang$virtual_dom$VirtualDom_Debug$wrap, impl);
};
var _elm_lang$virtual_dom$VirtualDom$keyedNode = _elm_lang$virtual_dom$Native_VirtualDom.keyedNode;
var _elm_lang$virtual_dom$VirtualDom$lazy3 = _elm_lang$virtual_dom$Native_VirtualDom.lazy3;
var _elm_lang$virtual_dom$VirtualDom$lazy2 = _elm_lang$virtual_dom$Native_VirtualDom.lazy2;
var _elm_lang$virtual_dom$VirtualDom$lazy = _elm_lang$virtual_dom$Native_VirtualDom.lazy;
var _elm_lang$virtual_dom$VirtualDom$defaultOptions = {stopPropagation: false, preventDefault: false};
var _elm_lang$virtual_dom$VirtualDom$onWithOptions = _elm_lang$virtual_dom$Native_VirtualDom.on;
var _elm_lang$virtual_dom$VirtualDom$on = F2(
	function (eventName, decoder) {
		return A3(_elm_lang$virtual_dom$VirtualDom$onWithOptions, eventName, _elm_lang$virtual_dom$VirtualDom$defaultOptions, decoder);
	});
var _elm_lang$virtual_dom$VirtualDom$style = _elm_lang$virtual_dom$Native_VirtualDom.style;
var _elm_lang$virtual_dom$VirtualDom$mapProperty = _elm_lang$virtual_dom$Native_VirtualDom.mapProperty;
var _elm_lang$virtual_dom$VirtualDom$attributeNS = _elm_lang$virtual_dom$Native_VirtualDom.attributeNS;
var _elm_lang$virtual_dom$VirtualDom$attribute = _elm_lang$virtual_dom$Native_VirtualDom.attribute;
var _elm_lang$virtual_dom$VirtualDom$property = _elm_lang$virtual_dom$Native_VirtualDom.property;
var _elm_lang$virtual_dom$VirtualDom$map = _elm_lang$virtual_dom$Native_VirtualDom.map;
var _elm_lang$virtual_dom$VirtualDom$text = _elm_lang$virtual_dom$Native_VirtualDom.text;
var _elm_lang$virtual_dom$VirtualDom$node = _elm_lang$virtual_dom$Native_VirtualDom.node;
var _elm_lang$virtual_dom$VirtualDom$Options = F2(
	function (a, b) {
		return {stopPropagation: a, preventDefault: b};
	});
var _elm_lang$virtual_dom$VirtualDom$Node = {ctor: 'Node'};
var _elm_lang$virtual_dom$VirtualDom$Property = {ctor: 'Property'};

var _elm_lang$html$Html$programWithFlags = _elm_lang$virtual_dom$VirtualDom$programWithFlags;
var _elm_lang$html$Html$program = _elm_lang$virtual_dom$VirtualDom$program;
var _elm_lang$html$Html$beginnerProgram = function (_p0) {
	var _p1 = _p0;
	return _elm_lang$html$Html$program(
		{
			init: A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_p1.model,
				{ctor: '[]'}),
			update: F2(
				function (msg, model) {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						A2(_p1.update, msg, model),
						{ctor: '[]'});
				}),
			view: _p1.view,
			subscriptions: function (_p2) {
				return _elm_lang$core$Platform_Sub$none;
			}
		});
};
var _elm_lang$html$Html$map = _elm_lang$virtual_dom$VirtualDom$map;
var _elm_lang$html$Html$text = _elm_lang$virtual_dom$VirtualDom$text;
var _elm_lang$html$Html$node = _elm_lang$virtual_dom$VirtualDom$node;
var _elm_lang$html$Html$body = _elm_lang$html$Html$node('body');
var _elm_lang$html$Html$section = _elm_lang$html$Html$node('section');
var _elm_lang$html$Html$nav = _elm_lang$html$Html$node('nav');
var _elm_lang$html$Html$article = _elm_lang$html$Html$node('article');
var _elm_lang$html$Html$aside = _elm_lang$html$Html$node('aside');
var _elm_lang$html$Html$h1 = _elm_lang$html$Html$node('h1');
var _elm_lang$html$Html$h2 = _elm_lang$html$Html$node('h2');
var _elm_lang$html$Html$h3 = _elm_lang$html$Html$node('h3');
var _elm_lang$html$Html$h4 = _elm_lang$html$Html$node('h4');
var _elm_lang$html$Html$h5 = _elm_lang$html$Html$node('h5');
var _elm_lang$html$Html$h6 = _elm_lang$html$Html$node('h6');
var _elm_lang$html$Html$header = _elm_lang$html$Html$node('header');
var _elm_lang$html$Html$footer = _elm_lang$html$Html$node('footer');
var _elm_lang$html$Html$address = _elm_lang$html$Html$node('address');
var _elm_lang$html$Html$main_ = _elm_lang$html$Html$node('main');
var _elm_lang$html$Html$p = _elm_lang$html$Html$node('p');
var _elm_lang$html$Html$hr = _elm_lang$html$Html$node('hr');
var _elm_lang$html$Html$pre = _elm_lang$html$Html$node('pre');
var _elm_lang$html$Html$blockquote = _elm_lang$html$Html$node('blockquote');
var _elm_lang$html$Html$ol = _elm_lang$html$Html$node('ol');
var _elm_lang$html$Html$ul = _elm_lang$html$Html$node('ul');
var _elm_lang$html$Html$li = _elm_lang$html$Html$node('li');
var _elm_lang$html$Html$dl = _elm_lang$html$Html$node('dl');
var _elm_lang$html$Html$dt = _elm_lang$html$Html$node('dt');
var _elm_lang$html$Html$dd = _elm_lang$html$Html$node('dd');
var _elm_lang$html$Html$figure = _elm_lang$html$Html$node('figure');
var _elm_lang$html$Html$figcaption = _elm_lang$html$Html$node('figcaption');
var _elm_lang$html$Html$div = _elm_lang$html$Html$node('div');
var _elm_lang$html$Html$a = _elm_lang$html$Html$node('a');
var _elm_lang$html$Html$em = _elm_lang$html$Html$node('em');
var _elm_lang$html$Html$strong = _elm_lang$html$Html$node('strong');
var _elm_lang$html$Html$small = _elm_lang$html$Html$node('small');
var _elm_lang$html$Html$s = _elm_lang$html$Html$node('s');
var _elm_lang$html$Html$cite = _elm_lang$html$Html$node('cite');
var _elm_lang$html$Html$q = _elm_lang$html$Html$node('q');
var _elm_lang$html$Html$dfn = _elm_lang$html$Html$node('dfn');
var _elm_lang$html$Html$abbr = _elm_lang$html$Html$node('abbr');
var _elm_lang$html$Html$time = _elm_lang$html$Html$node('time');
var _elm_lang$html$Html$code = _elm_lang$html$Html$node('code');
var _elm_lang$html$Html$var = _elm_lang$html$Html$node('var');
var _elm_lang$html$Html$samp = _elm_lang$html$Html$node('samp');
var _elm_lang$html$Html$kbd = _elm_lang$html$Html$node('kbd');
var _elm_lang$html$Html$sub = _elm_lang$html$Html$node('sub');
var _elm_lang$html$Html$sup = _elm_lang$html$Html$node('sup');
var _elm_lang$html$Html$i = _elm_lang$html$Html$node('i');
var _elm_lang$html$Html$b = _elm_lang$html$Html$node('b');
var _elm_lang$html$Html$u = _elm_lang$html$Html$node('u');
var _elm_lang$html$Html$mark = _elm_lang$html$Html$node('mark');
var _elm_lang$html$Html$ruby = _elm_lang$html$Html$node('ruby');
var _elm_lang$html$Html$rt = _elm_lang$html$Html$node('rt');
var _elm_lang$html$Html$rp = _elm_lang$html$Html$node('rp');
var _elm_lang$html$Html$bdi = _elm_lang$html$Html$node('bdi');
var _elm_lang$html$Html$bdo = _elm_lang$html$Html$node('bdo');
var _elm_lang$html$Html$span = _elm_lang$html$Html$node('span');
var _elm_lang$html$Html$br = _elm_lang$html$Html$node('br');
var _elm_lang$html$Html$wbr = _elm_lang$html$Html$node('wbr');
var _elm_lang$html$Html$ins = _elm_lang$html$Html$node('ins');
var _elm_lang$html$Html$del = _elm_lang$html$Html$node('del');
var _elm_lang$html$Html$img = _elm_lang$html$Html$node('img');
var _elm_lang$html$Html$iframe = _elm_lang$html$Html$node('iframe');
var _elm_lang$html$Html$embed = _elm_lang$html$Html$node('embed');
var _elm_lang$html$Html$object = _elm_lang$html$Html$node('object');
var _elm_lang$html$Html$param = _elm_lang$html$Html$node('param');
var _elm_lang$html$Html$video = _elm_lang$html$Html$node('video');
var _elm_lang$html$Html$audio = _elm_lang$html$Html$node('audio');
var _elm_lang$html$Html$source = _elm_lang$html$Html$node('source');
var _elm_lang$html$Html$track = _elm_lang$html$Html$node('track');
var _elm_lang$html$Html$canvas = _elm_lang$html$Html$node('canvas');
var _elm_lang$html$Html$math = _elm_lang$html$Html$node('math');
var _elm_lang$html$Html$table = _elm_lang$html$Html$node('table');
var _elm_lang$html$Html$caption = _elm_lang$html$Html$node('caption');
var _elm_lang$html$Html$colgroup = _elm_lang$html$Html$node('colgroup');
var _elm_lang$html$Html$col = _elm_lang$html$Html$node('col');
var _elm_lang$html$Html$tbody = _elm_lang$html$Html$node('tbody');
var _elm_lang$html$Html$thead = _elm_lang$html$Html$node('thead');
var _elm_lang$html$Html$tfoot = _elm_lang$html$Html$node('tfoot');
var _elm_lang$html$Html$tr = _elm_lang$html$Html$node('tr');
var _elm_lang$html$Html$td = _elm_lang$html$Html$node('td');
var _elm_lang$html$Html$th = _elm_lang$html$Html$node('th');
var _elm_lang$html$Html$form = _elm_lang$html$Html$node('form');
var _elm_lang$html$Html$fieldset = _elm_lang$html$Html$node('fieldset');
var _elm_lang$html$Html$legend = _elm_lang$html$Html$node('legend');
var _elm_lang$html$Html$label = _elm_lang$html$Html$node('label');
var _elm_lang$html$Html$input = _elm_lang$html$Html$node('input');
var _elm_lang$html$Html$button = _elm_lang$html$Html$node('button');
var _elm_lang$html$Html$select = _elm_lang$html$Html$node('select');
var _elm_lang$html$Html$datalist = _elm_lang$html$Html$node('datalist');
var _elm_lang$html$Html$optgroup = _elm_lang$html$Html$node('optgroup');
var _elm_lang$html$Html$option = _elm_lang$html$Html$node('option');
var _elm_lang$html$Html$textarea = _elm_lang$html$Html$node('textarea');
var _elm_lang$html$Html$keygen = _elm_lang$html$Html$node('keygen');
var _elm_lang$html$Html$output = _elm_lang$html$Html$node('output');
var _elm_lang$html$Html$progress = _elm_lang$html$Html$node('progress');
var _elm_lang$html$Html$meter = _elm_lang$html$Html$node('meter');
var _elm_lang$html$Html$details = _elm_lang$html$Html$node('details');
var _elm_lang$html$Html$summary = _elm_lang$html$Html$node('summary');
var _elm_lang$html$Html$menuitem = _elm_lang$html$Html$node('menuitem');
var _elm_lang$html$Html$menu = _elm_lang$html$Html$node('menu');

var _elm_lang$html$Html_Attributes$map = _elm_lang$virtual_dom$VirtualDom$mapProperty;
var _elm_lang$html$Html_Attributes$attribute = _elm_lang$virtual_dom$VirtualDom$attribute;
var _elm_lang$html$Html_Attributes$contextmenu = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'contextmenu', value);
};
var _elm_lang$html$Html_Attributes$draggable = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'draggable', value);
};
var _elm_lang$html$Html_Attributes$itemprop = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'itemprop', value);
};
var _elm_lang$html$Html_Attributes$tabindex = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'tabIndex',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$charset = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'charset', value);
};
var _elm_lang$html$Html_Attributes$height = function (value) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'height',
		_elm_lang$core$Basics$toString(value));
};
var _elm_lang$html$Html_Attributes$width = function (value) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'width',
		_elm_lang$core$Basics$toString(value));
};
var _elm_lang$html$Html_Attributes$formaction = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'formAction', value);
};
var _elm_lang$html$Html_Attributes$list = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'list', value);
};
var _elm_lang$html$Html_Attributes$minlength = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'minLength',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$maxlength = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'maxlength',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$size = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'size',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$form = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'form', value);
};
var _elm_lang$html$Html_Attributes$cols = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'cols',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$rows = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'rows',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$challenge = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'challenge', value);
};
var _elm_lang$html$Html_Attributes$media = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'media', value);
};
var _elm_lang$html$Html_Attributes$rel = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'rel', value);
};
var _elm_lang$html$Html_Attributes$datetime = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'datetime', value);
};
var _elm_lang$html$Html_Attributes$pubdate = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'pubdate', value);
};
var _elm_lang$html$Html_Attributes$colspan = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'colspan',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$rowspan = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'rowspan',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$manifest = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'manifest', value);
};
var _elm_lang$html$Html_Attributes$property = _elm_lang$virtual_dom$VirtualDom$property;
var _elm_lang$html$Html_Attributes$stringProperty = F2(
	function (name, string) {
		return A2(
			_elm_lang$html$Html_Attributes$property,
			name,
			_elm_lang$core$Json_Encode$string(string));
	});
var _elm_lang$html$Html_Attributes$class = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'className', name);
};
var _elm_lang$html$Html_Attributes$id = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'id', name);
};
var _elm_lang$html$Html_Attributes$title = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'title', name);
};
var _elm_lang$html$Html_Attributes$accesskey = function ($char) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'accessKey',
		_elm_lang$core$String$fromChar($char));
};
var _elm_lang$html$Html_Attributes$dir = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'dir', value);
};
var _elm_lang$html$Html_Attributes$dropzone = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'dropzone', value);
};
var _elm_lang$html$Html_Attributes$lang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'lang', value);
};
var _elm_lang$html$Html_Attributes$content = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'content', value);
};
var _elm_lang$html$Html_Attributes$httpEquiv = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'httpEquiv', value);
};
var _elm_lang$html$Html_Attributes$language = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'language', value);
};
var _elm_lang$html$Html_Attributes$src = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'src', value);
};
var _elm_lang$html$Html_Attributes$alt = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'alt', value);
};
var _elm_lang$html$Html_Attributes$preload = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'preload', value);
};
var _elm_lang$html$Html_Attributes$poster = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'poster', value);
};
var _elm_lang$html$Html_Attributes$kind = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'kind', value);
};
var _elm_lang$html$Html_Attributes$srclang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'srclang', value);
};
var _elm_lang$html$Html_Attributes$sandbox = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'sandbox', value);
};
var _elm_lang$html$Html_Attributes$srcdoc = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'srcdoc', value);
};
var _elm_lang$html$Html_Attributes$type_ = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'type', value);
};
var _elm_lang$html$Html_Attributes$value = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'value', value);
};
var _elm_lang$html$Html_Attributes$defaultValue = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'defaultValue', value);
};
var _elm_lang$html$Html_Attributes$placeholder = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'placeholder', value);
};
var _elm_lang$html$Html_Attributes$accept = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'accept', value);
};
var _elm_lang$html$Html_Attributes$acceptCharset = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'acceptCharset', value);
};
var _elm_lang$html$Html_Attributes$action = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'action', value);
};
var _elm_lang$html$Html_Attributes$autocomplete = function (bool) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'autocomplete',
		bool ? 'on' : 'off');
};
var _elm_lang$html$Html_Attributes$enctype = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'enctype', value);
};
var _elm_lang$html$Html_Attributes$method = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'method', value);
};
var _elm_lang$html$Html_Attributes$name = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'name', value);
};
var _elm_lang$html$Html_Attributes$pattern = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'pattern', value);
};
var _elm_lang$html$Html_Attributes$for = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'htmlFor', value);
};
var _elm_lang$html$Html_Attributes$max = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'max', value);
};
var _elm_lang$html$Html_Attributes$min = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'min', value);
};
var _elm_lang$html$Html_Attributes$step = function (n) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'step', n);
};
var _elm_lang$html$Html_Attributes$wrap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'wrap', value);
};
var _elm_lang$html$Html_Attributes$usemap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'useMap', value);
};
var _elm_lang$html$Html_Attributes$shape = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'shape', value);
};
var _elm_lang$html$Html_Attributes$coords = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'coords', value);
};
var _elm_lang$html$Html_Attributes$keytype = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'keytype', value);
};
var _elm_lang$html$Html_Attributes$align = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'align', value);
};
var _elm_lang$html$Html_Attributes$cite = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'cite', value);
};
var _elm_lang$html$Html_Attributes$href = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'href', value);
};
var _elm_lang$html$Html_Attributes$target = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'target', value);
};
var _elm_lang$html$Html_Attributes$downloadAs = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'download', value);
};
var _elm_lang$html$Html_Attributes$hreflang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'hreflang', value);
};
var _elm_lang$html$Html_Attributes$ping = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'ping', value);
};
var _elm_lang$html$Html_Attributes$start = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'start',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$headers = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'headers', value);
};
var _elm_lang$html$Html_Attributes$scope = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'scope', value);
};
var _elm_lang$html$Html_Attributes$boolProperty = F2(
	function (name, bool) {
		return A2(
			_elm_lang$html$Html_Attributes$property,
			name,
			_elm_lang$core$Json_Encode$bool(bool));
	});
var _elm_lang$html$Html_Attributes$hidden = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'hidden', bool);
};
var _elm_lang$html$Html_Attributes$contenteditable = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'contentEditable', bool);
};
var _elm_lang$html$Html_Attributes$spellcheck = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'spellcheck', bool);
};
var _elm_lang$html$Html_Attributes$async = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'async', bool);
};
var _elm_lang$html$Html_Attributes$defer = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'defer', bool);
};
var _elm_lang$html$Html_Attributes$scoped = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'scoped', bool);
};
var _elm_lang$html$Html_Attributes$autoplay = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'autoplay', bool);
};
var _elm_lang$html$Html_Attributes$controls = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'controls', bool);
};
var _elm_lang$html$Html_Attributes$loop = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'loop', bool);
};
var _elm_lang$html$Html_Attributes$default = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'default', bool);
};
var _elm_lang$html$Html_Attributes$seamless = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'seamless', bool);
};
var _elm_lang$html$Html_Attributes$checked = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'checked', bool);
};
var _elm_lang$html$Html_Attributes$selected = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'selected', bool);
};
var _elm_lang$html$Html_Attributes$autofocus = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'autofocus', bool);
};
var _elm_lang$html$Html_Attributes$disabled = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'disabled', bool);
};
var _elm_lang$html$Html_Attributes$multiple = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'multiple', bool);
};
var _elm_lang$html$Html_Attributes$novalidate = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'noValidate', bool);
};
var _elm_lang$html$Html_Attributes$readonly = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'readOnly', bool);
};
var _elm_lang$html$Html_Attributes$required = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'required', bool);
};
var _elm_lang$html$Html_Attributes$ismap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'isMap', value);
};
var _elm_lang$html$Html_Attributes$download = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'download', bool);
};
var _elm_lang$html$Html_Attributes$reversed = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'reversed', bool);
};
var _elm_lang$html$Html_Attributes$classList = function (list) {
	return _elm_lang$html$Html_Attributes$class(
		A2(
			_elm_lang$core$String$join,
			' ',
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Tuple$first,
				A2(_elm_lang$core$List$filter, _elm_lang$core$Tuple$second, list))));
};
var _elm_lang$html$Html_Attributes$style = _elm_lang$virtual_dom$VirtualDom$style;

var _elm_lang$html$Html_Events$keyCode = A2(_elm_lang$core$Json_Decode$field, 'keyCode', _elm_lang$core$Json_Decode$int);
var _elm_lang$html$Html_Events$targetChecked = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'target',
		_1: {
			ctor: '::',
			_0: 'checked',
			_1: {ctor: '[]'}
		}
	},
	_elm_lang$core$Json_Decode$bool);
var _elm_lang$html$Html_Events$targetValue = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'target',
		_1: {
			ctor: '::',
			_0: 'value',
			_1: {ctor: '[]'}
		}
	},
	_elm_lang$core$Json_Decode$string);
var _elm_lang$html$Html_Events$defaultOptions = _elm_lang$virtual_dom$VirtualDom$defaultOptions;
var _elm_lang$html$Html_Events$onWithOptions = _elm_lang$virtual_dom$VirtualDom$onWithOptions;
var _elm_lang$html$Html_Events$on = _elm_lang$virtual_dom$VirtualDom$on;
var _elm_lang$html$Html_Events$onFocus = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'focus',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onBlur = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'blur',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onSubmitOptions = _elm_lang$core$Native_Utils.update(
	_elm_lang$html$Html_Events$defaultOptions,
	{preventDefault: true});
var _elm_lang$html$Html_Events$onSubmit = function (msg) {
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		'submit',
		_elm_lang$html$Html_Events$onSubmitOptions,
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onCheck = function (tagger) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'change',
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$html$Html_Events$targetChecked));
};
var _elm_lang$html$Html_Events$onInput = function (tagger) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'input',
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$html$Html_Events$targetValue));
};
var _elm_lang$html$Html_Events$onMouseOut = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseout',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseOver = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseover',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseLeave = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseleave',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseEnter = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseenter',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseUp = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseup',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseDown = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mousedown',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onDoubleClick = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'dblclick',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onClick = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'click',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$Options = F2(
	function (a, b) {
		return {stopPropagation: a, preventDefault: b};
	});

var _elm_lang$html$Html_Keyed$node = _elm_lang$virtual_dom$VirtualDom$keyedNode;
var _elm_lang$html$Html_Keyed$ol = _elm_lang$html$Html_Keyed$node('ol');
var _elm_lang$html$Html_Keyed$ul = _elm_lang$html$Html_Keyed$node('ul');

var _myrho$elm_round$Round$funNum = F3(
	function (fun, s, fl) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			0 / 0,
			_elm_lang$core$Result$toMaybe(
				_elm_lang$core$String$toFloat(
					A2(fun, s, fl))));
	});
var _myrho$elm_round$Round$increaseNum = function (_p0) {
	var _p1 = _p0;
	var _p4 = _p1._1;
	var _p3 = _p1._0;
	if (_elm_lang$core$Native_Utils.eq(
		_p3,
		_elm_lang$core$Native_Utils.chr('9'))) {
		var _p2 = _elm_lang$core$String$uncons(_p4);
		if (_p2.ctor === 'Nothing') {
			return '01';
		} else {
			return A2(
				_elm_lang$core$String$cons,
				_elm_lang$core$Native_Utils.chr('0'),
				_myrho$elm_round$Round$increaseNum(_p2._0));
		}
	} else {
		var c = _elm_lang$core$Char$toCode(_p3);
		return ((_elm_lang$core$Native_Utils.cmp(c, 48) > -1) && (_elm_lang$core$Native_Utils.cmp(c, 57) < 0)) ? A2(
			_elm_lang$core$String$cons,
			_elm_lang$core$Char$fromCode(c + 1),
			_p4) : '0';
	}
};
var _myrho$elm_round$Round$addSign = F2(
	function (signed, str) {
		var isNotZero = A2(
			_elm_lang$core$List$any,
			function (c) {
				return (!_elm_lang$core$Native_Utils.eq(
					c,
					_elm_lang$core$Native_Utils.chr('0'))) && (!_elm_lang$core$Native_Utils.eq(
					c,
					_elm_lang$core$Native_Utils.chr('.')));
			},
			_elm_lang$core$String$toList(str));
		return A2(
			_elm_lang$core$Basics_ops['++'],
			(signed && isNotZero) ? '-' : '',
			str);
	});
var _myrho$elm_round$Round$splitComma = function (str) {
	var _p5 = A2(_elm_lang$core$String$split, '.', str);
	if (_p5.ctor === '::') {
		if (_p5._1.ctor === '::') {
			return {ctor: '_Tuple2', _0: _p5._0, _1: _p5._1._0};
		} else {
			return {ctor: '_Tuple2', _0: _p5._0, _1: '0'};
		}
	} else {
		return {ctor: '_Tuple2', _0: '0', _1: '0'};
	}
};
var _myrho$elm_round$Round$toDecimal = function (fl) {
	var _p6 = A2(
		_elm_lang$core$String$split,
		'e',
		_elm_lang$core$Basics$toString(
			_elm_lang$core$Basics$abs(fl)));
	if (_p6.ctor === '::') {
		if (_p6._1.ctor === '::') {
			var _p10 = _p6._1._0;
			var _p7 = _myrho$elm_round$Round$splitComma(_p6._0);
			var before = _p7._0;
			var after = _p7._1;
			var total = A2(_elm_lang$core$Basics_ops['++'], before, after);
			var e = A2(
				_elm_lang$core$Maybe$withDefault,
				0,
				_elm_lang$core$Result$toMaybe(
					_elm_lang$core$String$toInt(
						A2(_elm_lang$core$String$startsWith, '+', _p10) ? A2(_elm_lang$core$String$dropLeft, 1, _p10) : _p10)));
			var zeroed = (_elm_lang$core$Native_Utils.cmp(e, 0) < 0) ? A2(
				_elm_lang$core$Maybe$withDefault,
				'0',
				A2(
					_elm_lang$core$Maybe$map,
					function (_p8) {
						var _p9 = _p8;
						return A2(
							_elm_lang$core$Basics_ops['++'],
							_p9._0,
							A2(_elm_lang$core$Basics_ops['++'], '.', _p9._1));
					},
					A2(
						_elm_lang$core$Maybe$map,
						_elm_lang$core$Tuple$mapFirst(_elm_lang$core$String$fromChar),
						_elm_lang$core$String$uncons(
							A2(
								_elm_lang$core$Basics_ops['++'],
								A2(
									_elm_lang$core$String$repeat,
									_elm_lang$core$Basics$abs(e),
									'0'),
								total))))) : A3(
				_elm_lang$core$String$padRight,
				e + 1,
				_elm_lang$core$Native_Utils.chr('0'),
				total);
			return A2(
				_elm_lang$core$Basics_ops['++'],
				(_elm_lang$core$Native_Utils.cmp(fl, 0) < 0) ? '-' : '',
				zeroed);
		} else {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				(_elm_lang$core$Native_Utils.cmp(fl, 0) < 0) ? '-' : '',
				_p6._0);
		}
	} else {
		return '';
	}
};
var _myrho$elm_round$Round$roundFun = F3(
	function (functor, s, fl) {
		if (_elm_lang$core$Basics$isInfinite(fl) || _elm_lang$core$Basics$isNaN(fl)) {
			return _elm_lang$core$Basics$toString(fl);
		} else {
			var signed = _elm_lang$core$Native_Utils.cmp(fl, 0) < 0;
			var _p11 = _myrho$elm_round$Round$splitComma(
				_myrho$elm_round$Round$toDecimal(
					_elm_lang$core$Basics$abs(fl)));
			var before = _p11._0;
			var after = _p11._1;
			var r = _elm_lang$core$String$length(before) + s;
			var roundDigitIndex = A2(_elm_lang$core$Basics$max, 1, r);
			var normalized = A2(
				_elm_lang$core$Basics_ops['++'],
				A2(
					_elm_lang$core$String$repeat,
					_elm_lang$core$Basics$negate(r) + 1,
					'0'),
				A3(
					_elm_lang$core$String$padRight,
					r,
					_elm_lang$core$Native_Utils.chr('0'),
					A2(_elm_lang$core$Basics_ops['++'], before, after)));
			var totalLen = _elm_lang$core$String$length(normalized);
			var increase = A2(
				functor,
				signed,
				A3(_elm_lang$core$String$slice, roundDigitIndex, totalLen, normalized));
			var remains = A3(_elm_lang$core$String$slice, 0, roundDigitIndex, normalized);
			var num = increase ? _elm_lang$core$String$reverse(
				A2(
					_elm_lang$core$Maybe$withDefault,
					'1',
					A2(
						_elm_lang$core$Maybe$map,
						_myrho$elm_round$Round$increaseNum,
						_elm_lang$core$String$uncons(
							_elm_lang$core$String$reverse(remains))))) : remains;
			var numLen = _elm_lang$core$String$length(num);
			var numZeroed = _elm_lang$core$Native_Utils.eq(num, '0') ? num : ((_elm_lang$core$Native_Utils.cmp(s, 0) < 1) ? A2(
				F2(
					function (x, y) {
						return A2(_elm_lang$core$Basics_ops['++'], x, y);
					}),
				num,
				A2(
					_elm_lang$core$String$repeat,
					_elm_lang$core$Basics$abs(s),
					'0')) : ((_elm_lang$core$Native_Utils.cmp(
				s,
				_elm_lang$core$String$length(after)) < 0) ? A2(
				_elm_lang$core$Basics_ops['++'],
				A3(_elm_lang$core$String$slice, 0, numLen - s, num),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'.',
					A3(_elm_lang$core$String$slice, numLen - s, numLen, num))) : A2(
				F2(
					function (x, y) {
						return A2(_elm_lang$core$Basics_ops['++'], x, y);
					}),
				A2(_elm_lang$core$Basics_ops['++'], before, '.'),
				A3(
					_elm_lang$core$String$padRight,
					s,
					_elm_lang$core$Native_Utils.chr('0'),
					after))));
			return A2(_myrho$elm_round$Round$addSign, signed, numZeroed);
		}
	});
var _myrho$elm_round$Round$round = _myrho$elm_round$Round$roundFun(
	F2(
		function (signed, str) {
			var _p12 = _elm_lang$core$String$uncons(str);
			if (_p12.ctor === 'Nothing') {
				return false;
			} else {
				if (_p12._0._0.valueOf() === '5') {
					if (_p12._0._1 === '') {
						return !signed;
					} else {
						return true;
					}
				} else {
					return function ($int) {
						return ((_elm_lang$core$Native_Utils.cmp($int, 53) > 0) && signed) || ((_elm_lang$core$Native_Utils.cmp($int, 53) > -1) && (!signed));
					}(
						_elm_lang$core$Char$toCode(_p12._0._0));
				}
			}
		}));
var _myrho$elm_round$Round$roundNum = _myrho$elm_round$Round$funNum(_myrho$elm_round$Round$round);
var _myrho$elm_round$Round$ceiling = _myrho$elm_round$Round$roundFun(
	F2(
		function (signed, str) {
			var _p13 = _elm_lang$core$String$uncons(str);
			if (_p13.ctor === 'Nothing') {
				return false;
			} else {
				if ((_p13._0.ctor === '_Tuple2') && (_p13._0._0.valueOf() === '0')) {
					return A2(
						F2(
							function (x, y) {
								return x && y;
							}),
						!signed,
						A2(
							_elm_lang$core$List$any,
							F2(
								function (x, y) {
									return !_elm_lang$core$Native_Utils.eq(x, y);
								})(
								_elm_lang$core$Native_Utils.chr('0')),
							_elm_lang$core$String$toList(_p13._0._1)));
				} else {
					return !signed;
				}
			}
		}));
var _myrho$elm_round$Round$ceilingNum = _myrho$elm_round$Round$funNum(_myrho$elm_round$Round$ceiling);
var _myrho$elm_round$Round$floor = _myrho$elm_round$Round$roundFun(
	F2(
		function (signed, str) {
			var _p14 = _elm_lang$core$String$uncons(str);
			if (_p14.ctor === 'Nothing') {
				return false;
			} else {
				if ((_p14._0.ctor === '_Tuple2') && (_p14._0._0.valueOf() === '0')) {
					return A2(
						F2(
							function (x, y) {
								return x && y;
							}),
						signed,
						A2(
							_elm_lang$core$List$any,
							F2(
								function (x, y) {
									return !_elm_lang$core$Native_Utils.eq(x, y);
								})(
								_elm_lang$core$Native_Utils.chr('0')),
							_elm_lang$core$String$toList(_p14._0._1)));
				} else {
					return signed;
				}
			}
		}));
var _myrho$elm_round$Round$floorCom = F2(
	function (s, fl) {
		return (_elm_lang$core$Native_Utils.cmp(fl, 0) < 0) ? A2(_myrho$elm_round$Round$ceiling, s, fl) : A2(_myrho$elm_round$Round$floor, s, fl);
	});
var _myrho$elm_round$Round$floorNumCom = _myrho$elm_round$Round$funNum(_myrho$elm_round$Round$floorCom);
var _myrho$elm_round$Round$ceilingCom = F2(
	function (s, fl) {
		return (_elm_lang$core$Native_Utils.cmp(fl, 0) < 0) ? A2(_myrho$elm_round$Round$floor, s, fl) : A2(_myrho$elm_round$Round$ceiling, s, fl);
	});
var _myrho$elm_round$Round$ceilingNumCom = _myrho$elm_round$Round$funNum(_myrho$elm_round$Round$ceilingCom);
var _myrho$elm_round$Round$floorNum = _myrho$elm_round$Round$funNum(_myrho$elm_round$Round$floor);
var _myrho$elm_round$Round$roundCom = _myrho$elm_round$Round$roundFun(
	F2(
		function (_p15, $int) {
			return A2(
				F2(
					function (x, y) {
						return _elm_lang$core$Native_Utils.cmp(x, y) < 1;
					}),
				53,
				_elm_lang$core$Char$toCode(
					A2(
						_elm_lang$core$Maybe$withDefault,
						_elm_lang$core$Native_Utils.chr('0'),
						A2(
							_elm_lang$core$Maybe$map,
							_elm_lang$core$Tuple$first,
							_elm_lang$core$String$uncons($int)))));
		}));
var _myrho$elm_round$Round$roundNumCom = _myrho$elm_round$Round$funNum(_myrho$elm_round$Round$roundCom);
var _myrho$elm_round$Round$truncate = function (n) {
	return (_elm_lang$core$Native_Utils.cmp(n, 0) < 0) ? _elm_lang$core$Basics$ceiling(n) : _elm_lang$core$Basics$floor(n);
};

var _Gizra$elm_essentials$Gizra_Html$voidHref = _elm_lang$html$Html_Attributes$href('javascript: void(0)');
var _Gizra$elm_essentials$Gizra_Html$emptyNode = _elm_lang$html$Html$text('');
var _Gizra$elm_essentials$Gizra_Html$showIf = F2(
	function (condition, html) {
		return condition ? html : _Gizra$elm_essentials$Gizra_Html$emptyNode;
	});
var _Gizra$elm_essentials$Gizra_Html$showMaybe = _elm_lang$core$Maybe$withDefault(_Gizra$elm_essentials$Gizra_Html$emptyNode);
var _Gizra$elm_essentials$Gizra_Html$preventDefault = {preventDefault: true, stopPropagation: false};
var _Gizra$elm_essentials$Gizra_Html$stopPropagation = {preventDefault: false, stopPropagation: true};
var _Gizra$elm_essentials$Gizra_Html$preventDefaultAndStopPropagation = {preventDefault: true, stopPropagation: true};
var _Gizra$elm_essentials$Gizra_Html$floatToPx = function (val) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		A2(_myrho$elm_round$Round$round, 1, val),
		'px');
};
var _Gizra$elm_essentials$Gizra_Html$intToPx = function (val) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(val),
		'px');
};
var _Gizra$elm_essentials$Gizra_Html$keyed = F2(
	function (v0, v1) {
		return {ctor: '_Tuple2', _0: v0, _1: v1};
	});
var _Gizra$elm_essentials$Gizra_Html$divKeyed = _elm_lang$html$Html_Keyed$node('div');
var _Gizra$elm_essentials$Gizra_Html$keyedDivKeyed = F3(
	function (key, attrs, children) {
		return A2(
			_Gizra$elm_essentials$Gizra_Html$keyed,
			key,
			A2(_Gizra$elm_essentials$Gizra_Html$divKeyed, attrs, children));
	});

var _elm_community$json_extra$Json_Decode_Extra$when = F3(
	function (checkDecoder, check, passDecoder) {
		return A2(
			_elm_lang$core$Json_Decode$andThen,
			function (checkVal) {
				return check(checkVal) ? passDecoder : _elm_lang$core$Json_Decode$fail(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'Check failed with input `',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(checkVal),
							'`')));
			},
			checkDecoder);
	});
var _elm_community$json_extra$Json_Decode_Extra$combine = A2(
	_elm_lang$core$List$foldr,
	_elm_lang$core$Json_Decode$map2(
		F2(
			function (x, y) {
				return {ctor: '::', _0: x, _1: y};
			})),
	_elm_lang$core$Json_Decode$succeed(
		{ctor: '[]'}));
var _elm_community$json_extra$Json_Decode_Extra$collection = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		function (length) {
			return _elm_community$json_extra$Json_Decode_Extra$combine(
				A2(
					_elm_lang$core$List$map,
					function (index) {
						return A2(
							_elm_lang$core$Json_Decode$field,
							_elm_lang$core$Basics$toString(index),
							decoder);
					},
					A2(_elm_lang$core$List$range, 0, length - 1)));
		},
		A2(_elm_lang$core$Json_Decode$field, 'length', _elm_lang$core$Json_Decode$int));
};
var _elm_community$json_extra$Json_Decode_Extra$fromResult = function (result) {
	var _p0 = result;
	if (_p0.ctor === 'Ok') {
		return _elm_lang$core$Json_Decode$succeed(_p0._0);
	} else {
		return _elm_lang$core$Json_Decode$fail(_p0._0);
	}
};
var _elm_community$json_extra$Json_Decode_Extra$parseInt = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (_p1) {
		return _elm_community$json_extra$Json_Decode_Extra$fromResult(
			_elm_lang$core$String$toInt(_p1));
	},
	_elm_lang$core$Json_Decode$string);
var _elm_community$json_extra$Json_Decode_Extra$parseFloat = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (_p2) {
		return _elm_community$json_extra$Json_Decode_Extra$fromResult(
			_elm_lang$core$String$toFloat(_p2));
	},
	_elm_lang$core$Json_Decode$string);
var _elm_community$json_extra$Json_Decode_Extra$doubleEncoded = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		function (_p3) {
			return _elm_community$json_extra$Json_Decode_Extra$fromResult(
				A2(_elm_lang$core$Json_Decode$decodeString, decoder, _p3));
		},
		_elm_lang$core$Json_Decode$string);
};
var _elm_community$json_extra$Json_Decode_Extra$keys = A2(
	_elm_lang$core$Json_Decode$map,
	A2(
		_elm_lang$core$List$foldl,
		F2(
			function (_p4, acc) {
				var _p5 = _p4;
				return {ctor: '::', _0: _p5._0, _1: acc};
			}),
		{ctor: '[]'}),
	_elm_lang$core$Json_Decode$keyValuePairs(
		_elm_lang$core$Json_Decode$succeed(
			{ctor: '_Tuple0'})));
var _elm_community$json_extra$Json_Decode_Extra$sequenceHelp = F2(
	function (decoders, jsonValues) {
		return (!_elm_lang$core$Native_Utils.eq(
			_elm_lang$core$List$length(jsonValues),
			_elm_lang$core$List$length(decoders))) ? _elm_lang$core$Json_Decode$fail('Number of decoders does not match number of values') : _elm_community$json_extra$Json_Decode_Extra$fromResult(
			A3(
				_elm_lang$core$List$foldr,
				_elm_lang$core$Result$map2(
					F2(
						function (x, y) {
							return {ctor: '::', _0: x, _1: y};
						})),
				_elm_lang$core$Result$Ok(
					{ctor: '[]'}),
				A3(_elm_lang$core$List$map2, _elm_lang$core$Json_Decode$decodeValue, decoders, jsonValues)));
	});
var _elm_community$json_extra$Json_Decode_Extra$sequence = function (decoders) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		_elm_community$json_extra$Json_Decode_Extra$sequenceHelp(decoders),
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$value));
};
var _elm_community$json_extra$Json_Decode_Extra$indexedList = function (indexedDecoder) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		function (values) {
			return _elm_community$json_extra$Json_Decode_Extra$sequence(
				A2(
					_elm_lang$core$List$map,
					indexedDecoder,
					A2(
						_elm_lang$core$List$range,
						0,
						_elm_lang$core$List$length(values) - 1)));
		},
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$value));
};
var _elm_community$json_extra$Json_Decode_Extra$optionalField = F2(
	function (fieldName, decoder) {
		var finishDecoding = function (json) {
			var _p6 = A2(
				_elm_lang$core$Json_Decode$decodeValue,
				A2(_elm_lang$core$Json_Decode$field, fieldName, _elm_lang$core$Json_Decode$value),
				json);
			if (_p6.ctor === 'Ok') {
				return A2(
					_elm_lang$core$Json_Decode$map,
					_elm_lang$core$Maybe$Just,
					A2(_elm_lang$core$Json_Decode$field, fieldName, decoder));
			} else {
				return _elm_lang$core$Json_Decode$succeed(_elm_lang$core$Maybe$Nothing);
			}
		};
		return A2(_elm_lang$core$Json_Decode$andThen, finishDecoding, _elm_lang$core$Json_Decode$value);
	});
var _elm_community$json_extra$Json_Decode_Extra$withDefault = F2(
	function (fallback, decoder) {
		return A2(
			_elm_lang$core$Json_Decode$map,
			_elm_lang$core$Maybe$withDefault(fallback),
			_elm_lang$core$Json_Decode$maybe(decoder));
	});
var _elm_community$json_extra$Json_Decode_Extra$decodeDictFromTuples = F2(
	function (keyDecoder, tuples) {
		var _p7 = tuples;
		if (_p7.ctor === '[]') {
			return _elm_lang$core$Json_Decode$succeed(_elm_lang$core$Dict$empty);
		} else {
			var _p8 = A2(_elm_lang$core$Json_Decode$decodeString, keyDecoder, _p7._0._0);
			if (_p8.ctor === 'Ok') {
				return A2(
					_elm_lang$core$Json_Decode$andThen,
					function (_p9) {
						return _elm_lang$core$Json_Decode$succeed(
							A3(_elm_lang$core$Dict$insert, _p8._0, _p7._0._1, _p9));
					},
					A2(_elm_community$json_extra$Json_Decode_Extra$decodeDictFromTuples, keyDecoder, _p7._1));
			} else {
				return _elm_lang$core$Json_Decode$fail(_p8._0);
			}
		}
	});
var _elm_community$json_extra$Json_Decode_Extra$dict2 = F2(
	function (keyDecoder, valueDecoder) {
		return A2(
			_elm_lang$core$Json_Decode$andThen,
			_elm_community$json_extra$Json_Decode_Extra$decodeDictFromTuples(keyDecoder),
			_elm_lang$core$Json_Decode$keyValuePairs(valueDecoder));
	});
var _elm_community$json_extra$Json_Decode_Extra$set = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$map,
		_elm_lang$core$Set$fromList,
		_elm_lang$core$Json_Decode$list(decoder));
};
var _elm_community$json_extra$Json_Decode_Extra$date = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (_p10) {
		return _elm_community$json_extra$Json_Decode_Extra$fromResult(
			_elm_lang$core$Date$fromString(_p10));
	},
	_elm_lang$core$Json_Decode$string);
var _elm_community$json_extra$Json_Decode_Extra$andMap = _elm_lang$core$Json_Decode$map2(
	F2(
		function (x, y) {
			return y(x);
		}));
var _elm_community$json_extra$Json_Decode_Extra_ops = _elm_community$json_extra$Json_Decode_Extra_ops || {};
_elm_community$json_extra$Json_Decode_Extra_ops['|:'] = _elm_lang$core$Basics$flip(_elm_community$json_extra$Json_Decode_Extra$andMap);

var _Gizra$elm_essentials$Gizra_Json$decodeJsonInString = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		function (s) {
			var _p0 = A2(_elm_lang$core$Json_Decode$decodeString, decoder, s);
			if (_p0.ctor === 'Ok') {
				return _elm_lang$core$Json_Decode$succeed(_p0._0);
			} else {
				return _elm_lang$core$Json_Decode$fail(_p0._0);
			}
		},
		_elm_lang$core$Json_Decode$string);
};
var _Gizra$elm_essentials$Gizra_Json$decodeEmptyArrayAs = function ($default) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		function (list) {
			var length = _elm_lang$core$List$length(list);
			return _elm_lang$core$Native_Utils.eq(length, 0) ? _elm_lang$core$Json_Decode$succeed($default) : _elm_lang$core$Json_Decode$fail(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Expected an empty array, not an array with length: ',
					_elm_lang$core$Basics$toString(length)));
		},
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$value));
};
var _Gizra$elm_essentials$Gizra_Json$decodeFloat = _elm_lang$core$Json_Decode$oneOf(
	{
		ctor: '::',
		_0: _elm_lang$core$Json_Decode$float,
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$core$Json_Decode$andThen,
				function (s) {
					var _p1 = _elm_lang$core$String$toFloat(s);
					if (_p1.ctor === 'Ok') {
						return _elm_lang$core$Json_Decode$succeed(_p1._0);
					} else {
						return _elm_lang$core$Json_Decode$fail(_p1._0);
					}
				},
				_elm_lang$core$Json_Decode$string),
			_1: {ctor: '[]'}
		}
	});
var _Gizra$elm_essentials$Gizra_Json$decodeIntToString = _elm_lang$core$Json_Decode$oneOf(
	{
		ctor: '::',
		_0: _elm_lang$core$Json_Decode$string,
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$core$Json_Decode$andThen,
				function (v) {
					return _elm_lang$core$Json_Decode$succeed(
						_elm_lang$core$Basics$toString(v));
				},
				_elm_lang$core$Json_Decode$int),
			_1: {ctor: '[]'}
		}
	});
var _Gizra$elm_essentials$Gizra_Json$decodeInt = _elm_lang$core$Json_Decode$oneOf(
	{
		ctor: '::',
		_0: _elm_lang$core$Json_Decode$int,
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$core$Json_Decode$andThen,
				function (s) {
					var _p2 = _elm_lang$core$String$toInt(s);
					if (_p2.ctor === 'Ok') {
						return _elm_lang$core$Json_Decode$succeed(_p2._0);
					} else {
						return _elm_lang$core$Json_Decode$fail(_p2._0);
					}
				},
				_elm_lang$core$Json_Decode$string),
			_1: {ctor: '[]'}
		}
	});
var _Gizra$elm_essentials$Gizra_Json$decodeIntDict = _elm_community$json_extra$Json_Decode_Extra$dict2(_Gizra$elm_essentials$Gizra_Json$decodeInt);
var _Gizra$elm_essentials$Gizra_Json$encodeAnyDict = F2(
	function (keyFunc, valueFunc) {
		return function (_p3) {
			return _elm_lang$core$Json_Encode$object(
				A2(
					_elm_lang$core$List$map,
					function (_p4) {
						var _p5 = _p4;
						return {
							ctor: '_Tuple2',
							_0: keyFunc(_p5._0),
							_1: valueFunc(_p5._1)
						};
					},
					_elm_lang$core$Dict$toList(_p3)));
		};
	});
var _Gizra$elm_essentials$Gizra_Json$encodeDict = _Gizra$elm_essentials$Gizra_Json$encodeAnyDict(_elm_lang$core$Basics$identity);

var _ccapndave$elm_update_extra$Update_Extra$identity = function (model) {
	return A2(
		_elm_lang$core$Platform_Cmd_ops['!'],
		model,
		{ctor: '[]'});
};
var _ccapndave$elm_update_extra$Update_Extra$mapCmd = F2(
	function (tagger, _p0) {
		var _p1 = _p0;
		return {
			ctor: '_Tuple2',
			_0: _p1._0,
			_1: A2(_elm_lang$core$Platform_Cmd$map, tagger, _p1._1)
		};
	});
var _ccapndave$elm_update_extra$Update_Extra$addCmd = F2(
	function (cmd_, _p2) {
		var _p3 = _p2;
		return {
			ctor: '_Tuple2',
			_0: _p3._0,
			_1: _elm_lang$core$Platform_Cmd$batch(
				{
					ctor: '::',
					_0: _p3._1,
					_1: {
						ctor: '::',
						_0: cmd_,
						_1: {ctor: '[]'}
					}
				})
		};
	});
var _ccapndave$elm_update_extra$Update_Extra$updateModel = F2(
	function (f, _p4) {
		var _p5 = _p4;
		return {
			ctor: '_Tuple2',
			_0: f(_p5._0),
			_1: _p5._1
		};
	});
var _ccapndave$elm_update_extra$Update_Extra$filter = F2(
	function (pred, f) {
		return pred ? f : _elm_lang$core$Basics$identity;
	});
var _ccapndave$elm_update_extra$Update_Extra$andThen = F3(
	function (update, msg, _p6) {
		var _p7 = _p6;
		var _p8 = A2(update, msg, _p7._0);
		var model_ = _p8._0;
		var cmd_ = _p8._1;
		return {
			ctor: '_Tuple2',
			_0: model_,
			_1: _elm_lang$core$Platform_Cmd$batch(
				{
					ctor: '::',
					_0: _p7._1,
					_1: {
						ctor: '::',
						_0: cmd_,
						_1: {ctor: '[]'}
					}
				})
		};
	});
var _ccapndave$elm_update_extra$Update_Extra$sequence = F3(
	function (update, msgs, init) {
		var foldUpdate = _ccapndave$elm_update_extra$Update_Extra$andThen(update);
		return A3(_elm_lang$core$List$foldl, foldUpdate, init, msgs);
	});

var _lukewestby$elm_http_builder$HttpBuilder$replace = F2(
	function (old, $new) {
		return function (_p0) {
			return A2(
				_elm_lang$core$String$join,
				$new,
				A2(_elm_lang$core$String$split, old, _p0));
		};
	});
var _lukewestby$elm_http_builder$HttpBuilder$queryEscape = function (_p1) {
	return A3(
		_lukewestby$elm_http_builder$HttpBuilder$replace,
		'%20',
		'+',
		_elm_lang$http$Http$encodeUri(_p1));
};
var _lukewestby$elm_http_builder$HttpBuilder$queryPair = function (_p2) {
	var _p3 = _p2;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_lukewestby$elm_http_builder$HttpBuilder$queryEscape(_p3._0),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'=',
			_lukewestby$elm_http_builder$HttpBuilder$queryEscape(_p3._1)));
};
var _lukewestby$elm_http_builder$HttpBuilder$joinUrlEncoded = function (args) {
	return A2(
		_elm_lang$core$String$join,
		'&',
		A2(_elm_lang$core$List$map, _lukewestby$elm_http_builder$HttpBuilder$queryPair, args));
};
var _lukewestby$elm_http_builder$HttpBuilder$toRequest = function (builder) {
	var encodedParams = _lukewestby$elm_http_builder$HttpBuilder$joinUrlEncoded(builder.queryParams);
	var fullUrl = _elm_lang$core$String$isEmpty(encodedParams) ? builder.url : A2(
		_elm_lang$core$Basics_ops['++'],
		builder.url,
		A2(_elm_lang$core$Basics_ops['++'], '?', encodedParams));
	return _elm_lang$http$Http$request(
		{method: builder.method, url: fullUrl, headers: builder.headers, body: builder.body, expect: builder.expect, timeout: builder.timeout, withCredentials: builder.withCredentials});
};
var _lukewestby$elm_http_builder$HttpBuilder$toTaskPlain = function (builder) {
	return _elm_lang$http$Http$toTask(
		_lukewestby$elm_http_builder$HttpBuilder$toRequest(builder));
};
var _lukewestby$elm_http_builder$HttpBuilder$withCacheBuster = F2(
	function (paramName, builder) {
		return _elm_lang$core$Native_Utils.update(
			builder,
			{
				cacheBuster: _elm_lang$core$Maybe$Just(paramName)
			});
	});
var _lukewestby$elm_http_builder$HttpBuilder$withQueryParams = F2(
	function (queryParams, builder) {
		return _elm_lang$core$Native_Utils.update(
			builder,
			{
				queryParams: A2(_elm_lang$core$Basics_ops['++'], builder.queryParams, queryParams)
			});
	});
var _lukewestby$elm_http_builder$HttpBuilder$toTaskWithCacheBuster = F2(
	function (paramName, builder) {
		var request = function (timestamp) {
			return _lukewestby$elm_http_builder$HttpBuilder$toTaskPlain(
				A2(
					_lukewestby$elm_http_builder$HttpBuilder$withQueryParams,
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: paramName,
							_1: _elm_lang$core$Basics$toString(timestamp)
						},
						_1: {ctor: '[]'}
					},
					builder));
		};
		return A2(_elm_lang$core$Task$andThen, request, _elm_lang$core$Time$now);
	});
var _lukewestby$elm_http_builder$HttpBuilder$toTask = function (builder) {
	var _p4 = builder.cacheBuster;
	if (_p4.ctor === 'Just') {
		return A2(_lukewestby$elm_http_builder$HttpBuilder$toTaskWithCacheBuster, _p4._0, builder);
	} else {
		return _lukewestby$elm_http_builder$HttpBuilder$toTaskPlain(builder);
	}
};
var _lukewestby$elm_http_builder$HttpBuilder$send = F2(
	function (tagger, builder) {
		return A2(
			_elm_lang$core$Task$attempt,
			tagger,
			_lukewestby$elm_http_builder$HttpBuilder$toTask(builder));
	});
var _lukewestby$elm_http_builder$HttpBuilder$withExpectString = function (builder) {
	return _elm_lang$core$Native_Utils.update(
		builder,
		{expect: _elm_lang$http$Http$expectString});
};
var _lukewestby$elm_http_builder$HttpBuilder$withExpectJson = F2(
	function (decoder, builder) {
		return _elm_lang$core$Native_Utils.update(
			builder,
			{
				expect: _elm_lang$http$Http$expectJson(decoder)
			});
	});
var _lukewestby$elm_http_builder$HttpBuilder$withExpect = F2(
	function (expect, builder) {
		return _elm_lang$core$Native_Utils.update(
			builder,
			{expect: expect});
	});
var _lukewestby$elm_http_builder$HttpBuilder$withCredentials = function (builder) {
	return _elm_lang$core$Native_Utils.update(
		builder,
		{withCredentials: true});
};
var _lukewestby$elm_http_builder$HttpBuilder$withTimeout = F2(
	function (timeout, builder) {
		return _elm_lang$core$Native_Utils.update(
			builder,
			{
				timeout: _elm_lang$core$Maybe$Just(timeout)
			});
	});
var _lukewestby$elm_http_builder$HttpBuilder$withBody = F2(
	function (body, builder) {
		return _elm_lang$core$Native_Utils.update(
			builder,
			{body: body});
	});
var _lukewestby$elm_http_builder$HttpBuilder$withStringBody = F2(
	function (contentType, value) {
		return _lukewestby$elm_http_builder$HttpBuilder$withBody(
			A2(_elm_lang$http$Http$stringBody, contentType, value));
	});
var _lukewestby$elm_http_builder$HttpBuilder$withUrlEncodedBody = function (_p5) {
	return A2(
		_lukewestby$elm_http_builder$HttpBuilder$withStringBody,
		'application/x-www-form-urlencoded',
		_lukewestby$elm_http_builder$HttpBuilder$joinUrlEncoded(_p5));
};
var _lukewestby$elm_http_builder$HttpBuilder$withJsonBody = function (value) {
	return _lukewestby$elm_http_builder$HttpBuilder$withBody(
		_elm_lang$http$Http$jsonBody(value));
};
var _lukewestby$elm_http_builder$HttpBuilder$withMultipartStringBody = function (partPairs) {
	return _lukewestby$elm_http_builder$HttpBuilder$withBody(
		_elm_lang$http$Http$multipartBody(
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Basics$uncurry(_elm_lang$http$Http$stringPart),
				partPairs)));
};
var _lukewestby$elm_http_builder$HttpBuilder$withBearerToken = F2(
	function (value, builder) {
		return _elm_lang$core$Native_Utils.update(
			builder,
			{
				headers: {
					ctor: '::',
					_0: A2(
						_elm_lang$http$Http$header,
						'Authorization',
						A2(_elm_lang$core$Basics_ops['++'], 'Bearer ', value)),
					_1: builder.headers
				}
			});
	});
var _lukewestby$elm_http_builder$HttpBuilder$withHeaders = F2(
	function (headerPairs, builder) {
		return _elm_lang$core$Native_Utils.update(
			builder,
			{
				headers: A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_elm_lang$core$List$map,
						_elm_lang$core$Basics$uncurry(_elm_lang$http$Http$header),
						headerPairs),
					builder.headers)
			});
	});
var _lukewestby$elm_http_builder$HttpBuilder$withHeader = F3(
	function (key, value, builder) {
		return _elm_lang$core$Native_Utils.update(
			builder,
			{
				headers: {
					ctor: '::',
					_0: A2(_elm_lang$http$Http$header, key, value),
					_1: builder.headers
				}
			});
	});
var _lukewestby$elm_http_builder$HttpBuilder$requestWithMethodAndUrl = F2(
	function (method, url) {
		return {
			method: method,
			url: url,
			headers: {ctor: '[]'},
			body: _elm_lang$http$Http$emptyBody,
			expect: _elm_lang$http$Http$expectStringResponse(
				function (_p6) {
					return _elm_lang$core$Result$Ok(
						{ctor: '_Tuple0'});
				}),
			timeout: _elm_lang$core$Maybe$Nothing,
			withCredentials: false,
			queryParams: {ctor: '[]'},
			cacheBuster: _elm_lang$core$Maybe$Nothing
		};
	});
var _lukewestby$elm_http_builder$HttpBuilder$get = _lukewestby$elm_http_builder$HttpBuilder$requestWithMethodAndUrl('GET');
var _lukewestby$elm_http_builder$HttpBuilder$post = _lukewestby$elm_http_builder$HttpBuilder$requestWithMethodAndUrl('POST');
var _lukewestby$elm_http_builder$HttpBuilder$put = _lukewestby$elm_http_builder$HttpBuilder$requestWithMethodAndUrl('PUT');
var _lukewestby$elm_http_builder$HttpBuilder$patch = _lukewestby$elm_http_builder$HttpBuilder$requestWithMethodAndUrl('PATCH');
var _lukewestby$elm_http_builder$HttpBuilder$delete = _lukewestby$elm_http_builder$HttpBuilder$requestWithMethodAndUrl('DELETE');
var _lukewestby$elm_http_builder$HttpBuilder$options = _lukewestby$elm_http_builder$HttpBuilder$requestWithMethodAndUrl('OPTIONS');
var _lukewestby$elm_http_builder$HttpBuilder$trace = _lukewestby$elm_http_builder$HttpBuilder$requestWithMethodAndUrl('TRACE');
var _lukewestby$elm_http_builder$HttpBuilder$head = _lukewestby$elm_http_builder$HttpBuilder$requestWithMethodAndUrl('HEAD');
var _lukewestby$elm_http_builder$HttpBuilder$RequestBuilder = F9(
	function (a, b, c, d, e, f, g, h, i) {
		return {method: a, headers: b, url: c, body: d, expect: e, timeout: f, withCredentials: g, queryParams: h, cacheBuster: i};
	});

var _Gizra$elm_essentials$Gizra_WebData$resetError = function (data) {
	var _p0 = data;
	if (_p0.ctor === 'Failure') {
		return _krisajenkins$remotedata$RemoteData$NotAsked;
	} else {
		return data;
	}
};
var _Gizra$elm_essentials$Gizra_WebData$whenNotAsked = F2(
	function (msg, data) {
		var _p1 = data;
		if (_p1.ctor === 'NotAsked') {
			return _elm_lang$core$Maybe$Just(msg);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _Gizra$elm_essentials$Gizra_WebData$sendWithHandler = F3(
	function (decoder, tagger, builder) {
		return A2(
			_elm_lang$core$Platform_Cmd$map,
			tagger,
			_krisajenkins$remotedata$RemoteData$asCmd(
				_lukewestby$elm_http_builder$HttpBuilder$toTask(
					A2(
						_lukewestby$elm_http_builder$HttpBuilder$withExpect,
						_elm_lang$http$Http$expectJson(decoder),
						builder))));
	});

var _elm_lang$core$Native_Bitwise = function() {

return {
	and: F2(function and(a, b) { return a & b; }),
	or: F2(function or(a, b) { return a | b; }),
	xor: F2(function xor(a, b) { return a ^ b; }),
	complement: function complement(a) { return ~a; },
	shiftLeftBy: F2(function(offset, a) { return a << offset; }),
	shiftRightBy: F2(function(offset, a) { return a >> offset; }),
	shiftRightZfBy: F2(function(offset, a) { return a >>> offset; })
};

}();

var _elm_lang$core$Bitwise$shiftRightZfBy = _elm_lang$core$Native_Bitwise.shiftRightZfBy;
var _elm_lang$core$Bitwise$shiftRightBy = _elm_lang$core$Native_Bitwise.shiftRightBy;
var _elm_lang$core$Bitwise$shiftLeftBy = _elm_lang$core$Native_Bitwise.shiftLeftBy;
var _elm_lang$core$Bitwise$complement = _elm_lang$core$Native_Bitwise.complement;
var _elm_lang$core$Bitwise$xor = _elm_lang$core$Native_Bitwise.xor;
var _elm_lang$core$Bitwise$or = _elm_lang$core$Native_Bitwise.or;
var _elm_lang$core$Bitwise$and = _elm_lang$core$Native_Bitwise.and;

var _Gizra$elm_restful$Restful_Endpoint$fromEntityUuid = function (_p0) {
	var _p1 = _p0;
	return _p1._0;
};
var _Gizra$elm_restful$Restful_Endpoint$encodeEntityUuid = function (_p2) {
	return _elm_lang$core$Json_Encode$string(
		_Gizra$elm_restful$Restful_Endpoint$fromEntityUuid(_p2));
};
var _Gizra$elm_restful$Restful_Endpoint$fromEntityId = function (_p3) {
	var _p4 = _p3;
	return _p4._0;
};
var _Gizra$elm_restful$Restful_Endpoint$encodeEntityId = function (_p5) {
	return _elm_lang$core$Json_Encode$int(
		_Gizra$elm_restful$Restful_Endpoint$fromEntityId(_p5));
};
var _Gizra$elm_restful$Restful_Endpoint$decodeDrupalData = _elm_lang$core$Json_Decode$field('data');
var _Gizra$elm_restful$Restful_Endpoint$decodeSingleDrupalEntity = function (_p6) {
	return _Gizra$elm_restful$Restful_Endpoint$decodeDrupalData(
		A2(_elm_lang$core$Json_Decode$index, 0, _p6));
};
var _Gizra$elm_restful$Restful_Endpoint$decodeDrupalList = function (_p7) {
	return _Gizra$elm_restful$Restful_Endpoint$decodeDrupalData(
		_elm_lang$core$Json_Decode$list(_p7));
};
var _Gizra$elm_restful$Restful_Endpoint$decodeDrupalId = function (wrapper) {
	return A2(
		_elm_lang$core$Json_Decode$map,
		wrapper,
		A2(_elm_lang$core$Json_Decode$field, 'id', _Gizra$elm_essentials$Gizra_Json$decodeInt));
};
var _Gizra$elm_restful$Restful_Endpoint$withOffsetAndRange = F3(
	function (backend, offset, range) {
		var rangeParam = A2(
			_elm_lang$core$Maybe$map,
			function (r) {
				return {
					ctor: '_Tuple2',
					_0: backend.rangeParam,
					_1: _elm_lang$core$Basics$toString(r)
				};
			},
			range);
		var offsetParam = _elm_lang$core$Native_Utils.eq(offset, 0) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
			{
				ctor: '_Tuple2',
				_0: backend.offsetParam,
				_1: _elm_lang$core$Basics$toString(offset)
			});
		return _lukewestby$elm_http_builder$HttpBuilder$withQueryParams(
			A2(
				_elm_lang$core$List$filterMap,
				_elm_lang$core$Basics$identity,
				{
					ctor: '::',
					_0: offsetParam,
					_1: {
						ctor: '::',
						_0: rangeParam,
						_1: {ctor: '[]'}
					}
				}));
	});
var _Gizra$elm_restful$Restful_Endpoint$toTaskMaybe = function (_p8) {
	var _p9 = _p8;
	var _p11 = _p9._0;
	return A2(
		_elm_lang$core$Task$onError,
		function (err) {
			var _p10 = err;
			if (_p10.ctor === 'BadStatus') {
				return _elm_lang$core$Native_Utils.eq(_p10._0.status.code, 404) ? _elm_lang$core$Task$succeed(_elm_lang$core$Maybe$Nothing) : _elm_lang$core$Task$fail(
					_p11(err));
			} else {
				return _elm_lang$core$Task$fail(
					_p11(err));
			}
		},
		A2(
			_elm_lang$core$Task$map,
			_elm_lang$core$Maybe$Just,
			_lukewestby$elm_http_builder$HttpBuilder$toTask(_p9._2)));
};
var _Gizra$elm_restful$Restful_Endpoint$toTask = function (_p12) {
	var _p13 = _p12;
	return A2(
		_elm_lang$core$Task$mapError,
		_p13._0,
		_lukewestby$elm_http_builder$HttpBuilder$toTask(_p13._2));
};
var _Gizra$elm_restful$Restful_Endpoint$toCmdMaybe = F2(
	function (tagger, request) {
		return A2(
			_elm_lang$core$Task$attempt,
			tagger,
			_Gizra$elm_restful$Restful_Endpoint$toTaskMaybe(request));
	});
var _Gizra$elm_restful$Restful_Endpoint$toCmd = F2(
	function (tagger, request) {
		return A2(
			_elm_lang$core$Task$attempt,
			tagger,
			_Gizra$elm_restful$Restful_Endpoint$toTask(request));
	});
var _Gizra$elm_restful$Restful_Endpoint$expectSingleWithKey = F2(
	function (_p14, key) {
		var _p15 = _p14;
		var _p16 = _p15._0;
		return _lukewestby$elm_http_builder$HttpBuilder$withExpect(
			_elm_lang$http$Http$expectJson(
				A2(
					_elm_lang$core$Json_Decode$map,
					_elm_lang$core$Tuple$second,
					_p16.backend.decodeSingleItem(
						A3(
							_elm_lang$core$Json_Decode$map2,
							F2(
								function (v0, v1) {
									return {ctor: '_Tuple2', _0: v0, _1: v1};
								}),
							_elm_lang$core$Json_Decode$succeed(key),
							_p16.decodeValue)))));
	});
var _Gizra$elm_restful$Restful_Endpoint$expectSingle = function (_p17) {
	var _p18 = _p17;
	var _p19 = _p18._0;
	return _lukewestby$elm_http_builder$HttpBuilder$withExpect(
		_elm_lang$http$Http$expectJson(
			_p19.backend.decodeSingleItem(
				A3(
					_elm_lang$core$Json_Decode$map2,
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						}),
					_p19.decodeKey,
					_p19.decodeValue))));
};
var _Gizra$elm_restful$Restful_Endpoint$decodeItemList = function (_p20) {
	var _p21 = _p20;
	var _p22 = _p21._0;
	return _p22.backend.decodeMultipleItems(
		A3(
			_elm_lang$core$Json_Decode$map2,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			_p22.decodeKey,
			_p22.decodeValue));
};
var _Gizra$elm_restful$Restful_Endpoint$expectMany = function (_p23) {
	var _p24 = _p23;
	return _lukewestby$elm_http_builder$HttpBuilder$withExpect(
		_elm_lang$http$Http$expectJson(
			_Gizra$elm_restful$Restful_Endpoint$decodeItemList(_p24)));
};
var _Gizra$elm_restful$Restful_Endpoint_ops = _Gizra$elm_restful$Restful_Endpoint_ops || {};
_Gizra$elm_restful$Restful_Endpoint_ops['</>'] = F2(
	function (left, right) {
		if (_elm_lang$core$String$isEmpty(left)) {
			return right;
		} else {
			if (_elm_lang$core$String$isEmpty(right)) {
				return left;
			} else {
				var _p25 = {
					ctor: '_Tuple2',
					_0: A2(_elm_lang$core$String$endsWith, '/', left),
					_1: A2(_elm_lang$core$String$startsWith, '/', right)
				};
				_v9_2:
				do {
					if (_p25.ctor === '_Tuple2') {
						if (_p25._0 === false) {
							if (_p25._1 === false) {
								return A2(
									_elm_lang$core$Basics_ops['++'],
									left,
									A2(_elm_lang$core$Basics_ops['++'], '/', right));
							} else {
								break _v9_2;
							}
						} else {
							if (_p25._1 === true) {
								return A2(
									_elm_lang$core$Basics_ops['++'],
									left,
									A2(_elm_lang$core$String$dropLeft, 1, right));
							} else {
								break _v9_2;
							}
						}
					} else {
						break _v9_2;
					}
				} while(false);
				return A2(_elm_lang$core$Basics_ops['++'], left, right);
			}
		}
	});
var _Gizra$elm_restful$Restful_Endpoint$urlForKey = F3(
	function (backendUrl, _p26, key) {
		var _p27 = _p26;
		var _p28 = _p27._0;
		return A2(
			_Gizra$elm_restful$Restful_Endpoint_ops['</>'],
			A2(_Gizra$elm_restful$Restful_Endpoint_ops['</>'], backendUrl, _p28.path),
			_p28.keyToUrlPart(key));
	});
var _Gizra$elm_restful$Restful_Endpoint$urlForManyKeys = F3(
	function (backendUrl, _p29, keys) {
		var _p30 = _p29;
		var _p31 = _p30._0;
		var ids = _p31.backend.manyKeys(
			A2(_elm_lang$core$List$map, _p31.keyToUrlPart, keys));
		return A2(
			_Gizra$elm_restful$Restful_Endpoint_ops['</>'],
			A2(_Gizra$elm_restful$Restful_Endpoint_ops['</>'], backendUrl, _p31.path),
			ids);
	});
var _Gizra$elm_restful$Restful_Endpoint$encodeEmptyObject = function (a) {
	return _elm_lang$core$Json_Encode$object(
		{ctor: '[]'});
};
var _Gizra$elm_restful$Restful_Endpoint$encodeEmptyParams = function (p) {
	return {ctor: '[]'};
};
var _Gizra$elm_restful$Restful_Endpoint$decodeDrupalCount = A2(_elm_lang$core$Json_Decode$field, 'count', _Gizra$elm_essentials$Gizra_Json$decodeInt);
var _Gizra$elm_restful$Restful_Endpoint$unwrapBackend = function (_p32) {
	var _p33 = _p32;
	return _p33._0;
};
var _Gizra$elm_restful$Restful_Endpoint$EndPointRec = F9(
	function (a, b, c, d, e, f, g, h, i) {
		return {backend: a, decodeKey: b, decodeValue: c, encodeCreatedValue: d, encodeParams: e, encodeValue: f, keyToUrlPart: g, mapError: h, path: i};
	});
var _Gizra$elm_restful$Restful_Endpoint$BackendRec = F7(
	function (a, b, c, d, e, f, g) {
		return {decodeCount: a, decodeMultipleItems: b, decodeSingleItem: c, manyKeys: d, offsetParam: e, rangeParam: f, tokenStrategy: g};
	});
var _Gizra$elm_restful$Restful_Endpoint$QueryResult = F4(
	function (a, b, c, d) {
		return {params: a, offset: b, items: c, count: d};
	});
var _Gizra$elm_restful$Restful_Endpoint$expectMultiple = F3(
	function (_p34, params, offset) {
		var _p35 = _p34;
		return _lukewestby$elm_http_builder$HttpBuilder$withExpect(
			_elm_lang$http$Http$expectJson(
				A3(
					_elm_lang$core$Json_Decode$map2,
					A2(_Gizra$elm_restful$Restful_Endpoint$QueryResult, params, offset),
					_Gizra$elm_restful$Restful_Endpoint$decodeItemList(_p35),
					_p35._0.backend.decodeCount)));
	});
var _Gizra$elm_restful$Restful_Endpoint$CrudOperations = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {$delete: a, get: b, getMany: c, patch: d, patchAny: e, patchFull: f, post: g, put: h, select: i, selectRange: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _Gizra$elm_restful$Restful_Endpoint$ReadOnly = {ctor: 'ReadOnly'};
var _Gizra$elm_restful$Restful_Endpoint$ReadWrite = {ctor: 'ReadWrite'};
var _Gizra$elm_restful$Restful_Endpoint$EndPoint = function (a) {
	return {ctor: 'EndPoint', _0: a};
};
var _Gizra$elm_restful$Restful_Endpoint$withBackend = F2(
	function (_p37, _p36) {
		var _p38 = _p37;
		var _p39 = _p36;
		return _Gizra$elm_restful$Restful_Endpoint$EndPoint(
			_elm_lang$core$Native_Utils.update(
				_p39._0,
				{backend: _p38._0}));
	});
var _Gizra$elm_restful$Restful_Endpoint$withParamsEncoder = F2(
	function (encodeParams, _p40) {
		var _p41 = _p40;
		return _Gizra$elm_restful$Restful_Endpoint$EndPoint(
			_elm_lang$core$Native_Utils.update(
				_p41._0,
				{encodeParams: encodeParams}));
	});
var _Gizra$elm_restful$Restful_Endpoint$withKeyEncoder = F2(
	function (keyToUrlPart, _p42) {
		var _p43 = _p42;
		return _Gizra$elm_restful$Restful_Endpoint$EndPoint(
			_elm_lang$core$Native_Utils.update(
				_p43._0,
				{keyToUrlPart: keyToUrlPart}));
	});
var _Gizra$elm_restful$Restful_Endpoint$withValueEncoder = F2(
	function (encodeValue, _p44) {
		var _p45 = _p44;
		return _Gizra$elm_restful$Restful_Endpoint$EndPoint(
			_elm_lang$core$Native_Utils.update(
				_p45._0,
				{encodeValue: encodeValue, encodeCreatedValue: encodeValue}));
	});
var _Gizra$elm_restful$Restful_Endpoint$withCreatedEncoder = F2(
	function (encodeCreatedValue, _p46) {
		var _p47 = _p46;
		return _Gizra$elm_restful$Restful_Endpoint$EndPoint(
			_elm_lang$core$Native_Utils.update(
				_p47._0,
				{encodeCreatedValue: encodeCreatedValue}));
	});
var _Gizra$elm_restful$Restful_Endpoint$withErrorDecoder = F2(
	function (mapError, _p48) {
		var _p49 = _p48;
		return _Gizra$elm_restful$Restful_Endpoint$EndPoint(
			_elm_lang$core$Native_Utils.update(
				_p49._0,
				{mapError: mapError}));
	});
var _Gizra$elm_restful$Restful_Endpoint$withPath = F2(
	function (path, _p50) {
		var _p51 = _p50;
		return _Gizra$elm_restful$Restful_Endpoint$EndPoint(
			_elm_lang$core$Native_Utils.update(
				_p51._0,
				{path: path}));
	});
var _Gizra$elm_restful$Restful_Endpoint$endpoint = F4(
	function (path, decodeKey, decodeValue, backend) {
		return _Gizra$elm_restful$Restful_Endpoint$EndPoint(
			{
				backend: _Gizra$elm_restful$Restful_Endpoint$unwrapBackend(backend),
				decodeKey: decodeKey,
				decodeValue: decodeValue,
				encodeCreatedValue: _Gizra$elm_restful$Restful_Endpoint$encodeEmptyObject,
				encodeParams: _Gizra$elm_restful$Restful_Endpoint$encodeEmptyParams,
				encodeValue: _Gizra$elm_restful$Restful_Endpoint$encodeEmptyObject,
				keyToUrlPart: _elm_lang$core$Basics$toString,
				mapError: _elm_lang$core$Basics$identity,
				path: path
			});
	});
var _Gizra$elm_restful$Restful_Endpoint$Backend = function (a) {
	return {ctor: 'Backend', _0: a};
};
var _Gizra$elm_restful$Restful_Endpoint$withItems = F3(
	function (decodeSingleItem, decodeMultipleItems, _p52) {
		var _p53 = _p52;
		return _Gizra$elm_restful$Restful_Endpoint$Backend(
			_elm_lang$core$Native_Utils.update(
				_p53._0,
				{decodeSingleItem: decodeSingleItem, decodeMultipleItems: decodeMultipleItems}));
	});
var _Gizra$elm_restful$Restful_Endpoint$withDrupalItems = A2(_Gizra$elm_restful$Restful_Endpoint$withItems, _Gizra$elm_restful$Restful_Endpoint$decodeSingleDrupalEntity, _Gizra$elm_restful$Restful_Endpoint$decodeDrupalList);
var _Gizra$elm_restful$Restful_Endpoint$withPlainItems = A2(_Gizra$elm_restful$Restful_Endpoint$withItems, _elm_lang$core$Basics$identity, _elm_lang$core$Json_Decode$list);
var _Gizra$elm_restful$Restful_Endpoint$withManyKeys = F2(
	function (manyKeys, _p54) {
		var _p55 = _p54;
		return _Gizra$elm_restful$Restful_Endpoint$Backend(
			_elm_lang$core$Native_Utils.update(
				_p55._0,
				{manyKeys: manyKeys}));
	});
var _Gizra$elm_restful$Restful_Endpoint$withCountDecoder = F2(
	function (decodeCount, _p56) {
		var _p57 = _p56;
		return _Gizra$elm_restful$Restful_Endpoint$Backend(
			_elm_lang$core$Native_Utils.update(
				_p57._0,
				{decodeCount: decodeCount}));
	});
var _Gizra$elm_restful$Restful_Endpoint$withDrupalCountDecoder = _Gizra$elm_restful$Restful_Endpoint$withCountDecoder(_Gizra$elm_restful$Restful_Endpoint$decodeDrupalCount);
var _Gizra$elm_restful$Restful_Endpoint$withOffsetParam = F2(
	function (offsetParam, _p58) {
		var _p59 = _p58;
		return _Gizra$elm_restful$Restful_Endpoint$Backend(
			_elm_lang$core$Native_Utils.update(
				_p59._0,
				{offsetParam: offsetParam}));
	});
var _Gizra$elm_restful$Restful_Endpoint$withRangeParam = F2(
	function (rangeParam, _p60) {
		var _p61 = _p60;
		return _Gizra$elm_restful$Restful_Endpoint$Backend(
			_elm_lang$core$Native_Utils.update(
				_p61._0,
				{rangeParam: rangeParam}));
	});
var _Gizra$elm_restful$Restful_Endpoint$withTokenStrategy = F2(
	function (tokenStrategy, _p62) {
		var _p63 = _p62;
		return _Gizra$elm_restful$Restful_Endpoint$Backend(
			_elm_lang$core$Native_Utils.update(
				_p63._0,
				{tokenStrategy: tokenStrategy}));
	});
var _Gizra$elm_restful$Restful_Endpoint$TokenUrlParam = function (a) {
	return {ctor: 'TokenUrlParam', _0: a};
};
var _Gizra$elm_restful$Restful_Endpoint$tokenUrlParam = _Gizra$elm_restful$Restful_Endpoint$TokenUrlParam;
var _Gizra$elm_restful$Restful_Endpoint$backend = _Gizra$elm_restful$Restful_Endpoint$Backend(
	{
		decodeSingleItem: _elm_lang$core$Basics$identity,
		decodeMultipleItems: _elm_lang$core$Json_Decode$list,
		decodeCount: _Gizra$elm_restful$Restful_Endpoint$decodeDrupalCount,
		manyKeys: _elm_lang$core$String$join(','),
		offsetParam: 'offset',
		rangeParam: 'range',
		tokenStrategy: _Gizra$elm_restful$Restful_Endpoint$tokenUrlParam('access_token')
	});
var _Gizra$elm_restful$Restful_Endpoint$drupalBackend = _Gizra$elm_restful$Restful_Endpoint$withDrupalItems(_Gizra$elm_restful$Restful_Endpoint$backend);
var _Gizra$elm_restful$Restful_Endpoint$TokenHeader = function (a) {
	return {ctor: 'TokenHeader', _0: a};
};
var _Gizra$elm_restful$Restful_Endpoint$tokenHeader = _Gizra$elm_restful$Restful_Endpoint$TokenHeader;
var _Gizra$elm_restful$Restful_Endpoint$CrudRequest = F3(
	function (a, b, c) {
		return {ctor: 'CrudRequest', _0: a, _1: b, _2: c};
	});
var _Gizra$elm_restful$Restful_Endpoint$modifyRequest = F2(
	function (func, _p64) {
		var _p65 = _p64;
		return A3(
			_Gizra$elm_restful$Restful_Endpoint$CrudRequest,
			_p65._0,
			_p65._1,
			func(_p65._2));
	});
var _Gizra$elm_restful$Restful_Endpoint$withAccessToken = F2(
	function (token, _p66) {
		var _p67 = _p66;
		var func = function () {
			var _p68 = _p67._1;
			if (_p68.ctor === 'TokenHeader') {
				return A2(_lukewestby$elm_http_builder$HttpBuilder$withHeader, _p68._0, token);
			} else {
				return _lukewestby$elm_http_builder$HttpBuilder$withQueryParams(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: _p68._0, _1: token},
						_1: {ctor: '[]'}
					});
			}
		}();
		return A2(_Gizra$elm_restful$Restful_Endpoint$modifyRequest, func, _p67);
	});
var _Gizra$elm_restful$Restful_Endpoint$applyAccessToken = F2(
	function (accessToken, ops) {
		var addAccessToken = _Gizra$elm_restful$Restful_Endpoint$withAccessToken(accessToken);
		var apply2 = F2(
			function (func, a) {
				return function (_p69) {
					return addAccessToken(
						A2(func, a, _p69));
				};
			});
		var apply3 = F3(
			function (func, a, b) {
				return function (_p70) {
					return addAccessToken(
						A3(func, a, b, _p70));
				};
			});
		var apply4 = F4(
			function (func, a, b, c) {
				return function (_p71) {
					return addAccessToken(
						A4(func, a, b, c, _p71));
				};
			});
		return {
			$delete: apply2(ops.$delete),
			get: apply2(ops.get),
			getMany: apply2(ops.getMany),
			patch: apply4(ops.patch),
			patchAny: apply3(ops.patchAny),
			patchFull: apply3(ops.patchFull),
			post: apply2(ops.post),
			put: apply3(ops.put),
			select: apply2(ops.select),
			selectRange: apply4(ops.selectRange)
		};
	});
var _Gizra$elm_restful$Restful_Endpoint$withoutDecoder = _Gizra$elm_restful$Restful_Endpoint$modifyRequest(
	_lukewestby$elm_http_builder$HttpBuilder$withExpect(
		_elm_lang$http$Http$expectJson(
			_elm_lang$core$Json_Decode$succeed(
				{ctor: '_Tuple0'}))));
var _Gizra$elm_restful$Restful_Endpoint$select = F3(
	function (backendUrl, _p72, params) {
		var _p73 = _p72;
		var _p74 = _p73._0;
		return A3(
			_Gizra$elm_restful$Restful_Endpoint$CrudRequest,
			_p74.mapError,
			_p74.backend.tokenStrategy,
			A4(
				_Gizra$elm_restful$Restful_Endpoint$expectMultiple,
				_p73,
				params,
				0,
				A2(
					_lukewestby$elm_http_builder$HttpBuilder$withQueryParams,
					_p74.encodeParams(params),
					_lukewestby$elm_http_builder$HttpBuilder$get(
						A2(_Gizra$elm_restful$Restful_Endpoint_ops['</>'], backendUrl, _p74.path)))));
	});
var _Gizra$elm_restful$Restful_Endpoint$selectRange = F5(
	function (backendUrl, _p75, params, offset, range) {
		var _p76 = _p75;
		var _p77 = _p76._0;
		return A3(
			_Gizra$elm_restful$Restful_Endpoint$CrudRequest,
			_p77.mapError,
			_p77.backend.tokenStrategy,
			A4(
				_Gizra$elm_restful$Restful_Endpoint$expectMultiple,
				_p76,
				params,
				offset,
				A4(
					_Gizra$elm_restful$Restful_Endpoint$withOffsetAndRange,
					_p77.backend,
					offset,
					range,
					A2(
						_lukewestby$elm_http_builder$HttpBuilder$withQueryParams,
						_p77.encodeParams(params),
						_lukewestby$elm_http_builder$HttpBuilder$get(
							A2(_Gizra$elm_restful$Restful_Endpoint_ops['</>'], backendUrl, _p77.path))))));
	});
var _Gizra$elm_restful$Restful_Endpoint$get = F3(
	function (backendUrl, _p78, key) {
		var _p79 = _p78;
		var _p81 = _p79;
		var _p80 = _p79._0;
		return A3(
			_Gizra$elm_restful$Restful_Endpoint$CrudRequest,
			_p80.mapError,
			_p80.backend.tokenStrategy,
			A3(
				_Gizra$elm_restful$Restful_Endpoint$expectSingleWithKey,
				_p81,
				key,
				_lukewestby$elm_http_builder$HttpBuilder$get(
					A3(_Gizra$elm_restful$Restful_Endpoint$urlForKey, backendUrl, _p81, key))));
	});
var _Gizra$elm_restful$Restful_Endpoint$getMany = F3(
	function (backendUrl, _p82, keys) {
		var _p83 = _p82;
		var _p85 = _p83;
		var _p84 = _p83._0;
		return A3(
			_Gizra$elm_restful$Restful_Endpoint$CrudRequest,
			_p84.mapError,
			_p84.backend.tokenStrategy,
			A2(
				_Gizra$elm_restful$Restful_Endpoint$expectMany,
				_p85,
				_lukewestby$elm_http_builder$HttpBuilder$get(
					A3(_Gizra$elm_restful$Restful_Endpoint$urlForManyKeys, backendUrl, _p85, keys))));
	});
var _Gizra$elm_restful$Restful_Endpoint$post = F3(
	function (backendUrl, _p86, created) {
		var _p87 = _p86;
		var _p88 = _p87._0;
		return A3(
			_Gizra$elm_restful$Restful_Endpoint$CrudRequest,
			_p88.mapError,
			_p88.backend.tokenStrategy,
			A2(
				_lukewestby$elm_http_builder$HttpBuilder$withJsonBody,
				_p88.encodeCreatedValue(created),
				A2(
					_Gizra$elm_restful$Restful_Endpoint$expectSingle,
					_p87,
					_lukewestby$elm_http_builder$HttpBuilder$post(
						A2(_Gizra$elm_restful$Restful_Endpoint_ops['</>'], backendUrl, _p88.path)))));
	});
var _Gizra$elm_restful$Restful_Endpoint$put = F4(
	function (backendUrl, _p89, key, value) {
		var _p90 = _p89;
		var _p92 = _p90;
		var _p91 = _p90._0;
		return A3(
			_Gizra$elm_restful$Restful_Endpoint$CrudRequest,
			_p91.mapError,
			_p91.backend.tokenStrategy,
			A2(
				_lukewestby$elm_http_builder$HttpBuilder$withJsonBody,
				_p91.encodeValue(value),
				A3(
					_Gizra$elm_restful$Restful_Endpoint$expectSingleWithKey,
					_p92,
					key,
					_lukewestby$elm_http_builder$HttpBuilder$put(
						A3(_Gizra$elm_restful$Restful_Endpoint$urlForKey, backendUrl, _p92, key)))));
	});
var _Gizra$elm_restful$Restful_Endpoint$patchAny = F4(
	function (backendUrl, _p93, key, json) {
		var _p94 = _p93;
		var _p96 = _p94;
		var _p95 = _p94._0;
		return A3(
			_Gizra$elm_restful$Restful_Endpoint$CrudRequest,
			_p95.mapError,
			_p95.backend.tokenStrategy,
			A2(
				_lukewestby$elm_http_builder$HttpBuilder$withJsonBody,
				json,
				A3(
					_Gizra$elm_restful$Restful_Endpoint$expectSingleWithKey,
					_p96,
					key,
					_lukewestby$elm_http_builder$HttpBuilder$patch(
						A3(_Gizra$elm_restful$Restful_Endpoint$urlForKey, backendUrl, _p96, key)))));
	});
var _Gizra$elm_restful$Restful_Endpoint$patch = F5(
	function (backendUrl, endpoint, key, value, encoder) {
		return A4(
			_Gizra$elm_restful$Restful_Endpoint$patchAny,
			backendUrl,
			endpoint,
			key,
			encoder(value));
	});
var _Gizra$elm_restful$Restful_Endpoint$patchFull = F4(
	function (backendUrl, _p97, key, value) {
		var _p98 = _p97;
		return A5(_Gizra$elm_restful$Restful_Endpoint$patch, backendUrl, _p98, key, value, _p98._0.encodeValue);
	});
var _Gizra$elm_restful$Restful_Endpoint$delete = F3(
	function (backendUrl, _p99, key) {
		var _p100 = _p99;
		var _p101 = _p100._0;
		return A3(
			_Gizra$elm_restful$Restful_Endpoint$CrudRequest,
			_p101.mapError,
			_p101.backend.tokenStrategy,
			_lukewestby$elm_http_builder$HttpBuilder$delete(
				A3(_Gizra$elm_restful$Restful_Endpoint$urlForKey, backendUrl, _p100, key)));
	});
var _Gizra$elm_restful$Restful_Endpoint$applyBackendUrl = function (backendUrl) {
	return {
		$delete: _Gizra$elm_restful$Restful_Endpoint$delete(backendUrl),
		get: _Gizra$elm_restful$Restful_Endpoint$get(backendUrl),
		getMany: _Gizra$elm_restful$Restful_Endpoint$getMany(backendUrl),
		patch: _Gizra$elm_restful$Restful_Endpoint$patch(backendUrl),
		patchAny: _Gizra$elm_restful$Restful_Endpoint$patchAny(backendUrl),
		patchFull: _Gizra$elm_restful$Restful_Endpoint$patchFull(backendUrl),
		post: _Gizra$elm_restful$Restful_Endpoint$post(backendUrl),
		put: _Gizra$elm_restful$Restful_Endpoint$put(backendUrl),
		select: _Gizra$elm_restful$Restful_Endpoint$select(backendUrl),
		selectRange: _Gizra$elm_restful$Restful_Endpoint$selectRange(backendUrl)
	};
};
var _Gizra$elm_restful$Restful_Endpoint$EntityId = function (a) {
	return {ctor: 'EntityId', _0: a};
};
var _Gizra$elm_restful$Restful_Endpoint$toEntityId = _Gizra$elm_restful$Restful_Endpoint$EntityId;
var _Gizra$elm_restful$Restful_Endpoint$drupalEndpoint = F2(
	function (path, decodeValue) {
		return A2(
			_Gizra$elm_restful$Restful_Endpoint$withKeyEncoder,
			function (_p102) {
				return _elm_lang$core$Basics$toString(
					_Gizra$elm_restful$Restful_Endpoint$fromEntityId(_p102));
			},
			A4(
				_Gizra$elm_restful$Restful_Endpoint$endpoint,
				path,
				_Gizra$elm_restful$Restful_Endpoint$decodeDrupalId(_Gizra$elm_restful$Restful_Endpoint$toEntityId),
				decodeValue,
				_Gizra$elm_restful$Restful_Endpoint$drupalBackend));
	});
var _Gizra$elm_restful$Restful_Endpoint$decodeEntityId = A2(_elm_lang$core$Json_Decode$map, _Gizra$elm_restful$Restful_Endpoint$toEntityId, _Gizra$elm_essentials$Gizra_Json$decodeInt);
var _Gizra$elm_restful$Restful_Endpoint$EntityUuid = function (a) {
	return {ctor: 'EntityUuid', _0: a};
};
var _Gizra$elm_restful$Restful_Endpoint$toEntityUuid = _Gizra$elm_restful$Restful_Endpoint$EntityUuid;
var _Gizra$elm_restful$Restful_Endpoint$decodeEntityUuid = A2(_elm_lang$core$Json_Decode$map, _Gizra$elm_restful$Restful_Endpoint$toEntityUuid, _elm_lang$core$Json_Decode$string);

var _truqu$elm_base64$Base64_Decode$charToInt = function ($char) {
	var _p0 = $char;
	switch (_p0.valueOf()) {
		case 'A':
			return 0;
		case 'B':
			return 1;
		case 'C':
			return 2;
		case 'D':
			return 3;
		case 'E':
			return 4;
		case 'F':
			return 5;
		case 'G':
			return 6;
		case 'H':
			return 7;
		case 'I':
			return 8;
		case 'J':
			return 9;
		case 'K':
			return 10;
		case 'L':
			return 11;
		case 'M':
			return 12;
		case 'N':
			return 13;
		case 'O':
			return 14;
		case 'P':
			return 15;
		case 'Q':
			return 16;
		case 'R':
			return 17;
		case 'S':
			return 18;
		case 'T':
			return 19;
		case 'U':
			return 20;
		case 'V':
			return 21;
		case 'W':
			return 22;
		case 'X':
			return 23;
		case 'Y':
			return 24;
		case 'Z':
			return 25;
		case 'a':
			return 26;
		case 'b':
			return 27;
		case 'c':
			return 28;
		case 'd':
			return 29;
		case 'e':
			return 30;
		case 'f':
			return 31;
		case 'g':
			return 32;
		case 'h':
			return 33;
		case 'i':
			return 34;
		case 'j':
			return 35;
		case 'k':
			return 36;
		case 'l':
			return 37;
		case 'm':
			return 38;
		case 'n':
			return 39;
		case 'o':
			return 40;
		case 'p':
			return 41;
		case 'q':
			return 42;
		case 'r':
			return 43;
		case 's':
			return 44;
		case 't':
			return 45;
		case 'u':
			return 46;
		case 'v':
			return 47;
		case 'w':
			return 48;
		case 'x':
			return 49;
		case 'y':
			return 50;
		case 'z':
			return 51;
		case '0':
			return 52;
		case '1':
			return 53;
		case '2':
			return 54;
		case '3':
			return 55;
		case '4':
			return 56;
		case '5':
			return 57;
		case '6':
			return 58;
		case '7':
			return 59;
		case '8':
			return 60;
		case '9':
			return 61;
		case '+':
			return 62;
		case '/':
			return 63;
		default:
			return 0;
	}
};
var _truqu$elm_base64$Base64_Decode$intToString = function ($int) {
	if (_elm_lang$core$Native_Utils.cmp($int, 65536) < 1) {
		return _elm_lang$core$String$fromChar(
			_elm_lang$core$Char$fromCode($int));
	} else {
		var c = $int - 65536;
		return _elm_lang$core$String$fromList(
			{
				ctor: '::',
				_0: _elm_lang$core$Char$fromCode(55296 | (c >>> 10)),
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Char$fromCode(56320 | (1023 & c)),
					_1: {ctor: '[]'}
				}
			});
	}
};
var _truqu$elm_base64$Base64_Decode$add = F2(
	function ($char, _p1) {
		var _p2 = _p1;
		var _p4 = _p2._2;
		var _p3 = _p2._1;
		var shiftAndAdd = function ($int) {
			return (63 & $int) | (_p2._0 << 6);
		};
		return _elm_lang$core$Native_Utils.eq(_p3, 0) ? (_elm_lang$core$Native_Utils.eq(128 & $char, 0) ? {
			ctor: '_Tuple3',
			_0: 0,
			_1: 0,
			_2: A2(
				_elm_lang$core$Basics_ops['++'],
				_p4,
				_truqu$elm_base64$Base64_Decode$intToString($char))
		} : (_elm_lang$core$Native_Utils.eq(224 & $char, 192) ? {ctor: '_Tuple3', _0: 31 & $char, _1: 1, _2: _p4} : (_elm_lang$core$Native_Utils.eq(240 & $char, 224) ? {ctor: '_Tuple3', _0: 15 & $char, _1: 2, _2: _p4} : {ctor: '_Tuple3', _0: 7 & $char, _1: 3, _2: _p4}))) : (_elm_lang$core$Native_Utils.eq(_p3, 1) ? {
			ctor: '_Tuple3',
			_0: 0,
			_1: 0,
			_2: A2(
				_elm_lang$core$Basics_ops['++'],
				_p4,
				_truqu$elm_base64$Base64_Decode$intToString(
					shiftAndAdd($char)))
		} : {
			ctor: '_Tuple3',
			_0: shiftAndAdd($char),
			_1: _p3 - 1,
			_2: _p4
		});
	});
var _truqu$elm_base64$Base64_Decode$toUTF16 = F2(
	function ($char, acc) {
		return {
			ctor: '_Tuple3',
			_0: 0,
			_1: 0,
			_2: A2(
				_truqu$elm_base64$Base64_Decode$add,
				255 & ($char >>> 0),
				A2(
					_truqu$elm_base64$Base64_Decode$add,
					255 & ($char >>> 8),
					A2(_truqu$elm_base64$Base64_Decode$add, 255 & ($char >>> 16), acc)))
		};
	});
var _truqu$elm_base64$Base64_Decode$chomp = F2(
	function (char_, _p5) {
		var _p6 = _p5;
		var _p10 = _p6._2;
		var _p9 = _p6._0;
		var _p8 = _p6._1;
		var $char = _truqu$elm_base64$Base64_Decode$charToInt(char_);
		var _p7 = _p8;
		if (_p7 === 3) {
			return A2(_truqu$elm_base64$Base64_Decode$toUTF16, _p9 | $char, _p10);
		} else {
			return {ctor: '_Tuple3', _0: ($char << ((3 - _p8) * 6)) | _p9, _1: _p8 + 1, _2: _p10};
		}
	});
var _truqu$elm_base64$Base64_Decode$initial = {
	ctor: '_Tuple3',
	_0: 0,
	_1: 0,
	_2: {ctor: '_Tuple3', _0: 0, _1: 0, _2: ''}
};
var _truqu$elm_base64$Base64_Decode$wrapUp = function (_p11) {
	var _p12 = _p11;
	return (_elm_lang$core$Native_Utils.cmp(_p12._2._1, 0) > 0) ? _elm_lang$core$Result$Err('Invalid UTF-16') : _elm_lang$core$Result$Ok(_p12._2._2);
};
var _truqu$elm_base64$Base64_Decode$stripNulls = F2(
	function (input, output) {
		return A2(_elm_lang$core$String$endsWith, '==', input) ? A2(_elm_lang$core$String$dropRight, 2, output) : (A2(_elm_lang$core$String$endsWith, '=', input) ? A2(_elm_lang$core$String$dropRight, 1, output) : output);
	});
var _truqu$elm_base64$Base64_Decode$validBase64Regex = _elm_lang$core$Regex$regex('^([A-Za-z0-9\\/+]{4})*([A-Za-z0-9\\/+]{2}[A-Za-z0-9\\/+=]{2})?$');
var _truqu$elm_base64$Base64_Decode$validate = function (input) {
	return A2(_elm_lang$core$Regex$contains, _truqu$elm_base64$Base64_Decode$validBase64Regex, input) ? _elm_lang$core$Result$Ok(input) : _elm_lang$core$Result$Err('Invalid base64');
};
var _truqu$elm_base64$Base64_Decode$pad = function (input) {
	var _p13 = A2(
		_elm_lang$core$Basics$rem,
		_elm_lang$core$String$length(input),
		4);
	switch (_p13) {
		case 3:
			return A2(_elm_lang$core$Basics_ops['++'], input, '=');
		case 2:
			return A2(_elm_lang$core$Basics_ops['++'], input, '==');
		default:
			return input;
	}
};
var _truqu$elm_base64$Base64_Decode$validateAndDecode = function (input) {
	return A2(
		_elm_lang$core$Result$map,
		_truqu$elm_base64$Base64_Decode$stripNulls(input),
		A2(
			_elm_lang$core$Result$andThen,
			function (_p14) {
				return _truqu$elm_base64$Base64_Decode$wrapUp(
					A3(_elm_lang$core$String$foldl, _truqu$elm_base64$Base64_Decode$chomp, _truqu$elm_base64$Base64_Decode$initial, _p14));
			},
			_truqu$elm_base64$Base64_Decode$validate(input)));
};
var _truqu$elm_base64$Base64_Decode$decode = function (_p15) {
	return _truqu$elm_base64$Base64_Decode$validateAndDecode(
		_truqu$elm_base64$Base64_Decode$pad(_p15));
};

var _truqu$elm_base64$Base64_Encode$intToBase64 = function (i) {
	var _p0 = i;
	switch (_p0) {
		case 0:
			return 'A';
		case 1:
			return 'B';
		case 2:
			return 'C';
		case 3:
			return 'D';
		case 4:
			return 'E';
		case 5:
			return 'F';
		case 6:
			return 'G';
		case 7:
			return 'H';
		case 8:
			return 'I';
		case 9:
			return 'J';
		case 10:
			return 'K';
		case 11:
			return 'L';
		case 12:
			return 'M';
		case 13:
			return 'N';
		case 14:
			return 'O';
		case 15:
			return 'P';
		case 16:
			return 'Q';
		case 17:
			return 'R';
		case 18:
			return 'S';
		case 19:
			return 'T';
		case 20:
			return 'U';
		case 21:
			return 'V';
		case 22:
			return 'W';
		case 23:
			return 'X';
		case 24:
			return 'Y';
		case 25:
			return 'Z';
		case 26:
			return 'a';
		case 27:
			return 'b';
		case 28:
			return 'c';
		case 29:
			return 'd';
		case 30:
			return 'e';
		case 31:
			return 'f';
		case 32:
			return 'g';
		case 33:
			return 'h';
		case 34:
			return 'i';
		case 35:
			return 'j';
		case 36:
			return 'k';
		case 37:
			return 'l';
		case 38:
			return 'm';
		case 39:
			return 'n';
		case 40:
			return 'o';
		case 41:
			return 'p';
		case 42:
			return 'q';
		case 43:
			return 'r';
		case 44:
			return 's';
		case 45:
			return 't';
		case 46:
			return 'u';
		case 47:
			return 'v';
		case 48:
			return 'w';
		case 49:
			return 'x';
		case 50:
			return 'y';
		case 51:
			return 'z';
		case 52:
			return '0';
		case 53:
			return '1';
		case 54:
			return '2';
		case 55:
			return '3';
		case 56:
			return '4';
		case 57:
			return '5';
		case 58:
			return '6';
		case 59:
			return '7';
		case 60:
			return '8';
		case 61:
			return '9';
		case 62:
			return '+';
		default:
			return '/';
	}
};
var _truqu$elm_base64$Base64_Encode$toBase64 = function ($int) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_truqu$elm_base64$Base64_Encode$intToBase64(63 & ($int >>> 18)),
		A2(
			_elm_lang$core$Basics_ops['++'],
			_truqu$elm_base64$Base64_Encode$intToBase64(63 & ($int >>> 12)),
			A2(
				_elm_lang$core$Basics_ops['++'],
				_truqu$elm_base64$Base64_Encode$intToBase64(63 & ($int >>> 6)),
				_truqu$elm_base64$Base64_Encode$intToBase64(63 & ($int >>> 0)))));
};
var _truqu$elm_base64$Base64_Encode$add = F2(
	function ($char, _p1) {
		var _p2 = _p1;
		var _p5 = _p2._0;
		var _p4 = _p2._1;
		var current = (_p2._2 << 8) | $char;
		var _p3 = _p4;
		if (_p3 === 2) {
			return {
				ctor: '_Tuple3',
				_0: A2(
					_elm_lang$core$Basics_ops['++'],
					_p5,
					_truqu$elm_base64$Base64_Encode$toBase64(current)),
				_1: 0,
				_2: 0
			};
		} else {
			return {ctor: '_Tuple3', _0: _p5, _1: _p4 + 1, _2: current};
		}
	});
var _truqu$elm_base64$Base64_Encode$chomp = F2(
	function (char_, _p6) {
		var _p7 = _p6;
		var _p9 = _p7._1;
		var $char = _elm_lang$core$Char$toCode(char_);
		var _p8 = _p7._0;
		if (_p8.ctor === 'Nothing') {
			return (_elm_lang$core$Native_Utils.cmp($char, 128) < 0) ? {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Maybe$Nothing,
				_1: A2(_truqu$elm_base64$Base64_Encode$add, $char, _p9)
			} : ((_elm_lang$core$Native_Utils.cmp($char, 2048) < 0) ? {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Maybe$Nothing,
				_1: A2(
					_truqu$elm_base64$Base64_Encode$add,
					128 | (63 & $char),
					A2(_truqu$elm_base64$Base64_Encode$add, 192 | ($char >>> 6), _p9))
			} : (((_elm_lang$core$Native_Utils.cmp($char, 55296) < 0) || (_elm_lang$core$Native_Utils.cmp($char, 57344) > -1)) ? {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Maybe$Nothing,
				_1: A2(
					_truqu$elm_base64$Base64_Encode$add,
					128 | (63 & $char),
					A2(
						_truqu$elm_base64$Base64_Encode$add,
						128 | (63 & ($char >>> 6)),
						A2(_truqu$elm_base64$Base64_Encode$add, 224 | ($char >>> 12), _p9)))
			} : {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Maybe$Just($char),
				_1: _p9
			}));
		} else {
			var combined = A2(
				F2(
					function (x, y) {
						return x + y;
					}),
				65536,
				(1023 & $char) | ((1023 & _p8._0) << 10));
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Maybe$Nothing,
				_1: A2(
					_truqu$elm_base64$Base64_Encode$add,
					128 | (63 & combined),
					A2(
						_truqu$elm_base64$Base64_Encode$add,
						128 | (63 & (combined >>> 6)),
						A2(
							_truqu$elm_base64$Base64_Encode$add,
							128 | (63 & (combined >>> 12)),
							A2(_truqu$elm_base64$Base64_Encode$add, 240 | (combined >>> 18), _p9))))
			};
		}
	});
var _truqu$elm_base64$Base64_Encode$wrapUp = function (_p10) {
	var _p11 = _p10;
	var _p14 = _p11._1._0;
	var _p13 = _p11._1._2;
	var _p12 = _p11._1._1;
	switch (_p12) {
		case 1:
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p14,
				A2(
					_elm_lang$core$Basics_ops['++'],
					_truqu$elm_base64$Base64_Encode$intToBase64(63 & (_p13 >>> 2)),
					A2(
						_elm_lang$core$Basics_ops['++'],
						_truqu$elm_base64$Base64_Encode$intToBase64(63 & (_p13 << 4)),
						'==')));
		case 2:
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p14,
				A2(
					_elm_lang$core$Basics_ops['++'],
					_truqu$elm_base64$Base64_Encode$intToBase64(63 & (_p13 >>> 10)),
					A2(
						_elm_lang$core$Basics_ops['++'],
						_truqu$elm_base64$Base64_Encode$intToBase64(63 & (_p13 >>> 4)),
						A2(
							_elm_lang$core$Basics_ops['++'],
							_truqu$elm_base64$Base64_Encode$intToBase64(63 & (_p13 << 2)),
							'='))));
		default:
			return _p14;
	}
};
var _truqu$elm_base64$Base64_Encode$initial = {
	ctor: '_Tuple2',
	_0: _elm_lang$core$Maybe$Nothing,
	_1: {ctor: '_Tuple3', _0: '', _1: 0, _2: 0}
};
var _truqu$elm_base64$Base64_Encode$encode = function (input) {
	return _truqu$elm_base64$Base64_Encode$wrapUp(
		A3(_elm_lang$core$String$foldl, _truqu$elm_base64$Base64_Encode$chomp, _truqu$elm_base64$Base64_Encode$initial, input));
};

var _truqu$elm_base64$Base64$decode = _truqu$elm_base64$Base64_Decode$decode;
var _truqu$elm_base64$Base64$encode = _truqu$elm_base64$Base64_Encode$encode;

var _Gizra$elm_restful$Restful_Login$hasAccessToken = function (status) {
	var _p0 = status;
	if (_p0.ctor === 'Anonymous') {
		return false;
	} else {
		return true;
	}
};
var _Gizra$elm_restful$Restful_Login$hasValidAccessToken = function (status) {
	var _p1 = status;
	if (_p1.ctor === 'Anonymous') {
		return false;
	} else {
		return _elm_lang$core$Native_Utils.eq(_p1._0.relogin, _elm_lang$core$Maybe$Nothing);
	}
};
var _Gizra$elm_restful$Restful_Login$decodeCachedCredentials = F2(
	function (config, backendUrl) {
		var decodeUser = _elm_lang$core$Json_Decode$oneOf(
			{
				ctor: '::',
				_0: A2(
					_elm_lang$core$Json_Decode$map,
					_elm_lang$core$Maybe$Just,
					A2(_elm_lang$core$Json_Decode$field, 'user', config.decodeUser)),
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Json_Decode$succeed(_elm_lang$core$Maybe$Nothing),
					_1: {ctor: '[]'}
				}
			});
		var decodeAccessToken = A2(_elm_lang$core$Json_Decode$field, 'access_token', _elm_lang$core$Json_Decode$string);
		return A3(
			_elm_lang$core$Json_Decode$map2,
			F2(
				function (accessToken, user) {
					return {backendUrl: backendUrl, accessToken: accessToken, user: user};
				}),
			decodeAccessToken,
			decodeUser);
	});
var _Gizra$elm_restful$Restful_Login$encodeCredentials = F2(
	function (config, credentials) {
		var encodedUser = A2(
			_elm_lang$core$Maybe$map,
			function (encoder) {
				return {
					ctor: '_Tuple2',
					_0: 'user',
					_1: encoder(credentials.user)
				};
			},
			config.encodeUser);
		var encodedAccessToken = _elm_lang$core$Maybe$Just(
			{
				ctor: '_Tuple2',
				_0: 'access_token',
				_1: _elm_lang$core$Json_Encode$string(credentials.accessToken)
			});
		return A2(
			_elm_lang$core$Json_Encode$encode,
			0,
			_elm_lang$core$Json_Encode$object(
				A2(
					_elm_lang$core$List$filterMap,
					_elm_lang$core$Basics$identity,
					{
						ctor: '::',
						_0: encodedAccessToken,
						_1: {
							ctor: '::',
							_0: encodedUser,
							_1: {ctor: '[]'}
						}
					})));
	});
var _Gizra$elm_restful$Restful_Login$requestUser = F3(
	function (config, backendUrl, accessToken) {
		return A2(
			_elm_lang$core$Task$map,
			function (user) {
				return {accessToken: accessToken, backendUrl: backendUrl, user: user};
			},
			_lukewestby$elm_http_builder$HttpBuilder$toTask(
				A2(
					_lukewestby$elm_http_builder$HttpBuilder$withExpect,
					_elm_lang$http$Http$expectJson(config.decodeUser),
					A2(
						_lukewestby$elm_http_builder$HttpBuilder$withQueryParams,
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'access_token', _1: accessToken},
							_1: {ctor: '[]'}
						},
						_lukewestby$elm_http_builder$HttpBuilder$get(
							A2(_Gizra$elm_restful$Restful_Endpoint_ops['</>'], backendUrl, config.userPath))))));
	});
var _Gizra$elm_restful$Restful_Login$drupalConfig = function (appConfig) {
	return {
		loginPath: 'api/login-token',
		oneTimeLoginPath: 'api/one-time-login',
		logoutPath: _elm_lang$core$Maybe$Just('user/logout'),
		userPath: 'api/me',
		decodeAccessToken: A2(_elm_lang$core$Json_Decode$field, 'access_token', _elm_lang$core$Json_Decode$string),
		decodeUser: appConfig.decodeUser,
		encodeUser: appConfig.encodeUser,
		initialAnonymousData: appConfig.initialAnonymousData,
		initialAuthenticatedData: appConfig.initialAuthenticatedData,
		cacheCredentials: appConfig.cacheCredentials,
		tag: appConfig.tag
	};
};
var _Gizra$elm_restful$Restful_Login$getData = F3(
	function (anonFunc, authenticatedFunc, model) {
		var _p2 = model;
		if (_p2.ctor === 'Anonymous') {
			return anonFunc(_p2._0.data);
		} else {
			return authenticatedFunc(_p2._0.data);
		}
	});
var _Gizra$elm_restful$Restful_Login$maybeAnonymousData = function (model) {
	var _p3 = model;
	if (_p3.ctor === 'Anonymous') {
		return _elm_lang$core$Maybe$Just(_p3._0.data);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _Gizra$elm_restful$Restful_Login$maybeAuthenticatedData = function (model) {
	var _p4 = model;
	if (_p4.ctor === 'Anonymous') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Maybe$Just(_p4._0.data);
	}
};
var _Gizra$elm_restful$Restful_Login$loginProgressToError = function (loginProgress) {
	var _p5 = loginProgress;
	if (_p5.ctor === 'Checking') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Maybe$Just(_p5._0);
	}
};
var _Gizra$elm_restful$Restful_Login$loginProgressIsChecking = function (loginProgress) {
	var _p6 = loginProgress;
	if (_p6.ctor === 'Checking') {
		return true;
	} else {
		return false;
	}
};
var _Gizra$elm_restful$Restful_Login$loginProgressIsCheckingOneTimeLogin = function (loginProgress) {
	var _p7 = loginProgress;
	if (_p7.ctor === 'Checking') {
		switch (_p7._0.ctor) {
			case 'ByAccessToken':
				return false;
			case 'ByOneTimeLogin':
				return true;
			default:
				return false;
		}
	} else {
		return false;
	}
};
var _Gizra$elm_restful$Restful_Login$loginProgressIsCheckingPassword = function (loginProgress) {
	var _p8 = loginProgress;
	if (_p8.ctor === 'Checking') {
		switch (_p8._0.ctor) {
			case 'ByAccessToken':
				return false;
			case 'ByOneTimeLogin':
				return false;
			default:
				return true;
		}
	} else {
		return false;
	}
};
var _Gizra$elm_restful$Restful_Login$loginProgressIsCheckingAccessToken = function (loginProgress) {
	var _p9 = loginProgress;
	if (_p9.ctor === 'Checking') {
		switch (_p9._0.ctor) {
			case 'ByAccessToken':
				return true;
			case 'ByOneTimeLogin':
				return false;
			default:
				return false;
		}
	} else {
		return false;
	}
};
var _Gizra$elm_restful$Restful_Login$getLoginProgress = function (model) {
	var _p10 = model;
	if (_p10.ctor === 'Anonymous') {
		return _p10._0.progress;
	} else {
		return _p10._0.relogin;
	}
};
var _Gizra$elm_restful$Restful_Login$isChecking = function (_p11) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		false,
		A2(
			_elm_lang$core$Maybe$map,
			_Gizra$elm_restful$Restful_Login$loginProgressIsChecking,
			_Gizra$elm_restful$Restful_Login$getLoginProgress(_p11)));
};
var _Gizra$elm_restful$Restful_Login$isCheckingAccessToken = function (_p12) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		false,
		A2(
			_elm_lang$core$Maybe$map,
			_Gizra$elm_restful$Restful_Login$loginProgressIsCheckingAccessToken,
			_Gizra$elm_restful$Restful_Login$getLoginProgress(_p12)));
};
var _Gizra$elm_restful$Restful_Login$isCheckingPassword = function (_p13) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		false,
		A2(
			_elm_lang$core$Maybe$map,
			_Gizra$elm_restful$Restful_Login$loginProgressIsCheckingPassword,
			_Gizra$elm_restful$Restful_Login$getLoginProgress(_p13)));
};
var _Gizra$elm_restful$Restful_Login$isCheckingOneTimeLogin = function (_p14) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		false,
		A2(
			_elm_lang$core$Maybe$map,
			_Gizra$elm_restful$Restful_Login$loginProgressIsCheckingOneTimeLogin,
			_Gizra$elm_restful$Restful_Login$getLoginProgress(_p14)));
};
var _Gizra$elm_restful$Restful_Login$getError = function (_p15) {
	return A2(
		_elm_lang$core$Maybe$andThen,
		_Gizra$elm_restful$Restful_Login$loginProgressToError,
		_Gizra$elm_restful$Restful_Login$getLoginProgress(_p15));
};
var _Gizra$elm_restful$Restful_Login$getUser = function (model) {
	var _p16 = model;
	if (_p16.ctor === 'Anonymous') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Maybe$Just(_p16._0.credentials.user);
	}
};
var _Gizra$elm_restful$Restful_Login$isAuthenticatedUser = function (model) {
	var _p17 = model;
	if (_p17.ctor === 'Anonymous') {
		return false;
	} else {
		return true;
	}
};
var _Gizra$elm_restful$Restful_Login$isAnonymousUser = function (model) {
	var _p18 = model;
	if (_p18.ctor === 'Anonymous') {
		return true;
	} else {
		return false;
	}
};
var _Gizra$elm_restful$Restful_Login$Credentials = F3(
	function (a, b, c) {
		return {accessToken: a, backendUrl: b, user: c};
	});
var _Gizra$elm_restful$Restful_Login$CachedCredentials = F3(
	function (a, b, c) {
		return {accessToken: a, backendUrl: b, user: c};
	});
var _Gizra$elm_restful$Restful_Login$AuthenticatedUser = F4(
	function (a, b, c, d) {
		return {credentials: a, logout: b, relogin: c, data: d};
	});
var _Gizra$elm_restful$Restful_Login$AnonymousUser = F2(
	function (a, b) {
		return {progress: a, data: b};
	});
var _Gizra$elm_restful$Restful_Login$Config = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return {loginPath: a, oneTimeLoginPath: b, logoutPath: c, userPath: d, decodeAccessToken: e, decodeUser: f, encodeUser: g, initialAuthenticatedData: h, initialAnonymousData: i, cacheCredentials: j, tag: k};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _Gizra$elm_restful$Restful_Login$AppConfig = F6(
	function (a, b, c, d, e, f) {
		return {decodeUser: a, encodeUser: b, initialAuthenticatedData: c, initialAnonymousData: d, cacheCredentials: e, tag: f};
	});
var _Gizra$elm_restful$Restful_Login$Authenticated = function (a) {
	return {ctor: 'Authenticated', _0: a};
};
var _Gizra$elm_restful$Restful_Login$mapAuthenticatedData = F2(
	function (func, model) {
		var _p19 = model;
		if (_p19.ctor === 'Anonymous') {
			return model;
		} else {
			var _p20 = _p19._0;
			return _Gizra$elm_restful$Restful_Login$Authenticated(
				_elm_lang$core$Native_Utils.update(
					_p20,
					{
						data: func(_p20.data)
					}));
		}
	});
var _Gizra$elm_restful$Restful_Login$setCredentials = F3(
	function (config, credentials, model) {
		var newData = function () {
			var _p21 = model;
			if (_p21.ctor === 'Anonymous') {
				return A2(config.initialAuthenticatedData, _p21._0.data, credentials.user);
			} else {
				return _p21._0.data;
			}
		}();
		return _Gizra$elm_restful$Restful_Login$Authenticated(
			{credentials: credentials, logout: _krisajenkins$remotedata$RemoteData$NotAsked, relogin: _elm_lang$core$Maybe$Nothing, data: newData});
	});
var _Gizra$elm_restful$Restful_Login$loggedIn = F2(
	function (credentials, data) {
		return _Gizra$elm_restful$Restful_Login$Authenticated(
			{credentials: credentials, logout: _krisajenkins$remotedata$RemoteData$NotAsked, relogin: _elm_lang$core$Maybe$Nothing, data: data});
	});
var _Gizra$elm_restful$Restful_Login$accessTokenAccepted = function (status) {
	var _p22 = status;
	if (_p22.ctor === 'Anonymous') {
		return status;
	} else {
		var _p24 = _p22._0;
		var _p23 = _p24.relogin;
		if (_p23.ctor === 'Just') {
			return _Gizra$elm_restful$Restful_Login$Authenticated(
				_elm_lang$core$Native_Utils.update(
					_p24,
					{relogin: _elm_lang$core$Maybe$Nothing}));
		} else {
			return status;
		}
	}
};
var _Gizra$elm_restful$Restful_Login$Anonymous = function (a) {
	return {ctor: 'Anonymous', _0: a};
};
var _Gizra$elm_restful$Restful_Login$mapAnonymousData = F2(
	function (func, model) {
		var _p25 = model;
		if (_p25.ctor === 'Anonymous') {
			var _p26 = _p25._0;
			return _Gizra$elm_restful$Restful_Login$Anonymous(
				_elm_lang$core$Native_Utils.update(
					_p26,
					{
						data: func(_p26.data)
					}));
		} else {
			return model;
		}
	});
var _Gizra$elm_restful$Restful_Login$mapBoth = F3(
	function (anonFunc, authenticatedFunc, model) {
		var _p27 = model;
		if (_p27.ctor === 'Anonymous') {
			return A2(_Gizra$elm_restful$Restful_Login$mapAnonymousData, anonFunc, model);
		} else {
			return A2(_Gizra$elm_restful$Restful_Login$mapAuthenticatedData, authenticatedFunc, model);
		}
	});
var _Gizra$elm_restful$Restful_Login$setLoginProgress = F2(
	function (progress, model) {
		var _p28 = model;
		if (_p28.ctor === 'Anonymous') {
			return _Gizra$elm_restful$Restful_Login$Anonymous(
				_elm_lang$core$Native_Utils.update(
					_p28._0,
					{progress: progress}));
		} else {
			return _Gizra$elm_restful$Restful_Login$Authenticated(
				_elm_lang$core$Native_Utils.update(
					_p28._0,
					{relogin: progress}));
		}
	});
var _Gizra$elm_restful$Restful_Login$loggedOut = function (data) {
	return _Gizra$elm_restful$Restful_Login$Anonymous(
		{progress: _elm_lang$core$Maybe$Nothing, data: data});
};
var _Gizra$elm_restful$Restful_Login$LoginError = function (a) {
	return {ctor: 'LoginError', _0: a};
};
var _Gizra$elm_restful$Restful_Login$Checking = function (a) {
	return {ctor: 'Checking', _0: a};
};
var _Gizra$elm_restful$Restful_Login$HttpError = F3(
	function (a, b, c) {
		return {ctor: 'HttpError', _0: a, _1: b, _2: c};
	});
var _Gizra$elm_restful$Restful_Login$Rejected = function (a) {
	return {ctor: 'Rejected', _0: a};
};
var _Gizra$elm_restful$Restful_Login$classifyHttpError = F3(
	function (retry, method, error) {
		var _p29 = error;
		switch (_p29.ctor) {
			case 'BadUrl':
				return A3(_Gizra$elm_restful$Restful_Login$HttpError, method, error, _elm_lang$core$Maybe$Nothing);
			case 'Timeout':
				return A3(_Gizra$elm_restful$Restful_Login$HttpError, method, error, retry);
			case 'NetworkError':
				return A3(_Gizra$elm_restful$Restful_Login$HttpError, method, error, retry);
			case 'BadStatus':
				return _elm_lang$core$Native_Utils.eq(_p29._0.status.code, 401) ? _Gizra$elm_restful$Restful_Login$Rejected(method) : A3(_Gizra$elm_restful$Restful_Login$HttpError, method, error, _elm_lang$core$Maybe$Nothing);
			default:
				return A3(_Gizra$elm_restful$Restful_Login$HttpError, method, error, _elm_lang$core$Maybe$Nothing);
		}
	});
var _Gizra$elm_restful$Restful_Login$ByPassword = {ctor: 'ByPassword'};
var _Gizra$elm_restful$Restful_Login$ByOneTimeLogin = {ctor: 'ByOneTimeLogin'};
var _Gizra$elm_restful$Restful_Login$ByAccessToken = {ctor: 'ByAccessToken'};
var _Gizra$elm_restful$Restful_Login$retryAccessTokenRejected = F2(
	function (retry, error) {
		return _Gizra$elm_restful$Restful_Login$setLoginProgress(
			_elm_lang$core$Maybe$Just(
				_Gizra$elm_restful$Restful_Login$LoginError(
					A3(_Gizra$elm_restful$Restful_Login$classifyHttpError, retry, _Gizra$elm_restful$Restful_Login$ByAccessToken, error))));
	});
var _Gizra$elm_restful$Restful_Login$accessTokenRejected = _Gizra$elm_restful$Restful_Login$retryAccessTokenRejected(_elm_lang$core$Maybe$Nothing);
var _Gizra$elm_restful$Restful_Login$LoggedOut = {ctor: 'LoggedOut'};
var _Gizra$elm_restful$Restful_Login$LoggedIn = {ctor: 'LoggedIn'};
var _Gizra$elm_restful$Restful_Login$TryPassword = F4(
	function (a, b, c, d) {
		return {ctor: 'TryPassword', _0: a, _1: b, _2: c, _3: d};
	});
var _Gizra$elm_restful$Restful_Login$tryLogin = _Gizra$elm_restful$Restful_Login$TryPassword;
var _Gizra$elm_restful$Restful_Login$TryOneTimeLogin = F2(
	function (a, b) {
		return {ctor: 'TryOneTimeLogin', _0: a, _1: b};
	});
var _Gizra$elm_restful$Restful_Login$tryOneTimeLogin = _Gizra$elm_restful$Restful_Login$TryOneTimeLogin;
var _Gizra$elm_restful$Restful_Login$TryAccessToken = F2(
	function (a, b) {
		return {ctor: 'TryAccessToken', _0: a, _1: b};
	});
var _Gizra$elm_restful$Restful_Login$tryAccessToken = _Gizra$elm_restful$Restful_Login$TryAccessToken;
var _Gizra$elm_restful$Restful_Login$TryLogout = {ctor: 'TryLogout'};
var _Gizra$elm_restful$Restful_Login$logout = _Gizra$elm_restful$Restful_Login$TryLogout;
var _Gizra$elm_restful$Restful_Login$HandleLogoutAttempt = function (a) {
	return {ctor: 'HandleLogoutAttempt', _0: a};
};
var _Gizra$elm_restful$Restful_Login$HandleLoginAttempt = F3(
	function (a, b, c) {
		return {ctor: 'HandleLoginAttempt', _0: a, _1: b, _2: c};
	});
var _Gizra$elm_restful$Restful_Login$recordLogin = function (credentials) {
	return A3(
		_Gizra$elm_restful$Restful_Login$HandleLoginAttempt,
		_elm_lang$core$Maybe$Nothing,
		_Gizra$elm_restful$Restful_Login$ByPassword,
		_elm_lang$core$Result$Ok(credentials));
};
var _Gizra$elm_restful$Restful_Login$update = F3(
	function (config, msg, model) {
		update:
		while (true) {
			var _p30 = msg;
			switch (_p30.ctor) {
				case 'HandleLoginAttempt':
					var _p31 = _p30._2;
					if (_p31.ctor === 'Err') {
						return {
							ctor: '_Tuple3',
							_0: A2(
								_Gizra$elm_restful$Restful_Login$setLoginProgress,
								_elm_lang$core$Maybe$Just(
									_Gizra$elm_restful$Restful_Login$LoginError(
										A3(_Gizra$elm_restful$Restful_Login$classifyHttpError, _p30._0, _p30._1, _p31._0))),
								model),
							_1: _elm_lang$core$Platform_Cmd$none,
							_2: _elm_lang$core$Maybe$Nothing
						};
					} else {
						var _p32 = _p31._0;
						return {
							ctor: '_Tuple3',
							_0: A3(_Gizra$elm_restful$Restful_Login$setCredentials, config, _p32, model),
							_1: A2(
								config.cacheCredentials,
								_p32.backendUrl,
								A2(_Gizra$elm_restful$Restful_Login$encodeCredentials, config, _p32)),
							_2: _elm_lang$core$Maybe$Just(_Gizra$elm_restful$Restful_Login$LoggedIn)
						};
					}
				case 'TryAccessToken':
					var cmd = A2(
						_elm_lang$core$Platform_Cmd$map,
						config.tag,
						A2(
							_elm_lang$core$Task$attempt,
							A2(
								_Gizra$elm_restful$Restful_Login$HandleLoginAttempt,
								_elm_lang$core$Maybe$Just(msg),
								_Gizra$elm_restful$Restful_Login$ByAccessToken),
							A3(_Gizra$elm_restful$Restful_Login$requestUser, config, _p30._0, _p30._1)));
					return {
						ctor: '_Tuple3',
						_0: A2(
							_Gizra$elm_restful$Restful_Login$setLoginProgress,
							_elm_lang$core$Maybe$Just(
								_Gizra$elm_restful$Restful_Login$Checking(_Gizra$elm_restful$Restful_Login$ByAccessToken)),
							model),
						_1: cmd,
						_2: _elm_lang$core$Maybe$Nothing
					};
				case 'TryPassword':
					var _p33 = _p30._0;
					var credentials = _truqu$elm_base64$Base64$encode(
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p30._2,
							A2(_elm_lang$core$Basics_ops['++'], ':', _p30._3)));
					var requestAccessToken = _lukewestby$elm_http_builder$HttpBuilder$toTask(
						A2(
							_lukewestby$elm_http_builder$HttpBuilder$withExpect,
							_elm_lang$http$Http$expectJson(config.decodeAccessToken),
							A2(
								_lukewestby$elm_http_builder$HttpBuilder$withQueryParams,
								_p30._1,
								A3(
									_lukewestby$elm_http_builder$HttpBuilder$withHeader,
									'Authorization',
									A2(_elm_lang$core$Basics_ops['++'], 'Basic ', credentials),
									_lukewestby$elm_http_builder$HttpBuilder$get(
										A2(_Gizra$elm_restful$Restful_Endpoint_ops['</>'], _p33, config.loginPath))))));
					var cmd = A2(
						_elm_lang$core$Platform_Cmd$map,
						config.tag,
						A2(
							_elm_lang$core$Task$attempt,
							A2(
								_Gizra$elm_restful$Restful_Login$HandleLoginAttempt,
								_elm_lang$core$Maybe$Just(msg),
								_Gizra$elm_restful$Restful_Login$ByPassword),
							A2(
								_elm_lang$core$Task$andThen,
								A2(_Gizra$elm_restful$Restful_Login$requestUser, config, _p33),
								requestAccessToken)));
					return {
						ctor: '_Tuple3',
						_0: A2(
							_Gizra$elm_restful$Restful_Login$setLoginProgress,
							_elm_lang$core$Maybe$Just(
								_Gizra$elm_restful$Restful_Login$Checking(_Gizra$elm_restful$Restful_Login$ByPassword)),
							model),
						_1: cmd,
						_2: _elm_lang$core$Maybe$Nothing
					};
				case 'TryOneTimeLogin':
					var _p34 = _p30._0;
					var requestAccessToken = _lukewestby$elm_http_builder$HttpBuilder$toTask(
						A2(
							_lukewestby$elm_http_builder$HttpBuilder$withExpect,
							_elm_lang$http$Http$expectJson(config.decodeAccessToken),
							A2(
								_lukewestby$elm_http_builder$HttpBuilder$withQueryParams,
								_p30._1,
								_lukewestby$elm_http_builder$HttpBuilder$get(
									A2(_Gizra$elm_restful$Restful_Endpoint_ops['</>'], _p34, config.oneTimeLoginPath)))));
					var cmd = A2(
						_elm_lang$core$Platform_Cmd$map,
						config.tag,
						A2(
							_elm_lang$core$Task$attempt,
							A2(
								_Gizra$elm_restful$Restful_Login$HandleLoginAttempt,
								_elm_lang$core$Maybe$Just(msg),
								_Gizra$elm_restful$Restful_Login$ByOneTimeLogin),
							A2(
								_elm_lang$core$Task$andThen,
								A2(_Gizra$elm_restful$Restful_Login$requestUser, config, _p34),
								requestAccessToken)));
					return {
						ctor: '_Tuple3',
						_0: A2(
							_Gizra$elm_restful$Restful_Login$setLoginProgress,
							_elm_lang$core$Maybe$Just(
								_Gizra$elm_restful$Restful_Login$Checking(_Gizra$elm_restful$Restful_Login$ByOneTimeLogin)),
							model),
						_1: cmd,
						_2: _elm_lang$core$Maybe$Nothing
					};
				case 'TryLogout':
					var _p35 = model;
					if (_p35.ctor === 'Anonymous') {
						return {ctor: '_Tuple3', _0: model, _1: _elm_lang$core$Platform_Cmd$none, _2: _elm_lang$core$Maybe$Nothing};
					} else {
						var _p37 = _p35._0;
						var _p36 = config.logoutPath;
						if (_p36.ctor === 'Just') {
							return {
								ctor: '_Tuple3',
								_0: _Gizra$elm_restful$Restful_Login$Authenticated(
									_elm_lang$core$Native_Utils.update(
										_p37,
										{logout: _krisajenkins$remotedata$RemoteData$Loading})),
								_1: A2(
									_elm_lang$core$Platform_Cmd$map,
									config.tag,
									A2(
										_elm_lang$core$Task$attempt,
										_Gizra$elm_restful$Restful_Login$HandleLogoutAttempt,
										_lukewestby$elm_http_builder$HttpBuilder$toTask(
											A2(
												_lukewestby$elm_http_builder$HttpBuilder$withQueryParams,
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'access_token', _1: _p37.credentials.accessToken},
													_1: {ctor: '[]'}
												},
												_lukewestby$elm_http_builder$HttpBuilder$get(
													A2(_Gizra$elm_restful$Restful_Endpoint_ops['</>'], _p37.credentials.backendUrl, _p36._0)))))),
								_2: _elm_lang$core$Maybe$Nothing
							};
						} else {
							var _v26 = config,
								_v27 = _Gizra$elm_restful$Restful_Login$HandleLogoutAttempt(
								_elm_lang$core$Result$Ok(
									{ctor: '_Tuple0'})),
								_v28 = model;
							config = _v26;
							msg = _v27;
							model = _v28;
							continue update;
						}
					}
				default:
					var _p42 = _p30._0;
					var _p38 = model;
					if (_p38.ctor === 'Anonymous') {
						return {ctor: '_Tuple3', _0: model, _1: _elm_lang$core$Platform_Cmd$none, _2: _elm_lang$core$Maybe$Nothing};
					} else {
						var _p41 = _p38._0;
						var adjustedResult = function () {
							var _p39 = _p42;
							if ((_p39.ctor === 'Err') && (_p39._0.ctor === 'BadStatus')) {
								return _elm_lang$core$Native_Utils.eq(_p39._0._0.status.code, 403) ? _elm_lang$core$Result$Ok(
									{ctor: '_Tuple0'}) : _p42;
							} else {
								return _p42;
							}
						}();
						var _p40 = adjustedResult;
						if (_p40.ctor === 'Ok') {
							return {
								ctor: '_Tuple3',
								_0: _Gizra$elm_restful$Restful_Login$loggedOut(config.initialAnonymousData),
								_1: A2(config.cacheCredentials, _p41.credentials.backendUrl, '{}'),
								_2: _elm_lang$core$Maybe$Just(_Gizra$elm_restful$Restful_Login$LoggedOut)
							};
						} else {
							return {
								ctor: '_Tuple3',
								_0: _Gizra$elm_restful$Restful_Login$Authenticated(
									_elm_lang$core$Native_Utils.update(
										_p41,
										{
											logout: _krisajenkins$remotedata$RemoteData$Failure(_p40._0)
										})),
								_1: _elm_lang$core$Platform_Cmd$none,
								_2: _elm_lang$core$Maybe$Nothing
							};
						}
					}
			}
		}
	});
var _Gizra$elm_restful$Restful_Login$checkAccessToken = F4(
	function (config, backendUrl, maybeAccessToken, maybeUser) {
		var initialModel = function () {
			var _p43 = maybeUser;
			if (_p43.ctor === 'Just') {
				return A3(
					_Gizra$elm_restful$Restful_Login$setCredentials,
					config,
					{
						accessToken: A2(_elm_lang$core$Maybe$withDefault, '', maybeAccessToken),
						backendUrl: backendUrl,
						user: _p43._0
					},
					_Gizra$elm_restful$Restful_Login$loggedOut(config.initialAnonymousData));
			} else {
				return _Gizra$elm_restful$Restful_Login$loggedOut(config.initialAnonymousData);
			}
		}();
		var _p44 = maybeAccessToken;
		if (_p44.ctor === 'Just') {
			var _p45 = A3(
				_Gizra$elm_restful$Restful_Login$update,
				config,
				A2(_Gizra$elm_restful$Restful_Login$TryAccessToken, backendUrl, _p44._0),
				initialModel);
			var userAndData = _p45._0;
			var cmd = _p45._1;
			return {ctor: '_Tuple2', _0: userAndData, _1: cmd};
		} else {
			return {
				ctor: '_Tuple2',
				_0: A2(
					_Gizra$elm_restful$Restful_Login$setLoginProgress,
					_elm_lang$core$Maybe$Just(
						_Gizra$elm_restful$Restful_Login$LoginError(
							_Gizra$elm_restful$Restful_Login$Rejected(_Gizra$elm_restful$Restful_Login$ByAccessToken))),
					initialModel),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		}
	});
var _Gizra$elm_restful$Restful_Login$checkCachedCredentials = F3(
	function (config, backendUrl, cached) {
		var _p46 = cached;
		if (_p46.ctor === 'Just') {
			var _p47 = A2(
				_elm_lang$core$Json_Decode$decodeString,
				A2(_Gizra$elm_restful$Restful_Login$decodeCachedCredentials, config, backendUrl),
				_p46._0);
			if (_p47.ctor === 'Err') {
				return {
					ctor: '_Tuple2',
					_0: _Gizra$elm_restful$Restful_Login$loggedOut(config.initialAnonymousData),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			} else {
				var _p48 = _p47._0;
				return A4(
					_Gizra$elm_restful$Restful_Login$checkAccessToken,
					config,
					backendUrl,
					_elm_lang$core$Maybe$Just(_p48.accessToken),
					_p48.user);
			}
		} else {
			return {
				ctor: '_Tuple2',
				_0: _Gizra$elm_restful$Restful_Login$loggedOut(config.initialAnonymousData),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		}
	});

var _Gizra$elm_storage_key$StorageKey$value = function (storageKey) {
	var _p0 = storageKey;
	if (_p0.ctor === 'Existing') {
		return _elm_lang$core$Maybe$Just(_p0._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _Gizra$elm_storage_key$StorageKey$Existing = function (a) {
	return {ctor: 'Existing', _0: a};
};
var _Gizra$elm_storage_key$StorageKey$New = {ctor: 'New'};
var _Gizra$elm_storage_key$StorageKey$isNew = function (storageKey) {
	return _elm_lang$core$Native_Utils.eq(storageKey, _Gizra$elm_storage_key$StorageKey$New);
};
var _Gizra$elm_storage_key$StorageKey$isExisting = function (storageKey) {
	return !_Gizra$elm_storage_key$StorageKey$isNew(storageKey);
};

var _cuducos$elm_format_number$FormatNumber_Locales$Locale = F5(
	function (a, b, c, d, e) {
		return {decimals: a, thousandSeparator: b, decimalSeparator: c, negativePrefix: d, negativeSuffix: e};
	});
var _cuducos$elm_format_number$FormatNumber_Locales$frenchLocale = A5(_cuducos$elm_format_number$FormatNumber_Locales$Locale, 3, ' ', ',', '−', '');
var _cuducos$elm_format_number$FormatNumber_Locales$spanishLocale = A5(_cuducos$elm_format_number$FormatNumber_Locales$Locale, 3, '.', ',', '−', '');
var _cuducos$elm_format_number$FormatNumber_Locales$usLocale = A5(_cuducos$elm_format_number$FormatNumber_Locales$Locale, 2, ',', '.', '−', '');

var _cuducos$elm_format_number$Helpers$stringfy = function (formatted) {
	var decimals = function () {
		var _p0 = formatted.decimals;
		if (_p0.ctor === 'Just') {
			return A2(_elm_lang$core$Basics_ops['++'], formatted.locale.decimalSeparator, _p0._0);
		} else {
			return '';
		}
	}();
	return _elm_lang$core$String$concat(
		{
			ctor: '::',
			_0: A2(_elm_lang$core$Maybe$withDefault, '', formatted.negativePrefix),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$String$join, formatted.locale.thousandSeparator, formatted.integers),
				_1: {
					ctor: '::',
					_0: decimals,
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$core$Maybe$withDefault, '', formatted.negativeSuffix),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _cuducos$elm_format_number$Helpers$splitThousands = function (integers) {
	var reversedSplitThousands = function (value) {
		return (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$String$length(value),
			3) > 0) ? A2(
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				}),
			A2(_elm_lang$core$String$right, 3, value),
			reversedSplitThousands(
				A2(_elm_lang$core$String$dropRight, 3, value))) : {
			ctor: '::',
			_0: value,
			_1: {ctor: '[]'}
		};
	};
	return _elm_lang$core$List$reverse(
		reversedSplitThousands(integers));
};
var _cuducos$elm_format_number$Helpers$isNegative = function (formatted) {
	var onlyZeros = A2(
		_elm_lang$core$String$all,
		function ($char) {
			return _elm_lang$core$Native_Utils.eq(
				$char,
				_elm_lang$core$Native_Utils.chr('0'));
		},
		_elm_lang$core$String$concat(
			A2(
				_elm_lang$core$List$append,
				formatted.integers,
				_elm_lang$core$List$singleton(
					A2(_elm_lang$core$Maybe$withDefault, '', formatted.decimals)))));
	var isPositive = _elm_lang$core$Native_Utils.cmp(formatted.original, 0) > -1;
	return !(isPositive || onlyZeros);
};
var _cuducos$elm_format_number$Helpers$FormattedNumber = F6(
	function (a, b, c, d, e, f) {
		return {locale: a, original: b, integers: c, decimals: d, negativePrefix: e, negativeSuffix: f};
	});
var _cuducos$elm_format_number$Helpers$parse = F2(
	function (locale, original) {
		var parts = A2(
			_elm_lang$core$String$split,
			'.',
			A2(_myrho$elm_round$Round$round, locale.decimals, original));
		var integers = _cuducos$elm_format_number$Helpers$splitThousands(
			A2(
				_elm_lang$core$String$filter,
				_elm_lang$core$Char$isDigit,
				A2(
					_elm_lang$core$Maybe$withDefault,
					'0',
					_elm_lang$core$List$head(parts))));
		var decimals = _elm_lang$core$List$head(
			A2(_elm_lang$core$List$drop, 1, parts));
		var partial = A6(_cuducos$elm_format_number$Helpers$FormattedNumber, locale, original, integers, decimals, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing);
		return _cuducos$elm_format_number$Helpers$isNegative(partial) ? _elm_lang$core$Native_Utils.update(
			partial,
			{
				negativePrefix: _elm_lang$core$Maybe$Just(locale.negativePrefix),
				negativeSuffix: _elm_lang$core$Maybe$Just(locale.negativeSuffix)
			}) : partial;
	});

var _cuducos$elm_format_number$FormatNumber$format = F2(
	function (locale, num) {
		return _cuducos$elm_format_number$Helpers$stringfy(
			A2(_cuducos$elm_format_number$Helpers$parse, locale, num));
	});

var _elm_lang$core$Random$onSelfMsg = F3(
	function (_p1, _p0, seed) {
		return _elm_lang$core$Task$succeed(seed);
	});
var _elm_lang$core$Random$magicNum8 = 2147483562;
var _elm_lang$core$Random$range = function (_p2) {
	return {ctor: '_Tuple2', _0: 0, _1: _elm_lang$core$Random$magicNum8};
};
var _elm_lang$core$Random$magicNum7 = 2147483399;
var _elm_lang$core$Random$magicNum6 = 2147483563;
var _elm_lang$core$Random$magicNum5 = 3791;
var _elm_lang$core$Random$magicNum4 = 40692;
var _elm_lang$core$Random$magicNum3 = 52774;
var _elm_lang$core$Random$magicNum2 = 12211;
var _elm_lang$core$Random$magicNum1 = 53668;
var _elm_lang$core$Random$magicNum0 = 40014;
var _elm_lang$core$Random$step = F2(
	function (_p3, seed) {
		var _p4 = _p3;
		return _p4._0(seed);
	});
var _elm_lang$core$Random$onEffects = F3(
	function (router, commands, seed) {
		var _p5 = commands;
		if (_p5.ctor === '[]') {
			return _elm_lang$core$Task$succeed(seed);
		} else {
			var _p6 = A2(_elm_lang$core$Random$step, _p5._0._0, seed);
			var value = _p6._0;
			var newSeed = _p6._1;
			return A2(
				_elm_lang$core$Task$andThen,
				function (_p7) {
					return A3(_elm_lang$core$Random$onEffects, router, _p5._1, newSeed);
				},
				A2(_elm_lang$core$Platform$sendToApp, router, value));
		}
	});
var _elm_lang$core$Random$listHelp = F4(
	function (list, n, generate, seed) {
		listHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 1) < 0) {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$List$reverse(list),
					_1: seed
				};
			} else {
				var _p8 = generate(seed);
				var value = _p8._0;
				var newSeed = _p8._1;
				var _v2 = {ctor: '::', _0: value, _1: list},
					_v3 = n - 1,
					_v4 = generate,
					_v5 = newSeed;
				list = _v2;
				n = _v3;
				generate = _v4;
				seed = _v5;
				continue listHelp;
			}
		}
	});
var _elm_lang$core$Random$minInt = -2147483648;
var _elm_lang$core$Random$maxInt = 2147483647;
var _elm_lang$core$Random$iLogBase = F2(
	function (b, i) {
		return (_elm_lang$core$Native_Utils.cmp(i, b) < 0) ? 1 : (1 + A2(_elm_lang$core$Random$iLogBase, b, (i / b) | 0));
	});
var _elm_lang$core$Random$command = _elm_lang$core$Native_Platform.leaf('Random');
var _elm_lang$core$Random$Generator = function (a) {
	return {ctor: 'Generator', _0: a};
};
var _elm_lang$core$Random$list = F2(
	function (n, _p9) {
		var _p10 = _p9;
		return _elm_lang$core$Random$Generator(
			function (seed) {
				return A4(
					_elm_lang$core$Random$listHelp,
					{ctor: '[]'},
					n,
					_p10._0,
					seed);
			});
	});
var _elm_lang$core$Random$map = F2(
	function (func, _p11) {
		var _p12 = _p11;
		return _elm_lang$core$Random$Generator(
			function (seed0) {
				var _p13 = _p12._0(seed0);
				var a = _p13._0;
				var seed1 = _p13._1;
				return {
					ctor: '_Tuple2',
					_0: func(a),
					_1: seed1
				};
			});
	});
var _elm_lang$core$Random$map2 = F3(
	function (func, _p15, _p14) {
		var _p16 = _p15;
		var _p17 = _p14;
		return _elm_lang$core$Random$Generator(
			function (seed0) {
				var _p18 = _p16._0(seed0);
				var a = _p18._0;
				var seed1 = _p18._1;
				var _p19 = _p17._0(seed1);
				var b = _p19._0;
				var seed2 = _p19._1;
				return {
					ctor: '_Tuple2',
					_0: A2(func, a, b),
					_1: seed2
				};
			});
	});
var _elm_lang$core$Random$pair = F2(
	function (genA, genB) {
		return A3(
			_elm_lang$core$Random$map2,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			genA,
			genB);
	});
var _elm_lang$core$Random$map3 = F4(
	function (func, _p22, _p21, _p20) {
		var _p23 = _p22;
		var _p24 = _p21;
		var _p25 = _p20;
		return _elm_lang$core$Random$Generator(
			function (seed0) {
				var _p26 = _p23._0(seed0);
				var a = _p26._0;
				var seed1 = _p26._1;
				var _p27 = _p24._0(seed1);
				var b = _p27._0;
				var seed2 = _p27._1;
				var _p28 = _p25._0(seed2);
				var c = _p28._0;
				var seed3 = _p28._1;
				return {
					ctor: '_Tuple2',
					_0: A3(func, a, b, c),
					_1: seed3
				};
			});
	});
var _elm_lang$core$Random$map4 = F5(
	function (func, _p32, _p31, _p30, _p29) {
		var _p33 = _p32;
		var _p34 = _p31;
		var _p35 = _p30;
		var _p36 = _p29;
		return _elm_lang$core$Random$Generator(
			function (seed0) {
				var _p37 = _p33._0(seed0);
				var a = _p37._0;
				var seed1 = _p37._1;
				var _p38 = _p34._0(seed1);
				var b = _p38._0;
				var seed2 = _p38._1;
				var _p39 = _p35._0(seed2);
				var c = _p39._0;
				var seed3 = _p39._1;
				var _p40 = _p36._0(seed3);
				var d = _p40._0;
				var seed4 = _p40._1;
				return {
					ctor: '_Tuple2',
					_0: A4(func, a, b, c, d),
					_1: seed4
				};
			});
	});
var _elm_lang$core$Random$map5 = F6(
	function (func, _p45, _p44, _p43, _p42, _p41) {
		var _p46 = _p45;
		var _p47 = _p44;
		var _p48 = _p43;
		var _p49 = _p42;
		var _p50 = _p41;
		return _elm_lang$core$Random$Generator(
			function (seed0) {
				var _p51 = _p46._0(seed0);
				var a = _p51._0;
				var seed1 = _p51._1;
				var _p52 = _p47._0(seed1);
				var b = _p52._0;
				var seed2 = _p52._1;
				var _p53 = _p48._0(seed2);
				var c = _p53._0;
				var seed3 = _p53._1;
				var _p54 = _p49._0(seed3);
				var d = _p54._0;
				var seed4 = _p54._1;
				var _p55 = _p50._0(seed4);
				var e = _p55._0;
				var seed5 = _p55._1;
				return {
					ctor: '_Tuple2',
					_0: A5(func, a, b, c, d, e),
					_1: seed5
				};
			});
	});
var _elm_lang$core$Random$andThen = F2(
	function (callback, _p56) {
		var _p57 = _p56;
		return _elm_lang$core$Random$Generator(
			function (seed) {
				var _p58 = _p57._0(seed);
				var result = _p58._0;
				var newSeed = _p58._1;
				var _p59 = callback(result);
				var genB = _p59._0;
				return genB(newSeed);
			});
	});
var _elm_lang$core$Random$State = F2(
	function (a, b) {
		return {ctor: 'State', _0: a, _1: b};
	});
var _elm_lang$core$Random$initState = function (seed) {
	var s = A2(_elm_lang$core$Basics$max, seed, 0 - seed);
	var q = (s / (_elm_lang$core$Random$magicNum6 - 1)) | 0;
	var s2 = A2(_elm_lang$core$Basics_ops['%'], q, _elm_lang$core$Random$magicNum7 - 1);
	var s1 = A2(_elm_lang$core$Basics_ops['%'], s, _elm_lang$core$Random$magicNum6 - 1);
	return A2(_elm_lang$core$Random$State, s1 + 1, s2 + 1);
};
var _elm_lang$core$Random$next = function (_p60) {
	var _p61 = _p60;
	var _p63 = _p61._1;
	var _p62 = _p61._0;
	var k2 = (_p63 / _elm_lang$core$Random$magicNum3) | 0;
	var rawState2 = (_elm_lang$core$Random$magicNum4 * (_p63 - (k2 * _elm_lang$core$Random$magicNum3))) - (k2 * _elm_lang$core$Random$magicNum5);
	var newState2 = (_elm_lang$core$Native_Utils.cmp(rawState2, 0) < 0) ? (rawState2 + _elm_lang$core$Random$magicNum7) : rawState2;
	var k1 = (_p62 / _elm_lang$core$Random$magicNum1) | 0;
	var rawState1 = (_elm_lang$core$Random$magicNum0 * (_p62 - (k1 * _elm_lang$core$Random$magicNum1))) - (k1 * _elm_lang$core$Random$magicNum2);
	var newState1 = (_elm_lang$core$Native_Utils.cmp(rawState1, 0) < 0) ? (rawState1 + _elm_lang$core$Random$magicNum6) : rawState1;
	var z = newState1 - newState2;
	var newZ = (_elm_lang$core$Native_Utils.cmp(z, 1) < 0) ? (z + _elm_lang$core$Random$magicNum8) : z;
	return {
		ctor: '_Tuple2',
		_0: newZ,
		_1: A2(_elm_lang$core$Random$State, newState1, newState2)
	};
};
var _elm_lang$core$Random$split = function (_p64) {
	var _p65 = _p64;
	var _p68 = _p65._1;
	var _p67 = _p65._0;
	var _p66 = _elm_lang$core$Tuple$second(
		_elm_lang$core$Random$next(_p65));
	var t1 = _p66._0;
	var t2 = _p66._1;
	var new_s2 = _elm_lang$core$Native_Utils.eq(_p68, 1) ? (_elm_lang$core$Random$magicNum7 - 1) : (_p68 - 1);
	var new_s1 = _elm_lang$core$Native_Utils.eq(_p67, _elm_lang$core$Random$magicNum6 - 1) ? 1 : (_p67 + 1);
	return {
		ctor: '_Tuple2',
		_0: A2(_elm_lang$core$Random$State, new_s1, t2),
		_1: A2(_elm_lang$core$Random$State, t1, new_s2)
	};
};
var _elm_lang$core$Random$Seed = function (a) {
	return {ctor: 'Seed', _0: a};
};
var _elm_lang$core$Random$int = F2(
	function (a, b) {
		return _elm_lang$core$Random$Generator(
			function (_p69) {
				var _p70 = _p69;
				var _p75 = _p70._0;
				var base = 2147483561;
				var f = F3(
					function (n, acc, state) {
						f:
						while (true) {
							var _p71 = n;
							if (_p71 === 0) {
								return {ctor: '_Tuple2', _0: acc, _1: state};
							} else {
								var _p72 = _p75.next(state);
								var x = _p72._0;
								var nextState = _p72._1;
								var _v27 = n - 1,
									_v28 = x + (acc * base),
									_v29 = nextState;
								n = _v27;
								acc = _v28;
								state = _v29;
								continue f;
							}
						}
					});
				var _p73 = (_elm_lang$core$Native_Utils.cmp(a, b) < 0) ? {ctor: '_Tuple2', _0: a, _1: b} : {ctor: '_Tuple2', _0: b, _1: a};
				var lo = _p73._0;
				var hi = _p73._1;
				var k = (hi - lo) + 1;
				var n = A2(_elm_lang$core$Random$iLogBase, base, k);
				var _p74 = A3(f, n, 1, _p75.state);
				var v = _p74._0;
				var nextState = _p74._1;
				return {
					ctor: '_Tuple2',
					_0: lo + A2(_elm_lang$core$Basics_ops['%'], v, k),
					_1: _elm_lang$core$Random$Seed(
						_elm_lang$core$Native_Utils.update(
							_p75,
							{state: nextState}))
				};
			});
	});
var _elm_lang$core$Random$bool = A2(
	_elm_lang$core$Random$map,
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.eq(x, y);
		})(1),
	A2(_elm_lang$core$Random$int, 0, 1));
var _elm_lang$core$Random$float = F2(
	function (a, b) {
		return _elm_lang$core$Random$Generator(
			function (seed) {
				var _p76 = A2(
					_elm_lang$core$Random$step,
					A2(_elm_lang$core$Random$int, _elm_lang$core$Random$minInt, _elm_lang$core$Random$maxInt),
					seed);
				var number = _p76._0;
				var newSeed = _p76._1;
				var negativeOneToOne = _elm_lang$core$Basics$toFloat(number) / _elm_lang$core$Basics$toFloat(_elm_lang$core$Random$maxInt - _elm_lang$core$Random$minInt);
				var _p77 = (_elm_lang$core$Native_Utils.cmp(a, b) < 0) ? {ctor: '_Tuple2', _0: a, _1: b} : {ctor: '_Tuple2', _0: b, _1: a};
				var lo = _p77._0;
				var hi = _p77._1;
				var scaled = ((lo + hi) / 2) + ((hi - lo) * negativeOneToOne);
				return {ctor: '_Tuple2', _0: scaled, _1: newSeed};
			});
	});
var _elm_lang$core$Random$initialSeed = function (n) {
	return _elm_lang$core$Random$Seed(
		{
			state: _elm_lang$core$Random$initState(n),
			next: _elm_lang$core$Random$next,
			split: _elm_lang$core$Random$split,
			range: _elm_lang$core$Random$range
		});
};
var _elm_lang$core$Random$init = A2(
	_elm_lang$core$Task$andThen,
	function (t) {
		return _elm_lang$core$Task$succeed(
			_elm_lang$core$Random$initialSeed(
				_elm_lang$core$Basics$round(t)));
	},
	_elm_lang$core$Time$now);
var _elm_lang$core$Random$Generate = function (a) {
	return {ctor: 'Generate', _0: a};
};
var _elm_lang$core$Random$generate = F2(
	function (tagger, generator) {
		return _elm_lang$core$Random$command(
			_elm_lang$core$Random$Generate(
				A2(_elm_lang$core$Random$map, tagger, generator)));
	});
var _elm_lang$core$Random$cmdMap = F2(
	function (func, _p78) {
		var _p79 = _p78;
		return _elm_lang$core$Random$Generate(
			A2(_elm_lang$core$Random$map, func, _p79._0));
	});
_elm_lang$core$Native_Platform.effectManagers['Random'] = {pkg: 'elm-lang/core', init: _elm_lang$core$Random$init, onEffects: _elm_lang$core$Random$onEffects, onSelfMsg: _elm_lang$core$Random$onSelfMsg, tag: 'cmd', cmdMap: _elm_lang$core$Random$cmdMap};

var _elm_community$json_extra$Json_Encode_Extra$dict = F3(
	function (toKey, toValue, dict) {
		return _elm_lang$core$Json_Encode$object(
			A2(
				_elm_lang$core$List$map,
				function (_p0) {
					var _p1 = _p0;
					return {
						ctor: '_Tuple2',
						_0: toKey(_p1._0),
						_1: toValue(_p1._1)
					};
				},
				_elm_lang$core$Dict$toList(dict)));
	});
var _elm_community$json_extra$Json_Encode_Extra$maybe = function (encoder) {
	return function (_p2) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			_elm_lang$core$Json_Encode$null,
			A2(_elm_lang$core$Maybe$map, encoder, _p2));
	};
};

var _elm_lang$core$Process$kill = _elm_lang$core$Native_Scheduler.kill;
var _elm_lang$core$Process$sleep = _elm_lang$core$Native_Scheduler.sleep;
var _elm_lang$core$Process$spawn = _elm_lang$core$Native_Scheduler.spawn;

var _elm_lang$dom$Native_Dom = function() {

var fakeNode = {
	addEventListener: function() {},
	removeEventListener: function() {}
};

var onDocument = on(typeof document !== 'undefined' ? document : fakeNode);
var onWindow = on(typeof window !== 'undefined' ? window : fakeNode);

function on(node)
{
	return function(eventName, decoder, toTask)
	{
		return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {

			function performTask(event)
			{
				var result = A2(_elm_lang$core$Json_Decode$decodeValue, decoder, event);
				if (result.ctor === 'Ok')
				{
					_elm_lang$core$Native_Scheduler.rawSpawn(toTask(result._0));
				}
			}

			node.addEventListener(eventName, performTask);

			return function()
			{
				node.removeEventListener(eventName, performTask);
			};
		});
	};
}

var rAF = typeof requestAnimationFrame !== 'undefined'
	? requestAnimationFrame
	: function(callback) { callback(); };

function withNode(id, doStuff)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		rAF(function()
		{
			var node = document.getElementById(id);
			if (node === null)
			{
				callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'NotFound', _0: id }));
				return;
			}
			callback(_elm_lang$core$Native_Scheduler.succeed(doStuff(node)));
		});
	});
}


// FOCUS

function focus(id)
{
	return withNode(id, function(node) {
		node.focus();
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function blur(id)
{
	return withNode(id, function(node) {
		node.blur();
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}


// SCROLLING

function getScrollTop(id)
{
	return withNode(id, function(node) {
		return node.scrollTop;
	});
}

function setScrollTop(id, desiredScrollTop)
{
	return withNode(id, function(node) {
		node.scrollTop = desiredScrollTop;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function toBottom(id)
{
	return withNode(id, function(node) {
		node.scrollTop = node.scrollHeight;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function getScrollLeft(id)
{
	return withNode(id, function(node) {
		return node.scrollLeft;
	});
}

function setScrollLeft(id, desiredScrollLeft)
{
	return withNode(id, function(node) {
		node.scrollLeft = desiredScrollLeft;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function toRight(id)
{
	return withNode(id, function(node) {
		node.scrollLeft = node.scrollWidth;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}


// SIZE

function width(options, id)
{
	return withNode(id, function(node) {
		switch (options.ctor)
		{
			case 'Content':
				return node.scrollWidth;
			case 'VisibleContent':
				return node.clientWidth;
			case 'VisibleContentWithBorders':
				return node.offsetWidth;
			case 'VisibleContentWithBordersAndMargins':
				var rect = node.getBoundingClientRect();
				return rect.right - rect.left;
		}
	});
}

function height(options, id)
{
	return withNode(id, function(node) {
		switch (options.ctor)
		{
			case 'Content':
				return node.scrollHeight;
			case 'VisibleContent':
				return node.clientHeight;
			case 'VisibleContentWithBorders':
				return node.offsetHeight;
			case 'VisibleContentWithBordersAndMargins':
				var rect = node.getBoundingClientRect();
				return rect.bottom - rect.top;
		}
	});
}

return {
	onDocument: F3(onDocument),
	onWindow: F3(onWindow),

	focus: focus,
	blur: blur,

	getScrollTop: getScrollTop,
	setScrollTop: F2(setScrollTop),
	getScrollLeft: getScrollLeft,
	setScrollLeft: F2(setScrollLeft),
	toBottom: toBottom,
	toRight: toRight,

	height: F2(height),
	width: F2(width)
};

}();

var _elm_lang$dom$Dom_LowLevel$onWindow = _elm_lang$dom$Native_Dom.onWindow;
var _elm_lang$dom$Dom_LowLevel$onDocument = _elm_lang$dom$Native_Dom.onDocument;

var _elm_lang$navigation$Native_Navigation = function() {


// FAKE NAVIGATION

function go(n)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		if (n !== 0)
		{
			history.go(n);
		}
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function pushState(url)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		history.pushState({}, '', url);
		callback(_elm_lang$core$Native_Scheduler.succeed(getLocation()));
	});
}

function replaceState(url)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		history.replaceState({}, '', url);
		callback(_elm_lang$core$Native_Scheduler.succeed(getLocation()));
	});
}


// REAL NAVIGATION

function reloadPage(skipCache)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		document.location.reload(skipCache);
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function setLocation(url)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		try
		{
			window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			document.location.reload(false);
		}
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}


// GET LOCATION

function getLocation()
{
	var location = document.location;

	return {
		href: location.href,
		host: location.host,
		hostname: location.hostname,
		protocol: location.protocol,
		origin: location.origin,
		port_: location.port,
		pathname: location.pathname,
		search: location.search,
		hash: location.hash,
		username: location.username,
		password: location.password
	};
}


// DETECT IE11 PROBLEMS

function isInternetExplorer11()
{
	return window.navigator.userAgent.indexOf('Trident') !== -1;
}


return {
	go: go,
	setLocation: setLocation,
	reloadPage: reloadPage,
	pushState: pushState,
	replaceState: replaceState,
	getLocation: getLocation,
	isInternetExplorer11: isInternetExplorer11
};

}();

var _elm_lang$navigation$Navigation$replaceState = _elm_lang$navigation$Native_Navigation.replaceState;
var _elm_lang$navigation$Navigation$pushState = _elm_lang$navigation$Native_Navigation.pushState;
var _elm_lang$navigation$Navigation$go = _elm_lang$navigation$Native_Navigation.go;
var _elm_lang$navigation$Navigation$reloadPage = _elm_lang$navigation$Native_Navigation.reloadPage;
var _elm_lang$navigation$Navigation$setLocation = _elm_lang$navigation$Native_Navigation.setLocation;
var _elm_lang$navigation$Navigation_ops = _elm_lang$navigation$Navigation_ops || {};
_elm_lang$navigation$Navigation_ops['&>'] = F2(
	function (task1, task2) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (_p0) {
				return task2;
			},
			task1);
	});
var _elm_lang$navigation$Navigation$notify = F3(
	function (router, subs, location) {
		var send = function (_p1) {
			var _p2 = _p1;
			return A2(
				_elm_lang$core$Platform$sendToApp,
				router,
				_p2._0(location));
		};
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			_elm_lang$core$Task$sequence(
				A2(_elm_lang$core$List$map, send, subs)),
			_elm_lang$core$Task$succeed(
				{ctor: '_Tuple0'}));
	});
var _elm_lang$navigation$Navigation$cmdHelp = F3(
	function (router, subs, cmd) {
		var _p3 = cmd;
		switch (_p3.ctor) {
			case 'Jump':
				return _elm_lang$navigation$Navigation$go(_p3._0);
			case 'New':
				return A2(
					_elm_lang$core$Task$andThen,
					A2(_elm_lang$navigation$Navigation$notify, router, subs),
					_elm_lang$navigation$Navigation$pushState(_p3._0));
			case 'Modify':
				return A2(
					_elm_lang$core$Task$andThen,
					A2(_elm_lang$navigation$Navigation$notify, router, subs),
					_elm_lang$navigation$Navigation$replaceState(_p3._0));
			case 'Visit':
				return _elm_lang$navigation$Navigation$setLocation(_p3._0);
			default:
				return _elm_lang$navigation$Navigation$reloadPage(_p3._0);
		}
	});
var _elm_lang$navigation$Navigation$killPopWatcher = function (popWatcher) {
	var _p4 = popWatcher;
	if (_p4.ctor === 'Normal') {
		return _elm_lang$core$Process$kill(_p4._0);
	} else {
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			_elm_lang$core$Process$kill(_p4._0),
			_elm_lang$core$Process$kill(_p4._1));
	}
};
var _elm_lang$navigation$Navigation$onSelfMsg = F3(
	function (router, location, state) {
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			A3(_elm_lang$navigation$Navigation$notify, router, state.subs, location),
			_elm_lang$core$Task$succeed(state));
	});
var _elm_lang$navigation$Navigation$subscription = _elm_lang$core$Native_Platform.leaf('Navigation');
var _elm_lang$navigation$Navigation$command = _elm_lang$core$Native_Platform.leaf('Navigation');
var _elm_lang$navigation$Navigation$Location = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return {href: a, host: b, hostname: c, protocol: d, origin: e, port_: f, pathname: g, search: h, hash: i, username: j, password: k};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _elm_lang$navigation$Navigation$State = F2(
	function (a, b) {
		return {subs: a, popWatcher: b};
	});
var _elm_lang$navigation$Navigation$init = _elm_lang$core$Task$succeed(
	A2(
		_elm_lang$navigation$Navigation$State,
		{ctor: '[]'},
		_elm_lang$core$Maybe$Nothing));
var _elm_lang$navigation$Navigation$Reload = function (a) {
	return {ctor: 'Reload', _0: a};
};
var _elm_lang$navigation$Navigation$reload = _elm_lang$navigation$Navigation$command(
	_elm_lang$navigation$Navigation$Reload(false));
var _elm_lang$navigation$Navigation$reloadAndSkipCache = _elm_lang$navigation$Navigation$command(
	_elm_lang$navigation$Navigation$Reload(true));
var _elm_lang$navigation$Navigation$Visit = function (a) {
	return {ctor: 'Visit', _0: a};
};
var _elm_lang$navigation$Navigation$load = function (url) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Visit(url));
};
var _elm_lang$navigation$Navigation$Modify = function (a) {
	return {ctor: 'Modify', _0: a};
};
var _elm_lang$navigation$Navigation$modifyUrl = function (url) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Modify(url));
};
var _elm_lang$navigation$Navigation$New = function (a) {
	return {ctor: 'New', _0: a};
};
var _elm_lang$navigation$Navigation$newUrl = function (url) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$New(url));
};
var _elm_lang$navigation$Navigation$Jump = function (a) {
	return {ctor: 'Jump', _0: a};
};
var _elm_lang$navigation$Navigation$back = function (n) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Jump(0 - n));
};
var _elm_lang$navigation$Navigation$forward = function (n) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Jump(n));
};
var _elm_lang$navigation$Navigation$cmdMap = F2(
	function (_p5, myCmd) {
		var _p6 = myCmd;
		switch (_p6.ctor) {
			case 'Jump':
				return _elm_lang$navigation$Navigation$Jump(_p6._0);
			case 'New':
				return _elm_lang$navigation$Navigation$New(_p6._0);
			case 'Modify':
				return _elm_lang$navigation$Navigation$Modify(_p6._0);
			case 'Visit':
				return _elm_lang$navigation$Navigation$Visit(_p6._0);
			default:
				return _elm_lang$navigation$Navigation$Reload(_p6._0);
		}
	});
var _elm_lang$navigation$Navigation$Monitor = function (a) {
	return {ctor: 'Monitor', _0: a};
};
var _elm_lang$navigation$Navigation$program = F2(
	function (locationToMessage, stuff) {
		var init = stuff.init(
			_elm_lang$navigation$Native_Navigation.getLocation(
				{ctor: '_Tuple0'}));
		var subs = function (model) {
			return _elm_lang$core$Platform_Sub$batch(
				{
					ctor: '::',
					_0: _elm_lang$navigation$Navigation$subscription(
						_elm_lang$navigation$Navigation$Monitor(locationToMessage)),
					_1: {
						ctor: '::',
						_0: stuff.subscriptions(model),
						_1: {ctor: '[]'}
					}
				});
		};
		return _elm_lang$html$Html$program(
			{init: init, view: stuff.view, update: stuff.update, subscriptions: subs});
	});
var _elm_lang$navigation$Navigation$programWithFlags = F2(
	function (locationToMessage, stuff) {
		var init = function (flags) {
			return A2(
				stuff.init,
				flags,
				_elm_lang$navigation$Native_Navigation.getLocation(
					{ctor: '_Tuple0'}));
		};
		var subs = function (model) {
			return _elm_lang$core$Platform_Sub$batch(
				{
					ctor: '::',
					_0: _elm_lang$navigation$Navigation$subscription(
						_elm_lang$navigation$Navigation$Monitor(locationToMessage)),
					_1: {
						ctor: '::',
						_0: stuff.subscriptions(model),
						_1: {ctor: '[]'}
					}
				});
		};
		return _elm_lang$html$Html$programWithFlags(
			{init: init, view: stuff.view, update: stuff.update, subscriptions: subs});
	});
var _elm_lang$navigation$Navigation$subMap = F2(
	function (func, _p7) {
		var _p8 = _p7;
		return _elm_lang$navigation$Navigation$Monitor(
			function (_p9) {
				return func(
					_p8._0(_p9));
			});
	});
var _elm_lang$navigation$Navigation$InternetExplorer = F2(
	function (a, b) {
		return {ctor: 'InternetExplorer', _0: a, _1: b};
	});
var _elm_lang$navigation$Navigation$Normal = function (a) {
	return {ctor: 'Normal', _0: a};
};
var _elm_lang$navigation$Navigation$spawnPopWatcher = function (router) {
	var reportLocation = function (_p10) {
		return A2(
			_elm_lang$core$Platform$sendToSelf,
			router,
			_elm_lang$navigation$Native_Navigation.getLocation(
				{ctor: '_Tuple0'}));
	};
	return _elm_lang$navigation$Native_Navigation.isInternetExplorer11(
		{ctor: '_Tuple0'}) ? A3(
		_elm_lang$core$Task$map2,
		_elm_lang$navigation$Navigation$InternetExplorer,
		_elm_lang$core$Process$spawn(
			A3(_elm_lang$dom$Dom_LowLevel$onWindow, 'popstate', _elm_lang$core$Json_Decode$value, reportLocation)),
		_elm_lang$core$Process$spawn(
			A3(_elm_lang$dom$Dom_LowLevel$onWindow, 'hashchange', _elm_lang$core$Json_Decode$value, reportLocation))) : A2(
		_elm_lang$core$Task$map,
		_elm_lang$navigation$Navigation$Normal,
		_elm_lang$core$Process$spawn(
			A3(_elm_lang$dom$Dom_LowLevel$onWindow, 'popstate', _elm_lang$core$Json_Decode$value, reportLocation)));
};
var _elm_lang$navigation$Navigation$onEffects = F4(
	function (router, cmds, subs, _p11) {
		var _p12 = _p11;
		var _p15 = _p12.popWatcher;
		var stepState = function () {
			var _p13 = {ctor: '_Tuple2', _0: subs, _1: _p15};
			_v6_2:
			do {
				if (_p13._0.ctor === '[]') {
					if (_p13._1.ctor === 'Just') {
						return A2(
							_elm_lang$navigation$Navigation_ops['&>'],
							_elm_lang$navigation$Navigation$killPopWatcher(_p13._1._0),
							_elm_lang$core$Task$succeed(
								A2(_elm_lang$navigation$Navigation$State, subs, _elm_lang$core$Maybe$Nothing)));
					} else {
						break _v6_2;
					}
				} else {
					if (_p13._1.ctor === 'Nothing') {
						return A2(
							_elm_lang$core$Task$map,
							function (_p14) {
								return A2(
									_elm_lang$navigation$Navigation$State,
									subs,
									_elm_lang$core$Maybe$Just(_p14));
							},
							_elm_lang$navigation$Navigation$spawnPopWatcher(router));
					} else {
						break _v6_2;
					}
				}
			} while(false);
			return _elm_lang$core$Task$succeed(
				A2(_elm_lang$navigation$Navigation$State, subs, _p15));
		}();
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			_elm_lang$core$Task$sequence(
				A2(
					_elm_lang$core$List$map,
					A2(_elm_lang$navigation$Navigation$cmdHelp, router, subs),
					cmds)),
			stepState);
	});
_elm_lang$core$Native_Platform.effectManagers['Navigation'] = {pkg: 'elm-lang/navigation', init: _elm_lang$navigation$Navigation$init, onEffects: _elm_lang$navigation$Navigation$onEffects, onSelfMsg: _elm_lang$navigation$Navigation$onSelfMsg, tag: 'fx', cmdMap: _elm_lang$navigation$Navigation$cmdMap, subMap: _elm_lang$navigation$Navigation$subMap};

var _etaque$elm_form$Form_Tree$updateListAtIndex = F2(
	function (index, updater) {
		return _elm_lang$core$List$indexedMap(
			F2(
				function (i, f) {
					return _elm_lang$core$Native_Utils.eq(i, index) ? updater(f) : f;
				}));
	});
var _etaque$elm_form$Form_Tree$asList = function (value) {
	var _p0 = value;
	if (_p0.ctor === 'List') {
		return _p0._0;
	} else {
		return {ctor: '[]'};
	}
};
var _etaque$elm_form$Form_Tree$asValue = function (node) {
	var _p1 = node;
	if (_p1.ctor === 'Value') {
		return _elm_lang$core$Maybe$Just(_p1._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _etaque$elm_form$Form_Tree$valuesWithPath = function (tree) {
	var mapGroupItem = F2(
		function (path, _p2) {
			var _p3 = _p2;
			return A2(
				walkTree,
				A2(
					_elm_lang$core$Basics_ops['++'],
					path,
					{
						ctor: '::',
						_0: _p3._0,
						_1: {ctor: '[]'}
					}),
				_p3._1);
		});
	var walkTree = F2(
		function (path, value) {
			var _p4 = value;
			switch (_p4.ctor) {
				case 'Group':
					return A2(
						_elm_lang$core$List$concatMap,
						mapGroupItem(path),
						_elm_lang$core$Dict$toList(_p4._0));
				case 'List':
					return A2(
						_elm_lang$core$List$concatMap,
						mapGroupItem(path),
						A2(
							_elm_lang$core$List$indexedMap,
							F2(
								function (index, item) {
									return {
										ctor: '_Tuple2',
										_0: _elm_lang$core$Basics$toString(index),
										_1: item
									};
								}),
							_p4._0));
				default:
					return {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: A2(_elm_lang$core$String$join, '.', path),
							_1: _p4._0
						},
						_1: {ctor: '[]'}
					};
			}
		});
	return A2(
		walkTree,
		{ctor: '[]'},
		tree);
};
var _etaque$elm_form$Form_Tree$getAtIndex = F2(
	function (index, value) {
		var _p5 = value;
		switch (_p5.ctor) {
			case 'List':
				return _elm_lang$core$List$head(
					A2(_elm_lang$core$List$drop, index, _p5._0));
			case 'Group':
				return A2(
					_elm_lang$core$Dict$get,
					_elm_lang$core$Basics$toString(index),
					_p5._0);
			default:
				return _elm_lang$core$Maybe$Nothing;
		}
	});
var _etaque$elm_form$Form_Tree$getAtName = F2(
	function (name, value) {
		var _p6 = value;
		if (_p6.ctor === 'Group') {
			return A2(_elm_lang$core$Dict$get, name, _p6._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _etaque$elm_form$Form_Tree$Value = function (a) {
	return {ctor: 'Value', _0: a};
};
var _etaque$elm_form$Form_Tree$List = function (a) {
	return {ctor: 'List', _0: a};
};
var _etaque$elm_form$Form_Tree$Group = function (a) {
	return {ctor: 'Group', _0: a};
};
var _etaque$elm_form$Form_Tree$group = function (items) {
	return _etaque$elm_form$Form_Tree$Group(
		_elm_lang$core$Dict$fromList(items));
};
var _etaque$elm_form$Form_Tree$merge = F2(
	function (t1, t2) {
		var _p7 = {ctor: '_Tuple2', _0: t1, _1: t2};
		if (((_p7.ctor === '_Tuple2') && (_p7._0.ctor === 'Group')) && (_p7._1.ctor === 'Group')) {
			return _etaque$elm_form$Form_Tree$Group(
				A2(_elm_lang$core$Dict$union, _p7._0._0, _p7._1._0));
		} else {
			return t1;
		}
	});
var _etaque$elm_form$Form_Tree$recursiveSet = F3(
	function (fragments, node, tree) {
		var _p8 = fragments;
		if (_p8.ctor === '::') {
			var _p11 = _p8._1;
			var _p9 = _p8._0;
			if (_p9.ctor === 'IntFragment') {
				return _etaque$elm_form$Form_Tree$List(
					A3(
						_etaque$elm_form$Form_Tree$updateListAtIndex,
						_p9._0,
						A2(_etaque$elm_form$Form_Tree$recursiveSet, _p11, node),
						_etaque$elm_form$Form_Tree$asList(tree)));
			} else {
				var _p10 = _p9._0;
				var target = A2(
					_elm_lang$core$Maybe$withDefault,
					_etaque$elm_form$Form_Tree$Group(_elm_lang$core$Dict$empty),
					A2(_etaque$elm_form$Form_Tree$getAtName, _p10, tree));
				var childNode = A3(_etaque$elm_form$Form_Tree$recursiveSet, _p11, node, target);
				return A2(
					_etaque$elm_form$Form_Tree$merge,
					_etaque$elm_form$Form_Tree$Group(
						_elm_lang$core$Dict$fromList(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: _p10, _1: childNode},
								_1: {ctor: '[]'}
							})),
					tree);
			}
		} else {
			return node;
		}
	});
var _etaque$elm_form$Form_Tree$IntFragment = function (a) {
	return {ctor: 'IntFragment', _0: a};
};
var _etaque$elm_form$Form_Tree$StringFragment = function (a) {
	return {ctor: 'StringFragment', _0: a};
};
var _etaque$elm_form$Form_Tree$toFragment = function (s) {
	var _p12 = _elm_lang$core$String$toInt(s);
	if (_p12.ctor === 'Ok') {
		return _etaque$elm_form$Form_Tree$IntFragment(_p12._0);
	} else {
		return _etaque$elm_form$Form_Tree$StringFragment(s);
	}
};
var _etaque$elm_form$Form_Tree$extractFragments = function (name) {
	return A2(
		_elm_lang$core$List$map,
		_etaque$elm_form$Form_Tree$toFragment,
		A2(_elm_lang$core$String$split, '.', name));
};
var _etaque$elm_form$Form_Tree$getAtPath = F2(
	function (path, tree) {
		var walkPath = F2(
			function (fragment, maybeField) {
				var _p13 = fragment;
				if (_p13.ctor === 'IntFragment') {
					return A2(
						_elm_lang$core$Maybe$andThen,
						_etaque$elm_form$Form_Tree$getAtIndex(_p13._0),
						maybeField);
				} else {
					return A2(
						_elm_lang$core$Maybe$andThen,
						_etaque$elm_form$Form_Tree$getAtName(_p13._0),
						maybeField);
				}
			});
		return A3(
			_elm_lang$core$List$foldl,
			walkPath,
			_elm_lang$core$Maybe$Just(tree),
			_etaque$elm_form$Form_Tree$extractFragments(path));
	});
var _etaque$elm_form$Form_Tree$setAtPath = F3(
	function (path, node, tree) {
		return A3(
			_etaque$elm_form$Form_Tree$recursiveSet,
			_etaque$elm_form$Form_Tree$extractFragments(path),
			node,
			tree);
	});

var _etaque$elm_form$Form_Error$value = _etaque$elm_form$Form_Tree$Value;
var _etaque$elm_form$Form_Error$CustomError = function (a) {
	return {ctor: 'CustomError', _0: a};
};
var _etaque$elm_form$Form_Error$NotIncludedIn = {ctor: 'NotIncludedIn'};
var _etaque$elm_form$Form_Error$LongerStringThan = function (a) {
	return {ctor: 'LongerStringThan', _0: a};
};
var _etaque$elm_form$Form_Error$ShorterStringThan = function (a) {
	return {ctor: 'ShorterStringThan', _0: a};
};
var _etaque$elm_form$Form_Error$GreaterFloatThan = function (a) {
	return {ctor: 'GreaterFloatThan', _0: a};
};
var _etaque$elm_form$Form_Error$SmallerFloatThan = function (a) {
	return {ctor: 'SmallerFloatThan', _0: a};
};
var _etaque$elm_form$Form_Error$GreaterIntThan = function (a) {
	return {ctor: 'GreaterIntThan', _0: a};
};
var _etaque$elm_form$Form_Error$SmallerIntThan = function (a) {
	return {ctor: 'SmallerIntThan', _0: a};
};
var _etaque$elm_form$Form_Error$InvalidDate = {ctor: 'InvalidDate'};
var _etaque$elm_form$Form_Error$InvalidBool = {ctor: 'InvalidBool'};
var _etaque$elm_form$Form_Error$InvalidFloat = {ctor: 'InvalidFloat'};
var _etaque$elm_form$Form_Error$InvalidInt = {ctor: 'InvalidInt'};
var _etaque$elm_form$Form_Error$InvalidFormat = {ctor: 'InvalidFormat'};
var _etaque$elm_form$Form_Error$InvalidEmail = {ctor: 'InvalidEmail'};
var _etaque$elm_form$Form_Error$InvalidString = {ctor: 'InvalidString'};
var _etaque$elm_form$Form_Error$Empty = {ctor: 'Empty'};

var _etaque$elm_form$Form_Field$asString = function (field) {
	var _p0 = field;
	if ((_p0.ctor === 'Value') && (_p0._0.ctor === 'String')) {
		return _elm_lang$core$Maybe$Just(_p0._0._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _etaque$elm_form$Form_Field$asBool = function (field) {
	var _p1 = field;
	if ((_p1.ctor === 'Value') && (_p1._0.ctor === 'Bool')) {
		return _elm_lang$core$Maybe$Just(_p1._0._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _etaque$elm_form$Form_Field$list = _etaque$elm_form$Form_Tree$List;
var _etaque$elm_form$Form_Field$group = _etaque$elm_form$Form_Tree$group;
var _etaque$elm_form$Form_Field$value = _etaque$elm_form$Form_Tree$Value;
var _etaque$elm_form$Form_Field$EmptyField = {ctor: 'EmptyField'};
var _etaque$elm_form$Form_Field$Bool = function (a) {
	return {ctor: 'Bool', _0: a};
};
var _etaque$elm_form$Form_Field$bool = function (_p2) {
	return _etaque$elm_form$Form_Tree$Value(
		_etaque$elm_form$Form_Field$Bool(_p2));
};
var _etaque$elm_form$Form_Field$String = function (a) {
	return {ctor: 'String', _0: a};
};
var _etaque$elm_form$Form_Field$string = function (_p3) {
	return _etaque$elm_form$Form_Tree$Value(
		_etaque$elm_form$Form_Field$String(_p3));
};

var _etaque$elm_form$Form_Validate$list = F2(
	function (validation, field) {
		var _p0 = field;
		if (_p0.ctor === 'List') {
			var indexedErrMaybe = F2(
				function (index, res) {
					var _p1 = res;
					if (_p1.ctor === 'Ok') {
						return _elm_lang$core$Maybe$Nothing;
					} else {
						return _elm_lang$core$Maybe$Just(
							{
								ctor: '_Tuple2',
								_0: _elm_lang$core$Basics$toString(index),
								_1: _p1._0
							});
					}
				});
			var results = A2(_elm_lang$core$List$map, validation, _p0._0);
			var errors = A2(
				_elm_lang$core$List$filterMap,
				_elm_lang$core$Basics$identity,
				A2(_elm_lang$core$List$indexedMap, indexedErrMaybe, results));
			return _elm_lang$core$List$isEmpty(errors) ? _elm_lang$core$Result$Ok(
				A2(_elm_lang$core$List$filterMap, _elm_lang$core$Result$toMaybe, results)) : _elm_lang$core$Result$Err(
				_etaque$elm_form$Form_Tree$group(errors));
		} else {
			return _elm_lang$core$Result$Ok(
				{ctor: '[]'});
		}
	});
var _etaque$elm_form$Form_Validate$oneOf = F2(
	function (validations, field) {
		var walkResults = F2(
			function (result, combined) {
				var _p2 = {ctor: '_Tuple2', _0: combined, _1: result};
				if ((_p2.ctor === '_Tuple2') && (_p2._0.ctor === 'Ok')) {
					return combined;
				} else {
					return result;
				}
			});
		var results = A2(
			_elm_lang$core$List$map,
			function (v) {
				return v(field);
			},
			validations);
		return A3(
			_elm_lang$core$List$foldl,
			walkResults,
			_elm_lang$core$Result$Err(
				_etaque$elm_form$Form_Error$value(_etaque$elm_form$Form_Error$Empty)),
			results);
	});
var _etaque$elm_form$Form_Validate$customValidation = F3(
	function (validation, callback, field) {
		return A2(
			_elm_lang$core$Result$andThen,
			callback,
			validation(field));
	});
var _etaque$elm_form$Form_Validate$succeed = F2(
	function (a, field) {
		return _elm_lang$core$Result$Ok(a);
	});
var _etaque$elm_form$Form_Validate$fail = F2(
	function (error, field) {
		return _elm_lang$core$Result$Err(error);
	});
var _etaque$elm_form$Form_Validate$includedIn = F3(
	function (items, s, field) {
		return A2(_elm_lang$core$List$member, s, items) ? _elm_lang$core$Result$Ok(s) : _elm_lang$core$Result$Err(
			_etaque$elm_form$Form_Error$value(_etaque$elm_form$Form_Error$NotIncludedIn));
	});
var _etaque$elm_form$Form_Validate$validEmailPattern = _elm_lang$core$Regex$caseInsensitive(
	_elm_lang$core$Regex$regex('^[a-zA-Z0-9.!#$%&\'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$'));
var _etaque$elm_form$Form_Validate$format = F3(
	function (regex, s, field) {
		return A2(_elm_lang$core$Regex$contains, regex, s) ? _elm_lang$core$Result$Ok(s) : _elm_lang$core$Result$Err(
			_etaque$elm_form$Form_Error$value(_etaque$elm_form$Form_Error$InvalidFormat));
	});
var _etaque$elm_form$Form_Validate$maxFloat = F3(
	function (max, i, field) {
		return (_elm_lang$core$Native_Utils.cmp(i, max) < 1) ? _elm_lang$core$Result$Ok(i) : _elm_lang$core$Result$Err(
			_etaque$elm_form$Form_Error$value(
				_etaque$elm_form$Form_Error$GreaterFloatThan(max)));
	});
var _etaque$elm_form$Form_Validate$minFloat = F3(
	function (min, i, field) {
		return (_elm_lang$core$Native_Utils.cmp(i, min) > -1) ? _elm_lang$core$Result$Ok(i) : _elm_lang$core$Result$Err(
			_etaque$elm_form$Form_Error$value(
				_etaque$elm_form$Form_Error$SmallerFloatThan(min)));
	});
var _etaque$elm_form$Form_Validate$maxInt = F3(
	function (max, i, field) {
		return (_elm_lang$core$Native_Utils.cmp(i, max) < 1) ? _elm_lang$core$Result$Ok(i) : _elm_lang$core$Result$Err(
			_etaque$elm_form$Form_Error$value(
				_etaque$elm_form$Form_Error$GreaterIntThan(max)));
	});
var _etaque$elm_form$Form_Validate$minInt = F3(
	function (min, i, field) {
		return (_elm_lang$core$Native_Utils.cmp(i, min) > -1) ? _elm_lang$core$Result$Ok(i) : _elm_lang$core$Result$Err(
			_etaque$elm_form$Form_Error$value(
				_etaque$elm_form$Form_Error$SmallerIntThan(min)));
	});
var _etaque$elm_form$Form_Validate$maxLength = F3(
	function (max, s, field) {
		return (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$String$length(s),
			max) < 1) ? _elm_lang$core$Result$Ok(s) : _elm_lang$core$Result$Err(
			_etaque$elm_form$Form_Error$value(
				_etaque$elm_form$Form_Error$LongerStringThan(max)));
	});
var _etaque$elm_form$Form_Validate$minLength = F3(
	function (min, s, field) {
		return (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$String$length(s),
			min) > -1) ? _elm_lang$core$Result$Ok(s) : _elm_lang$core$Result$Err(
			_etaque$elm_form$Form_Error$value(
				_etaque$elm_form$Form_Error$ShorterStringThan(min)));
	});
var _etaque$elm_form$Form_Validate$nonEmpty = F2(
	function (s, field) {
		return _elm_lang$core$String$isEmpty(s) ? _elm_lang$core$Result$Err(
			_etaque$elm_form$Form_Error$value(_etaque$elm_form$Form_Error$Empty)) : _elm_lang$core$Result$Ok(s);
	});
var _etaque$elm_form$Form_Validate$maybe = F2(
	function (validation, field) {
		return _elm_lang$core$Result$Ok(
			_elm_lang$core$Result$toMaybe(
				validation(field)));
	});
var _etaque$elm_form$Form_Validate$date = function (v) {
	var _p3 = _etaque$elm_form$Form_Field$asString(v);
	if (_p3.ctor === 'Just') {
		return A2(
			_elm_lang$core$Result$mapError,
			function (_p4) {
				return _etaque$elm_form$Form_Error$value(_etaque$elm_form$Form_Error$InvalidDate);
			},
			_elm_lang$core$Date$fromString(_p3._0));
	} else {
		return _elm_lang$core$Result$Err(
			_etaque$elm_form$Form_Error$value(_etaque$elm_form$Form_Error$InvalidDate));
	}
};
var _etaque$elm_form$Form_Validate$bool = function (v) {
	var _p5 = _etaque$elm_form$Form_Field$asBool(v);
	if (_p5.ctor === 'Just') {
		return _elm_lang$core$Result$Ok(_p5._0);
	} else {
		return _elm_lang$core$Result$Ok(false);
	}
};
var _etaque$elm_form$Form_Validate$emptyString = function (v) {
	var _p6 = _etaque$elm_form$Form_Field$asString(v);
	if (_p6.ctor === 'Just') {
		var _p7 = _p6._0;
		return _elm_lang$core$String$isEmpty(_p7) ? _elm_lang$core$Result$Ok(_p7) : _elm_lang$core$Result$Err(
			_etaque$elm_form$Form_Error$value(_etaque$elm_form$Form_Error$InvalidString));
	} else {
		return _elm_lang$core$Result$Ok('');
	}
};
var _etaque$elm_form$Form_Validate$string = function (v) {
	var _p8 = _etaque$elm_form$Form_Field$asString(v);
	if (_p8.ctor === 'Just') {
		var _p9 = _p8._0;
		return _elm_lang$core$String$isEmpty(_p9) ? _elm_lang$core$Result$Err(
			_etaque$elm_form$Form_Error$value(_etaque$elm_form$Form_Error$Empty)) : _elm_lang$core$Result$Ok(_p9);
	} else {
		return _elm_lang$core$Result$Err(
			_etaque$elm_form$Form_Error$value(_etaque$elm_form$Form_Error$InvalidString));
	}
};
var _etaque$elm_form$Form_Validate$float = function (v) {
	var _p10 = _etaque$elm_form$Form_Field$asString(v);
	if (_p10.ctor === 'Just') {
		return A2(
			_elm_lang$core$Result$mapError,
			function (_p11) {
				return _etaque$elm_form$Form_Error$value(_etaque$elm_form$Form_Error$InvalidFloat);
			},
			_elm_lang$core$String$toFloat(_p10._0));
	} else {
		return _elm_lang$core$Result$Err(
			_etaque$elm_form$Form_Error$value(_etaque$elm_form$Form_Error$InvalidFloat));
	}
};
var _etaque$elm_form$Form_Validate$int = function (v) {
	var _p12 = _etaque$elm_form$Form_Field$asString(v);
	if (_p12.ctor === 'Just') {
		return A2(
			_elm_lang$core$Result$mapError,
			function (_p13) {
				return _etaque$elm_form$Form_Error$value(_etaque$elm_form$Form_Error$InvalidInt);
			},
			_elm_lang$core$String$toInt(_p12._0));
	} else {
		return _elm_lang$core$Result$Err(
			_etaque$elm_form$Form_Error$value(_etaque$elm_form$Form_Error$InvalidInt));
	}
};
var _etaque$elm_form$Form_Validate$errMaybe = function (res) {
	var _p14 = res;
	if (_p14.ctor === 'Ok') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Maybe$Just(_p14._0);
	}
};
var _etaque$elm_form$Form_Validate$groupErrorsUnion = F2(
	function (e1, e2) {
		var _p15 = {ctor: '_Tuple2', _0: e1, _1: e2};
		if (((_p15.ctor === '_Tuple2') && (_p15._0.ctor === 'Group')) && (_p15._1.ctor === 'Group')) {
			return _etaque$elm_form$Form_Tree$Group(
				A2(_elm_lang$core$Dict$union, _p15._0._0, _p15._1._0));
		} else {
			return e2;
		}
	});
var _etaque$elm_form$Form_Validate$mergeMany = function (errors) {
	return A3(
		_elm_lang$core$List$foldl,
		_etaque$elm_form$Form_Validate$groupErrorsUnion,
		_etaque$elm_form$Form_Tree$group(
			{ctor: '[]'}),
		A2(_elm_lang$core$List$filterMap, _elm_lang$core$Basics$identity, errors));
};
var _etaque$elm_form$Form_Validate$field = F3(
	function (key, validation, field) {
		return A2(
			_elm_lang$core$Result$mapError,
			function (e) {
				return _etaque$elm_form$Form_Tree$group(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: key, _1: e},
						_1: {ctor: '[]'}
					});
			},
			validation(
				A2(
					_elm_lang$core$Maybe$withDefault,
					_etaque$elm_form$Form_Tree$Value(_etaque$elm_form$Form_Field$EmptyField),
					A2(_etaque$elm_form$Form_Tree$getAtName, key, field))));
	});
var _etaque$elm_form$Form_Validate$customError = function (_p16) {
	return _etaque$elm_form$Form_Error$value(
		_etaque$elm_form$Form_Error$CustomError(_p16));
};
var _etaque$elm_form$Form_Validate$mapError = F3(
	function (f, validation, field) {
		return A2(
			_elm_lang$core$Result$mapError,
			f,
			validation(field));
	});
var _etaque$elm_form$Form_Validate$withCustomError = function (_p17) {
	return _etaque$elm_form$Form_Validate$mapError(
		_elm_lang$core$Basics$always(
			_etaque$elm_form$Form_Validate$customError(_p17)));
};
var _etaque$elm_form$Form_Validate$defaultValue = F3(
	function (a, validation, field) {
		return _elm_lang$core$Result$Ok(
			A2(
				_elm_lang$core$Result$withDefault,
				a,
				validation(field)));
	});
var _etaque$elm_form$Form_Validate$andMap = F3(
	function (aValidation, partialValidation, field) {
		var _p18 = {
			ctor: '_Tuple2',
			_0: partialValidation(field),
			_1: aValidation(field)
		};
		if ((_p18._0.ctor === 'Ok') && (_p18._1.ctor === 'Ok')) {
			return _elm_lang$core$Result$Ok(
				_p18._0._0(_p18._1._0));
		} else {
			return _elm_lang$core$Result$Err(
				_etaque$elm_form$Form_Validate$mergeMany(
					{
						ctor: '::',
						_0: _etaque$elm_form$Form_Validate$errMaybe(_p18._0),
						_1: {
							ctor: '::',
							_0: _etaque$elm_form$Form_Validate$errMaybe(_p18._1),
							_1: {ctor: '[]'}
						}
					}));
		}
	});
var _etaque$elm_form$Form_Validate$andThen = F3(
	function (callback, validation, field) {
		return A2(
			_elm_lang$core$Result$andThen,
			function (next) {
				return A2(callback, next, field);
			},
			validation(field));
	});
var _etaque$elm_form$Form_Validate$email = A2(
	_etaque$elm_form$Form_Validate$andThen,
	function (s) {
		return A2(
			_etaque$elm_form$Form_Validate$mapError,
			function (_p19) {
				return _etaque$elm_form$Form_Error$value(_etaque$elm_form$Form_Error$InvalidEmail);
			},
			A2(_etaque$elm_form$Form_Validate$format, _etaque$elm_form$Form_Validate$validEmailPattern, s));
	},
	_etaque$elm_form$Form_Validate$string);
var _etaque$elm_form$Form_Validate$map = F3(
	function (f, validation, field) {
		return A2(
			_elm_lang$core$Result$map,
			f,
			validation(field));
	});
var _etaque$elm_form$Form_Validate$map2 = F3(
	function (func, v1, v2) {
		return A2(
			_etaque$elm_form$Form_Validate$andMap,
			v2,
			A2(_etaque$elm_form$Form_Validate$map, func, v1));
	});
var _etaque$elm_form$Form_Validate$map3 = F4(
	function (func, v1, v2, v3) {
		return A2(
			_etaque$elm_form$Form_Validate$andMap,
			v3,
			A3(_etaque$elm_form$Form_Validate$map2, func, v1, v2));
	});
var _etaque$elm_form$Form_Validate$map4 = F5(
	function (func, v1, v2, v3, v4) {
		return A2(
			_etaque$elm_form$Form_Validate$andMap,
			v4,
			A4(_etaque$elm_form$Form_Validate$map3, func, v1, v2, v3));
	});
var _etaque$elm_form$Form_Validate$map5 = F6(
	function (func, v1, v2, v3, v4, v5) {
		return A2(
			_etaque$elm_form$Form_Validate$andMap,
			v5,
			A5(_etaque$elm_form$Form_Validate$map4, func, v1, v2, v3, v4));
	});
var _etaque$elm_form$Form_Validate$map6 = F7(
	function (func, v1, v2, v3, v4, v5, v6) {
		return A2(
			_etaque$elm_form$Form_Validate$andMap,
			v6,
			A6(_etaque$elm_form$Form_Validate$map5, func, v1, v2, v3, v4, v5));
	});
var _etaque$elm_form$Form_Validate$map7 = F8(
	function (func, v1, v2, v3, v4, v5, v6, v7) {
		return A2(
			_etaque$elm_form$Form_Validate$andMap,
			v7,
			A7(_etaque$elm_form$Form_Validate$map6, func, v1, v2, v3, v4, v5, v6));
	});
var _etaque$elm_form$Form_Validate$map8 = F9(
	function (func, v1, v2, v3, v4, v5, v6, v7, v8) {
		return A2(
			_etaque$elm_form$Form_Validate$andMap,
			v8,
			A8(_etaque$elm_form$Form_Validate$map7, func, v1, v2, v3, v4, v5, v6, v7));
	});
var _etaque$elm_form$Form_Validate$sequence = function (validations) {
	return A3(
		_elm_lang$core$List$foldr,
		_etaque$elm_form$Form_Validate$map2(
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				})),
		_etaque$elm_form$Form_Validate$succeed(
			{ctor: '[]'}),
		validations);
};

var _etaque$elm_form$Form$getChangedFields = function (_p0) {
	var _p1 = _p0;
	return _p1._0.changedFields;
};
var _etaque$elm_form$Form$getFocus = function (_p2) {
	var _p3 = _p2;
	return _p3._0.focus;
};
var _etaque$elm_form$Form$isDirtyAt = F2(
	function (qualifiedName, _p4) {
		var _p5 = _p4;
		return A2(_elm_lang$core$Set$member, qualifiedName, _p5._0.dirtyFields);
	});
var _etaque$elm_form$Form$isChangedAt = F2(
	function (qualifiedName, _p6) {
		var _p7 = _p6;
		return A2(_elm_lang$core$Set$member, qualifiedName, _p7._0.changedFields);
	});
var _etaque$elm_form$Form$getErrorAt = F2(
	function (path, _p8) {
		var _p9 = _p8;
		return A2(
			_elm_lang$core$Maybe$andThen,
			_etaque$elm_form$Form_Tree$asValue,
			A2(_etaque$elm_form$Form_Tree$getAtPath, path, _p9._0.errors));
	});
var _etaque$elm_form$Form$getErrors = function (_p10) {
	var _p11 = _p10;
	return _etaque$elm_form$Form_Tree$valuesWithPath(_p11._0.errors);
};
var _etaque$elm_form$Form$isSubmitted = function (_p12) {
	var _p13 = _p12;
	return _p13._0.isSubmitted;
};
var _etaque$elm_form$Form$getLiveErrorAt = F2(
	function (name, form) {
		return (_etaque$elm_form$Form$isSubmitted(form) || (A2(_etaque$elm_form$Form$isChangedAt, name, form) && (!A2(_etaque$elm_form$Form$isDirtyAt, name, form)))) ? A2(_etaque$elm_form$Form$getErrorAt, name, form) : _elm_lang$core$Maybe$Nothing;
	});
var _etaque$elm_form$Form$getOutput = function (_p14) {
	var _p15 = _p14;
	return _p15._0.output;
};
var _etaque$elm_form$Form$setFieldAt = F3(
	function (path, field, model) {
		return A3(_etaque$elm_form$Form_Tree$setAtPath, path, field, model.fields);
	});
var _etaque$elm_form$Form$getFieldAt = F2(
	function (qualifiedName, model) {
		return A2(_etaque$elm_form$Form_Tree$getAtPath, qualifiedName, model.fields);
	});
var _etaque$elm_form$Form$getStringAt = F2(
	function (name, _p16) {
		var _p17 = _p16;
		return A2(
			_elm_lang$core$Maybe$andThen,
			_etaque$elm_form$Form_Field$asString,
			A2(_etaque$elm_form$Form$getFieldAt, name, _p17._0));
	});
var _etaque$elm_form$Form$getBoolAt = F2(
	function (name, _p18) {
		var _p19 = _p18;
		return A2(
			_elm_lang$core$Maybe$andThen,
			_etaque$elm_form$Form_Field$asBool,
			A2(_etaque$elm_form$Form$getFieldAt, name, _p19._0));
	});
var _etaque$elm_form$Form$updateValidate = F2(
	function (validation, model) {
		var _p20 = validation(model.fields);
		if (_p20.ctor === 'Ok') {
			return _elm_lang$core$Native_Utils.update(
				model,
				{
					errors: _etaque$elm_form$Form_Tree$group(
						{ctor: '[]'}),
					output: _elm_lang$core$Maybe$Just(_p20._0)
				});
		} else {
			return _elm_lang$core$Native_Utils.update(
				model,
				{errors: _p20._0, output: _elm_lang$core$Maybe$Nothing});
		}
	});
var _etaque$elm_form$Form$getListIndexes = F2(
	function (path, _p21) {
		var _p22 = _p21;
		var length = A2(
			_elm_lang$core$Maybe$withDefault,
			0,
			A2(
				_elm_lang$core$Maybe$map,
				function (_p23) {
					return _elm_lang$core$List$length(
						_etaque$elm_form$Form_Tree$asList(_p23));
				},
				A2(_etaque$elm_form$Form$getFieldAt, path, _p22._0)));
		return A2(_elm_lang$core$List$range, 0, length - 1);
	});
var _etaque$elm_form$Form$getField = F3(
	function (getValue, path, form) {
		return {
			path: path,
			value: A2(getValue, path, form),
			error: A2(_etaque$elm_form$Form$getErrorAt, path, form),
			liveError: A2(_etaque$elm_form$Form$getLiveErrorAt, path, form),
			isDirty: A2(_etaque$elm_form$Form$isDirtyAt, path, form),
			isChanged: A2(_etaque$elm_form$Form$isChangedAt, path, form),
			hasFocus: _elm_lang$core$Native_Utils.eq(
				_etaque$elm_form$Form$getFocus(form),
				_elm_lang$core$Maybe$Just(path))
		};
	});
var _etaque$elm_form$Form$getFieldAsBool = _etaque$elm_form$Form$getField(_etaque$elm_form$Form$getBoolAt);
var _etaque$elm_form$Form$getFieldAsString = _etaque$elm_form$Form$getField(_etaque$elm_form$Form$getStringAt);
var _etaque$elm_form$Form$Model = F8(
	function (a, b, c, d, e, f, g, h) {
		return {fields: a, focus: b, dirtyFields: c, changedFields: d, originalValues: e, isSubmitted: f, output: g, errors: h};
	});
var _etaque$elm_form$Form$FieldState = F7(
	function (a, b, c, d, e, f, g) {
		return {path: a, value: b, error: c, liveError: d, isDirty: e, isChanged: f, hasFocus: g};
	});
var _etaque$elm_form$Form$F = function (a) {
	return {ctor: 'F', _0: a};
};
var _etaque$elm_form$Form$initial = F2(
	function (initialFields, validation) {
		var model = {
			fields: _etaque$elm_form$Form_Tree$group(initialFields),
			focus: _elm_lang$core$Maybe$Nothing,
			dirtyFields: _elm_lang$core$Set$empty,
			changedFields: _elm_lang$core$Set$empty,
			originalValues: _elm_lang$core$Dict$empty,
			isSubmitted: false,
			output: _elm_lang$core$Maybe$Nothing,
			errors: _etaque$elm_form$Form_Tree$group(
				{ctor: '[]'})
		};
		return _etaque$elm_form$Form$F(
			A2(_etaque$elm_form$Form$updateValidate, validation, model));
	});
var _etaque$elm_form$Form$update = F3(
	function (validation, msg, _p24) {
		var _p25 = _p24;
		var _p38 = _p25._0;
		var _p26 = msg;
		switch (_p26.ctor) {
			case 'NoOp':
				return _etaque$elm_form$Form$F(_p38);
			case 'Focus':
				var newModel = _elm_lang$core$Native_Utils.update(
					_p38,
					{
						focus: _elm_lang$core$Maybe$Just(_p26._0)
					});
				return _etaque$elm_form$Form$F(newModel);
			case 'Blur':
				var newDirtyFields = A2(_elm_lang$core$Set$remove, _p26._0, _p38.dirtyFields);
				var newModel = _elm_lang$core$Native_Utils.update(
					_p38,
					{focus: _elm_lang$core$Maybe$Nothing, dirtyFields: newDirtyFields});
				return _etaque$elm_form$Form$F(
					A2(_etaque$elm_form$Form$updateValidate, validation, newModel));
			case 'Input':
				var _p32 = _p26._0;
				var _p31 = _p26._2;
				var _p27 = function () {
					if (A2(_elm_lang$core$Set$member, _p32, _p38.changedFields)) {
						var shouldBeNothing = function (v) {
							var _p28 = v;
							_v14_2:
							do {
								switch (_p28.ctor) {
									case 'String':
										if (_p28._0 === '') {
											return true;
										} else {
											break _v14_2;
										}
									case 'Bool':
										if (_p28._0 === false) {
											return true;
										} else {
											break _v14_2;
										}
									default:
										break _v14_2;
								}
							} while(false);
							return false;
						};
						var storedValue = A2(
							_elm_lang$core$Maybe$withDefault,
							_elm_lang$core$Maybe$Nothing,
							A2(_elm_lang$core$Dict$get, _p32, _p38.originalValues));
						var sameAsOriginal = function () {
							var _p29 = storedValue;
							if (_p29.ctor === 'Just') {
								return _elm_lang$core$Native_Utils.eq(_p29._0, _p31);
							} else {
								return shouldBeNothing(_p31);
							}
						}();
						var changedFields = sameAsOriginal ? A2(_elm_lang$core$Set$remove, _p32, _p38.changedFields) : _p38.changedFields;
						return {ctor: '_Tuple2', _0: changedFields, _1: _p38.originalValues};
					} else {
						var originalValue = A2(
							_elm_lang$core$Maybe$andThen,
							_etaque$elm_form$Form_Tree$asValue,
							A2(_etaque$elm_form$Form$getFieldAt, _p32, _p38));
						return {
							ctor: '_Tuple2',
							_0: A2(_elm_lang$core$Set$insert, _p32, _p38.changedFields),
							_1: A3(_elm_lang$core$Dict$insert, _p32, originalValue, _p38.originalValues)
						};
					}
				}();
				var newChangedFields = _p27._0;
				var newOriginalValues = _p27._1;
				var isDirty = function () {
					var _p30 = _p26._1;
					switch (_p30.ctor) {
						case 'Text':
							return true;
						case 'Textarea':
							return true;
						default:
							return false;
					}
				}();
				var newDirtyFields = isDirty ? A2(_elm_lang$core$Set$insert, _p32, _p38.dirtyFields) : _p38.dirtyFields;
				var newFields = A3(
					_etaque$elm_form$Form$setFieldAt,
					_p32,
					_etaque$elm_form$Form_Tree$Value(_p31),
					_p38);
				var newModel = _elm_lang$core$Native_Utils.update(
					_p38,
					{fields: newFields, dirtyFields: newDirtyFields, changedFields: newChangedFields, originalValues: newOriginalValues});
				return _etaque$elm_form$Form$F(
					A2(_etaque$elm_form$Form$updateValidate, validation, newModel));
			case 'Append':
				var _p33 = _p26._0;
				var listFields = A2(
					_elm_lang$core$Maybe$withDefault,
					{ctor: '[]'},
					A2(
						_elm_lang$core$Maybe$map,
						_etaque$elm_form$Form_Tree$asList,
						A2(_etaque$elm_form$Form$getFieldAt, _p33, _p38)));
				var newListFields = A2(
					_elm_lang$core$Basics_ops['++'],
					listFields,
					{
						ctor: '::',
						_0: _etaque$elm_form$Form_Tree$Value(_etaque$elm_form$Form_Field$EmptyField),
						_1: {ctor: '[]'}
					});
				var newModel = _elm_lang$core$Native_Utils.update(
					_p38,
					{
						fields: A3(
							_etaque$elm_form$Form$setFieldAt,
							_p33,
							_etaque$elm_form$Form_Tree$List(newListFields),
							_p38)
					});
				return _etaque$elm_form$Form$F(newModel);
			case 'RemoveItem':
				var _p37 = _p26._0;
				var _p36 = _p26._1;
				var fieldNamePattern = A2(
					_elm_lang$core$Basics_ops['++'],
					_p37,
					_elm_lang$core$Basics$toString(_p36));
				var filterChangedFields = _elm_lang$core$Set$filter(
					function (_p34) {
						return !A2(_elm_lang$core$String$startsWith, fieldNamePattern, _p34);
					});
				var filterOriginalValue = _elm_lang$core$Dict$filter(
					F2(
						function (c, _p35) {
							return !A2(_elm_lang$core$String$startsWith, fieldNamePattern, c);
						}));
				var listFields = A2(
					_elm_lang$core$Maybe$withDefault,
					{ctor: '[]'},
					A2(
						_elm_lang$core$Maybe$map,
						_etaque$elm_form$Form_Tree$asList,
						A2(_etaque$elm_form$Form$getFieldAt, _p37, _p38)));
				var newListFields = A2(
					_elm_lang$core$Basics_ops['++'],
					A2(_elm_lang$core$List$take, _p36, listFields),
					A2(_elm_lang$core$List$drop, _p36 + 1, listFields));
				var newModel = _elm_lang$core$Native_Utils.update(
					_p38,
					{
						fields: A3(
							_etaque$elm_form$Form$setFieldAt,
							_p37,
							_etaque$elm_form$Form_Tree$List(newListFields),
							_p38),
						changedFields: filterChangedFields(_p38.changedFields),
						originalValues: filterOriginalValue(_p38.originalValues)
					});
				return _etaque$elm_form$Form$F(
					A2(_etaque$elm_form$Form$updateValidate, validation, newModel));
			case 'Submit':
				var validatedModel = A2(_etaque$elm_form$Form$updateValidate, validation, _p38);
				return _etaque$elm_form$Form$F(
					_elm_lang$core$Native_Utils.update(
						validatedModel,
						{isSubmitted: true}));
			case 'Validate':
				return _etaque$elm_form$Form$F(
					A2(_etaque$elm_form$Form$updateValidate, validation, _p38));
			default:
				var newModel = _elm_lang$core$Native_Utils.update(
					_p38,
					{
						fields: _etaque$elm_form$Form_Tree$group(_p26._0),
						dirtyFields: _elm_lang$core$Set$empty,
						changedFields: _elm_lang$core$Set$empty,
						originalValues: _elm_lang$core$Dict$empty,
						isSubmitted: false
					});
				return _etaque$elm_form$Form$F(
					A2(_etaque$elm_form$Form$updateValidate, validation, newModel));
		}
	});
var _etaque$elm_form$Form$Reset = function (a) {
	return {ctor: 'Reset', _0: a};
};
var _etaque$elm_form$Form$Validate = {ctor: 'Validate'};
var _etaque$elm_form$Form$Submit = {ctor: 'Submit'};
var _etaque$elm_form$Form$RemoveItem = F2(
	function (a, b) {
		return {ctor: 'RemoveItem', _0: a, _1: b};
	});
var _etaque$elm_form$Form$Append = function (a) {
	return {ctor: 'Append', _0: a};
};
var _etaque$elm_form$Form$Input = F3(
	function (a, b, c) {
		return {ctor: 'Input', _0: a, _1: b, _2: c};
	});
var _etaque$elm_form$Form$Blur = function (a) {
	return {ctor: 'Blur', _0: a};
};
var _etaque$elm_form$Form$Focus = function (a) {
	return {ctor: 'Focus', _0: a};
};
var _etaque$elm_form$Form$NoOp = {ctor: 'NoOp'};
var _etaque$elm_form$Form$Checkbox = {ctor: 'Checkbox'};
var _etaque$elm_form$Form$Radio = {ctor: 'Radio'};
var _etaque$elm_form$Form$Select = {ctor: 'Select'};
var _etaque$elm_form$Form$Textarea = {ctor: 'Textarea'};
var _etaque$elm_form$Form$Text = {ctor: 'Text'};

var _etaque$elm_form$Form_Input$dumpErrors = function (form) {
	var line = function (_p0) {
		var _p1 = _p0;
		return A2(
			_elm_lang$core$Basics_ops['++'],
			_p1._0,
			A2(
				_elm_lang$core$Basics_ops['++'],
				': ',
				_elm_lang$core$Basics$toString(_p1._1)));
	};
	var content = A2(
		_elm_lang$core$String$join,
		'\n',
		A2(
			_elm_lang$core$List$map,
			line,
			_etaque$elm_form$Form$getErrors(form)));
	return A2(
		_elm_lang$html$Html$pre,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(content),
			_1: {ctor: '[]'}
		});
};
var _etaque$elm_form$Form_Input$radioInput = F3(
	function (value, state, attrs) {
		var formAttrs = {
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$type_('radio'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$name(state.path),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$value(value),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$checked(
							_elm_lang$core$Native_Utils.eq(
								state.value,
								_elm_lang$core$Maybe$Just(value))),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onFocus(
								_etaque$elm_form$Form$Focus(state.path)),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onBlur(
									_etaque$elm_form$Form$Blur(state.path)),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html_Events$on,
										'change',
										A2(
											_elm_lang$core$Json_Decode$map,
											function (_p2) {
												return A3(
													_etaque$elm_form$Form$Input,
													state.path,
													_etaque$elm_form$Form$Radio,
													_etaque$elm_form$Form_Field$String(_p2));
											},
											_elm_lang$html$Html_Events$targetValue)),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		};
		return A2(
			_elm_lang$html$Html$input,
			A2(_elm_lang$core$Basics_ops['++'], formAttrs, attrs),
			{ctor: '[]'});
	});
var _etaque$elm_form$Form_Input$checkboxInput = F2(
	function (state, attrs) {
		var formAttrs = {
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$type_('checkbox'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$checked(
					A2(_elm_lang$core$Maybe$withDefault, false, state.value)),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onCheck(
						function (_p3) {
							return A3(
								_etaque$elm_form$Form$Input,
								state.path,
								_etaque$elm_form$Form$Checkbox,
								_etaque$elm_form$Form_Field$Bool(_p3));
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onFocus(
							_etaque$elm_form$Form$Focus(state.path)),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onBlur(
								_etaque$elm_form$Form$Blur(state.path)),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		};
		return A2(
			_elm_lang$html$Html$input,
			A2(_elm_lang$core$Basics_ops['++'], formAttrs, attrs),
			{ctor: '[]'});
	});
var _etaque$elm_form$Form_Input$selectInput = F3(
	function (options, state, attrs) {
		var buildOption = function (_p4) {
			var _p5 = _p4;
			var _p6 = _p5._0;
			return A2(
				_elm_lang$html$Html$option,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$value(_p6),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$selected(
							_elm_lang$core$Native_Utils.eq(
								state.value,
								_elm_lang$core$Maybe$Just(_p6))),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(_p5._1),
					_1: {ctor: '[]'}
				});
		};
		var formAttrs = {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html_Events$on,
				'change',
				A2(
					_elm_lang$core$Json_Decode$map,
					function (_p7) {
						return A3(
							_etaque$elm_form$Form$Input,
							state.path,
							_etaque$elm_form$Form$Select,
							_etaque$elm_form$Form_Field$String(_p7));
					},
					_elm_lang$html$Html_Events$targetValue)),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onFocus(
					_etaque$elm_form$Form$Focus(state.path)),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onBlur(
						_etaque$elm_form$Form$Blur(state.path)),
					_1: {ctor: '[]'}
				}
			}
		};
		return A2(
			_elm_lang$html$Html$select,
			A2(_elm_lang$core$Basics_ops['++'], formAttrs, attrs),
			A2(_elm_lang$core$List$map, buildOption, options));
	});
var _etaque$elm_form$Form_Input$textArea = F2(
	function (state, attrs) {
		var formAttrs = {
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$defaultValue(
				A2(_elm_lang$core$Maybe$withDefault, '', state.value)),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onInput(
					function (_p8) {
						return A3(
							_etaque$elm_form$Form$Input,
							state.path,
							_etaque$elm_form$Form$Textarea,
							_etaque$elm_form$Form_Field$String(_p8));
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onFocus(
						_etaque$elm_form$Form$Focus(state.path)),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onBlur(
							_etaque$elm_form$Form$Blur(state.path)),
						_1: {ctor: '[]'}
					}
				}
			}
		};
		return A2(
			_elm_lang$html$Html$textarea,
			A2(_elm_lang$core$Basics_ops['++'], formAttrs, attrs),
			{ctor: '[]'});
	});
var _etaque$elm_form$Form_Input$baseInput = F5(
	function (t, toFieldValue, inputType, state, attrs) {
		var formAttrs = {
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$type_(t),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$defaultValue(
					A2(_elm_lang$core$Maybe$withDefault, '', state.value)),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onInput(
						function (_p9) {
							return A3(
								_etaque$elm_form$Form$Input,
								state.path,
								inputType,
								toFieldValue(_p9));
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onFocus(
							_etaque$elm_form$Form$Focus(state.path)),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onBlur(
								_etaque$elm_form$Form$Blur(state.path)),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		};
		return A2(
			_elm_lang$html$Html$input,
			A2(_elm_lang$core$Basics_ops['++'], formAttrs, attrs),
			{ctor: '[]'});
	});
var _etaque$elm_form$Form_Input$textInput = A3(_etaque$elm_form$Form_Input$baseInput, 'text', _etaque$elm_form$Form_Field$String, _etaque$elm_form$Form$Text);
var _etaque$elm_form$Form_Input$passwordInput = A3(_etaque$elm_form$Form_Input$baseInput, 'password', _etaque$elm_form$Form_Field$String, _etaque$elm_form$Form$Text);

var _gizra$backoffice$Currency_Model$USD = {ctor: 'USD'};
var _gizra$backoffice$Currency_Model$ILS = {ctor: 'ILS'};
var _gizra$backoffice$Currency_Model$HRN = {ctor: 'HRN'};
var _gizra$backoffice$Currency_Model$HKD = {ctor: 'HKD'};
var _gizra$backoffice$Currency_Model$GBP = {ctor: 'GBP'};
var _gizra$backoffice$Currency_Model$EUR = {ctor: 'EUR'};
var _gizra$backoffice$Currency_Model$CHF = {ctor: 'CHF'};

var _gizra$backoffice$Amount$getLocalFromCurrency = function (currency) {
	var _p0 = currency;
	switch (_p0.ctor) {
		case 'CHF':
			return _cuducos$elm_format_number$FormatNumber_Locales$spanishLocale;
		case 'EUR':
			return _cuducos$elm_format_number$FormatNumber_Locales$spanishLocale;
		case 'GBP':
			return _cuducos$elm_format_number$FormatNumber_Locales$usLocale;
		case 'HKD':
			return _cuducos$elm_format_number$FormatNumber_Locales$usLocale;
		case 'HRN':
			return _cuducos$elm_format_number$FormatNumber_Locales$usLocale;
		case 'ILS':
			return _cuducos$elm_format_number$FormatNumber_Locales$usLocale;
		default:
			return _cuducos$elm_format_number$FormatNumber_Locales$usLocale;
	}
};
var _gizra$backoffice$Amount$showWithCurrency = F3(
	function (wrapper, currency, value) {
		var _p1 = currency;
		switch (_p1.ctor) {
			case 'CHF':
				return {
					ctor: '::',
					_0: value,
					_1: {
						ctor: '::',
						_0: wrapper('CHF'),
						_1: {ctor: '[]'}
					}
				};
			case 'EUR':
				return {
					ctor: '::',
					_0: value,
					_1: {
						ctor: '::',
						_0: wrapper('€'),
						_1: {ctor: '[]'}
					}
				};
			case 'GBP':
				return {
					ctor: '::',
					_0: wrapper('£'),
					_1: {
						ctor: '::',
						_0: value,
						_1: {ctor: '[]'}
					}
				};
			case 'HKD':
				return {
					ctor: '::',
					_0: value,
					_1: {
						ctor: '::',
						_0: wrapper('HK$'),
						_1: {ctor: '[]'}
					}
				};
			case 'HRN':
				return {
					ctor: '::',
					_0: wrapper('₴'),
					_1: {
						ctor: '::',
						_0: value,
						_1: {ctor: '[]'}
					}
				};
			case 'ILS':
				return {
					ctor: '::',
					_0: wrapper('₪'),
					_1: {
						ctor: '::',
						_0: value,
						_1: {ctor: '[]'}
					}
				};
			default:
				return {
					ctor: '::',
					_0: wrapper('$'),
					_1: {
						ctor: '::',
						_0: value,
						_1: {ctor: '[]'}
					}
				};
		}
	});
var _gizra$backoffice$Amount$showDecimalWithCurrencyAsString = F2(
	function (currency, decimal) {
		var local = _gizra$backoffice$Amount$getLocalFromCurrency(currency);
		var value = A2(
			_cuducos$elm_format_number$FormatNumber$format,
			_elm_lang$core$Native_Utils.update(
				local,
				{decimals: 2}),
			decimal);
		return _elm_lang$core$String$concat(
			A3(_gizra$backoffice$Amount$showWithCurrency, _elm_lang$core$Basics$identity, currency, value));
	});
var _gizra$backoffice$Amount$showAmountWithCurrencyAsString = F2(
	function (_p2, currency) {
		var _p3 = _p2;
		var local = _gizra$backoffice$Amount$getLocalFromCurrency(currency);
		var value = A2(
			_cuducos$elm_format_number$FormatNumber$format,
			_elm_lang$core$Native_Utils.update(
				local,
				{decimals: 0}),
			_elm_lang$core$Basics$toFloat(_p3._0));
		return _elm_lang$core$String$concat(
			A3(_gizra$backoffice$Amount$showWithCurrency, _elm_lang$core$Basics$identity, currency, value));
	});
var _gizra$backoffice$Amount$showAmountWithCurrency = F2(
	function (amount, currency) {
		return _elm_lang$html$Html$text(
			A2(_gizra$backoffice$Amount$showAmountWithCurrencyAsString, amount, currency));
	});
var _gizra$backoffice$Amount$extract = function (_p4) {
	var _p5 = _p4;
	return _p5._0;
};
var _gizra$backoffice$Amount$encodeAmountRestriction = function (amountRestriction) {
	var _p6 = amountRestriction;
	switch (_p6.ctor) {
		case 'None':
			return _elm_lang$core$Json_Encode$string('0');
		case 'Regular':
			return _elm_lang$core$Json_Encode$string(
				_elm_lang$core$Basics$toString(
					_gizra$backoffice$Amount$extract(_p6._0)));
		default:
			return _elm_lang$core$Json_Encode$string('-1');
	}
};
var _gizra$backoffice$Amount$compare = F3(
	function (comparator, _p8, _p7) {
		var _p9 = _p8;
		var _p10 = _p7;
		return A2(comparator, _p9._0, _p10._0);
	});
var _gizra$backoffice$Amount$compareInfix = F3(
	function (x, comparator, y) {
		return A3(_gizra$backoffice$Amount$compare, comparator, x, y);
	});
var _gizra$backoffice$Amount$encodeAmount = function (_p11) {
	var _p12 = _p11;
	return _elm_lang$core$Json_Encode$int(_p12._0);
};
var _gizra$backoffice$Amount$Amount = function (a) {
	return {ctor: 'Amount', _0: a};
};
var _gizra$backoffice$Amount$decodeAmount = A2(_elm_lang$core$Json_Decode$map, _gizra$backoffice$Amount$Amount, _Gizra$elm_essentials$Gizra_Json$decodeInt);
var _gizra$backoffice$Amount$zero = _gizra$backoffice$Amount$Amount(0);
var _gizra$backoffice$Amount$map = F2(
	function (fn, _p13) {
		var _p14 = _p13;
		return _gizra$backoffice$Amount$Amount(
			fn(_p14._0));
	});
var _gizra$backoffice$Amount$map2 = F3(
	function (fn, _p16, _p15) {
		var _p17 = _p16;
		var _p18 = _p15;
		return _gizra$backoffice$Amount$Amount(
			A2(fn, _p17._0, _p18._0));
	});
var _gizra$backoffice$Amount$add = _gizra$backoffice$Amount$map2(
	F2(
		function (x, y) {
			return x + y;
		}));
var _gizra$backoffice$Amount$sum = A2(_elm_lang$core$List$foldl, _gizra$backoffice$Amount$add, _gizra$backoffice$Amount$zero);
var _gizra$backoffice$Amount$subtract = _gizra$backoffice$Amount$map2(
	F2(
		function (x, y) {
			return x - y;
		}));
var _gizra$backoffice$Amount$Unlimited = {ctor: 'Unlimited'};
var _gizra$backoffice$Amount$Regular = function (a) {
	return {ctor: 'Regular', _0: a};
};
var _gizra$backoffice$Amount$None = {ctor: 'None'};
var _gizra$backoffice$Amount$decodeAmountRestriction = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (val) {
		return (_elm_lang$core$Native_Utils.cmp(val, -1) < 0) ? _elm_lang$core$Json_Decode$fail(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Amount restriction cannot be below -1, but it was',
				_elm_lang$core$Basics$toString(val))) : (_elm_lang$core$Native_Utils.eq(val, -1) ? _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Amount$Unlimited) : (_elm_lang$core$Native_Utils.eq(val, 0) ? _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Amount$None) : _elm_lang$core$Json_Decode$succeed(
			_gizra$backoffice$Amount$Regular(
				_gizra$backoffice$Amount$Amount(val)))));
	},
	_Gizra$elm_essentials$Gizra_Json$decodeInt);

var _gizra$backoffice$Backend_Entities$BidIdType = {ctor: 'BidIdType'};
var _gizra$backoffice$Backend_Entities$BidderInfoIdType = {ctor: 'BidderInfoIdType'};
var _gizra$backoffice$Backend_Entities$CreditRequestIdType = {ctor: 'CreditRequestIdType'};
var _gizra$backoffice$Backend_Entities$ItemIdType = {ctor: 'ItemIdType'};
var _gizra$backoffice$Backend_Entities$SaleIdType = {ctor: 'SaleIdType'};
var _gizra$backoffice$Backend_Entities$SiteIdType = {ctor: 'SiteIdType'};
var _gizra$backoffice$Backend_Entities$SessionIdType = {ctor: 'SessionIdType'};
var _gizra$backoffice$Backend_Entities$UserIdType = {ctor: 'UserIdType'};
var _gizra$backoffice$Backend_Entities$BidUuidType = {ctor: 'BidUuidType'};
var _gizra$backoffice$Backend_Entities$ClientUuidType = {ctor: 'ClientUuidType'};
var _gizra$backoffice$Backend_Entities$ItemUuidType = {ctor: 'ItemUuidType'};
var _gizra$backoffice$Backend_Entities$SaleUuidType = {ctor: 'SaleUuidType'};
var _gizra$backoffice$Backend_Entities$SiteUuidType = {ctor: 'SiteUuidType'};
var _gizra$backoffice$Backend_Entities$UserUuidType = {ctor: 'UserUuidType'};

var _gizra$backoffice$Backend_BidServerAuthStatusRequiredByBo_Model$LogingOut = function (a) {
	return {ctor: 'LogingOut', _0: a};
};
var _gizra$backoffice$Backend_BidServerAuthStatusRequiredByBo_Model$Required = function (a) {
	return {ctor: 'Required', _0: a};
};
var _gizra$backoffice$Backend_BidServerAuthStatusRequiredByBo_Model$NotRequired = {ctor: 'NotRequired'};
var _gizra$backoffice$Backend_BidServerAuthStatusRequiredByBo_Model$Save = {ctor: 'Save'};
var _gizra$backoffice$Backend_BidServerAuthStatusRequiredByBo_Model$Logout = {ctor: 'Logout'};
var _gizra$backoffice$Backend_BidServerAuthStatusRequiredByBo_Model$HandleSave = function (a) {
	return {ctor: 'HandleSave', _0: a};
};
var _gizra$backoffice$Backend_BidServerAuthStatusRequiredByBo_Model$HandleLogout = function (a) {
	return {ctor: 'HandleLogout', _0: a};
};

var _gizra$backoffice$PaginatedData$getItemsByPager = F3(
	function (identifier, _p0, pageProperty) {
		var _p1 = _p0;
		var _p5 = _p1.pager;
		var _p4 = _p1.data;
		if (_elm_lang$core$Native_Utils.cmp(
			_eeue56$elm_all_dict$EveryDict$size(_p5),
			1) < 1) {
			return _p4;
		} else {
			var currentPage = A2(
				_elm_lang$core$Maybe$withDefault,
				1,
				A2(_eeue56$elm_all_dict$EveryDict$get, identifier, pageProperty));
			var pagerInfo = A2(
				_elm_lang$core$Maybe$withDefault,
				_krisajenkins$remotedata$RemoteData$NotAsked,
				A2(_eeue56$elm_all_dict$EveryDict$get, currentPage, _p5));
			var _p2 = pagerInfo;
			if ((_p2.ctor === 'Success') && (_p2._0.ctor === '_Tuple2')) {
				var lastIndex = A2(
					_elm_lang$core$Maybe$withDefault,
					0,
					A2(_Gizra$elm_dictlist$EveryDictList$indexOfKey, _p2._0._1, _p4));
				var firstIndex = A2(
					_elm_lang$core$Maybe$withDefault,
					0,
					A2(_Gizra$elm_dictlist$EveryDictList$indexOfKey, _p2._0._0, _p4));
				return A3(
					_elm_lang$core$List$foldl,
					F2(
						function (index, accum) {
							var _p3 = A2(_Gizra$elm_dictlist$EveryDictList$getAt, index, _p4);
							if (_p3.ctor === 'Just') {
								return A3(_Gizra$elm_dictlist$EveryDictList$insert, _p3._0._0, _p3._0._1, accum);
							} else {
								return accum;
							}
						}),
					_Gizra$elm_dictlist$EveryDictList$empty,
					A2(_elm_lang$core$List$range, firstIndex, lastIndex));
			} else {
				return _Gizra$elm_dictlist$EveryDictList$empty;
			}
		}
	});
var _gizra$backoffice$PaginatedData$viewPager = F4(
	function (identifier, _p6, pageProperty, func) {
		var _p7 = _p6;
		var _p8 = _p7.pager;
		if (_elm_lang$core$Native_Utils.cmp(
			_eeue56$elm_all_dict$EveryDict$size(_p8),
			1) < 1) {
			return _elm_lang$html$Html$text('');
		} else {
			var currentPage = A2(
				_elm_lang$core$Maybe$withDefault,
				1,
				A2(_eeue56$elm_all_dict$EveryDict$get, identifier, pageProperty));
			return A2(
				_elm_lang$html$Html$ul,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('pagination'),
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$List$map,
					function (pageNumber) {
						var aAttr = _elm_lang$core$Native_Utils.eq(pageNumber, currentPage) ? {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$action('javascript:void(0);'),
							_1: {ctor: '[]'}
						} : {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								func(pageNumber)),
							_1: {ctor: '[]'}
						};
						return A2(
							_elm_lang$html$Html$li,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$classList(
									{
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'active',
											_1: _elm_lang$core$Native_Utils.eq(pageNumber, currentPage)
										},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									aAttr,
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											_elm_lang$core$Basics$toString(pageNumber)),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							});
					},
					_elm_lang$core$List$sort(
						_eeue56$elm_all_dict$EveryDict$keys(_p8))));
		}
	});
var _gizra$backoffice$PaginatedData$emptyPaginatedData = {data: _Gizra$elm_dictlist$EveryDictList$empty, pager: _eeue56$elm_all_dict$EveryDict$empty, totalCount: _elm_lang$core$Maybe$Nothing};
var _gizra$backoffice$PaginatedData$fetchPaginated = F3(
	function (_p10, _p9, func) {
		var _p11 = _p10;
		var _p16 = _p11._0;
		var _p15 = _p11._1;
		var _p12 = _p9;
		var isPreviousRequestFailed = _krisajenkins$remotedata$RemoteData$isFailure(
			A2(
				_elm_lang$core$Maybe$withDefault,
				_krisajenkins$remotedata$RemoteData$NotAsked,
				A2(_eeue56$elm_all_dict$EveryDict$get, _p16, _p15)));
		var currentPage = A2(
			_elm_lang$core$Maybe$withDefault,
			1,
			A2(_eeue56$elm_all_dict$EveryDict$get, _p12._0, _p12._1));
		var existingData = A2(
			_elm_lang$core$Maybe$withDefault,
			_krisajenkins$remotedata$RemoteData$NotAsked,
			A2(_eeue56$elm_all_dict$EveryDict$get, _p16, _p15));
		var existingDataAndPager = A2(
			_elm_lang$core$Maybe$withDefault,
			_gizra$backoffice$PaginatedData$emptyPaginatedData,
			_krisajenkins$remotedata$RemoteData$toMaybe(existingData));
		var currentPageData = A2(
			_elm_lang$core$Maybe$withDefault,
			_krisajenkins$remotedata$RemoteData$NotAsked,
			A2(_eeue56$elm_all_dict$EveryDict$get, currentPage, existingDataAndPager.pager));
		var hasNextPage = A2(_eeue56$elm_all_dict$EveryDict$member, currentPage + 1, existingDataAndPager.pager);
		var nextPageData = A2(
			_elm_lang$core$Maybe$withDefault,
			_krisajenkins$remotedata$RemoteData$NotAsked,
			A2(_eeue56$elm_all_dict$EveryDict$get, currentPage + 1, existingDataAndPager.pager));
		var _p13 = function () {
			var _p14 = existingDataAndPager.totalCount;
			if (_p14.ctor === 'Just') {
				return {ctor: '_Tuple2', _0: _p14._0, _1: true};
			} else {
				return {ctor: '_Tuple2', _0: 0, _1: false};
			}
		}();
		var totalCount = _p13._0;
		var isFetched = _p13._1;
		return (!isPreviousRequestFailed) ? (_krisajenkins$remotedata$RemoteData$isNotAsked(currentPageData) ? {
			ctor: '::',
			_0: _elm_lang$core$Maybe$Just(
				func(currentPage)),
			_1: {ctor: '[]'}
		} : ((hasNextPage && (_krisajenkins$remotedata$RemoteData$isNotAsked(nextPageData) && ((_elm_lang$core$Native_Utils.cmp(
			_Gizra$elm_dictlist$EveryDictList$size(existingDataAndPager.data),
			totalCount) < 0) && isFetched))) ? {
			ctor: '::',
			_0: _elm_lang$core$Maybe$Just(
				func(currentPage + 1)),
			_1: {ctor: '[]'}
		} : {ctor: '[]'})) : {ctor: '[]'};
	});
var _gizra$backoffice$PaginatedData$fetchAll = F2(
	function (_p17, func) {
		var _p18 = _p17;
		var _p26 = _p18._0;
		var _p25 = _p18._1;
		var isPreviousRequestFailed = _krisajenkins$remotedata$RemoteData$isFailure(
			A2(
				_elm_lang$core$Maybe$withDefault,
				_krisajenkins$remotedata$RemoteData$NotAsked,
				A2(_eeue56$elm_all_dict$EveryDict$get, _p26, _p25)));
		var existingData = A2(
			_elm_lang$core$Maybe$withDefault,
			_krisajenkins$remotedata$RemoteData$NotAsked,
			A2(_eeue56$elm_all_dict$EveryDict$get, _p26, _p25));
		var existingDataAndPager = A2(
			_elm_lang$core$Maybe$withDefault,
			_gizra$backoffice$PaginatedData$emptyPaginatedData,
			_krisajenkins$remotedata$RemoteData$toMaybe(existingData));
		var currentPage = A2(
			_elm_lang$core$Maybe$withDefault,
			1,
			A2(
				_elm_lang$core$Maybe$andThen,
				function (_p19) {
					var _p20 = _p19;
					return _elm_lang$core$Maybe$Just(_p20._0);
				},
				_elm_lang$core$List$head(
					_elm_lang$core$List$reverse(
						A2(
							_elm_lang$core$List$sortBy,
							function (_p21) {
								var _p22 = _p21;
								return _p22._0;
							},
							A2(
								_elm_lang$core$List$filter,
								function (_p23) {
									var _p24 = _p23;
									return _krisajenkins$remotedata$RemoteData$isSuccess(_p24._1);
								},
								_eeue56$elm_all_dict$EveryDict$toList(existingDataAndPager.pager)))))));
		var currentPageData = A2(
			_elm_lang$core$Maybe$withDefault,
			_krisajenkins$remotedata$RemoteData$NotAsked,
			A2(_eeue56$elm_all_dict$EveryDict$get, currentPage, existingDataAndPager.pager));
		var hasNextPage = A2(_eeue56$elm_all_dict$EveryDict$member, currentPage + 1, existingDataAndPager.pager);
		var nextPageData = A2(
			_elm_lang$core$Maybe$withDefault,
			_krisajenkins$remotedata$RemoteData$NotAsked,
			A2(_eeue56$elm_all_dict$EveryDict$get, currentPage + 1, existingDataAndPager.pager));
		return (!isPreviousRequestFailed) ? (_krisajenkins$remotedata$RemoteData$isNotAsked(currentPageData) ? {
			ctor: '::',
			_0: _elm_lang$core$Maybe$Just(
				func(currentPage)),
			_1: {ctor: '[]'}
		} : ((hasNextPage && _krisajenkins$remotedata$RemoteData$isNotAsked(nextPageData)) ? {
			ctor: '::',
			_0: _elm_lang$core$Maybe$Just(
				func(currentPage + 1)),
			_1: {ctor: '[]'}
		} : {ctor: '[]'})) : {ctor: '[]'};
	});
var _gizra$backoffice$PaginatedData$get = F3(
	function (identifier, key, dict) {
		var existing = A2(
			_elm_lang$core$Maybe$withDefault,
			_krisajenkins$remotedata$RemoteData$Success(_gizra$backoffice$PaginatedData$emptyPaginatedData),
			A2(_eeue56$elm_all_dict$EveryDict$get, identifier, dict));
		var dataAndPager = A2(
			_elm_lang$core$Maybe$withDefault,
			_gizra$backoffice$PaginatedData$emptyPaginatedData,
			_krisajenkins$remotedata$RemoteData$toMaybe(existing));
		return A2(_Gizra$elm_dictlist$EveryDictList$get, key, dataAndPager.data);
	});
var _gizra$backoffice$PaginatedData$getAll = F2(
	function (identifier, dict) {
		var existing = A2(
			_elm_lang$core$Maybe$withDefault,
			_krisajenkins$remotedata$RemoteData$Success(_gizra$backoffice$PaginatedData$emptyPaginatedData),
			A2(_eeue56$elm_all_dict$EveryDict$get, identifier, dict));
		var dataAndPager = A2(
			_elm_lang$core$Maybe$withDefault,
			_gizra$backoffice$PaginatedData$emptyPaginatedData,
			_krisajenkins$remotedata$RemoteData$toMaybe(existing));
		return dataAndPager.data;
	});
var _gizra$backoffice$PaginatedData$update = F4(
	function (identifier, key, func, dict) {
		var existing = A2(
			_elm_lang$core$Maybe$withDefault,
			_krisajenkins$remotedata$RemoteData$Success(_gizra$backoffice$PaginatedData$emptyPaginatedData),
			A2(_eeue56$elm_all_dict$EveryDict$get, identifier, dict));
		var dataAndPager = A2(
			_elm_lang$core$Maybe$withDefault,
			_gizra$backoffice$PaginatedData$emptyPaginatedData,
			_krisajenkins$remotedata$RemoteData$toMaybe(existing));
		var _p27 = A2(_Gizra$elm_dictlist$EveryDictList$get, key, dataAndPager.data);
		if (_p27.ctor === 'Nothing') {
			return dict;
		} else {
			var valueUpdated = func(_p27._0);
			var dataAndPagerUpdated = _elm_lang$core$Native_Utils.update(
				dataAndPager,
				{
					data: A3(_Gizra$elm_dictlist$EveryDictList$insert, key, valueUpdated, dataAndPager.data)
				});
			return A3(
				_eeue56$elm_all_dict$EveryDict$insert,
				identifier,
				_krisajenkins$remotedata$RemoteData$Success(dataAndPagerUpdated),
				dict);
		}
	});
var _gizra$backoffice$PaginatedData$remove = F3(
	function (identifier, key, dict) {
		var existing = A2(
			_elm_lang$core$Maybe$withDefault,
			_krisajenkins$remotedata$RemoteData$Success(_gizra$backoffice$PaginatedData$emptyPaginatedData),
			A2(_eeue56$elm_all_dict$EveryDict$get, identifier, dict));
		var dataAndPager = A2(
			_elm_lang$core$Maybe$withDefault,
			_gizra$backoffice$PaginatedData$emptyPaginatedData,
			_krisajenkins$remotedata$RemoteData$toMaybe(existing));
		var dataAndPagerUpdated = _elm_lang$core$Native_Utils.update(
			dataAndPager,
			{
				data: A2(_Gizra$elm_dictlist$EveryDictList$remove, key, dataAndPager.data)
			});
		return A3(
			_eeue56$elm_all_dict$EveryDict$insert,
			identifier,
			_krisajenkins$remotedata$RemoteData$Success(dataAndPagerUpdated),
			dict);
	});
var _gizra$backoffice$PaginatedData$getPager = F2(
	function (identifier, dict) {
		var existing = A2(
			_elm_lang$core$Maybe$withDefault,
			_krisajenkins$remotedata$RemoteData$Success(_gizra$backoffice$PaginatedData$emptyPaginatedData),
			A2(_eeue56$elm_all_dict$EveryDict$get, identifier, dict));
		var existingDataAndPager = A2(
			_elm_lang$core$Maybe$withDefault,
			_gizra$backoffice$PaginatedData$emptyPaginatedData,
			_krisajenkins$remotedata$RemoteData$toMaybe(existing));
		return existingDataAndPager.pager;
	});
var _gizra$backoffice$PaginatedData$getTotalCount = F2(
	function (identifier, dict) {
		var existing = A2(
			_elm_lang$core$Maybe$withDefault,
			_krisajenkins$remotedata$RemoteData$Success(_gizra$backoffice$PaginatedData$emptyPaginatedData),
			A2(_eeue56$elm_all_dict$EveryDict$get, identifier, dict));
		var existingDataAndPager = A2(
			_elm_lang$core$Maybe$withDefault,
			_gizra$backoffice$PaginatedData$emptyPaginatedData,
			_krisajenkins$remotedata$RemoteData$toMaybe(existing));
		return existingDataAndPager.totalCount;
	});
var _gizra$backoffice$PaginatedData$setTotalCount = F3(
	function (identifier, totalCount, dict) {
		var existing = A2(
			_elm_lang$core$Maybe$withDefault,
			_krisajenkins$remotedata$RemoteData$Success(_gizra$backoffice$PaginatedData$emptyPaginatedData),
			A2(_eeue56$elm_all_dict$EveryDict$get, identifier, dict));
		var existingDataAndPager = A2(
			_elm_lang$core$Maybe$withDefault,
			_gizra$backoffice$PaginatedData$emptyPaginatedData,
			_krisajenkins$remotedata$RemoteData$toMaybe(existing));
		var existingDataAndPagerUpdated = _elm_lang$core$Native_Utils.update(
			existingDataAndPager,
			{totalCount: totalCount});
		return A3(
			_eeue56$elm_all_dict$EveryDict$insert,
			identifier,
			_krisajenkins$remotedata$RemoteData$Success(existingDataAndPagerUpdated),
			dict);
	});
var _gizra$backoffice$PaginatedData$setPageAsLoading = F3(
	function (identifier, pageNumber, dict) {
		var existing = A2(
			_elm_lang$core$Maybe$withDefault,
			_krisajenkins$remotedata$RemoteData$Success(_gizra$backoffice$PaginatedData$emptyPaginatedData),
			A2(_eeue56$elm_all_dict$EveryDict$get, identifier, dict));
		var existingDataAndPager = A2(
			_elm_lang$core$Maybe$withDefault,
			_gizra$backoffice$PaginatedData$emptyPaginatedData,
			_krisajenkins$remotedata$RemoteData$toMaybe(existing));
		var pagerUpdated = A3(_eeue56$elm_all_dict$EveryDict$insert, pageNumber, _krisajenkins$remotedata$RemoteData$Loading, existingDataAndPager.pager);
		var existingDataAndPagerUpdated = _elm_lang$core$Native_Utils.update(
			existingDataAndPager,
			{pager: pagerUpdated});
		return A3(
			_eeue56$elm_all_dict$EveryDict$insert,
			identifier,
			_krisajenkins$remotedata$RemoteData$Success(existingDataAndPagerUpdated),
			dict);
	});
var _gizra$backoffice$PaginatedData$insertMultiple = F8(
	function (identifier, pageNumber, webdata, defaultItemFunc, getItemFunc, insertFunc, insertAfterFunc, dict) {
		var existing = A2(
			_elm_lang$core$Maybe$withDefault,
			_krisajenkins$remotedata$RemoteData$Success(_gizra$backoffice$PaginatedData$emptyPaginatedData),
			A2(_eeue56$elm_all_dict$EveryDict$get, identifier, dict));
		var existingDataAndPager = A2(
			_elm_lang$core$Maybe$withDefault,
			_gizra$backoffice$PaginatedData$emptyPaginatedData,
			_krisajenkins$remotedata$RemoteData$toMaybe(existing));
		var _p28 = webdata;
		_v12_2:
		do {
			switch (_p28.ctor) {
				case 'Success':
					if (_p28._0.ctor === '_Tuple2') {
						var _p34 = _p28._0._1;
						var _p33 = _p28._0._0;
						var totalItems = _Gizra$elm_dictlist$EveryDictList$size(_p33);
						var totalPages = _elm_lang$core$Basics$ceiling(
							_elm_lang$core$Basics$toFloat(_p34) / _elm_lang$core$Basics$toFloat(totalItems));
						var _p29 = {
							ctor: '_Tuple2',
							_0: A2(
								_elm_lang$core$Maybe$withDefault,
								defaultItemFunc(0),
								A2(
									_elm_lang$core$Maybe$andThen,
									getItemFunc,
									A2(_Gizra$elm_dictlist$EveryDictList$getAt, 0, _p33))),
							_1: A2(
								_elm_lang$core$Maybe$withDefault,
								defaultItemFunc(0),
								A2(
									_elm_lang$core$Maybe$andThen,
									getItemFunc,
									A2(_Gizra$elm_dictlist$EveryDictList$getAt, totalItems - 1, _p33)))
						};
						var firstItem = _p29._0;
						var lastItem = _p29._1;
						var pagerUpdated = _elm_lang$core$Native_Utils.eq(_p34, 0) ? A3(
							_eeue56$elm_all_dict$EveryDict$insert,
							pageNumber,
							_krisajenkins$remotedata$RemoteData$Success(
								{ctor: '_Tuple2', _0: firstItem, _1: lastItem}),
							existingDataAndPager.pager) : ((_elm_lang$core$Native_Utils.cmp(
							_eeue56$elm_all_dict$EveryDict$size(existingDataAndPager.pager),
							1) < 1) ? A3(
							_elm_lang$core$List$foldl,
							F2(
								function (index, accum) {
									var value = _elm_lang$core$Native_Utils.eq(index, pageNumber) ? _krisajenkins$remotedata$RemoteData$Success(
										{ctor: '_Tuple2', _0: firstItem, _1: lastItem}) : _krisajenkins$remotedata$RemoteData$NotAsked;
									return A3(_eeue56$elm_all_dict$EveryDict$insert, index, value, accum);
								}),
							_eeue56$elm_all_dict$EveryDict$empty,
							A2(_elm_lang$core$List$range, 1, totalPages)) : A3(
							_eeue56$elm_all_dict$EveryDict$insert,
							pageNumber,
							_krisajenkins$remotedata$RemoteData$Success(
								{ctor: '_Tuple2', _0: firstItem, _1: lastItem}),
							existingDataAndPager.pager));
						var maybePreviousItemLastUuid = (_elm_lang$core$Native_Utils.cmp(pageNumber, 1) > 0) ? A3(
							_elm_lang$core$List$foldl,
							F2(
								function (index, accum) {
									var pagerInfo = A2(
										_elm_lang$core$Maybe$andThen,
										_krisajenkins$remotedata$RemoteData$toMaybe,
										A2(_eeue56$elm_all_dict$EveryDict$get, pageNumber - 1, existingDataAndPager.pager));
									var _p30 = accum;
									if (_p30.ctor === 'Just') {
										return accum;
									} else {
										var _p31 = pagerInfo;
										if (_p31.ctor === 'Nothing') {
											return accum;
										} else {
											return _elm_lang$core$Maybe$Just(
												_elm_lang$core$Tuple$second(_p31._0));
										}
									}
								}),
							_elm_lang$core$Maybe$Nothing,
							_elm_lang$core$List$reverse(
								A2(_elm_lang$core$List$range, 1, pageNumber - 1))) : _elm_lang$core$Maybe$Nothing;
						var itemsUpdated = function () {
							var _p32 = maybePreviousItemLastUuid;
							if (_p32.ctor === 'Nothing') {
								return _elm_lang$core$Native_Utils.eq(_p34, 0) ? _Gizra$elm_dictlist$EveryDictList$empty : A3(_Gizra$elm_dictlist$EveryDictList$foldl, insertFunc, existingDataAndPager.data, _p33);
							} else {
								return _elm_lang$core$Tuple$second(
									A3(
										_Gizra$elm_dictlist$EveryDictList$foldl,
										insertAfterFunc,
										{ctor: '_Tuple2', _0: _p32._0, _1: existingDataAndPager.data},
										_Gizra$elm_dictlist$EveryDictList$reverse(_p33)));
							}
						}();
						var existingDataAndPagerUpdated = _elm_lang$core$Native_Utils.update(
							existingDataAndPager,
							{
								data: itemsUpdated,
								pager: pagerUpdated,
								totalCount: _elm_lang$core$Maybe$Just(_p34)
							});
						return A3(
							_eeue56$elm_all_dict$EveryDict$insert,
							identifier,
							_krisajenkins$remotedata$RemoteData$Success(existingDataAndPagerUpdated),
							dict);
					} else {
						break _v12_2;
					}
				case 'Failure':
					return A3(
						_eeue56$elm_all_dict$EveryDict$insert,
						identifier,
						_krisajenkins$remotedata$RemoteData$Failure(_p28._0),
						dict);
				default:
					break _v12_2;
			}
		} while(false);
		return dict;
	});
var _gizra$backoffice$PaginatedData$insertDirectlyFromClient = F3(
	function (identifier, _p35, dict) {
		var _p36 = _p35;
		var _p42 = _p36._0;
		var _p37 = A3(_gizra$backoffice$PaginatedData$get, identifier, _p42, dict);
		if (_p37.ctor === 'Just') {
			return dict;
		} else {
			var existing = A2(
				_elm_lang$core$Maybe$withDefault,
				_krisajenkins$remotedata$RemoteData$Success(_gizra$backoffice$PaginatedData$emptyPaginatedData),
				A2(_eeue56$elm_all_dict$EveryDict$get, identifier, dict));
			var existingDataAndPager = A2(
				_elm_lang$core$Maybe$withDefault,
				_gizra$backoffice$PaginatedData$emptyPaginatedData,
				_krisajenkins$remotedata$RemoteData$toMaybe(existing));
			var _p38 = A2(
				_elm_lang$core$Maybe$withDefault,
				{ctor: '_Tuple2', _0: 1, _1: _krisajenkins$remotedata$RemoteData$NotAsked},
				_elm_lang$core$List$head(
					_elm_lang$core$List$reverse(
						A2(
							_elm_lang$core$List$sortBy,
							function (_p39) {
								var _p40 = _p39;
								return _p40._0;
							},
							_eeue56$elm_all_dict$EveryDict$toList(existingDataAndPager.pager)))));
			var page = _p38._0;
			var pager = _p38._1;
			var pagerUpdated = function () {
				var _p41 = pager;
				_v19_2:
				do {
					switch (_p41.ctor) {
						case 'NotAsked':
							return _krisajenkins$remotedata$RemoteData$Success(
								{ctor: '_Tuple2', _0: _p42, _1: _p42});
						case 'Success':
							if (_p41._0.ctor === '_Tuple2') {
								return _krisajenkins$remotedata$RemoteData$Success(
									{ctor: '_Tuple2', _0: _p41._0._0, _1: _p42});
							} else {
								break _v19_2;
							}
						default:
							break _v19_2;
					}
				} while(false);
				return pager;
			}();
			var totalCount = A2(_elm_lang$core$Maybe$withDefault, 0, existingDataAndPager.totalCount);
			var existingDataAndPagerUpdated = _elm_lang$core$Native_Utils.update(
				existingDataAndPager,
				{
					data: A3(_Gizra$elm_dictlist$EveryDictList$insert, _p42, _p36._1, existingDataAndPager.data),
					pager: A3(_eeue56$elm_all_dict$EveryDict$insert, page, pagerUpdated, existingDataAndPager.pager),
					totalCount: _elm_lang$core$Maybe$Just(totalCount + 1)
				});
			return A3(
				_eeue56$elm_all_dict$EveryDict$insert,
				identifier,
				_krisajenkins$remotedata$RemoteData$Success(existingDataAndPagerUpdated),
				dict);
		}
	});
var _gizra$backoffice$PaginatedData$emptyContainer = function (identifier) {
	return A2(_eeue56$elm_all_dict$EveryDict$singleton, identifier, _krisajenkins$remotedata$RemoteData$NotAsked);
};
var _gizra$backoffice$PaginatedData$PaginatedData = F3(
	function (a, b, c) {
		return {data: a, pager: b, totalCount: c};
	});

var _gizra$backoffice$Backend_BidderInfo_Model$BidderInfo = F5(
	function (a, b, c, d, e) {
		return {bidderNumber: a, agent: b, amountRestrictions: c, totalSpent: d, userUuid: e};
	});
var _gizra$backoffice$Backend_BidderInfo_Model$BidderInfoParams = F2(
	function (a, b) {
		return {saleUuid: a, userUuid: b};
	});
var _gizra$backoffice$Backend_BidderInfo_Model$Website = function (a) {
	return {ctor: 'Website', _0: a};
};
var _gizra$backoffice$Backend_BidderInfo_Model$Phone = function (a) {
	return {ctor: 'Phone', _0: a};
};
var _gizra$backoffice$Backend_BidderInfo_Model$Mail = function (a) {
	return {ctor: 'Mail', _0: a};
};
var _gizra$backoffice$Backend_BidderInfo_Model$FloorByAgent = function (a) {
	return {ctor: 'FloorByAgent', _0: a};
};
var _gizra$backoffice$Backend_BidderInfo_Model$Floor = function (a) {
	return {ctor: 'Floor', _0: a};
};
var _gizra$backoffice$Backend_BidderInfo_Model$External = function (a) {
	return {ctor: 'External', _0: a};
};
var _gizra$backoffice$Backend_BidderInfo_Model$MaxBid = {ctor: 'MaxBid'};
var _gizra$backoffice$Backend_BidderInfo_Model$MailCredit = {ctor: 'MailCredit'};
var _gizra$backoffice$Backend_BidderInfo_Model$LiveCredit = {ctor: 'LiveCredit'};
var _gizra$backoffice$Backend_BidderInfo_Model$emptyBidderInfo = function (userUuid) {
	return {
		bidderNumber: _gizra$backoffice$Backend_BidderInfo_Model$Floor(0),
		agent: _elm_lang$core$Maybe$Nothing,
		amountRestrictions: _eeue56$elm_all_dict$EveryDict$fromList(
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: _gizra$backoffice$Backend_BidderInfo_Model$LiveCredit, _1: _gizra$backoffice$Amount$Unlimited},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: _gizra$backoffice$Backend_BidderInfo_Model$MailCredit, _1: _gizra$backoffice$Amount$Unlimited},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: _gizra$backoffice$Backend_BidderInfo_Model$MaxBid, _1: _gizra$backoffice$Amount$Unlimited},
						_1: {ctor: '[]'}
					}
				}
			}),
		totalSpent: _gizra$backoffice$Amount$zero,
		userUuid: userUuid
	};
};
var _gizra$backoffice$Backend_BidderInfo_Model$Update = F2(
	function (a, b) {
		return {ctor: 'Update', _0: a, _1: b};
	});
var _gizra$backoffice$Backend_BidderInfo_Model$SetSelectedAmountRestriction = F3(
	function (a, b, c) {
		return {ctor: 'SetSelectedAmountRestriction', _0: a, _1: b, _2: c};
	});
var _gizra$backoffice$Backend_BidderInfo_Model$Save = F2(
	function (a, b) {
		return {ctor: 'Save', _0: a, _1: b};
	});
var _gizra$backoffice$Backend_BidderInfo_Model$HandleSave = F3(
	function (a, b, c) {
		return {ctor: 'HandleSave', _0: a, _1: b, _2: c};
	});
var _gizra$backoffice$Backend_BidderInfo_Model$HandleFetch = F3(
	function (a, b, c) {
		return {ctor: 'HandleFetch', _0: a, _1: b, _2: c};
	});
var _gizra$backoffice$Backend_BidderInfo_Model$Fetch = F2(
	function (a, b) {
		return {ctor: 'Fetch', _0: a, _1: b};
	});

var _gizra$backoffice$Utils_Json$first = _elm_lang$core$Json_Decode$at(
	{
		ctor: '::',
		_0: '0',
		_1: {ctor: '[]'}
	});
var _gizra$backoffice$Utils_Json$decodeTotalPages = A2(_elm_lang$core$Json_Decode$field, 'totalPages', _elm_lang$core$Json_Decode$int);
var _gizra$backoffice$Utils_Json$resultToDecoder = function (res) {
	var _p0 = res;
	if (_p0.ctor === 'Ok') {
		return _elm_lang$core$Json_Decode$succeed(_p0._0);
	} else {
		return _elm_lang$core$Json_Decode$fail(_p0._0);
	}
};
var _gizra$backoffice$Utils_Json$decodePrice = _elm_lang$core$Json_Decode$oneOf(
	{
		ctor: '::',
		_0: _elm_lang$core$Json_Decode$int,
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$core$Json_Decode$map,
				_elm_lang$core$Basics$floor,
				A2(
					_elm_lang$core$Json_Decode$andThen,
					function (_p1) {
						return _gizra$backoffice$Utils_Json$resultToDecoder(
							_elm_lang$core$String$toFloat(_p1));
					},
					_elm_lang$core$Json_Decode$string)),
			_1: {ctor: '[]'}
		}
	});
var _gizra$backoffice$Utils_Json$decodeListAsEveryDictListByProperty = F3(
	function (property, keyDecoder, valDecoder) {
		return A2(
			_elm_lang$core$Json_Decode$map,
			_Gizra$elm_dictlist$EveryDictList$fromList,
			_elm_lang$core$Json_Decode$list(
				A3(
					_elm_lang$core$Json_Decode$map2,
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						}),
					A2(_elm_lang$core$Json_Decode$field, property, keyDecoder),
					valDecoder)));
	});
var _gizra$backoffice$Utils_Json$decodeListAsEveryDictByProperty = F3(
	function (property, keyDecoder, valDecoder) {
		return A2(
			_elm_lang$core$Json_Decode$map,
			_eeue56$elm_all_dict$EveryDict$fromList,
			_elm_lang$core$Json_Decode$list(
				A3(
					_elm_lang$core$Json_Decode$map2,
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						}),
					A2(_elm_lang$core$Json_Decode$field, property, keyDecoder),
					valDecoder)));
	});
var _gizra$backoffice$Utils_Json$decodeListAsDictByProperty = F4(
	function (property, keyDecoder, valDecoder, stringFunc) {
		return A2(
			_elm_lang$core$Json_Decode$map,
			_elm_lang$core$Dict$fromList,
			A2(
				_elm_lang$core$Json_Decode$map,
				_elm_lang$core$List$map(
					_elm_lang$core$Tuple$mapFirst(stringFunc)),
				_elm_lang$core$Json_Decode$list(
					A3(
						_elm_lang$core$Json_Decode$map2,
						F2(
							function (v0, v1) {
								return {ctor: '_Tuple2', _0: v0, _1: v1};
							}),
						A2(_elm_lang$core$Json_Decode$field, property, keyDecoder),
						valDecoder))));
	});
var _gizra$backoffice$Utils_Json$decodeAsString = _elm_lang$core$Json_Decode$oneOf(
	{
		ctor: '::',
		_0: _elm_lang$core$Json_Decode$string,
		_1: {
			ctor: '::',
			_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Basics$toString, _elm_lang$core$Json_Decode$int),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Basics$toString, _elm_lang$core$Json_Decode$float),
				_1: {ctor: '[]'}
			}
		}
	});
var _gizra$backoffice$Utils_Json$decodeInt = _elm_lang$core$Json_Decode$oneOf(
	{
		ctor: '::',
		_0: _elm_lang$core$Json_Decode$int,
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$core$Json_Decode$map,
				_elm_lang$core$Basics$floor,
				A2(
					_elm_lang$core$Json_Decode$andThen,
					function (_p2) {
						return _gizra$backoffice$Utils_Json$resultToDecoder(
							_elm_lang$core$String$toFloat(_p2));
					},
					_elm_lang$core$Json_Decode$string)),
			_1: {ctor: '[]'}
		}
	});
var _gizra$backoffice$Utils_Json$decodeListAsDict = function (decoder) {
	return A4(_gizra$backoffice$Utils_Json$decodeListAsDictByProperty, 'id', _gizra$backoffice$Utils_Json$decodeInt, decoder, _elm_lang$core$Basics$toString);
};
var _gizra$backoffice$Utils_Json$decodeFloat = _elm_lang$core$Json_Decode$oneOf(
	{
		ctor: '::',
		_0: _elm_lang$core$Json_Decode$float,
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$core$Json_Decode$andThen,
				_gizra$backoffice$Utils_Json$resultToDecoder,
				A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$String$toFloat, _elm_lang$core$Json_Decode$string)),
			_1: {ctor: '[]'}
		}
	});
var _gizra$backoffice$Utils_Json$decodeError = A2(_elm_lang$core$Json_Decode$field, 'title', _elm_lang$core$Json_Decode$string);
var _gizra$backoffice$Utils_Json$decodeEmptyArrayAsEmptyDict = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (list) {
		var length = _elm_lang$core$List$length(list);
		return _elm_lang$core$Native_Utils.eq(length, 0) ? _elm_lang$core$Json_Decode$succeed(_elm_lang$core$Dict$empty) : _elm_lang$core$Json_Decode$fail(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Expected an empty array, not an array with length: ',
				_elm_lang$core$Basics$toString(length)));
	},
	_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$value));
var _gizra$backoffice$Utils_Json$decodeDateFromEpoch = A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Date$fromTime, _elm_lang$core$Json_Decode$float);
var _gizra$backoffice$Utils_Json$decodeDate = _elm_lang$core$Json_Decode$oneOf(
	{
		ctor: '::',
		_0: _elm_community$json_extra$Json_Decode_Extra$date,
		_1: {
			ctor: '::',
			_0: _gizra$backoffice$Utils_Json$decodeDateFromEpoch,
			_1: {ctor: '[]'}
		}
	});
var _gizra$backoffice$Utils_Json$encodeDate = function (date) {
	return _elm_lang$core$Json_Encode$string(
		_justinmimbs$elm_date_extra$Date_Extra$toIsoString(date));
};

var _gizra$backoffice$Backend_BidderInfo_Decoder$decodeAmountRestrictionType = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (_p0) {
		var _p1 = _p0;
		return _elm_lang$core$Json_Decode$succeed(
			_eeue56$elm_all_dict$EveryDict$fromList(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: _gizra$backoffice$Backend_BidderInfo_Model$LiveCredit, _1: _p1._0},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: _gizra$backoffice$Backend_BidderInfo_Model$MailCredit, _1: _p1._1},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: _gizra$backoffice$Backend_BidderInfo_Model$MaxBid, _1: _p1._2},
							_1: {ctor: '[]'}
						}
					}
				}));
	},
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'max_bid',
		_gizra$backoffice$Amount$decodeAmountRestriction,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'mail_credit',
			_gizra$backoffice$Amount$decodeAmountRestriction,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'live_credit',
				_gizra$backoffice$Amount$decodeAmountRestriction,
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(
					F3(
						function (v0, v1, v2) {
							return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
						}))))));
var _gizra$backoffice$Backend_BidderInfo_Decoder$decodeBidderNumber = function () {
	var wrap = function (tag) {
		return A2(
			_elm_lang$core$Json_Decode$andThen,
			function (bidderNumber) {
				return _elm_lang$core$Json_Decode$succeed(
					tag(bidderNumber));
			},
			A2(_elm_lang$core$Json_Decode$field, 'bidder_number', _Gizra$elm_essentials$Gizra_Json$decodeInt));
	};
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		function (bidderType) {
			var _p2 = bidderType;
			switch (_p2) {
				case 'external':
					return wrap(_gizra$backoffice$Backend_BidderInfo_Model$External);
				case 'floor':
					return wrap(_gizra$backoffice$Backend_BidderInfo_Model$Floor);
				case 'floor_by_agent':
					return wrap(_gizra$backoffice$Backend_BidderInfo_Model$FloorByAgent);
				case 'mail':
					return wrap(_gizra$backoffice$Backend_BidderInfo_Model$Mail);
				case 'phone':
					return wrap(_gizra$backoffice$Backend_BidderInfo_Model$Phone);
				case 'website':
					return wrap(_gizra$backoffice$Backend_BidderInfo_Model$Website);
				default:
					return _elm_lang$core$Json_Decode$fail(
						A2(_elm_lang$core$Basics_ops['++'], bidderType, ' is not a recognized \'bidder_type\'.'));
			}
		},
		A2(_elm_lang$core$Json_Decode$field, 'bidder_type', _elm_lang$core$Json_Decode$string));
}();
var _gizra$backoffice$Backend_BidderInfo_Decoder$decodeBidderInfo = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'user_uuid',
	_Gizra$elm_restful$Restful_Endpoint$decodeEntityUuid,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'total_spent',
		_gizra$backoffice$Amount$decodeAmount,
		A2(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
			_gizra$backoffice$Backend_BidderInfo_Decoder$decodeAmountRestrictionType,
			A4(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
				'agent',
				_elm_lang$core$Json_Decode$maybe(_Gizra$elm_restful$Restful_Endpoint$decodeEntityId),
				_elm_lang$core$Maybe$Nothing,
				A2(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
					_gizra$backoffice$Backend_BidderInfo_Decoder$decodeBidderNumber,
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_gizra$backoffice$Backend_BidderInfo_Model$BidderInfo))))));
var _gizra$backoffice$Backend_BidderInfo_Decoder$decodeBidderInfoByBidderNumberDictFromPort = A2(
	_elm_lang$core$Json_Decode$map,
	_elm_lang$core$Dict$fromList,
	_elm_lang$core$Json_Decode$list(
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'bidder_info',
			_Gizra$elm_restful$Restful_Endpoint$decodeEntityId,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'bidder_number',
				_elm_lang$core$Json_Decode$int,
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						}))))));
var _gizra$backoffice$Backend_BidderInfo_Decoder$decodeBidderInfoDictFromPort = function (saleUuid) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		function (dict) {
			return _elm_lang$core$Json_Decode$succeed(
				A3(
					_Gizra$elm_dictlist$EveryDictList$foldl,
					F3(
						function (k, v, accum) {
							return A3(
								_gizra$backoffice$PaginatedData$insertDirectlyFromClient,
								saleUuid,
								{
									ctor: '_Tuple2',
									_0: k,
									_1: _Gizra$elm_editable_webdata$Editable_WebData$create(v)
								},
								accum);
						}),
					_gizra$backoffice$PaginatedData$emptyContainer(saleUuid),
					dict));
		},
		A3(_gizra$backoffice$Utils_Json$decodeListAsEveryDictListByProperty, 'id', _Gizra$elm_restful$Restful_Endpoint$decodeEntityId, _gizra$backoffice$Backend_BidderInfo_Decoder$decodeBidderInfo));
};

var _gizra$backoffice$Backend_CreditRequest_Model$CreditRequest = F3(
	function (a, b, c) {
		return {credit: a, status: b, userUuid: c};
	});
var _gizra$backoffice$Backend_CreditRequest_Model$CreditRequestParams = F2(
	function (a, b) {
		return {saleUuid: a, userUuid: b};
	});
var _gizra$backoffice$Backend_CreditRequest_Model$CreateInfo = F3(
	function (a, b, c) {
		return {saleUuid: a, userUuid: b, amount: c};
	});
var _gizra$backoffice$Backend_CreditRequest_Model$Rejected = {ctor: 'Rejected'};
var _gizra$backoffice$Backend_CreditRequest_Model$Approved = {ctor: 'Approved'};
var _gizra$backoffice$Backend_CreditRequest_Model$Pending = {ctor: 'Pending'};
var _gizra$backoffice$Backend_CreditRequest_Model$emptyCreditRequest = function (userUuid) {
	return {credit: _gizra$backoffice$Amount$None, status: _gizra$backoffice$Backend_CreditRequest_Model$Pending, userUuid: userUuid};
};
var _gizra$backoffice$Backend_CreditRequest_Model$SetAmount = F2(
	function (a, b) {
		return {ctor: 'SetAmount', _0: a, _1: b};
	});
var _gizra$backoffice$Backend_CreditRequest_Model$Save = F2(
	function (a, b) {
		return {ctor: 'Save', _0: a, _1: b};
	});
var _gizra$backoffice$Backend_CreditRequest_Model$HandleUpdate = F2(
	function (a, b) {
		return {ctor: 'HandleUpdate', _0: a, _1: b};
	});
var _gizra$backoffice$Backend_CreditRequest_Model$HandleFetch = function (a) {
	return {ctor: 'HandleFetch', _0: a};
};
var _gizra$backoffice$Backend_CreditRequest_Model$HandleCreate = function (a) {
	return {ctor: 'HandleCreate', _0: a};
};
var _gizra$backoffice$Backend_CreditRequest_Model$Fetch = function (a) {
	return {ctor: 'Fetch', _0: a};
};

var _gizra$backoffice$Backend_CreditRequest_Decoder$decodeStatus = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (val) {
		var _p0 = val;
		switch (_p0) {
			case 'pending':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_CreditRequest_Model$Pending);
			case 'approved':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_CreditRequest_Model$Approved);
			case 'rejected':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_CreditRequest_Model$Rejected);
			default:
				return _elm_lang$core$Json_Decode$fail(
					A2(_elm_lang$core$Basics_ops['++'], 'Could not recognise status: ', val));
		}
	},
	_elm_lang$core$Json_Decode$string);
var _gizra$backoffice$Backend_CreditRequest_Decoder$decodeCreditRequest = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'user_uuid',
	_Gizra$elm_restful$Restful_Endpoint$decodeEntityUuid,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'status',
		_gizra$backoffice$Backend_CreditRequest_Decoder$decodeStatus,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'amount',
			_gizra$backoffice$Amount$decodeAmountRestriction,
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_gizra$backoffice$Backend_CreditRequest_Model$CreditRequest))));
var _gizra$backoffice$Backend_CreditRequest_Decoder$decodeCreditRequestsWebDataFromPort = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (dict) {
		return _elm_lang$core$Json_Decode$succeed(
			_krisajenkins$remotedata$RemoteData$Success(
				A3(
					_eeue56$elm_all_dict$EveryDict$foldl,
					F3(
						function (k, v, accum) {
							return A3(
								_eeue56$elm_all_dict$EveryDict$insert,
								_Gizra$elm_storage_key$StorageKey$Existing(k),
								_Gizra$elm_editable_webdata$Editable_WebData$create(v),
								accum);
						}),
					_eeue56$elm_all_dict$EveryDict$empty,
					dict)));
	},
	A3(_gizra$backoffice$Utils_Json$decodeListAsEveryDictByProperty, 'id', _Gizra$elm_restful$Restful_Endpoint$decodeEntityId, _gizra$backoffice$Backend_CreditRequest_Decoder$decodeCreditRequest));

var _gizra$backoffice$Backend_Bid_Model$Bid = F8(
	function (a, b, c, d, e, f, g, h) {
		return {amount: a, status: b, deletedStatus: c, created: d, bidType: e, underExtension: f, alternativeBids: g, groupName: h};
	});
var _gizra$backoffice$Backend_Bid_Model$CreateInfo = F4(
	function (a, b, c, d) {
		return {saleUuid: a, itemUuid: b, type_: c, amount: d};
	});
var _gizra$backoffice$Backend_Bid_Model$Deleted = function (a) {
	return {ctor: 'Deleted', _0: a};
};
var _gizra$backoffice$Backend_Bid_Model$DeleteInProcess = {ctor: 'DeleteInProcess'};
var _gizra$backoffice$Backend_Bid_Model$NotDeleted = {ctor: 'NotDeleted'};
var _gizra$backoffice$Backend_Bid_Model$PostSale = {ctor: 'PostSale'};
var _gizra$backoffice$Backend_Bid_Model$Mail = {ctor: 'Mail'};
var _gizra$backoffice$Backend_Bid_Model$Internet = {ctor: 'Internet'};
var _gizra$backoffice$Backend_Bid_Model$Floor = {ctor: 'Floor'};
var _gizra$backoffice$Backend_Bid_Model$Book = F2(
	function (a, b) {
		return {ctor: 'Book', _0: a, _1: b};
	});
var _gizra$backoffice$Backend_Bid_Model$AutoAgent = {ctor: 'AutoAgent'};
var _gizra$backoffice$Backend_Bid_Model$Agent = {ctor: 'Agent'};
var _gizra$backoffice$Backend_Bid_Model$Outbid = function (a) {
	return {ctor: 'Outbid', _0: a};
};
var _gizra$backoffice$Backend_Bid_Model$RejectedMailAfterSetLastFloor = function (a) {
	return {ctor: 'RejectedMailAfterSetLastFloor', _0: a};
};
var _gizra$backoffice$Backend_Bid_Model$RejectedCreditLimit = function (a) {
	return {ctor: 'RejectedCreditLimit', _0: a};
};
var _gizra$backoffice$Backend_Bid_Model$RejectedBidderMax = function (a) {
	return {ctor: 'RejectedBidderMax', _0: a};
};
var _gizra$backoffice$Backend_Bid_Model$RejectedBellowMinimum = function (a) {
	return {ctor: 'RejectedBellowMinimum', _0: a};
};
var _gizra$backoffice$Backend_Bid_Model$Rejected = function (a) {
	return {ctor: 'Rejected', _0: a};
};
var _gizra$backoffice$Backend_Bid_Model$AcceptedDuplicatedAmount = function (a) {
	return {ctor: 'AcceptedDuplicatedAmount', _0: a};
};
var _gizra$backoffice$Backend_Bid_Model$Accepted = function (a) {
	return {ctor: 'Accepted', _0: a};
};

var _gizra$backoffice$Backend_Bid_Decoder$decodeGroupName = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (val) {
		var _p0 = _elm_lang$core$String$uncons(val);
		_v0_10:
		do {
			if (((_p0.ctor === 'Just') && (_p0._0.ctor === '_Tuple2')) && (_p0._0._1 === '')) {
				switch (_p0._0._0.valueOf()) {
					case 'a':
						return _elm_lang$core$Json_Decode$succeed(
							_elm_lang$core$Native_Utils.chr('a'));
					case 'b':
						return _elm_lang$core$Json_Decode$succeed(
							_elm_lang$core$Native_Utils.chr('b'));
					case 'c':
						return _elm_lang$core$Json_Decode$succeed(
							_elm_lang$core$Native_Utils.chr('c'));
					case 'd':
						return _elm_lang$core$Json_Decode$succeed(
							_elm_lang$core$Native_Utils.chr('d'));
					case 'e':
						return _elm_lang$core$Json_Decode$succeed(
							_elm_lang$core$Native_Utils.chr('e'));
					case 'f':
						return _elm_lang$core$Json_Decode$succeed(
							_elm_lang$core$Native_Utils.chr('f'));
					case 'g':
						return _elm_lang$core$Json_Decode$succeed(
							_elm_lang$core$Native_Utils.chr('g'));
					case 'h':
						return _elm_lang$core$Json_Decode$succeed(
							_elm_lang$core$Native_Utils.chr('h'));
					case 'i':
						return _elm_lang$core$Json_Decode$succeed(
							_elm_lang$core$Native_Utils.chr('i'));
					case 'j':
						return _elm_lang$core$Json_Decode$succeed(
							_elm_lang$core$Native_Utils.chr('j'));
					default:
						break _v0_10;
				}
			} else {
				break _v0_10;
			}
		} while(false);
		return _elm_lang$core$Json_Decode$fail('Group name can be a single a - j character.');
	},
	_elm_lang$core$Json_Decode$string);
var _gizra$backoffice$Backend_Bid_Decoder$decodeAlternativeBids = _elm_lang$core$Json_Decode$list(
	A2(_elm_lang$core$Json_Decode$field, 'lot', _elm_lang$core$Json_Decode$string));
var _gizra$backoffice$Backend_Bid_Decoder$decodeBidStatus = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (_p1) {
		var _p2 = _p1;
		var _p4 = _p2._0;
		var applyMaybeBidderNumber = function (tag) {
			return _elm_lang$core$Json_Decode$succeed(
				tag(_p2._1));
		};
		var _p3 = _p4;
		switch (_p3) {
			case 'accepted':
				return applyMaybeBidderNumber(_gizra$backoffice$Backend_Bid_Model$Accepted);
			case 'accepted_duplicated_amount':
				return applyMaybeBidderNumber(_gizra$backoffice$Backend_Bid_Model$AcceptedDuplicatedAmount);
			case 'rejected':
				return applyMaybeBidderNumber(_gizra$backoffice$Backend_Bid_Model$Rejected);
			case 'rejected_bidder_corrected':
				return applyMaybeBidderNumber(_gizra$backoffice$Backend_Bid_Model$Rejected);
			case 'rejected_bellow_minimum':
				return applyMaybeBidderNumber(_gizra$backoffice$Backend_Bid_Model$RejectedBellowMinimum);
			case 'rejected_over_bidder_max':
				return applyMaybeBidderNumber(_gizra$backoffice$Backend_Bid_Model$RejectedBidderMax);
			case 'rejected_over_credit_limit':
				return applyMaybeBidderNumber(_gizra$backoffice$Backend_Bid_Model$RejectedCreditLimit);
			case 'rejected_mail_after_last_floor':
				return applyMaybeBidderNumber(_gizra$backoffice$Backend_Bid_Model$RejectedMailAfterSetLastFloor);
			case 'outbid':
				return applyMaybeBidderNumber(_gizra$backoffice$Backend_Bid_Model$Outbid);
			default:
				return _elm_lang$core$Json_Decode$fail(
					A2(_elm_lang$core$Basics_ops['++'], 'Unknown bid status: ', _p4));
		}
	},
	A4(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
		'bidder_id',
		_elm_lang$core$Json_Decode$maybe(_Gizra$elm_essentials$Gizra_Json$decodeInt),
		_elm_lang$core$Maybe$Nothing,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'status',
			_elm_lang$core$Json_Decode$string,
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(
				F2(
					function (v0, v1) {
						return {ctor: '_Tuple2', _0: v0, _1: v1};
					})))));
var _gizra$backoffice$Backend_Bid_Decoder$decodeDeletedStatus = _elm_lang$core$Json_Decode$oneOf(
	{
		ctor: '::',
		_0: A2(
			_elm_lang$core$Json_Decode$field,
			'deleted_author',
			_elm_lang$core$Json_Decode$null(_gizra$backoffice$Backend_Bid_Model$NotDeleted)),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$core$Json_Decode$map,
				function (userId) {
					return _gizra$backoffice$Backend_Bid_Model$Deleted(
						_elm_lang$core$Maybe$Just(
							_Gizra$elm_restful$Restful_Endpoint$toEntityId(userId)));
				},
				A2(_elm_lang$core$Json_Decode$field, 'deleted_author', _Gizra$elm_essentials$Gizra_Json$decodeInt)),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$core$Json_Decode$map,
					function (isDeleted) {
						return isDeleted ? _gizra$backoffice$Backend_Bid_Model$Deleted(_elm_lang$core$Maybe$Nothing) : _gizra$backoffice$Backend_Bid_Model$NotDeleted;
					},
					A2(_elm_lang$core$Json_Decode$field, 'deleted', _elm_lang$core$Json_Decode$bool)),
				_1: {ctor: '[]'}
			}
		}
	});
var _gizra$backoffice$Backend_Bid_Decoder$decodeBidType = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (bidType) {
		var _p5 = bidType;
		switch (_p5) {
			case 'agent':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_Bid_Model$Agent);
			case 'auto_agent':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_Bid_Model$AutoAgent);
			case 'book':
				return A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'triggering_bid',
					_Gizra$elm_restful$Restful_Endpoint$decodeEntityId,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'mail_bid',
						_Gizra$elm_restful$Restful_Endpoint$decodeEntityId,
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_gizra$backoffice$Backend_Bid_Model$Book)));
			case 'floor':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_Bid_Model$Floor);
			case 'internet':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_Bid_Model$Internet);
			case 'mail':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_Bid_Model$Mail);
			case 'post_sale':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_Bid_Model$PostSale);
			default:
				return _elm_lang$core$Json_Decode$fail(
					A2(_elm_lang$core$Basics_ops['++'], 'Unknown bid type: ', bidType));
		}
	},
	A2(_elm_lang$core$Json_Decode$field, 'type', _elm_lang$core$Json_Decode$string));
var _gizra$backoffice$Backend_Bid_Decoder$decodeBid = A4(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
	'bids_group_name',
	_elm_lang$core$Json_Decode$maybe(_gizra$backoffice$Backend_Bid_Decoder$decodeGroupName),
	_elm_lang$core$Maybe$Nothing,
	A4(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
		'alternative_bids',
		_elm_lang$core$Json_Decode$maybe(_gizra$backoffice$Backend_Bid_Decoder$decodeAlternativeBids),
		_elm_lang$core$Maybe$Nothing,
		A4(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
			'under_extension',
			_elm_lang$core$Json_Decode$bool,
			false,
			A2(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
				_gizra$backoffice$Backend_Bid_Decoder$decodeBidType,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'created',
					_gizra$backoffice$Utils_Json$decodeDate,
					A2(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
						_gizra$backoffice$Backend_Bid_Decoder$decodeDeletedStatus,
						A2(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
							_gizra$backoffice$Backend_Bid_Decoder$decodeBidStatus,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'amount',
								_gizra$backoffice$Amount$decodeAmount,
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_gizra$backoffice$Backend_Bid_Model$Bid)))))))));
var _gizra$backoffice$Backend_Bid_Decoder$decodeBidPair = A3(
	_elm_lang$core$Json_Decode$map2,
	F2(
		function (v0, v1) {
			return {ctor: '_Tuple2', _0: v0, _1: v1};
		}),
	A2(_elm_lang$core$Json_Decode$field, 'id', _Gizra$elm_restful$Restful_Endpoint$decodeEntityId),
	_gizra$backoffice$Backend_Bid_Decoder$decodeBid);
var _gizra$backoffice$Backend_Bid_Decoder$decodeBidDict = A2(
	_elm_lang$core$Json_Decode$map,
	_Gizra$elm_dictlist$EveryDictList$fromList,
	_elm_lang$core$Json_Decode$list(_gizra$backoffice$Backend_Bid_Decoder$decodeBidPair));

var _mgold$elm_nonempty_list$List_Nonempty$foldl1 = F2(
	function (f, _p0) {
		var _p1 = _p0;
		return A3(_elm_lang$core$List$foldl, f, _p1._0, _p1._1);
	});
var _mgold$elm_nonempty_list$List_Nonempty$foldl = F3(
	function (f, b, _p2) {
		var _p3 = _p2;
		return A3(
			_elm_lang$core$List$foldl,
			f,
			b,
			{ctor: '::', _0: _p3._0, _1: _p3._1});
	});
var _mgold$elm_nonempty_list$List_Nonempty$any = F2(
	function (f, _p4) {
		var _p5 = _p4;
		return f(_p5._0) || A2(_elm_lang$core$List$any, f, _p5._1);
	});
var _mgold$elm_nonempty_list$List_Nonempty$all = F2(
	function (f, _p6) {
		var _p7 = _p6;
		return f(_p7._0) && A2(_elm_lang$core$List$all, f, _p7._1);
	});
var _mgold$elm_nonempty_list$List_Nonempty$member = F2(
	function (y, _p8) {
		var _p9 = _p8;
		return _elm_lang$core$Native_Utils.eq(_p9._0, y) || A2(_elm_lang$core$List$member, y, _p9._1);
	});
var _mgold$elm_nonempty_list$List_Nonempty$length = function (_p10) {
	var _p11 = _p10;
	return _elm_lang$core$List$length(_p11._1) + 1;
};
var _mgold$elm_nonempty_list$List_Nonempty$isSingleton = function (_p12) {
	var _p13 = _p12;
	return _elm_lang$core$List$isEmpty(_p13._1);
};
var _mgold$elm_nonempty_list$List_Nonempty$get = F2(
	function (i, _p14) {
		var _p15 = _p14;
		var find = F2(
			function (k, ys) {
				find:
				while (true) {
					var _p16 = ys;
					if (_p16.ctor === '[]') {
						return _elm_lang$core$Native_Utils.crashCase(
							'List.Nonempty',
							{
								start: {line: 131, column: 13},
								end: {line: 139, column: 40}
							},
							_p16)('This can\'t happen: attempted to take value at safe index from empty list');
					} else {
						if (_elm_lang$core$Native_Utils.eq(k, 0)) {
							return _p16._0;
						} else {
							var _v9 = k - 1,
								_v10 = _p16._1;
							k = _v9;
							ys = _v10;
							continue find;
						}
					}
				}
			});
		var j = A2(
			_elm_lang$core$Basics_ops['%'],
			i,
			_mgold$elm_nonempty_list$List_Nonempty$length(_p15));
		return _elm_lang$core$Native_Utils.eq(j, 0) ? _p15._0 : A2(find, j - 1, _p15._1);
	});
var _mgold$elm_nonempty_list$List_Nonempty$sample = function (nonempty) {
	return A2(
		_elm_lang$core$Random$map,
		function (i) {
			return A2(_mgold$elm_nonempty_list$List_Nonempty$get, i, nonempty);
		},
		A2(
			_elm_lang$core$Random$int,
			0,
			_mgold$elm_nonempty_list$List_Nonempty$length(nonempty) - 1));
};
var _mgold$elm_nonempty_list$List_Nonempty$toList = function (_p18) {
	var _p19 = _p18;
	return {ctor: '::', _0: _p19._0, _1: _p19._1};
};
var _mgold$elm_nonempty_list$List_Nonempty$tail = function (_p20) {
	var _p21 = _p20;
	return _p21._1;
};
var _mgold$elm_nonempty_list$List_Nonempty$head = function (_p22) {
	var _p23 = _p22;
	return _p23._0;
};
var _mgold$elm_nonempty_list$List_Nonempty$Nonempty = F2(
	function (a, b) {
		return {ctor: 'Nonempty', _0: a, _1: b};
	});
var _mgold$elm_nonempty_list$List_Nonempty$fromElement = function (x) {
	return A2(
		_mgold$elm_nonempty_list$List_Nonempty$Nonempty,
		x,
		{ctor: '[]'});
};
var _mgold$elm_nonempty_list$List_Nonempty$fromList = function (ys) {
	var _p24 = ys;
	if (_p24.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A2(_mgold$elm_nonempty_list$List_Nonempty$Nonempty, _p24._0, _p24._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _mgold$elm_nonempty_list$List_Nonempty$cons = F2(
	function (y, _p25) {
		var _p26 = _p25;
		return A2(
			_mgold$elm_nonempty_list$List_Nonempty$Nonempty,
			y,
			{ctor: '::', _0: _p26._0, _1: _p26._1});
	});
var _mgold$elm_nonempty_list$List_Nonempty_ops = _mgold$elm_nonempty_list$List_Nonempty_ops || {};
_mgold$elm_nonempty_list$List_Nonempty_ops[':::'] = _mgold$elm_nonempty_list$List_Nonempty$cons;
var _mgold$elm_nonempty_list$List_Nonempty$append = F2(
	function (_p28, _p27) {
		var _p29 = _p28;
		var _p30 = _p27;
		return A2(
			_mgold$elm_nonempty_list$List_Nonempty$Nonempty,
			_p29._0,
			A2(
				_elm_lang$core$Basics_ops['++'],
				_p29._1,
				{ctor: '::', _0: _p30._0, _1: _p30._1}));
	});
var _mgold$elm_nonempty_list$List_Nonempty$pop = function (_p31) {
	var _p32 = _p31;
	var _p34 = _p32._1;
	var _p33 = _p34;
	if (_p33.ctor === '[]') {
		return A2(_mgold$elm_nonempty_list$List_Nonempty$Nonempty, _p32._0, _p34);
	} else {
		return A2(_mgold$elm_nonempty_list$List_Nonempty$Nonempty, _p33._0, _p33._1);
	}
};
var _mgold$elm_nonempty_list$List_Nonempty$reverse = function (_p35) {
	var _p36 = _p35;
	var revapp = function (_p37) {
		revapp:
		while (true) {
			var _p38 = _p37;
			var _p41 = _p38._0;
			var _p40 = _p38._1;
			var _p39 = _p38._2;
			if (_p39.ctor === '[]') {
				return A2(_mgold$elm_nonempty_list$List_Nonempty$Nonempty, _p40, _p41);
			} else {
				var _v23 = {
					ctor: '_Tuple3',
					_0: {ctor: '::', _0: _p40, _1: _p41},
					_1: _p39._0,
					_2: _p39._1
				};
				_p37 = _v23;
				continue revapp;
			}
		}
	};
	return revapp(
		{
			ctor: '_Tuple3',
			_0: {ctor: '[]'},
			_1: _p36._0,
			_2: _p36._1
		});
};
var _mgold$elm_nonempty_list$List_Nonempty$concat = function (_p42) {
	var _p43 = _p42;
	var _p44 = _p43._0;
	var tl = A2(
		_elm_lang$core$Basics_ops['++'],
		_mgold$elm_nonempty_list$List_Nonempty$tail(_p44),
		_elm_lang$core$List$concat(
			A2(_elm_lang$core$List$map, _mgold$elm_nonempty_list$List_Nonempty$toList, _p43._1)));
	var hd = _mgold$elm_nonempty_list$List_Nonempty$head(_p44);
	return A2(_mgold$elm_nonempty_list$List_Nonempty$Nonempty, hd, tl);
};
var _mgold$elm_nonempty_list$List_Nonempty$replaceHead = F2(
	function (y, _p45) {
		var _p46 = _p45;
		return A2(_mgold$elm_nonempty_list$List_Nonempty$Nonempty, y, _p46._1);
	});
var _mgold$elm_nonempty_list$List_Nonempty$replaceTail = F2(
	function (ys, _p47) {
		var _p48 = _p47;
		return A2(_mgold$elm_nonempty_list$List_Nonempty$Nonempty, _p48._0, ys);
	});
var _mgold$elm_nonempty_list$List_Nonempty$dropTail = function (_p49) {
	var _p50 = _p49;
	return A2(
		_mgold$elm_nonempty_list$List_Nonempty$Nonempty,
		_p50._0,
		{ctor: '[]'});
};
var _mgold$elm_nonempty_list$List_Nonempty$map = F2(
	function (f, _p51) {
		var _p52 = _p51;
		return A2(
			_mgold$elm_nonempty_list$List_Nonempty$Nonempty,
			f(_p52._0),
			A2(_elm_lang$core$List$map, f, _p52._1));
	});
var _mgold$elm_nonempty_list$List_Nonempty$concatMap = F2(
	function (f, xs) {
		return _mgold$elm_nonempty_list$List_Nonempty$concat(
			A2(_mgold$elm_nonempty_list$List_Nonempty$map, f, xs));
	});
var _mgold$elm_nonempty_list$List_Nonempty$map2 = F3(
	function (f, _p54, _p53) {
		var _p55 = _p54;
		var _p56 = _p53;
		return A2(
			_mgold$elm_nonempty_list$List_Nonempty$Nonempty,
			A2(f, _p55._0, _p56._0),
			A3(_elm_lang$core$List$map2, f, _p55._1, _p56._1));
	});
var _mgold$elm_nonempty_list$List_Nonempty$andMap = _mgold$elm_nonempty_list$List_Nonempty$map2(
	F2(
		function (x, y) {
			return y(x);
		}));
var _mgold$elm_nonempty_list$List_Nonempty$indexedMap = F2(
	function (f, _p57) {
		var _p58 = _p57;
		var wrapped = F2(
			function (i, d) {
				return A2(f, i + 1, d);
			});
		return A2(
			_mgold$elm_nonempty_list$List_Nonempty$Nonempty,
			A2(f, 0, _p58._0),
			A2(_elm_lang$core$List$indexedMap, wrapped, _p58._1));
	});
var _mgold$elm_nonempty_list$List_Nonempty$filter = F3(
	function (p, d, _p59) {
		var _p60 = _p59;
		var _p63 = _p60._1;
		var _p62 = _p60._0;
		if (p(_p62)) {
			return A2(
				_mgold$elm_nonempty_list$List_Nonempty$Nonempty,
				_p62,
				A2(_elm_lang$core$List$filter, p, _p63));
		} else {
			var _p61 = A2(_elm_lang$core$List$filter, p, _p63);
			if (_p61.ctor === '[]') {
				return A2(
					_mgold$elm_nonempty_list$List_Nonempty$Nonempty,
					d,
					{ctor: '[]'});
			} else {
				return A2(_mgold$elm_nonempty_list$List_Nonempty$Nonempty, _p61._0, _p61._1);
			}
		}
	});
var _mgold$elm_nonempty_list$List_Nonempty$sort = function (_p64) {
	var _p65 = _p64;
	var _p66 = _elm_lang$core$List$sort(
		{ctor: '::', _0: _p65._0, _1: _p65._1});
	if (_p66.ctor === '::') {
		return A2(_mgold$elm_nonempty_list$List_Nonempty$Nonempty, _p66._0, _p66._1);
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'List.Nonempty',
			{
				start: {line: 360, column: 5},
				end: {line: 365, column: 92}
			},
			_p66)('This can\'t happen: sorting a nonempty list returned an empty list');
	}
};
var _mgold$elm_nonempty_list$List_Nonempty$sortBy = F2(
	function (f, _p68) {
		var _p69 = _p68;
		var _p70 = A2(
			_elm_lang$core$List$sortBy,
			f,
			{ctor: '::', _0: _p69._0, _1: _p69._1});
		if (_p70.ctor === '::') {
			return A2(_mgold$elm_nonempty_list$List_Nonempty$Nonempty, _p70._0, _p70._1);
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'List.Nonempty',
				{
					start: {line: 372, column: 5},
					end: {line: 377, column: 94}
				},
				_p70)('This can\'t happen: sortBying a nonempty list returned an empty list');
		}
	});
var _mgold$elm_nonempty_list$List_Nonempty$sortWith = F2(
	function (f, _p72) {
		var _p73 = _p72;
		var _p74 = A2(
			_elm_lang$core$List$sortWith,
			f,
			{ctor: '::', _0: _p73._0, _1: _p73._1});
		if (_p74.ctor === '::') {
			return A2(_mgold$elm_nonempty_list$List_Nonempty$Nonempty, _p74._0, _p74._1);
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'List.Nonempty',
				{
					start: {line: 384, column: 5},
					end: {line: 389, column: 96}
				},
				_p74)('This can\'t happen: sortWithing a nonempty list returned an empty list');
		}
	});
var _mgold$elm_nonempty_list$List_Nonempty$dedup = function (_p76) {
	var _p77 = _p76;
	var dedupe = F3(
		function (prev, done, next) {
			dedupe:
			while (true) {
				var _p78 = next;
				if (_p78.ctor === '[]') {
					return A2(_mgold$elm_nonempty_list$List_Nonempty$Nonempty, prev, done);
				} else {
					var _p80 = _p78._1;
					var _p79 = _p78._0;
					if (_elm_lang$core$Native_Utils.eq(_p79, prev)) {
						var _v42 = prev,
							_v43 = done,
							_v44 = _p80;
						prev = _v42;
						done = _v43;
						next = _v44;
						continue dedupe;
					} else {
						var _v45 = _p79,
							_v46 = {ctor: '::', _0: prev, _1: done},
							_v47 = _p80;
						prev = _v45;
						done = _v46;
						next = _v47;
						continue dedupe;
					}
				}
			}
		});
	return _mgold$elm_nonempty_list$List_Nonempty$reverse(
		A3(
			dedupe,
			_p77._0,
			{ctor: '[]'},
			_p77._1));
};
var _mgold$elm_nonempty_list$List_Nonempty$uniq = function (_p81) {
	var _p82 = _p81;
	var _p86 = _p82._0;
	var unique = F3(
		function (seen, done, next) {
			unique:
			while (true) {
				var _p83 = next;
				if (_p83.ctor === '[]') {
					return done;
				} else {
					var _p85 = _p83._1;
					var _p84 = _p83._0;
					if (A2(_elm_lang$core$List$member, _p84, seen)) {
						var _v50 = seen,
							_v51 = done,
							_v52 = _p85;
						seen = _v50;
						done = _v51;
						next = _v52;
						continue unique;
					} else {
						var _v53 = {ctor: '::', _0: _p84, _1: seen},
							_v54 = A2(_mgold$elm_nonempty_list$List_Nonempty_ops[':::'], _p84, done),
							_v55 = _p85;
						seen = _v53;
						done = _v54;
						next = _v55;
						continue unique;
					}
				}
			}
		});
	return _mgold$elm_nonempty_list$List_Nonempty$reverse(
		A3(
			unique,
			{
				ctor: '::',
				_0: _p86,
				_1: {ctor: '[]'}
			},
			A2(
				_mgold$elm_nonempty_list$List_Nonempty$Nonempty,
				_p86,
				{ctor: '[]'}),
			_p82._1));
};
var _mgold$elm_nonempty_list$List_Nonempty$scanl = F3(
	function (f, b, _p87) {
		var _p88 = _p87;
		return A2(
			_mgold$elm_nonempty_list$List_Nonempty$Nonempty,
			b,
			A3(
				_elm_lang$core$List$scanl,
				f,
				A2(f, _p88._0, b),
				_p88._1));
	});
var _mgold$elm_nonempty_list$List_Nonempty$scanl1 = F2(
	function (f, _p89) {
		var _p90 = _p89;
		var _p92 = _p90._0;
		var _p91 = _p90._1;
		if (_p91.ctor === '[]') {
			return A2(
				_mgold$elm_nonempty_list$List_Nonempty$Nonempty,
				_p92,
				{ctor: '[]'});
		} else {
			return A2(
				_mgold$elm_nonempty_list$List_Nonempty$Nonempty,
				_p92,
				A3(
					_elm_lang$core$List$scanl,
					f,
					A2(f, _p91._0, _p92),
					_p91._1));
		}
	});
var _mgold$elm_nonempty_list$List_Nonempty$zip = F2(
	function (_p94, _p93) {
		var _p95 = _p94;
		var _p96 = _p93;
		return A2(
			_mgold$elm_nonempty_list$List_Nonempty$Nonempty,
			{ctor: '_Tuple2', _0: _p95._0, _1: _p96._0},
			A3(
				_elm_lang$core$List$map2,
				F2(
					function (v0, v1) {
						return {ctor: '_Tuple2', _0: v0, _1: v1};
					}),
				_p95._1,
				_p96._1));
	});
var _mgold$elm_nonempty_list$List_Nonempty$unzip = function (_p97) {
	var _p98 = _p97;
	var _p99 = _elm_lang$core$List$unzip(_p98._1);
	var xs = _p99._0;
	var ys = _p99._1;
	return {
		ctor: '_Tuple2',
		_0: A2(_mgold$elm_nonempty_list$List_Nonempty$Nonempty, _p98._0._0, xs),
		_1: A2(_mgold$elm_nonempty_list$List_Nonempty$Nonempty, _p98._0._1, ys)
	};
};

var _gizra$backoffice$Backend_Item_Model$emptyItemFilters = {
	itemUuids: {ctor: '[]'},
	onlyWithMyBids: false
};
var _gizra$backoffice$Backend_Item_Model$Item = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return function (q) {
																	return function (r) {
																		return function (s) {
																			return {id: a, uuid: b, name: c, lotId: d, startingPrice: e, openingPrice: f, currentPrice: g, nextPrice: h, status: i, clerkStatus: j, bidSteps: k, bids: l, bookBids: m, agentBids: n, newBids: o, minimumPrice: p, winningBid: q, auctioneerNote: r, favorite: s};
																		};
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _gizra$backoffice$Backend_Item_Model$ItemsParams = F3(
	function (a, b, c) {
		return {saleUuid: a, page: b, filters: c};
	});
var _gizra$backoffice$Backend_Item_Model$ItemFilters = F2(
	function (a, b) {
		return {itemUuids: a, onlyWithMyBids: b};
	});
var _gizra$backoffice$Backend_Item_Model$BidStep = F3(
	function (a, b, c) {
		return {from: a, amount: b, type_: c};
	});
var _gizra$backoffice$Backend_Item_Model$ClerkStatusUnsold = {ctor: 'ClerkStatusUnsold'};
var _gizra$backoffice$Backend_Item_Model$ClerkStatusSold = {ctor: 'ClerkStatusSold'};
var _gizra$backoffice$Backend_Item_Model$GoneTransition = {ctor: 'GoneTransition'};
var _gizra$backoffice$Backend_Item_Model$Going = {ctor: 'Going'};
var _gizra$backoffice$Backend_Item_Model$Open = {ctor: 'Open'};
var _gizra$backoffice$Backend_Item_Model$Paused = {ctor: 'Paused'};
var _gizra$backoffice$Backend_Item_Model$PostSalePrevent = {ctor: 'PostSalePrevent'};
var _gizra$backoffice$Backend_Item_Model$PostSaleAllow = {ctor: 'PostSaleAllow'};
var _gizra$backoffice$Backend_Item_Model$Unsold = function (a) {
	return {ctor: 'Unsold', _0: a};
};
var _gizra$backoffice$Backend_Item_Model$Sold = {ctor: 'Sold'};
var _gizra$backoffice$Backend_Item_Model$MailOnly = {ctor: 'MailOnly'};
var _gizra$backoffice$Backend_Item_Model$LiveOnly = {ctor: 'LiveOnly'};
var _gizra$backoffice$Backend_Item_Model$ItemNotActiveButAlreadyHasLiveBids = {ctor: 'ItemNotActiveButAlreadyHasLiveBids'};
var _gizra$backoffice$Backend_Item_Model$Withdrawn = {ctor: 'Withdrawn'};
var _gizra$backoffice$Backend_Item_Model$SaleClosed = {ctor: 'SaleClosed'};
var _gizra$backoffice$Backend_Item_Model$SaleNotStarted = {ctor: 'SaleNotStarted'};
var _gizra$backoffice$Backend_Item_Model$ItemClosed = function (a) {
	return {ctor: 'ItemClosed', _0: a};
};
var _gizra$backoffice$Backend_Item_Model$ReadOnlyStatus = function (a) {
	return {ctor: 'ReadOnlyStatus', _0: a};
};
var _gizra$backoffice$Backend_Item_Model$EditableStatus = function (a) {
	return {ctor: 'EditableStatus', _0: a};
};
var _gizra$backoffice$Backend_Item_Model$Opening = function (a) {
	return {ctor: 'Opening', _0: a};
};
var _gizra$backoffice$Backend_Item_Model$Current = function (a) {
	return {ctor: 'Current', _0: a};
};
var _gizra$backoffice$Backend_Item_Model$AutomaticRound = {ctor: 'AutomaticRound'};
var _gizra$backoffice$Backend_Item_Model$Manual = {ctor: 'Manual'};
var _gizra$backoffice$Backend_Item_Model$Regular = {ctor: 'Regular'};
var _gizra$backoffice$Backend_Item_Model$Mail = {ctor: 'Mail'};
var _gizra$backoffice$Backend_Item_Model$Agent = {ctor: 'Agent'};
var _gizra$backoffice$Backend_Item_Model$SetFavorite = F3(
	function (a, b, c) {
		return {ctor: 'SetFavorite', _0: a, _1: b, _2: c};
	});
var _gizra$backoffice$Backend_Item_Model$SetAmount = F5(
	function (a, b, c, d, e) {
		return {ctor: 'SetAmount', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _gizra$backoffice$Backend_Item_Model$PlaceBid = F3(
	function (a, b, c) {
		return {ctor: 'PlaceBid', _0: a, _1: b, _2: c};
	});
var _gizra$backoffice$Backend_Item_Model$HandlePlaceBid = F4(
	function (a, b, c, d) {
		return {ctor: 'HandlePlaceBid', _0: a, _1: b, _2: c, _3: d};
	});
var _gizra$backoffice$Backend_Item_Model$HandleFetchItems = F3(
	function (a, b, c) {
		return {ctor: 'HandleFetchItems', _0: a, _1: b, _2: c};
	});
var _gizra$backoffice$Backend_Item_Model$HandleFetchItem = F3(
	function (a, b, c) {
		return {ctor: 'HandleFetchItem', _0: a, _1: b, _2: c};
	});
var _gizra$backoffice$Backend_Item_Model$HandleDeletedBid = F5(
	function (a, b, c, d, e) {
		return {ctor: 'HandleDeletedBid', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _gizra$backoffice$Backend_Item_Model$FetchItemsWithMyBids = F2(
	function (a, b) {
		return {ctor: 'FetchItemsWithMyBids', _0: a, _1: b};
	});
var _gizra$backoffice$Backend_Item_Model$FetchItemsByItemUuid = F3(
	function (a, b, c) {
		return {ctor: 'FetchItemsByItemUuid', _0: a, _1: b, _2: c};
	});
var _gizra$backoffice$Backend_Item_Model$DeleteCurrentBid = F3(
	function (a, b, c) {
		return {ctor: 'DeleteCurrentBid', _0: a, _1: b, _2: c};
	});

var _gizra$backoffice$Backend_Item_Decoder$decodeFavorite = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (val) {
		return _elm_lang$core$Json_Decode$succeed(
			_krisajenkins$remotedata$RemoteData$Success(val));
	},
	_elm_lang$core$Json_Decode$bool);
var _gizra$backoffice$Backend_Item_Decoder$decodeBidStepType = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (type_) {
		var _p0 = type_;
		switch (_p0) {
			case 'regular':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_Item_Model$Regular);
			case 'manual':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_Item_Model$Manual);
			case 'automatic_round':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_Item_Model$AutomaticRound);
			default:
				return _elm_lang$core$Json_Decode$fail(
					A2(_elm_lang$core$Basics_ops['++'], 'Unknown bid step type: ', type_));
		}
	},
	A2(_elm_lang$core$Json_Decode$field, 'type', _elm_lang$core$Json_Decode$string));
var _gizra$backoffice$Backend_Item_Decoder$decodeBidStep = A2(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
	_gizra$backoffice$Backend_Item_Decoder$decodeBidStepType,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'amount',
		_gizra$backoffice$Amount$decodeAmount,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'from',
			_gizra$backoffice$Amount$decodeAmount,
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_gizra$backoffice$Backend_Item_Model$BidStep))));
var _gizra$backoffice$Backend_Item_Decoder$decodeBidSteps = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (nonEmptyList) {
		return A3(
			_elm_community$maybe_extra$Maybe_Extra$unwrap,
			_elm_lang$core$Json_Decode$fail('bid steps array cannot be empty'),
			_elm_lang$core$Json_Decode$succeed,
			_mgold$elm_nonempty_list$List_Nonempty$fromList(nonEmptyList));
	},
	_elm_lang$core$Json_Decode$list(_gizra$backoffice$Backend_Item_Decoder$decodeBidStep));
var _gizra$backoffice$Backend_Item_Decoder$decodeClerkStatus = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (status) {
		var _p1 = status;
		switch (_p1) {
			case 'paused':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_Item_Model$Paused);
			case 'open':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_Item_Model$Open);
			case 'going':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_Item_Model$Going);
			case 'sold':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_Item_Model$ClerkStatusSold);
			case 'unsold':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_Item_Model$ClerkStatusUnsold);
			default:
				return _elm_lang$core$Json_Decode$fail(
					A2(_elm_lang$core$Basics_ops['++'], 'Could not recognise status for a clerk status: ', status));
		}
	},
	A2(_elm_lang$core$Json_Decode$field, 'status', _elm_lang$core$Json_Decode$string));
var _gizra$backoffice$Backend_Item_Decoder$decodeStatus = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (availabilityStatus) {
		var itemClosed = A2(
			_elm_lang$core$Json_Decode$andThen,
			function (_p2) {
				var _p3 = _p2;
				var _p5 = _p3._0;
				var _p4 = _p5;
				switch (_p4) {
					case 'sold':
						return A2(
							_elm_lang$core$Json_Decode$map,
							_gizra$backoffice$Backend_Item_Model$ReadOnlyStatus,
							_elm_lang$core$Json_Decode$succeed(
								_gizra$backoffice$Backend_Item_Model$ItemClosed(_gizra$backoffice$Backend_Item_Model$Sold)));
					case 'unsold':
						var noPostSaleType = _p3._1 ? _gizra$backoffice$Backend_Item_Model$PostSalePrevent : _gizra$backoffice$Backend_Item_Model$PostSaleAllow;
						return A2(
							_elm_lang$core$Json_Decode$map,
							_gizra$backoffice$Backend_Item_Model$ReadOnlyStatus,
							_elm_lang$core$Json_Decode$succeed(
								_gizra$backoffice$Backend_Item_Model$ItemClosed(
									_gizra$backoffice$Backend_Item_Model$Unsold(noPostSaleType))));
					default:
						return _elm_lang$core$Json_Decode$fail(
							A2(_elm_lang$core$Basics_ops['++'], 'Could not recognise Item status: ', _p5));
				}
			},
			A4(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
				'no_post_sale',
				_elm_lang$core$Json_Decode$bool,
				false,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'status',
					_elm_lang$core$Json_Decode$string,
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(
						F2(
							function (v0, v1) {
								return {ctor: '_Tuple2', _0: v0, _1: v1};
							})))));
		var _p6 = availabilityStatus;
		switch (_p6) {
			case 'live_only':
				return A2(
					_elm_lang$core$Json_Decode$map,
					_gizra$backoffice$Backend_Item_Model$EditableStatus,
					_elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_Item_Model$LiveOnly));
			case 'item_paused':
				return A2(
					_elm_lang$core$Json_Decode$map,
					_gizra$backoffice$Backend_Item_Model$EditableStatus,
					_elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_Item_Model$LiveOnly));
			case 'mail_only':
				return A2(
					_elm_lang$core$Json_Decode$map,
					_gizra$backoffice$Backend_Item_Model$EditableStatus,
					_elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_Item_Model$MailOnly));
			case 'sale_not_started':
				return A2(
					_elm_lang$core$Json_Decode$map,
					_gizra$backoffice$Backend_Item_Model$ReadOnlyStatus,
					_elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_Item_Model$SaleNotStarted));
			case 'sale_closed':
				return itemClosed;
			case 'item_withdrawn':
				return A2(
					_elm_lang$core$Json_Decode$map,
					_gizra$backoffice$Backend_Item_Model$ReadOnlyStatus,
					_elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_Item_Model$Withdrawn));
			case 'item_closed':
				return itemClosed;
			case 'none':
				return A2(
					_elm_lang$core$Json_Decode$map,
					_gizra$backoffice$Backend_Item_Model$ReadOnlyStatus,
					_elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_Item_Model$ItemNotActiveButAlreadyHasLiveBids));
			default:
				return _elm_lang$core$Json_Decode$fail(
					A2(_elm_lang$core$Basics_ops['++'], 'Could not recognise availability status: ', availabilityStatus));
		}
	},
	A2(_elm_lang$core$Json_Decode$field, 'availability_status', _elm_lang$core$Json_Decode$string));
var _gizra$backoffice$Backend_Item_Decoder$decodeItem = A4(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
	'is_favorite',
	_gizra$backoffice$Backend_Item_Decoder$decodeFavorite,
	_krisajenkins$remotedata$RemoteData$Success(false),
	A4(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
		'note',
		_elm_lang$core$Json_Decode$string,
		'',
		A4(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
			'winning_bid',
			_elm_lang$core$Json_Decode$maybe(_Gizra$elm_restful$Restful_Endpoint$decodeEntityId),
			_elm_lang$core$Maybe$Nothing,
			A4(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
				'minimum_price',
				_elm_lang$core$Json_Decode$maybe(_gizra$backoffice$Amount$decodeAmount),
				_elm_lang$core$Maybe$Nothing,
				A2(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$hardcoded,
					_eeue56$elm_all_dict$EveryDict$empty,
					A4(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
						'agent_bid',
						_gizra$backoffice$Backend_Bid_Decoder$decodeBidDict,
						_Gizra$elm_dictlist$EveryDictList$empty,
						A4(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
							'book_bid',
							_gizra$backoffice$Backend_Bid_Decoder$decodeBidDict,
							_Gizra$elm_dictlist$EveryDictList$empty,
							A4(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
								'bid',
								_gizra$backoffice$Backend_Bid_Decoder$decodeBidDict,
								_Gizra$elm_dictlist$EveryDictList$empty,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'steps',
									_gizra$backoffice$Backend_Item_Decoder$decodeBidSteps,
									A2(
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
										_gizra$backoffice$Backend_Item_Decoder$decodeClerkStatus,
										A2(
											_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
											_gizra$backoffice$Backend_Item_Decoder$decodeStatus,
											A4(
												_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
												'next_price',
												_elm_lang$core$Json_Decode$nullable(_gizra$backoffice$Amount$decodeAmount),
												_elm_lang$core$Maybe$Nothing,
												A4(
													_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
													'current_price',
													_elm_lang$core$Json_Decode$nullable(_gizra$backoffice$Amount$decodeAmount),
													_elm_lang$core$Maybe$Nothing,
													A3(
														_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
														'opening_price',
														_gizra$backoffice$Amount$decodeAmount,
														A3(
															_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
															'starting_price',
															_gizra$backoffice$Amount$decodeAmount,
															A3(
																_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																'lot',
																_elm_lang$core$Json_Decode$string,
																A3(
																	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																	'label',
																	_elm_lang$core$Json_Decode$string,
																	A3(
																		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																		'uuid',
																		_Gizra$elm_restful$Restful_Endpoint$decodeEntityUuid,
																		A3(
																			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																			'id',
																			_Gizra$elm_restful$Restful_Endpoint$decodeEntityId,
																			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_gizra$backoffice$Backend_Item_Model$Item))))))))))))))))))));
var _gizra$backoffice$Backend_Item_Decoder$decodeItemsDictFromPort = function (saleUuid) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		function (_p7) {
			var _p8 = _p7;
			var dictUpdated = A3(
				_Gizra$elm_dictlist$EveryDictList$foldl,
				F3(
					function (itemId, item, accum) {
						return A3(
							_gizra$backoffice$PaginatedData$insertDirectlyFromClient,
							saleUuid,
							{ctor: '_Tuple2', _0: item.uuid, _1: item},
							accum);
					}),
				_gizra$backoffice$PaginatedData$emptyContainer(saleUuid),
				_p8._0);
			var dictWithTotalCount = A3(_gizra$backoffice$PaginatedData$setTotalCount, saleUuid, _p8._1, dictUpdated);
			return _elm_lang$core$Json_Decode$succeed(dictWithTotalCount);
		},
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'totalCount',
			_elm_lang$core$Json_Decode$maybe(_elm_lang$core$Json_Decode$int),
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'data',
				A3(_gizra$backoffice$Utils_Json$decodeListAsEveryDictListByProperty, 'id', _Gizra$elm_restful$Restful_Endpoint$decodeEntityId, _gizra$backoffice$Backend_Item_Decoder$decodeItem),
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						})))));
};

var _gizra$backoffice$Backend_ForgotPassword_Model$ForgotPassword = F3(
	function (a, b, c) {
		return {email: a, language: b, site: c};
	});
var _gizra$backoffice$Backend_ForgotPassword_Model$HandleSave = function (a) {
	return {ctor: 'HandleSave', _0: a};
};
var _gizra$backoffice$Backend_ForgotPassword_Model$Save = function (a) {
	return {ctor: 'Save', _0: a};
};

var _gizra$backoffice$Backend_ResetPassword_Model$ResetPassword = F3(
	function (a, b, c) {
		return {userId: a, timestamp: b, hash: c};
	});

var _gizra$backoffice$App_Types$UserBlock = function (a) {
	return {ctor: 'UserBlock', _0: a};
};
var _gizra$backoffice$App_Types$WidgetManager = function (a) {
	return {ctor: 'WidgetManager', _0: a};
};
var _gizra$backoffice$App_Types$ResetPassword = function (a) {
	return {ctor: 'ResetPassword', _0: a};
};
var _gizra$backoffice$App_Types$Register = {ctor: 'Register'};
var _gizra$backoffice$App_Types$NotFound = {ctor: 'NotFound'};
var _gizra$backoffice$App_Types$MyCredit = function (a) {
	return {ctor: 'MyCredit', _0: a};
};
var _gizra$backoffice$App_Types$MyBids = function (a) {
	return {ctor: 'MyBids', _0: a};
};
var _gizra$backoffice$App_Types$MyAccount = {ctor: 'MyAccount'};
var _gizra$backoffice$App_Types$LoginPage = {ctor: 'LoginPage'};
var _gizra$backoffice$App_Types$ItemPreLiveSale = F2(
	function (a, b) {
		return {ctor: 'ItemPreLiveSale', _0: a, _1: b};
	});
var _gizra$backoffice$App_Types$ForgotPassword = {ctor: 'ForgotPassword'};
var _gizra$backoffice$App_Types$French = {ctor: 'French'};
var _gizra$backoffice$App_Types$Russian = {ctor: 'Russian'};
var _gizra$backoffice$App_Types$Hebrew = {ctor: 'Hebrew'};
var _gizra$backoffice$App_Types$German = {ctor: 'German'};
var _gizra$backoffice$App_Types$Dutch = {ctor: 'Dutch'};
var _gizra$backoffice$App_Types$Chinese = {ctor: 'Chinese'};
var _gizra$backoffice$App_Types$English = {ctor: 'English'};

var _gizra$backoffice$Backend_User_Model$User = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return {name: a, firstName: b, lastName: c, email: d, phone: e, address: f, language: g, id: h, siteUuid: i, uuid: j, status: k, userType: l, websiteBidderInfo: m, references: n, subscribeToNewsLetter: o};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _gizra$backoffice$Backend_User_Model$Address = F6(
	function (a, b, c, d, e, f) {
		return {country: a, addressLine1: b, addressLine2: c, city: d, state: e, zipCode: f};
	});
var _gizra$backoffice$Backend_User_Model$Privileged = {ctor: 'Privileged'};
var _gizra$backoffice$Backend_User_Model$Bidder = {ctor: 'Bidder'};
var _gizra$backoffice$Backend_User_Model$Pending = {ctor: 'Pending'};
var _gizra$backoffice$Backend_User_Model$Active = {ctor: 'Active'};

var _gizra$backoffice$Backend_MyAccount_Model$MyAccount = F9(
	function (a, b, c, d, e, f, g, h, i) {
		return {firstName: a, lastName: b, email: c, password: d, phone: e, address: f, language: g, references: h, subscribeToNewsLetter: i};
	});
var _gizra$backoffice$Backend_MyAccount_Model$HandleSave = function (a) {
	return {ctor: 'HandleSave', _0: a};
};
var _gizra$backoffice$Backend_MyAccount_Model$Save = function (a) {
	return {ctor: 'Save', _0: a};
};

var _gizra$backoffice$Backend_Register_Model$Registration = F9(
	function (a, b, c, d, e, f, g, h, i) {
		return {firstName: a, lastName: b, email: c, password: d, phoneNumber: e, address: f, language: g, references: h, subscribeToNewsLetter: i};
	});
var _gizra$backoffice$Backend_Register_Model$HandleSave = function (a) {
	return {ctor: 'HandleSave', _0: a};
};
var _gizra$backoffice$Backend_Register_Model$Save = F2(
	function (a, b) {
		return {ctor: 'Save', _0: a, _1: b};
	});

var _gizra$backoffice$Backend_Session_Model$Session = F6(
	function (a, b, c, d, e, f) {
		return {name: a, firstItem: b, lastItem: c, delta: d, itemCount: e, batchCount: f};
	});

var _gizra$backoffice$Backend_Sale_Model$Sale = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return {id: a, label: b, status: c, item: d, currency: e, staticBaseUrl: f, staticRevision: g, mailAuctionType: h, sessions: i, baseUrl: j, revision: k};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _gizra$backoffice$Backend_Sale_Model$SaleUpdateData = F2(
	function (a, b) {
		return {status: a, item: b};
	});
var _gizra$backoffice$Backend_Sale_Model$SaleParams = function (a) {
	return {saleUuid: a};
};
var _gizra$backoffice$Backend_Sale_Model$ClosedEnded = {ctor: 'ClosedEnded'};
var _gizra$backoffice$Backend_Sale_Model$PausedBackShortly = {ctor: 'PausedBackShortly'};
var _gizra$backoffice$Backend_Sale_Model$LiveAuctionOpen = {ctor: 'LiveAuctionOpen'};
var _gizra$backoffice$Backend_Sale_Model$PausedStartingSoon = {ctor: 'PausedStartingSoon'};
var _gizra$backoffice$Backend_Sale_Model$MailAuctionOpen = {ctor: 'MailAuctionOpen'};
var _gizra$backoffice$Backend_Sale_Model$ClosedNotStarted = {ctor: 'ClosedNotStarted'};
var _gizra$backoffice$Backend_Sale_Model$Obscured = {ctor: 'Obscured'};
var _gizra$backoffice$Backend_Sale_Model$Regular = {ctor: 'Regular'};
var _gizra$backoffice$Backend_Sale_Model$HandleFetch = F2(
	function (a, b) {
		return {ctor: 'HandleFetch', _0: a, _1: b};
	});
var _gizra$backoffice$Backend_Sale_Model$Fetch = function (a) {
	return {ctor: 'Fetch', _0: a};
};

var _gizra$backoffice$Backend_Site_Model$Site = F3(
	function (a, b, c) {
		return {name: a, languages: b, disableAgent: c};
	});
var _gizra$backoffice$Backend_Site_Model$SiteParams = function (a) {
	return {name: a};
};
var _gizra$backoffice$Backend_Site_Model$HandleFetch = function (a) {
	return {ctor: 'HandleFetch', _0: a};
};
var _gizra$backoffice$Backend_Site_Model$Fetch = function (a) {
	return {ctor: 'Fetch', _0: a};
};

var _gizra$backoffice$Backend_StaticItem_Model$emptyDataAndPager = {data: _eeue56$elm_all_dict$EveryDict$empty, pager: _eeue56$elm_all_dict$EveryDict$empty};
var _gizra$backoffice$Backend_StaticItem_Model$StaticItem = F5(
	function (a, b, c, d, e) {
		return {name: a, image: b, imageSmall: c, description: d, estimatedPrice: e};
	});
var _gizra$backoffice$Backend_StaticItem_Model$DataAndPager = F2(
	function (a, b) {
		return {data: a, pager: b};
	});
var _gizra$backoffice$Backend_StaticItem_Model$HandleFetch = F2(
	function (a, b) {
		return {ctor: 'HandleFetch', _0: a, _1: b};
	});
var _gizra$backoffice$Backend_StaticItem_Model$Fetch = F2(
	function (a, b) {
		return {ctor: 'Fetch', _0: a, _1: b};
	});

var _gizra$backoffice$Backend_Model$emptyAnonymousModelBackend = {bidServerAuthStatusRequiredByBo: false, forgotPassword: _krisajenkins$remotedata$RemoteData$NotAsked, register: _krisajenkins$remotedata$RemoteData$NotAsked, resetPassword: _krisajenkins$remotedata$RemoteData$NotAsked, site: _krisajenkins$remotedata$RemoteData$NotAsked, sales: _eeue56$elm_all_dict$EveryDict$empty, items: _eeue56$elm_all_dict$EveryDict$empty};
var _gizra$backoffice$Backend_Model$emptyModelBackend = {bidderInfo: _eeue56$elm_all_dict$EveryDict$empty, bidderInfoByBidderNumber: _elm_lang$core$Dict$empty, bidServerAuthStatusRequiredByBo: _gizra$backoffice$Backend_BidServerAuthStatusRequiredByBo_Model$NotRequired, creditRequests: _krisajenkins$remotedata$RemoteData$NotAsked, items: _eeue56$elm_all_dict$EveryDict$empty, myAccount: _krisajenkins$remotedata$RemoteData$NotAsked, sales: _eeue56$elm_all_dict$EveryDict$empty, site: _krisajenkins$remotedata$RemoteData$NotAsked, staticItems: _gizra$backoffice$Backend_StaticItem_Model$emptyDataAndPager, disableAgent: false};
var _gizra$backoffice$Backend_Model$ModelBackend = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {bidderInfo: a, bidderInfoByBidderNumber: b, bidServerAuthStatusRequiredByBo: c, creditRequests: d, items: e, myAccount: f, sales: g, site: h, staticItems: i, disableAgent: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _gizra$backoffice$Backend_Model$AnonymousModelBackend = F7(
	function (a, b, c, d, e, f, g) {
		return {bidServerAuthStatusRequiredByBo: a, forgotPassword: b, register: c, resetPassword: d, site: e, sales: f, items: g};
	});
var _gizra$backoffice$Backend_Model$MsgStaticItem = function (a) {
	return {ctor: 'MsgStaticItem', _0: a};
};
var _gizra$backoffice$Backend_Model$MsgSite = function (a) {
	return {ctor: 'MsgSite', _0: a};
};
var _gizra$backoffice$Backend_Model$MsgSale = function (a) {
	return {ctor: 'MsgSale', _0: a};
};
var _gizra$backoffice$Backend_Model$MsgRegister = function (a) {
	return {ctor: 'MsgRegister', _0: a};
};
var _gizra$backoffice$Backend_Model$MsgCreditRequest = function (a) {
	return {ctor: 'MsgCreditRequest', _0: a};
};
var _gizra$backoffice$Backend_Model$MsgMyAccount = function (a) {
	return {ctor: 'MsgMyAccount', _0: a};
};
var _gizra$backoffice$Backend_Model$MsgItem = function (a) {
	return {ctor: 'MsgItem', _0: a};
};
var _gizra$backoffice$Backend_Model$MsgForgotPassword = function (a) {
	return {ctor: 'MsgForgotPassword', _0: a};
};
var _gizra$backoffice$Backend_Model$MsgBidServerAuthStatusRequiredByBo = function (a) {
	return {ctor: 'MsgBidServerAuthStatusRequiredByBo', _0: a};
};
var _gizra$backoffice$Backend_Model$MsgBidderInfo = function (a) {
	return {ctor: 'MsgBidderInfo', _0: a};
};

var _gizra$backoffice$Backend_Session_Decoder$decodeSession = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'batch_count',
	_Gizra$elm_essentials$Gizra_Json$decodeInt,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'item_count',
		_Gizra$elm_essentials$Gizra_Json$decodeInt,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'delta',
			_Gizra$elm_essentials$Gizra_Json$decodeInt,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'last_item',
				_Gizra$elm_restful$Restful_Endpoint$decodeEntityId,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'first_item',
					_Gizra$elm_restful$Restful_Endpoint$decodeEntityId,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'label',
						_elm_lang$core$Json_Decode$string,
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_gizra$backoffice$Backend_Session_Model$Session)))))));
var _gizra$backoffice$Backend_Session_Decoder$decodeSessionsDict = A3(_gizra$backoffice$Utils_Json$decodeListAsEveryDictListByProperty, 'id', _Gizra$elm_restful$Restful_Endpoint$decodeEntityId, _gizra$backoffice$Backend_Session_Decoder$decodeSession);

var _gizra$backoffice$Currency_Decoder$decodeCurrency = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (currency) {
		var _p0 = currency;
		switch (_p0) {
			case 'CHF':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Currency_Model$CHF);
			case 'EUR':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Currency_Model$EUR);
			case 'GBP':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Currency_Model$GBP);
			case 'HKD':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Currency_Model$HKD);
			case 'HRN':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Currency_Model$HRN);
			case 'ILS':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Currency_Model$ILS);
			case 'USD':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Currency_Model$USD);
			default:
				return _elm_lang$core$Json_Decode$fail(
					A2(_elm_lang$core$Basics_ops['++'], 'Could not recognise currency: ', currency));
		}
	},
	_elm_lang$core$Json_Decode$string);

var _gizra$backoffice$Backend_Sale_Decoder$decodeMailAuctionType = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (mailType) {
		var _p0 = mailType;
		switch (_p0) {
			case 'regular':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_Sale_Model$Regular);
			case 'obscured':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_Sale_Model$Obscured);
			default:
				return _elm_lang$core$Json_Decode$fail(
					A2(_elm_lang$core$Basics_ops['++'], 'Unknown mail auction type: ', mailType));
		}
	},
	_elm_lang$core$Json_Decode$string);
var _gizra$backoffice$Backend_Sale_Decoder$decodeStatus = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (status) {
		var _p1 = status;
		switch (_p1) {
			case 'closed_not_started':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_Sale_Model$ClosedNotStarted);
			case 'open_mail':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_Sale_Model$MailAuctionOpen);
			case 'paused_starting_soon':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_Sale_Model$PausedStartingSoon);
			case 'open_live':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_Sale_Model$LiveAuctionOpen);
			case 'paused_back_shortly':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_Sale_Model$PausedBackShortly);
			case 'closed_ended':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_Sale_Model$ClosedEnded);
			default:
				return _elm_lang$core$Json_Decode$fail(
					A2(_elm_lang$core$Basics_ops['++'], 'Could not recognise status: ', status));
		}
	},
	_elm_lang$core$Json_Decode$string);
var _gizra$backoffice$Backend_Sale_Decoder$decodeSaleUpdate = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'item',
	_Gizra$elm_restful$Restful_Endpoint$decodeEntityId,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'status',
		_gizra$backoffice$Backend_Sale_Decoder$decodeStatus,
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_gizra$backoffice$Backend_Sale_Model$SaleUpdateData)));
var _gizra$backoffice$Backend_Sale_Decoder$decodeSale = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'url_revision',
	_Gizra$elm_essentials$Gizra_Json$decodeInt,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'base_url',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'sessions',
			_gizra$backoffice$Backend_Session_Decoder$decodeSessionsDict,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'mail_auction_type',
				_gizra$backoffice$Backend_Sale_Decoder$decodeMailAuctionType,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'url_revision',
					_Gizra$elm_essentials$Gizra_Json$decodeInt,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'base_url',
						_elm_lang$core$Json_Decode$string,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'currency',
							_gizra$backoffice$Currency_Decoder$decodeCurrency,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'item',
								_Gizra$elm_restful$Restful_Endpoint$decodeEntityId,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'status',
									_gizra$backoffice$Backend_Sale_Decoder$decodeStatus,
									A3(
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
										'label',
										_elm_lang$core$Json_Decode$string,
										A3(
											_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
											'id',
											_Gizra$elm_restful$Restful_Endpoint$decodeEntityId,
											_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_gizra$backoffice$Backend_Sale_Model$Sale))))))))))));
var _gizra$backoffice$Backend_Sale_Decoder$decodeSalesDictFromPort = function (saleUuid) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		function (dict) {
			return _elm_lang$core$Json_Decode$succeed(
				A3(
					_eeue56$elm_all_dict$EveryDict$foldl,
					F3(
						function (_p2, sale, accum) {
							return A3(
								_eeue56$elm_all_dict$EveryDict$insert,
								saleUuid,
								_krisajenkins$remotedata$RemoteData$Success(sale),
								accum);
						}),
					_eeue56$elm_all_dict$EveryDict$empty,
					dict));
		},
		A3(_gizra$backoffice$Utils_Json$decodeListAsEveryDictByProperty, 'id', _Gizra$elm_restful$Restful_Endpoint$decodeEntityId, _gizra$backoffice$Backend_Sale_Decoder$decodeSale));
};

var _gizra$backoffice$Backend_Site_Decoder$decodeLanguage = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (val) {
		var _p0 = val;
		switch (_p0) {
			case 'en':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$App_Types$English);
			case 'nl':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$App_Types$Dutch);
			case 'de':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$App_Types$German);
			case 'fr':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$App_Types$French);
			case 'he':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$App_Types$Hebrew);
			case 'ru':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$App_Types$Russian);
			case 'zh-hans':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$App_Types$Chinese);
			default:
				return _elm_lang$core$Json_Decode$fail(
					A2(_elm_lang$core$Basics_ops['++'], 'Could not recognise language: ', val));
		}
	},
	_elm_lang$core$Json_Decode$string);
var _gizra$backoffice$Backend_Site_Decoder$decodeSite = A4(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
	'disable_agent',
	_elm_lang$core$Json_Decode$bool,
	false,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'languages',
		_elm_lang$core$Json_Decode$list(_gizra$backoffice$Backend_Site_Decoder$decodeLanguage),
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'label',
			_Gizra$elm_restful$Restful_Endpoint$decodeEntityUuid,
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_gizra$backoffice$Backend_Site_Model$Site))));

var _gizra$backoffice$Backend_StaticItem_Decoder$decodeStaticItem = A4(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
	'estimatedPrice',
	_elm_lang$core$Json_Decode$maybe(_gizra$backoffice$Amount$decodeAmount),
	_elm_lang$core$Maybe$Nothing,
	A4(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
		'body',
		_elm_lang$core$Json_Decode$maybe(_elm_lang$core$Json_Decode$string),
		_elm_lang$core$Maybe$Nothing,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'imageSmall',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'image',
				_elm_lang$core$Json_Decode$string,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'title',
					_elm_lang$core$Json_Decode$string,
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_gizra$backoffice$Backend_StaticItem_Model$StaticItem))))));
var _gizra$backoffice$Backend_StaticItem_Decoder$decodeStaticItemsDict = A3(_gizra$backoffice$Utils_Json$decodeListAsEveryDictByProperty, 'uuid', _Gizra$elm_restful$Restful_Endpoint$decodeEntityUuid, _gizra$backoffice$Backend_StaticItem_Decoder$decodeStaticItem);
var _gizra$backoffice$Backend_StaticItem_Decoder$decodeDataAndPagerDictFromPort = A2(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$hardcoded,
	_eeue56$elm_all_dict$EveryDict$empty,
	A2(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
		_gizra$backoffice$Backend_StaticItem_Decoder$decodeStaticItemsDict,
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_gizra$backoffice$Backend_StaticItem_Model$DataAndPager)));

var _gizra$backoffice$Backend_Decoder$decodeAnonymousModelBackend = function (maybeSaleUuid) {
	var _p0 = maybeSaleUuid;
	if (_p0.ctor === 'Just') {
		var _p1 = _p0._0;
		return A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'items',
			_gizra$backoffice$Backend_Item_Decoder$decodeItemsDictFromPort(_p1),
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'sales',
				_gizra$backoffice$Backend_Sale_Decoder$decodeSalesDictFromPort(_p1),
				A2(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$hardcoded,
					_krisajenkins$remotedata$RemoteData$NotAsked,
					A2(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$hardcoded,
						_krisajenkins$remotedata$RemoteData$NotAsked,
						A2(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$hardcoded,
							_krisajenkins$remotedata$RemoteData$NotAsked,
							A2(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$hardcoded,
								_krisajenkins$remotedata$RemoteData$NotAsked,
								A2(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$hardcoded,
									false,
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_gizra$backoffice$Backend_Model$AnonymousModelBackend))))))));
	} else {
		return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_Model$emptyAnonymousModelBackend);
	}
};
var _gizra$backoffice$Backend_Decoder$decodeModelBackend = function (maybeSaleUuid) {
	var _p2 = maybeSaleUuid;
	if (_p2.ctor === 'Just') {
		var _p3 = _p2._0;
		return A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'disableAgent',
			_elm_lang$core$Json_Decode$bool,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'staticItems',
				_gizra$backoffice$Backend_StaticItem_Decoder$decodeDataAndPagerDictFromPort,
				A2(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$hardcoded,
					_krisajenkins$remotedata$RemoteData$NotAsked,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'sales',
						_gizra$backoffice$Backend_Sale_Decoder$decodeSalesDictFromPort(_p3),
						A2(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$hardcoded,
							_krisajenkins$remotedata$RemoteData$NotAsked,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'items',
								_gizra$backoffice$Backend_Item_Decoder$decodeItemsDictFromPort(_p3),
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'creditRequests',
									_gizra$backoffice$Backend_CreditRequest_Decoder$decodeCreditRequestsWebDataFromPort,
									A2(
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$hardcoded,
										_gizra$backoffice$Backend_BidServerAuthStatusRequiredByBo_Model$NotRequired,
										A3(
											_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
											'bidderInfoByBidderNumber',
											_gizra$backoffice$Backend_BidderInfo_Decoder$decodeBidderInfoByBidderNumberDictFromPort,
											A3(
												_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
												'bidderInfo',
												_gizra$backoffice$Backend_BidderInfo_Decoder$decodeBidderInfoDictFromPort(_p3),
												_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_gizra$backoffice$Backend_Model$ModelBackend)))))))))));
	} else {
		return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_Model$emptyModelBackend);
	}
};

var _gizra$backoffice$Backend_User_Decoder$decodeWebsiteBidderInfo = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (list) {
		return _elm_lang$core$Json_Decode$succeed(
			_eeue56$elm_all_dict$EveryDict$fromList(list));
	},
	_elm_lang$core$Json_Decode$list(
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'bidder_info',
			_Gizra$elm_restful$Restful_Endpoint$decodeEntityId,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'sale_uuid',
				_Gizra$elm_restful$Restful_Endpoint$decodeEntityUuid,
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						}))))));
var _gizra$backoffice$Backend_User_Decoder$stringToUserType = function (userType) {
	var _p0 = userType;
	switch (_p0) {
		case 'bidder':
			return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_User_Model$Bidder);
		case 'privileged':
			return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_User_Model$Privileged);
		default:
			return _elm_lang$core$Json_Decode$fail(
				A2(_elm_lang$core$Basics_ops['++'], 'Could not recognise user type: ', userType));
	}
};
var _gizra$backoffice$Backend_User_Decoder$stringToStatus = function (status) {
	var _p1 = status;
	switch (_p1) {
		case 'active':
			return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_User_Model$Active);
		case 'pending':
			return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Backend_User_Model$Pending);
		default:
			return _elm_lang$core$Json_Decode$fail(
				A2(_elm_lang$core$Basics_ops['++'], 'Could not recognise status: ', status));
	}
};
var _gizra$backoffice$Backend_User_Decoder$decodeType = function (stringToType) {
	return A2(_elm_lang$core$Json_Decode$andThen, stringToType, _elm_lang$core$Json_Decode$string);
};
var _gizra$backoffice$Backend_User_Decoder$decodeAddress = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'postal_code',
	_elm_lang$core$Json_Decode$string,
	A4(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
		'administrative_area',
		_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$string),
		_elm_lang$core$Maybe$Nothing,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'locality',
			_elm_lang$core$Json_Decode$string,
			A4(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
				'premise',
				_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$string),
				_elm_lang$core$Maybe$Nothing,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'thoroughfare',
					_elm_lang$core$Json_Decode$string,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'country',
						_elm_lang$core$Json_Decode$string,
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_gizra$backoffice$Backend_User_Model$Address)))))));
var _gizra$backoffice$Backend_User_Decoder$decodeLanguage = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (val) {
		var _p2 = val;
		switch (_p2) {
			case 'en':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$App_Types$English);
			case 'de':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$App_Types$German);
			case 'he':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$App_Types$Hebrew);
			case 'fr':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$App_Types$French);
			case 'nl':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$App_Types$Dutch);
			case 'ru':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$App_Types$Russian);
			case 'zh-hans':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$App_Types$Chinese);
			default:
				return _elm_lang$core$Json_Decode$fail(
					A2(_elm_lang$core$Basics_ops['++'], 'Could not recognise language: ', val));
		}
	},
	_elm_lang$core$Json_Decode$string);
var _gizra$backoffice$Backend_User_Decoder$decodeUser = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'subscribe_to_newsletter',
	_elm_lang$core$Json_Decode$bool,
	A4(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
		'references',
		_elm_lang$core$Json_Decode$maybe(_elm_lang$core$Json_Decode$string),
		_elm_lang$core$Maybe$Nothing,
		A4(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
			'website_bidder_info',
			_gizra$backoffice$Backend_User_Decoder$decodeWebsiteBidderInfo,
			_eeue56$elm_all_dict$EveryDict$empty,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'user_type',
				_gizra$backoffice$Backend_User_Decoder$decodeType(_gizra$backoffice$Backend_User_Decoder$stringToUserType),
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'status',
					_gizra$backoffice$Backend_User_Decoder$decodeType(_gizra$backoffice$Backend_User_Decoder$stringToStatus),
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'uuid',
						_Gizra$elm_restful$Restful_Endpoint$decodeEntityUuid,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'site',
							_Gizra$elm_restful$Restful_Endpoint$decodeEntityUuid,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'id',
								_Gizra$elm_restful$Restful_Endpoint$decodeEntityId,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'language',
									_gizra$backoffice$Backend_User_Decoder$decodeLanguage,
									A4(
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
										'address',
										_elm_lang$core$Json_Decode$maybe(_gizra$backoffice$Backend_User_Decoder$decodeAddress),
										_elm_lang$core$Maybe$Nothing,
										A4(
											_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
											'phone',
											_elm_lang$core$Json_Decode$string,
											'',
											A3(
												_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
												'mail',
												_elm_lang$core$Json_Decode$string,
												A3(
													_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
													'last_name',
													_elm_lang$core$Json_Decode$string,
													A4(
														_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
														'first_name',
														_elm_lang$core$Json_Decode$string,
														'',
														A3(
															_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
															'label',
															_elm_lang$core$Json_Decode$string,
															_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_gizra$backoffice$Backend_User_Model$User))))))))))))))));

var _gizra$backoffice$App_Decoder$decodeAnonymousUserAndData = function (maybeSaleUuid) {
	return A2(
		_elm_lang$core$Json_Decode$field,
		'data',
		_gizra$backoffice$Backend_Decoder$decodeAnonymousModelBackend(maybeSaleUuid));
};
var _gizra$backoffice$App_Decoder$decodeAuthenticatedUserAndData = function (maybeSaleUuid) {
	return A4(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
		'data',
		_gizra$backoffice$Backend_Decoder$decodeModelBackend(maybeSaleUuid),
		_gizra$backoffice$Backend_Model$emptyModelBackend,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'user',
			_gizra$backoffice$Backend_User_Decoder$decodeUser,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'accessToken',
				_elm_lang$core$Json_Decode$string,
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(
					F3(
						function (v0, v1, v2) {
							return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
						})))));
};

var _gizra$backoffice$Backend_BidderInfo_Encoder$encodeAgent = function (maybeUserId) {
	return A3(
		_elm_community$maybe_extra$Maybe_Extra$unwrap,
		_elm_lang$core$Json_Encode$null,
		function (userId) {
			return _elm_lang$core$Json_Encode$int(
				_Gizra$elm_restful$Restful_Endpoint$fromEntityId(userId));
		},
		maybeUserId);
};
var _gizra$backoffice$Backend_BidderInfo_Encoder$encodeBidderNumber = function (bidderNumber) {
	var _p0 = bidderNumber;
	switch (_p0.ctor) {
		case 'External':
			return {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'bidder_number',
					_1: _elm_lang$core$Json_Encode$int(_p0._0)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'bidder_type',
						_1: _elm_lang$core$Json_Encode$string('external')
					},
					_1: {ctor: '[]'}
				}
			};
		case 'Floor':
			var _p1 = _p0._0;
			return (_elm_lang$core$Native_Utils.cmp(_p1, 0) > 0) ? {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'bidder_number',
					_1: _elm_lang$core$Json_Encode$int(_p1)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'bidder_type',
						_1: _elm_lang$core$Json_Encode$string('floor')
					},
					_1: {ctor: '[]'}
				}
			} : {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'bidder_type',
					_1: _elm_lang$core$Json_Encode$string('floor')
				},
				_1: {ctor: '[]'}
			};
		case 'FloorByAgent':
			return {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'bidder_number',
					_1: _elm_lang$core$Json_Encode$int(_p0._0)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'bidder_type',
						_1: _elm_lang$core$Json_Encode$string('floor_by_agent')
					},
					_1: {ctor: '[]'}
				}
			};
		case 'Mail':
			var _p2 = _p0._0;
			return (_elm_lang$core$Native_Utils.cmp(_p2, 0) > 0) ? {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'bidder_number',
					_1: _elm_lang$core$Json_Encode$int(_p2)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'bidder_type',
						_1: _elm_lang$core$Json_Encode$string('mail')
					},
					_1: {ctor: '[]'}
				}
			} : {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'bidder_type',
					_1: _elm_lang$core$Json_Encode$string('mail')
				},
				_1: {ctor: '[]'}
			};
		case 'Phone':
			return {ctor: '[]'};
		default:
			return {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'bidder_type',
					_1: _elm_lang$core$Json_Encode$string('website')
				},
				_1: {ctor: '[]'}
			};
	}
};
var _gizra$backoffice$Backend_BidderInfo_Encoder$encodeBidderInfo = function (entity) {
	var maxBid = {
		ctor: '_Tuple2',
		_0: 'max_bid',
		_1: _gizra$backoffice$Amount$encodeAmountRestriction(
			A2(
				_elm_lang$core$Maybe$withDefault,
				_gizra$backoffice$Amount$Unlimited,
				A2(_eeue56$elm_all_dict$EveryDict$get, _gizra$backoffice$Backend_BidderInfo_Model$MaxBid, entity.amountRestrictions)))
	};
	var _p3 = entity.bidderNumber;
	switch (_p3.ctor) {
		case 'Website':
			return _elm_lang$core$Json_Encode$object(
				{
					ctor: '::',
					_0: maxBid,
					_1: {ctor: '[]'}
				});
		case 'Mail':
			return _elm_lang$core$Json_Encode$object(
				{
					ctor: '::',
					_0: maxBid,
					_1: {ctor: '[]'}
				});
		default:
			return _elm_lang$core$Json_Encode$object(
				{ctor: '[]'});
	}
};
var _gizra$backoffice$Backend_BidderInfo_Encoder$encodeAmountRestrictionType = function (dict) {
	var apply = function (type_) {
		return _gizra$backoffice$Amount$encodeAmountRestriction(
			A2(
				_elm_lang$core$Maybe$withDefault,
				_gizra$backoffice$Amount$Unlimited,
				A2(_eeue56$elm_all_dict$EveryDict$get, type_, dict)));
	};
	return {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'live_credit',
			_1: apply(_gizra$backoffice$Backend_BidderInfo_Model$LiveCredit)
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'mail_credit',
				_1: apply(_gizra$backoffice$Backend_BidderInfo_Model$MailCredit)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'max_bid',
					_1: apply(_gizra$backoffice$Backend_BidderInfo_Model$MaxBid)
				},
				_1: {ctor: '[]'}
			}
		}
	};
};
var _gizra$backoffice$Backend_BidderInfo_Encoder$encodeBidderNumberForPort = function (bidderNumber) {
	var apply = F2(
		function (number, type_) {
			return {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'bidder_number',
					_1: _elm_lang$core$Json_Encode$int(number)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'bidder_type',
						_1: _elm_lang$core$Json_Encode$string(type_)
					},
					_1: {ctor: '[]'}
				}
			};
		});
	var _p4 = bidderNumber;
	switch (_p4.ctor) {
		case 'External':
			return A2(apply, _p4._0, 'external');
		case 'Floor':
			return A2(apply, _p4._0, 'floor');
		case 'FloorByAgent':
			return A2(apply, _p4._0, 'floor_by_agent');
		case 'Mail':
			return A2(apply, _p4._0, 'mail');
		case 'Phone':
			return A2(apply, _p4._0, 'phone');
		default:
			return A2(apply, _p4._0, 'website');
	}
};
var _gizra$backoffice$Backend_BidderInfo_Encoder$encodeBidderInfoForPort = function (bidderInfo) {
	return A2(
		_elm_lang$core$List$append,
		_gizra$backoffice$Backend_BidderInfo_Encoder$encodeAmountRestrictionType(bidderInfo.amountRestrictions),
		A2(
			_elm_lang$core$List$append,
			_gizra$backoffice$Backend_BidderInfo_Encoder$encodeBidderNumberForPort(bidderInfo.bidderNumber),
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'agent',
					_1: A2(_elm_community$json_extra$Json_Encode_Extra$maybe, _Gizra$elm_restful$Restful_Endpoint$encodeEntityId, bidderInfo.agent)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'total_spent',
						_1: _gizra$backoffice$Amount$encodeAmount(bidderInfo.totalSpent)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'user_uuid',
							_1: _Gizra$elm_restful$Restful_Endpoint$encodeEntityUuid(bidderInfo.userUuid)
						},
						_1: {ctor: '[]'}
					}
				}
			}));
};
var _gizra$backoffice$Backend_BidderInfo_Encoder$encodeBidderInfoParams = function (params) {
	return {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'sale_uuid',
			_1: _Gizra$elm_restful$Restful_Endpoint$fromEntityUuid(params.saleUuid)
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'user_uuid',
				_1: _Gizra$elm_restful$Restful_Endpoint$fromEntityUuid(params.userUuid)
			},
			_1: {ctor: '[]'}
		}
	};
};
var _gizra$backoffice$Backend_BidderInfo_Encoder$encodeBidderInfoByBidderNumberDict = function (dict) {
	return _elm_lang$core$Json_Encode$list(
		A3(
			_elm_lang$core$Dict$foldl,
			F3(
				function (bidderNumber, bidderInfoId, accum) {
					return {
						ctor: '::',
						_0: _elm_lang$core$Json_Encode$object(
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'bidder_number',
									_1: _elm_lang$core$Json_Encode$int(bidderNumber)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'bidder_info',
										_1: _Gizra$elm_restful$Restful_Endpoint$encodeEntityId(bidderInfoId)
									},
									_1: {ctor: '[]'}
								}
							}),
						_1: accum
					};
				}),
			{ctor: '[]'},
			dict));
};
var _gizra$backoffice$Backend_BidderInfo_Encoder$encodeBidderInfoDict = F2(
	function (saleUuid, dict) {
		return _elm_lang$core$Json_Encode$list(
			A3(
				_Gizra$elm_dictlist$EveryDictList$foldl,
				F3(
					function (entityId, editable, accum) {
						var entity = _stoeffel$editable$Editable$value(
							_Gizra$elm_editable_webdata$Editable_WebData$toEditable(editable));
						return {
							ctor: '::',
							_0: _elm_lang$core$Json_Encode$object(
								A2(
									_elm_lang$core$List$append,
									{
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'id',
											_1: _Gizra$elm_restful$Restful_Endpoint$encodeEntityId(entityId)
										},
										_1: {ctor: '[]'}
									},
									_gizra$backoffice$Backend_BidderInfo_Encoder$encodeBidderInfoForPort(entity))),
							_1: accum
						};
					}),
				{ctor: '[]'},
				A2(_gizra$backoffice$PaginatedData$getAll, saleUuid, dict)));
	});

var _gizra$backoffice$Backend_CreditRequest_Encoder$encodeStatus = function (v) {
	return _elm_lang$core$Json_Encode$string(
		function () {
			var _p0 = v;
			switch (_p0.ctor) {
				case 'Pending':
					return 'pending';
				case 'Approved':
					return 'approved';
				default:
					return 'rejected';
			}
		}());
};
var _gizra$backoffice$Backend_CreditRequest_Encoder$encodeCreditRequestParams = function (params) {
	return {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'user_uuid',
			_1: _Gizra$elm_restful$Restful_Endpoint$fromEntityUuid(params.userUuid)
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'sale_uuid',
				_1: _Gizra$elm_restful$Restful_Endpoint$fromEntityUuid(params.saleUuid)
			},
			_1: {ctor: '[]'}
		}
	};
};
var _gizra$backoffice$Backend_CreditRequest_Encoder$encodeCreateInfo = function (info) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'sale_uuid',
				_1: _Gizra$elm_restful$Restful_Endpoint$encodeEntityUuid(info.saleUuid)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'user_uuid',
					_1: _Gizra$elm_restful$Restful_Endpoint$encodeEntityUuid(info.userUuid)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'amount',
						_1: _gizra$backoffice$Amount$encodeAmount(info.amount)
					},
					_1: {ctor: '[]'}
				}
			}
		});
};
var _gizra$backoffice$Backend_CreditRequest_Encoder$encodeCreditRequest = function (creditRequest) {
	var _p1 = creditRequest.credit;
	if (_p1.ctor === 'Regular') {
		return _elm_lang$core$Json_Encode$object(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'amount',
					_1: _gizra$backoffice$Amount$encodeAmount(_p1._0)
				},
				_1: {ctor: '[]'}
			});
	} else {
		return _elm_lang$core$Json_Encode$object(
			{ctor: '[]'});
	}
};
var _gizra$backoffice$Backend_CreditRequest_Encoder$encodeCreditRequestAsList = function (v) {
	return {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'amount',
			_1: _gizra$backoffice$Amount$encodeAmountRestriction(v.credit)
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'status',
				_1: _gizra$backoffice$Backend_CreditRequest_Encoder$encodeStatus(v.status)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'user_uuid',
					_1: _Gizra$elm_restful$Restful_Endpoint$encodeEntityUuid(v.userUuid)
				},
				_1: {ctor: '[]'}
			}
		}
	};
};
var _gizra$backoffice$Backend_CreditRequest_Encoder$encodeCreditRequestsWebData = function (v) {
	var _p2 = v;
	if (_p2.ctor === 'Success') {
		return _elm_lang$core$Json_Encode$list(
			A3(
				_eeue56$elm_all_dict$EveryDict$foldl,
				F3(
					function (storageKey, editable, accum) {
						var _p3 = storageKey;
						if (_p3.ctor === 'New') {
							return accum;
						} else {
							var entity = _stoeffel$editable$Editable$value(
								_Gizra$elm_editable_webdata$Editable_WebData$toEditable(editable));
							return {
								ctor: '::',
								_0: _elm_lang$core$Json_Encode$object(
									A2(
										_elm_lang$core$List$append,
										{
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'id',
												_1: _Gizra$elm_restful$Restful_Endpoint$encodeEntityId(_p3._0)
											},
											_1: {ctor: '[]'}
										},
										_gizra$backoffice$Backend_CreditRequest_Encoder$encodeCreditRequestAsList(entity))),
								_1: accum
							};
						}
					}),
				{ctor: '[]'},
				_p2._0));
	} else {
		return _elm_lang$core$Json_Encode$list(
			{ctor: '[]'});
	}
};

var _gizra$backoffice$Backend_Bid_Encoder$encodeGroupName = function (name) {
	return _elm_lang$core$Json_Encode$string(
		_elm_lang$core$String$fromChar(name));
};
var _gizra$backoffice$Backend_Bid_Encoder$encodeAlternativeBids = function (lots) {
	return _elm_lang$core$Json_Encode$object(
		A2(
			_elm_lang$core$List$map,
			function (lot) {
				return {
					ctor: '_Tuple2',
					_0: 'lot',
					_1: _elm_lang$core$Json_Encode$string(lot)
				};
			},
			lots));
};
var _gizra$backoffice$Backend_Bid_Encoder$encodeBidType = function (bidType) {
	var apply = function (type_) {
		return {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'type',
				_1: _elm_lang$core$Json_Encode$string(type_)
			},
			_1: {ctor: '[]'}
		};
	};
	var _p0 = bidType;
	switch (_p0.ctor) {
		case 'Agent':
			return apply('agent');
		case 'AutoAgent':
			return apply('auto_agent');
		case 'Book':
			return A2(
				_elm_lang$core$List$append,
				{
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'mail_bid',
						_1: _elm_lang$core$Json_Encode$int(
							_Gizra$elm_restful$Restful_Endpoint$fromEntityId(_p0._0))
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'triggering_bid',
							_1: _elm_lang$core$Json_Encode$int(
								_Gizra$elm_restful$Restful_Endpoint$fromEntityId(_p0._1))
						},
						_1: {ctor: '[]'}
					}
				},
				apply('book'));
		case 'Floor':
			return apply('floor');
		case 'Internet':
			return apply('internet');
		case 'Mail':
			return apply('mail');
		default:
			return apply('post_sale');
	}
};
var _gizra$backoffice$Backend_Bid_Encoder$encodeDeletedStatus = function (bidDeleted) {
	var _p1 = bidDeleted;
	switch (_p1.ctor) {
		case 'NotDeleted':
			return {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'deleted',
					_1: _elm_lang$core$Json_Encode$bool(false)
				},
				_1: {ctor: '[]'}
			};
		case 'DeleteInProcess':
			return {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'deleted',
					_1: _elm_lang$core$Json_Encode$bool(false)
				},
				_1: {ctor: '[]'}
			};
		default:
			if (_p1._0.ctor === 'Nothing') {
				return {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'deleted',
						_1: _elm_lang$core$Json_Encode$bool(true)
					},
					_1: {ctor: '[]'}
				};
			} else {
				return {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'deleted_author',
						_1: _elm_lang$core$Json_Encode$int(
							_Gizra$elm_restful$Restful_Endpoint$fromEntityId(_p1._0._0))
					},
					_1: {ctor: '[]'}
				};
			}
	}
};
var _gizra$backoffice$Backend_Bid_Encoder$encodeBidStatus = function (bidStatus) {
	var apply = F2(
		function (maybeBidderNumber, str) {
			return {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'status',
					_1: _elm_lang$core$Json_Encode$string(str)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'bidder_id',
						_1: A2(_elm_community$json_extra$Json_Encode_Extra$maybe, _elm_lang$core$Json_Encode$int, maybeBidderNumber)
					},
					_1: {ctor: '[]'}
				}
			};
		});
	var _p2 = bidStatus;
	switch (_p2.ctor) {
		case 'Accepted':
			return A2(apply, _p2._0, 'accepted');
		case 'AcceptedDuplicatedAmount':
			return A2(apply, _p2._0, 'accepted_duplicated_amount');
		case 'Rejected':
			return A2(apply, _p2._0, 'rejected');
		case 'RejectedBellowMinimum':
			return A2(apply, _p2._0, 'rejected_bellow_minimum');
		case 'RejectedBidderMax':
			return A2(apply, _p2._0, 'rejected_over_bidder_max');
		case 'RejectedCreditLimit':
			return A2(apply, _p2._0, 'rejected_over_credit_limit');
		case 'RejectedMailAfterSetLastFloor':
			return A2(apply, _p2._0, 'rejected_mail_after_last_floor');
		default:
			return A2(apply, _p2._0, 'outbid');
	}
};
var _gizra$backoffice$Backend_Bid_Encoder$encodeCreateInfo = function (info) {
	return _elm_lang$core$Json_Encode$object(
		A2(
			_elm_lang$core$List$append,
			_gizra$backoffice$Backend_Bid_Encoder$encodeBidType(info.type_),
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'sale_uuid',
					_1: _Gizra$elm_restful$Restful_Endpoint$encodeEntityUuid(info.saleUuid)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'item_uuid',
						_1: _Gizra$elm_restful$Restful_Endpoint$encodeEntityUuid(info.itemUuid)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'amount',
							_1: _gizra$backoffice$Amount$encodeAmount(info.amount)
						},
						_1: {ctor: '[]'}
					}
				}
			}));
};
var _gizra$backoffice$Backend_Bid_Encoder$encodeBidAsList = function (bid) {
	return A2(
		_elm_lang$core$List$append,
		_gizra$backoffice$Backend_Bid_Encoder$encodeBidType(bid.bidType),
		A2(
			_elm_lang$core$List$append,
			_gizra$backoffice$Backend_Bid_Encoder$encodeDeletedStatus(bid.deletedStatus),
			A2(
				_elm_lang$core$List$append,
				_gizra$backoffice$Backend_Bid_Encoder$encodeBidStatus(bid.status),
				{
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'amount',
						_1: _gizra$backoffice$Amount$encodeAmount(bid.amount)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'created',
							_1: _gizra$backoffice$Utils_Json$encodeDate(bid.created)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'under_extension',
								_1: _elm_lang$core$Json_Encode$bool(bid.underExtension)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'alternative_bids',
									_1: A2(_elm_community$json_extra$Json_Encode_Extra$maybe, _gizra$backoffice$Backend_Bid_Encoder$encodeAlternativeBids, bid.alternativeBids)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'bids_group_name',
										_1: A2(_elm_community$json_extra$Json_Encode_Extra$maybe, _gizra$backoffice$Backend_Bid_Encoder$encodeGroupName, bid.groupName)
									},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				})));
};
var _gizra$backoffice$Backend_Bid_Encoder$encodeBidDict = function (dict) {
	return _elm_lang$core$Json_Encode$list(
		A2(
			_elm_lang$core$List$map,
			function (_p3) {
				var _p4 = _p3;
				return _elm_lang$core$Json_Encode$object(
					A2(
						_elm_lang$core$List$append,
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'id',
								_1: _elm_lang$core$Json_Encode$int(
									_Gizra$elm_restful$Restful_Endpoint$fromEntityId(_p4._0))
							},
							_1: {ctor: '[]'}
						},
						_gizra$backoffice$Backend_Bid_Encoder$encodeBidAsList(_p4._1)));
			},
			_Gizra$elm_dictlist$EveryDictList$toList(dict)));
};
var _gizra$backoffice$Backend_Bid_Encoder$encodeBid = function (bid) {
	return _elm_lang$core$Json_Encode$object(
		_gizra$backoffice$Backend_Bid_Encoder$encodeBidAsList(bid));
};

var _gizra$backoffice$Backend_Item_Encoder$encodeFavorite = function (webData) {
	return A3(
		_elm_community$maybe_extra$Maybe_Extra$unwrap,
		_elm_lang$core$Json_Encode$bool(false),
		function (isFavorite) {
			return _elm_lang$core$Json_Encode$bool(isFavorite);
		},
		_krisajenkins$remotedata$RemoteData$toMaybe(webData));
};
var _gizra$backoffice$Backend_Item_Encoder$encodeBidStepType = function (type_) {
	return _elm_lang$core$Json_Encode$string(
		function () {
			var _p0 = type_;
			switch (_p0.ctor) {
				case 'Regular':
					return 'regular';
				case 'Manual':
					return 'manual';
				default:
					return 'automatic_round';
			}
		}());
};
var _gizra$backoffice$Backend_Item_Encoder$encodeBidStep = function (bidStep) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'from',
				_1: _gizra$backoffice$Amount$encodeAmount(bidStep.from)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'amount',
					_1: _gizra$backoffice$Amount$encodeAmount(bidStep.amount)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'type',
						_1: _gizra$backoffice$Backend_Item_Encoder$encodeBidStepType(bidStep.type_)
					},
					_1: {ctor: '[]'}
				}
			}
		});
};
var _gizra$backoffice$Backend_Item_Encoder$encodeBidSteps = function (bidSteps) {
	return _elm_lang$core$Json_Encode$list(
		A2(
			_elm_lang$core$List$map,
			_gizra$backoffice$Backend_Item_Encoder$encodeBidStep,
			_mgold$elm_nonempty_list$List_Nonempty$toList(bidSteps)));
};
var _gizra$backoffice$Backend_Item_Encoder$encodeClerkStatus = function (clerkStatus) {
	return _elm_lang$core$Json_Encode$string(
		function () {
			var _p1 = clerkStatus;
			switch (_p1.ctor) {
				case 'Paused':
					return 'paused';
				case 'Open':
					return 'open';
				case 'Going':
					return 'going';
				case 'GoneTransition':
					return 'unsold';
				case 'ClerkStatusSold':
					return 'sold';
				default:
					return 'unsold';
			}
		}());
};
var _gizra$backoffice$Backend_Item_Encoder$encodeStatus = function (status) {
	var doEncodeStatus = function (val) {
		return {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'availability_status',
				_1: _elm_lang$core$Json_Encode$string(val)
			},
			_1: {ctor: '[]'}
		};
	};
	var _p2 = status;
	if (_p2.ctor === 'EditableStatus') {
		if (_p2._0.ctor === 'LiveOnly') {
			return doEncodeStatus('item_paused');
		} else {
			return doEncodeStatus('mail_only');
		}
	} else {
		switch (_p2._0.ctor) {
			case 'SaleNotStarted':
				return doEncodeStatus('sale_not_started');
			case 'SaleClosed':
				return doEncodeStatus('sale_closed');
			case 'Withdrawn':
				return doEncodeStatus('item_withdrawn');
			case 'ItemClosed':
				if (_p2._0._0.ctor === 'Sold') {
					return doEncodeStatus('item_closed');
				} else {
					if (_p2._0._0._0.ctor === 'PostSaleAllow') {
						return A2(
							_elm_lang$core$List$append,
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'no_post_sale',
									_1: _elm_lang$core$Json_Encode$bool(false)
								},
								_1: {ctor: '[]'}
							},
							doEncodeStatus('item_closed'));
					} else {
						return A2(
							_elm_lang$core$List$append,
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'no_post_sale',
									_1: _elm_lang$core$Json_Encode$bool(true)
								},
								_1: {ctor: '[]'}
							},
							doEncodeStatus('item_closed'));
					}
				}
			default:
				return doEncodeStatus('none');
		}
	}
};
var _gizra$backoffice$Backend_Item_Encoder$encodeSetFavorite = function (isFavorite) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'favorite',
				_1: _elm_lang$core$Json_Encode$bool(isFavorite)
			},
			_1: {ctor: '[]'}
		});
};
var _gizra$backoffice$Backend_Item_Encoder$encodeItem = function (item) {
	return _elm_lang$core$Json_Encode$object(
		A2(
			_elm_lang$core$List$append,
			_gizra$backoffice$Backend_Item_Encoder$encodeStatus(item.status),
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'id',
					_1: _Gizra$elm_restful$Restful_Endpoint$encodeEntityId(item.id)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'uuid',
						_1: _Gizra$elm_restful$Restful_Endpoint$encodeEntityUuid(item.uuid)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'label',
							_1: _elm_lang$core$Json_Encode$string(item.name)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'lot',
								_1: _elm_lang$core$Json_Encode$string(item.lotId)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'starting_price',
									_1: _gizra$backoffice$Amount$encodeAmount(item.startingPrice)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'opening_price',
										_1: _gizra$backoffice$Amount$encodeAmount(item.openingPrice)
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'current_price',
											_1: A2(_elm_community$json_extra$Json_Encode_Extra$maybe, _gizra$backoffice$Amount$encodeAmount, item.currentPrice)
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'next_price',
												_1: A2(_elm_community$json_extra$Json_Encode_Extra$maybe, _gizra$backoffice$Amount$encodeAmount, item.nextPrice)
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: 'status',
													_1: _gizra$backoffice$Backend_Item_Encoder$encodeClerkStatus(item.clerkStatus)
												},
												_1: {
													ctor: '::',
													_0: {
														ctor: '_Tuple2',
														_0: 'steps',
														_1: _gizra$backoffice$Backend_Item_Encoder$encodeBidSteps(item.bidSteps)
													},
													_1: {
														ctor: '::',
														_0: {
															ctor: '_Tuple2',
															_0: 'bid',
															_1: _gizra$backoffice$Backend_Bid_Encoder$encodeBidDict(item.bids)
														},
														_1: {
															ctor: '::',
															_0: {
																ctor: '_Tuple2',
																_0: 'book_bid',
																_1: _gizra$backoffice$Backend_Bid_Encoder$encodeBidDict(item.bookBids)
															},
															_1: {
																ctor: '::',
																_0: {
																	ctor: '_Tuple2',
																	_0: 'agent_bid',
																	_1: _gizra$backoffice$Backend_Bid_Encoder$encodeBidDict(item.agentBids)
																},
																_1: {
																	ctor: '::',
																	_0: {
																		ctor: '_Tuple2',
																		_0: 'minimum_price',
																		_1: A2(_elm_community$json_extra$Json_Encode_Extra$maybe, _gizra$backoffice$Amount$encodeAmount, item.minimumPrice)
																	},
																	_1: {
																		ctor: '::',
																		_0: {
																			ctor: '_Tuple2',
																			_0: 'winning_bid',
																			_1: A2(_elm_community$json_extra$Json_Encode_Extra$maybe, _Gizra$elm_restful$Restful_Endpoint$encodeEntityId, item.winningBid)
																		},
																		_1: {
																			ctor: '::',
																			_0: {
																				ctor: '_Tuple2',
																				_0: 'note',
																				_1: _elm_lang$core$Json_Encode$string(item.auctioneerNote)
																			},
																			_1: {
																				ctor: '::',
																				_0: {
																					ctor: '_Tuple2',
																					_0: 'is_favorite',
																					_1: _gizra$backoffice$Backend_Item_Encoder$encodeFavorite(item.favorite)
																				},
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}));
};
var _gizra$backoffice$Backend_Item_Encoder$encodeItemsParams = function (params) {
	var onlyWithMyBids = params.filters.onlyWithMyBids ? {
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'placed_bids', _1: '1'},
		_1: {ctor: '[]'}
	} : {ctor: '[]'};
	var filterByItemUuids = function () {
		if (_elm_lang$core$List$isEmpty(params.filters.itemUuids)) {
			return {ctor: '[]'};
		} else {
			var uuids = A2(
				_elm_lang$core$List$indexedMap,
				F2(
					function (index, uuid) {
						return {
							ctor: '_Tuple2',
							_0: A2(
								_elm_lang$core$Basics_ops['++'],
								'filter[uuid][value][',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(index),
									']')),
							_1: _Gizra$elm_restful$Restful_Endpoint$fromEntityUuid(uuid)
						};
					}),
				params.filters.itemUuids);
			return A2(
				_elm_lang$core$List$append,
				uuids,
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'filter[uuid][operator]', _1: 'IN'},
					_1: {ctor: '[]'}
				});
		}
	}();
	var $default = {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'sale_uuid',
			_1: _Gizra$elm_restful$Restful_Endpoint$fromEntityUuid(params.saleUuid)
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'page',
				_1: _elm_lang$core$Basics$toString(params.page)
			},
			_1: {ctor: '[]'}
		}
	};
	return A2(
		_elm_lang$core$List$append,
		onlyWithMyBids,
		A2(_elm_lang$core$List$append, filterByItemUuids, $default));
};
var _gizra$backoffice$Backend_Item_Encoder$encodeItemsDict = F2(
	function (saleUuid, dict) {
		var totalCount = A2(_gizra$backoffice$PaginatedData$getTotalCount, saleUuid, dict);
		var data = _elm_lang$core$Json_Encode$list(
			A3(
				_Gizra$elm_dictlist$EveryDictList$foldl,
				F3(
					function (_p3, item, accum) {
						return {
							ctor: '::',
							_0: _gizra$backoffice$Backend_Item_Encoder$encodeItem(item),
							_1: accum
						};
					}),
				{ctor: '[]'},
				A2(_gizra$backoffice$PaginatedData$getAll, saleUuid, dict)));
		return _elm_lang$core$Json_Encode$object(
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'data', _1: data},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'totalCount',
						_1: A2(_elm_community$json_extra$Json_Encode_Extra$maybe, _elm_lang$core$Json_Encode$int, totalCount)
					},
					_1: {ctor: '[]'}
				}
			});
	});

var _gizra$backoffice$Backend_Session_Encoder$encodeSession = function (session) {
	return {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'label',
			_1: _elm_lang$core$Json_Encode$string(session.name)
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'first_item',
				_1: _Gizra$elm_restful$Restful_Endpoint$encodeEntityId(session.firstItem)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'last_item',
					_1: _Gizra$elm_restful$Restful_Endpoint$encodeEntityId(session.lastItem)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'delta',
						_1: _elm_lang$core$Json_Encode$int(session.delta)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'item_count',
							_1: _elm_lang$core$Json_Encode$int(session.itemCount)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'batch_count',
								_1: _elm_lang$core$Json_Encode$int(session.batchCount)
							},
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	};
};
var _gizra$backoffice$Backend_Session_Encoder$encodeSessionsDict = function (dict) {
	return _elm_lang$core$Json_Encode$list(
		A3(
			_Gizra$elm_dictlist$EveryDictList$foldl,
			F3(
				function (sessionId, session, accum) {
					return {
						ctor: '::',
						_0: _elm_lang$core$Json_Encode$object(
							A2(
								_elm_lang$core$List$append,
								_gizra$backoffice$Backend_Session_Encoder$encodeSession(session),
								{
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'id',
										_1: _Gizra$elm_restful$Restful_Endpoint$encodeEntityId(sessionId)
									},
									_1: {ctor: '[]'}
								})),
						_1: accum
					};
				}),
			{ctor: '[]'},
			dict));
};

var _gizra$backoffice$Currency_Encoder$encodeCurrency = function (currency) {
	return _elm_lang$core$Json_Encode$string(
		function () {
			var _p0 = currency;
			switch (_p0.ctor) {
				case 'CHF':
					return 'CHF';
				case 'EUR':
					return 'EUR';
				case 'GBP':
					return 'GBP';
				case 'HKD':
					return 'HKD';
				case 'HRN':
					return 'HRN';
				case 'ILS':
					return 'ILS';
				default:
					return 'USD';
			}
		}());
};

var _gizra$backoffice$Backend_Sale_Encoder$encodeMailAuctionType = function (type_) {
	return _elm_lang$core$Json_Encode$string(
		function () {
			var _p0 = type_;
			if (_p0.ctor === 'Regular') {
				return 'regular';
			} else {
				return 'obscured';
			}
		}());
};
var _gizra$backoffice$Backend_Sale_Encoder$statusToEncodingString = function (status) {
	var _p1 = status;
	switch (_p1.ctor) {
		case 'ClosedNotStarted':
			return 'closed_not_started';
		case 'MailAuctionOpen':
			return 'open_mail';
		case 'PausedStartingSoon':
			return 'paused_starting_soon';
		case 'LiveAuctionOpen':
			return 'open_live';
		case 'PausedBackShortly':
			return 'paused_back_shortly';
		default:
			return 'closed_ended';
	}
};
var _gizra$backoffice$Backend_Sale_Encoder$encodeStatus = function (status) {
	return _elm_lang$core$Json_Encode$string(
		_gizra$backoffice$Backend_Sale_Encoder$statusToEncodingString(status));
};
var _gizra$backoffice$Backend_Sale_Encoder$encodeSaleParams = function (saleParams) {
	return {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'filter[uuid]',
			_1: _Gizra$elm_restful$Restful_Endpoint$fromEntityUuid(saleParams.saleUuid)
		},
		_1: {ctor: '[]'}
	};
};
var _gizra$backoffice$Backend_Sale_Encoder$encodeSale = function (sale) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'id',
				_1: _Gizra$elm_restful$Restful_Endpoint$encodeEntityId(sale.id)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'label',
					_1: _elm_lang$core$Json_Encode$string(sale.label)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'status',
						_1: _gizra$backoffice$Backend_Sale_Encoder$encodeStatus(sale.status)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'item',
							_1: _Gizra$elm_restful$Restful_Endpoint$encodeEntityId(sale.item)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'currency',
								_1: _gizra$backoffice$Currency_Encoder$encodeCurrency(sale.currency)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'base_url',
									_1: _elm_lang$core$Json_Encode$string(sale.staticBaseUrl)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'url_revision',
										_1: _elm_lang$core$Json_Encode$int(sale.staticRevision)
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'mail_auction_type',
											_1: _gizra$backoffice$Backend_Sale_Encoder$encodeMailAuctionType(sale.mailAuctionType)
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'sessions',
												_1: _gizra$backoffice$Backend_Session_Encoder$encodeSessionsDict(sale.sessions)
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: 'base_url',
													_1: _elm_lang$core$Json_Encode$string(sale.baseUrl)
												},
												_1: {
													ctor: '::',
													_0: {
														ctor: '_Tuple2',
														_0: 'url_revision',
														_1: _elm_lang$core$Json_Encode$int(sale.revision)
													},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		});
};
var _gizra$backoffice$Backend_Sale_Encoder$encodeSalesDict = function (dict) {
	return _elm_lang$core$Json_Encode$list(
		A3(
			_eeue56$elm_all_dict$EveryDict$foldl,
			F3(
				function (_p2, webData, accum) {
					return A3(
						_elm_community$maybe_extra$Maybe_Extra$unwrap,
						accum,
						function (sale) {
							return {
								ctor: '::',
								_0: _gizra$backoffice$Backend_Sale_Encoder$encodeSale(sale),
								_1: accum
							};
						},
						_krisajenkins$remotedata$RemoteData$toMaybe(webData));
				}),
			{ctor: '[]'},
			dict));
};

var _gizra$backoffice$Backend_Site_Encoder$encodeSiteParams = function (params) {
	return {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'name',
			_1: _Gizra$elm_restful$Restful_Endpoint$fromEntityUuid(params.name)
		},
		_1: {ctor: '[]'}
	};
};

var _gizra$backoffice$Backend_StaticItem_Encoder$encodeStaticItem = function (staticItem) {
	return {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'title',
			_1: _elm_lang$core$Json_Encode$string(staticItem.name)
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'image',
				_1: _elm_lang$core$Json_Encode$string(staticItem.image)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'imageSmall',
					_1: _elm_lang$core$Json_Encode$string(staticItem.imageSmall)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'body',
						_1: A2(_elm_community$json_extra$Json_Encode_Extra$maybe, _elm_lang$core$Json_Encode$string, staticItem.description)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'estimatedPrice',
							_1: A2(_elm_community$json_extra$Json_Encode_Extra$maybe, _gizra$backoffice$Amount$encodeAmount, staticItem.estimatedPrice)
						},
						_1: {ctor: '[]'}
					}
				}
			}
		}
	};
};
var _gizra$backoffice$Backend_StaticItem_Encoder$encodeStaticItemsDict = function (dict) {
	return _elm_lang$core$Json_Encode$list(
		A3(
			_eeue56$elm_all_dict$EveryDict$foldl,
			F3(
				function (itemUuid, staticItem, accum) {
					return {
						ctor: '::',
						_0: _elm_lang$core$Json_Encode$object(
							A2(
								_elm_lang$core$List$append,
								_gizra$backoffice$Backend_StaticItem_Encoder$encodeStaticItem(staticItem),
								{
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'uuid',
										_1: _Gizra$elm_restful$Restful_Endpoint$encodeEntityUuid(itemUuid)
									},
									_1: {ctor: '[]'}
								})),
						_1: accum
					};
				}),
			{ctor: '[]'},
			dict));
};

var _gizra$backoffice$Backend_Encoder$encodeAnonymousModelBackend = F2(
	function (saleUuid, modelBackend) {
		return _elm_lang$core$Json_Encode$object(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'sales',
					_1: _gizra$backoffice$Backend_Sale_Encoder$encodeSalesDict(modelBackend.sales)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'items',
						_1: A2(_gizra$backoffice$Backend_Item_Encoder$encodeItemsDict, saleUuid, modelBackend.items)
					},
					_1: {ctor: '[]'}
				}
			});
	});
var _gizra$backoffice$Backend_Encoder$encodeModelBackend = F2(
	function (saleUuid, modelBackend) {
		var disableAgent = A2(
			_krisajenkins$remotedata$RemoteData$withDefault,
			false,
			A2(
				_krisajenkins$remotedata$RemoteData$map,
				function (_p0) {
					return function (_) {
						return _.disableAgent;
					}(
						_elm_lang$core$Tuple$second(_p0));
				},
				modelBackend.site));
		return _elm_lang$core$Json_Encode$object(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'bidderInfo',
					_1: A2(_gizra$backoffice$Backend_BidderInfo_Encoder$encodeBidderInfoDict, saleUuid, modelBackend.bidderInfo)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'bidderInfoByBidderNumber',
						_1: _gizra$backoffice$Backend_BidderInfo_Encoder$encodeBidderInfoByBidderNumberDict(modelBackend.bidderInfoByBidderNumber)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'creditRequests',
							_1: _gizra$backoffice$Backend_CreditRequest_Encoder$encodeCreditRequestsWebData(modelBackend.creditRequests)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'items',
								_1: A2(_gizra$backoffice$Backend_Item_Encoder$encodeItemsDict, saleUuid, modelBackend.items)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'sales',
									_1: _gizra$backoffice$Backend_Sale_Encoder$encodeSalesDict(modelBackend.sales)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'staticItems',
										_1: _gizra$backoffice$Backend_StaticItem_Encoder$encodeStaticItemsDict(modelBackend.staticItems.data)
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'disableAgent',
											_1: _elm_lang$core$Json_Encode$bool(disableAgent)
										},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			});
	});

var _gizra$backoffice$Country$regions = function (country) {
	var _p0 = country;
	switch (_p0) {
		case 'AC':
			return {ctor: '[]'};
		case 'AD':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'AD-07', _1: 'Andorra la Vella'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'AD-02', _1: 'Canillo'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'AD-03', _1: 'Encamp'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'AD-08', _1: 'Escaldes-Engordany'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'AD-04', _1: 'La Massana'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'AD-05', _1: 'Ordino'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'AD-06', _1: 'Sant Julià de Lòria'},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			};
		case 'AE':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'AE-AZ', _1: 'Abū Z̧aby'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'AE-AJ', _1: '‘Ajmān'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'AE-FU', _1: 'Al Fujayrah'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'AE-SH', _1: 'Ash Shāriqah'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'AE-DU', _1: 'Dubayy'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'AE-RK', _1: 'Ra’s al Khaymah'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'AE-UQ', _1: 'Umm al Qaywayn'},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			};
		case 'AF':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'AF-BDS', _1: 'Badakhshān'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'AF-BDG', _1: 'Bādghīs'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'AF-BGL', _1: 'Baghlān'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'AF-BAL', _1: 'Balkh'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'AF-BAM', _1: 'Bāmyān'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'AF-DAY', _1: 'Dāykundī'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'AF-FRA', _1: 'Farāh'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'AF-FYB', _1: 'Fāryāb'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'AF-GHA', _1: 'Ghaznī'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'AF-GHO', _1: 'Ghōr'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'AF-HEL', _1: 'Helmand'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'AF-HER', _1: 'Herāt'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'AF-JOW', _1: 'Jowzjān'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'AF-KAB', _1: 'Kābul'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'AF-KAN', _1: 'Kandahār'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'AF-KAP', _1: 'Kāpīsā'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'AF-KHO', _1: 'Khōst'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'AF-KNR', _1: 'Kunaṟ'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'AF-KDZ', _1: 'Kunduz'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'AF-LAG', _1: 'Laghmān'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'AF-LOG', _1: 'Lōgar'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'AF-NAN', _1: 'Nangarhār'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'AF-NIM', _1: 'Nīmrōz'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'AF-NUR', _1: 'Nūristān'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'AF-PKA', _1: 'Paktīkā'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'AF-PIA', _1: 'Paktiyā'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'AF-PAN', _1: 'Panjshayr'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'AF-PAR', _1: 'Parwān'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'AF-SAM', _1: 'Samangān'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'AF-SAR', _1: 'Sar-e Pul'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'AF-TAK', _1: 'Takhār'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'AF-URU', _1: 'Uruzgān'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: 'AF-WAR', _1: 'Wardak'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: 'AF-ZAB', _1: 'Zābul'},
																																					_1: {ctor: '[]'}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'AG':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'AG-03', _1: 'Saint George'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'AG-04', _1: 'Saint John'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'AG-05', _1: 'Saint Mary'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'AG-06', _1: 'Saint Paul'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'AG-07', _1: 'Saint Peter'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'AG-08', _1: 'Saint Philip'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'AG-10', _1: 'Barbuda'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'AG-11', _1: 'Redonda'},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'AI':
			return {ctor: '[]'};
		case 'AL':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'AL-01', _1: 'Berat'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'AL-09', _1: 'Dibër'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'AL-02', _1: 'Durrës'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'AL-03', _1: 'Elbasan'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'AL-04', _1: 'Fier'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'AL-05', _1: 'Gjirokastër'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'AL-06', _1: 'Korçë'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'AL-07', _1: 'Kukës'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'AL-08', _1: 'Lezhë'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'AL-10', _1: 'Shkodër'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'AL-11', _1: 'Tiranë'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'AL-12', _1: 'Vlorë'},
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'AM':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'AM-ER', _1: 'Erevan'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'AM-AG', _1: 'Aragac̣otn'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'AM-AR', _1: 'Ararat'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'AM-AV', _1: 'Armavir'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'AM-GR', _1: 'Geġark\'unik\''},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'AM-KT', _1: 'Kotayk\''},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'AM-LO', _1: 'Loṙi'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'AM-SH', _1: 'Širak'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'AM-SU', _1: 'Syunik\''},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'AM-TV', _1: 'Tavuš'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'AM-VD', _1: 'Vayoć Jor'},
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'AO':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'AO-BGO', _1: 'Bengo'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'AO-BGU', _1: 'Benguela'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'AO-BIE', _1: 'Bié'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'AO-CAB', _1: 'Cabinda'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'AO-CNN', _1: 'Cunene'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'AO-HUA', _1: 'Huambo'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'AO-HUI', _1: 'Huíla'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'AO-CCU', _1: 'Kuando Kubango'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'AO-CNO', _1: 'Kwanza Norte'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'AO-CUS', _1: 'Kwanza Sul'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'AO-LUA', _1: 'Luanda'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'AO-LNO', _1: 'Lunda Norte'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'AO-LSU', _1: 'Lunda Sul'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'AO-MAL', _1: 'Malange'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'AO-MOX', _1: 'Moxico'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'AO-NAM', _1: 'Namibe'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'AO-UIG', _1: 'Uíge'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'AO-ZAI', _1: 'Zaire'},
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'AQ':
			return {ctor: '[]'};
		case 'AR':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'AR-C', _1: 'Ciudad Autónoma de Buenos Aires'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'AR-B', _1: 'Buenos Aires'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'AR-K', _1: 'Catamarca'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'AR-H', _1: 'Chaco'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'AR-U', _1: 'Chubut'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'AR-X', _1: 'Córdoba'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'AR-W', _1: 'Corrientes'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'AR-E', _1: 'Entre Ríos'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'AR-P', _1: 'Formosa'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'AR-Y', _1: 'Jujuy'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'AR-L', _1: 'La Pampa'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'AR-F', _1: 'La Rioja'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'AR-M', _1: 'Mendoza'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'AR-N', _1: 'Misiones'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'AR-Q', _1: 'Neuquén'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'AR-R', _1: 'Río Negro'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'AR-A', _1: 'Salta'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'AR-J', _1: 'San Juan'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'AR-D', _1: 'San Luis'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'AR-Z', _1: 'Santa Cruz'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'AR-S', _1: 'Santa Fe'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'AR-G', _1: 'Santiago del Estero'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'AR-V', _1: 'Tierra del Fuego'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'AR-T', _1: 'Tucumán'},
																											_1: {ctor: '[]'}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'AS':
			return {ctor: '[]'};
		case 'AT':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'AT-1', _1: 'Burgenland'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'AT-2', _1: 'Kärnten'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'AT-3', _1: 'Niederösterreich'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'AT-4', _1: 'Oberösterreich'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'AT-5', _1: 'Salzburg'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'AT-6', _1: 'Steiermark'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'AT-7', _1: 'Tirol'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'AT-8', _1: 'Vorarlberg'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'AT-9', _1: 'Wien'},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'AU':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'AU-NSW', _1: 'New South Wales'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'AU-QLD', _1: 'Queensland'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'AU-SA', _1: 'South Australia'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'AU-TAS', _1: 'Tasmania'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'AU-VIC', _1: 'Victoria'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'AU-WA', _1: 'Western Australia'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'AU-ACT', _1: 'Australian Capital Territory'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'AU-NT', _1: 'Northern Territory'},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'AW':
			return {ctor: '[]'};
		case 'AX':
			return {ctor: '[]'};
		case 'AZ':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'AZ-NX', _1: 'Naxçıvan'},
				_1: {ctor: '[]'}
			};
		case 'BA':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'BA-BIH', _1: 'Federacija Bosna i Hercegovina'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'BA-SRP', _1: 'Republika Srpska'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'BA-BRC', _1: 'Brčko distrikt'},
						_1: {ctor: '[]'}
					}
				}
			};
		case 'BB':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'BB-01', _1: 'Christ Church'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'BB-02', _1: 'Saint Andrew'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'BB-03', _1: 'Saint George'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'BB-04', _1: 'Saint James'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'BB-05', _1: 'Saint John'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'BB-06', _1: 'Saint Joseph'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'BB-07', _1: 'Saint Lucy'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'BB-08', _1: 'Saint Michael'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'BB-09', _1: 'Saint Peter'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'BB-10', _1: 'Saint Philip'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'BB-11', _1: 'Saint Thomas'},
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'BD':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'BD-A', _1: 'Barisal'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'BD-B', _1: 'Chittagong'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'BD-C', _1: 'Dhaka'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'BD-D', _1: 'Khulna'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'BD-H', _1: 'Mymensingh'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'BD-E', _1: 'Rajshahi'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'BD-F', _1: 'Rangpur'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'BD-G', _1: 'Sylhet'},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'BE':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'BE-BRU', _1: 'Brussels Hoofdstedelijk Gewest'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'BE-VLG', _1: 'Vlaams Gewest'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'BE-WAL', _1: 'Région Wallonne'},
						_1: {ctor: '[]'}
					}
				}
			};
		case 'BF':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'BF-01', _1: 'Boucle du Mouhoun'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'BF-02', _1: 'Cascades'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'BF-03', _1: 'Centre'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'BF-04', _1: 'Centre-Est'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'BF-05', _1: 'Centre-Nord'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'BF-06', _1: 'Centre-Ouest'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'BF-07', _1: 'Centre-Sud'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'BF-08', _1: 'Est'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'BF-09', _1: 'Hauts-Bassins'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'BF-10', _1: 'Nord'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'BF-11', _1: 'Plateau-Central'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'BF-12', _1: 'Sahel'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'BF-13', _1: 'Sud-Ouest'},
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'BG':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'BG-01', _1: 'Blagoevgrad'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'BG-02', _1: 'Burgas'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'BG-08', _1: 'Dobrich'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'BG-07', _1: 'Gabrovo'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'BG-26', _1: 'Haskovo'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'BG-09', _1: 'Kardzhali'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'BG-10', _1: 'Kyustendil'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'BG-11', _1: 'Lovech'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'BG-12', _1: 'Montana'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'BG-13', _1: 'Pazardzhik'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'BG-14', _1: 'Pernik'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'BG-15', _1: 'Pleven'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'BG-16', _1: 'Plovdiv'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'BG-17', _1: 'Razgrad'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'BG-18', _1: 'Ruse'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'BG-27', _1: 'Shumen'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'BG-19', _1: 'Silistra'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'BG-20', _1: 'Sliven'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'BG-21', _1: 'Smolyan'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'BG-23', _1: 'Sofia'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'BG-22', _1: 'Sofia (stolitsa)'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'BG-24', _1: 'Stara Zagora'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'BG-25', _1: 'Targovishte'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'BG-03', _1: 'Varna'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'BG-04', _1: 'Veliko Tarnovo'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'BG-05', _1: 'Vidin'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'BG-06', _1: 'Vratsa'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'BG-28', _1: 'Yambol'},
																															_1: {ctor: '[]'}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'BH':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'BH-13', _1: 'Al ‘Āşimah'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'BH-14', _1: 'Al Janūbīyah'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'BH-15', _1: 'Al Muḩarraq'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'BH-17', _1: 'Ash Shamālīyah'},
							_1: {ctor: '[]'}
						}
					}
				}
			};
		case 'BI':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'BI-BB', _1: 'Bubanza'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'BI-BM', _1: 'Bujumbura Mairie'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'BI-BL', _1: 'Bujumbura Rural'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'BI-BR', _1: 'Bururi'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'BI-CA', _1: 'Cankuzo'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'BI-CI', _1: 'Cibitoke'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'BI-GI', _1: 'Gitega'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'BI-KR', _1: 'Karuzi'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'BI-KY', _1: 'Kayanza'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'BI-KI', _1: 'Kirundo'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'BI-MA', _1: 'Makamba'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'BI-MU', _1: 'Muramvya'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'BI-MY', _1: 'Muyinga'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'BI-MW', _1: 'Mwaro'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'BI-NG', _1: 'Ngozi'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'BI-RM', _1: 'Rumonge'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'BI-RT', _1: 'Rutana'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'BI-RY', _1: 'Ruyigi'},
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'BJ':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'BJ-AL', _1: 'Alibori'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'BJ-AK', _1: 'Atacora'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'BJ-AQ', _1: 'Atlantique'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'BJ-BO', _1: 'Borgou'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'BJ-CO', _1: 'Collines'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'BJ-KO', _1: 'Couffo'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'BJ-DO', _1: 'Donga'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'BJ-LI', _1: 'Littoral'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'BJ-MO', _1: 'Mono'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'BJ-OU', _1: 'Ouémé'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'BJ-PL', _1: 'Plateau'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'BJ-ZO', _1: 'Zou'},
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'BL':
			return {ctor: '[]'};
		case 'BM':
			return {ctor: '[]'};
		case 'BN':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'BN-BE', _1: 'Belait'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'BN-BM', _1: 'Brunei-Muara'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'BN-TE', _1: 'Temburong'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'BN-TU', _1: 'Tutong'},
							_1: {ctor: '[]'}
						}
					}
				}
			};
		case 'BO':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'BO-C', _1: 'Cochabamba'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'BO-H', _1: 'Chuquisaca'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'BO-B', _1: 'El Beni'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'BO-L', _1: 'La Paz'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'BO-O', _1: 'Oruro'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'BO-N', _1: 'Pando'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'BO-P', _1: 'Potosí'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'BO-S', _1: 'Santa Cruz'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'BO-T', _1: 'Tarija'},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'BQ':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'BQ-BO', _1: 'Bonaire'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'BQ-SA', _1: 'Saba'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'BQ-SE', _1: 'Sint Eustatius'},
						_1: {ctor: '[]'}
					}
				}
			};
		case 'BR':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'BR-DF', _1: 'Distrito Federal'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'BR-AC', _1: 'Acre'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'BR-AL', _1: 'Alagoas'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'BR-AP', _1: 'Amapá'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'BR-AM', _1: 'Amazonas'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'BR-BA', _1: 'Bahia'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'BR-CE', _1: 'Ceará'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'BR-ES', _1: 'Espírito Santo'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'BR-GO', _1: 'Goiás'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'BR-MA', _1: 'Maranhão'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'BR-MT', _1: 'Mato Grosso'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'BR-MS', _1: 'Mato Grosso do Sul'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'BR-MG', _1: 'Minas Gerais'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'BR-PA', _1: 'Pará'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'BR-PB', _1: 'Paraíba'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'BR-PR', _1: 'Paraná'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'BR-PE', _1: 'Pernambuco'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'BR-PI', _1: 'Piauí'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'BR-RJ', _1: 'Rio de Janeiro'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'BR-RN', _1: 'Rio Grande do Norte'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'BR-RS', _1: 'Rio Grande do Sul'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'BR-RO', _1: 'Rondônia'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'BR-RR', _1: 'Roraima'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'BR-SC', _1: 'Santa Catarina'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'BR-SP', _1: 'São Paulo'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'BR-SE', _1: 'Sergipe'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'BR-TO', _1: 'Tocantins'},
																														_1: {ctor: '[]'}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'BS':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'BS-AK', _1: 'Acklins'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'BS-BY', _1: 'Berry Islands'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'BS-BI', _1: 'Bimini'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'BS-BP', _1: 'Black Point'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'BS-CI', _1: 'Cat Island'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'BS-CO', _1: 'Central Abaco'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'BS-CS', _1: 'Central Andros'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'BS-CE', _1: 'Central Eleuthera'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'BS-FP', _1: 'City of Freeport'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'BS-CK', _1: 'Crooked Island and Long Cay'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'BS-EG', _1: 'East Grand Bahama'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'BS-EX', _1: 'Exuma'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'BS-GC', _1: 'Grand Cay'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'BS-HI', _1: 'Harbour Island'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'BS-HT', _1: 'Hope Town'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'BS-IN', _1: 'Inagua'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'BS-LI', _1: 'Long Island'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'BS-MC', _1: 'Mangrove Cay'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'BS-MG', _1: 'Mayaguana'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'BS-MI', _1: 'Moores Island'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'BS-NO', _1: 'North Abaco'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'BS-NS', _1: 'North Andros'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'BS-NE', _1: 'North Eleuthera'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'BS-RI', _1: 'Ragged Island'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'BS-RC', _1: 'Rum Cay'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'BS-SS', _1: 'San Salvador'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'BS-SO', _1: 'South Abaco'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'BS-SA', _1: 'South Andros'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'BS-SE', _1: 'South Eleuthera'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'BS-SW', _1: 'Spanish Wells'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'BS-WG', _1: 'West Grand Bahama'},
																																		_1: {ctor: '[]'}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'BT':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'BT-33', _1: 'Bumthang'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'BT-12', _1: 'Chhukha'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'BT-22', _1: 'Dagana'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'BT-GA', _1: 'Gasa'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'BT-13', _1: 'Ha'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'BT-44', _1: 'Lhuentse'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'BT-42', _1: 'Monggar'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'BT-11', _1: 'Paro'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'BT-43', _1: 'Pemagatshel'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'BT-23', _1: 'Punakha'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'BT-45', _1: 'Samdrup Jongkha'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'BT-14', _1: 'Samtse'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'BT-31', _1: 'Sarpang'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'BT-15', _1: 'Thimphu'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'BT-41', _1: 'Trashigang'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'BT-TY', _1: 'Trashi Yangtse'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'BT-32', _1: 'Trongsa'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'BT-21', _1: 'Tsirang'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'BT-24', _1: 'Wangdue Phodrang'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'BT-34', _1: 'Zhemgang'},
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'BV':
			return {ctor: '[]'};
		case 'BW':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'BW-CE', _1: 'Central'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'BW-CH', _1: 'Chobe'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'BW-FR', _1: 'Francistown'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'BW-GA', _1: 'Gaborone'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'BW-GH', _1: 'Ghanzi'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'BW-JW', _1: 'Jwaneng'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'BW-KG', _1: 'Kgalagadi'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'BW-KL', _1: 'Kgatleng'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'BW-KW', _1: 'Kweneng'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'BW-LO', _1: 'Lobatse'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'BW-NE', _1: 'North East'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'BW-NW', _1: 'North West'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'BW-SP', _1: 'Selibe Phikwe'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'BW-SE', _1: 'South East'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'BW-SO', _1: 'Southern'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'BW-ST', _1: 'Sowa Town'},
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'BY':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'BY-BR', _1: 'Brestskaya voblasts\''},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'BY-HO', _1: 'Homyel\'skaya voblasts\''},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'BY-HR', _1: 'Hrodzenskaya voblasts\''},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'BY-MA', _1: 'Mahilyowskaya voblasts\''},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'BY-MI', _1: 'Minskaya voblasts\''},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'BY-VI', _1: 'Vitsyebskaya voblasts\''},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'BY-HM', _1: 'Horad Minsk'},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			};
		case 'BZ':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'BZ-BZ', _1: 'Belize'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'BZ-CY', _1: 'Cayo'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'BZ-CZL', _1: 'Corozal'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'BZ-OW', _1: 'Orange Walk'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'BZ-SC', _1: 'Stann Creek'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'BZ-TOL', _1: 'Toledo'},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			};
		case 'CA':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'CA-AB', _1: 'Alberta'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'CA-BC', _1: 'British Columbia'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'CA-MB', _1: 'Manitoba'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'CA-NB', _1: 'New Brunswick'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'CA-NL', _1: 'Newfoundland and Labrador'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'CA-NS', _1: 'Nova Scotia'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'CA-ON', _1: 'Ontario'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'CA-PE', _1: 'Prince Edward Island'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'CA-QC', _1: 'Quebec'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'CA-SK', _1: 'Saskatchewan'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'CA-NT', _1: 'Northwest Territories'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'CA-NU', _1: 'Nunavut'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'CA-YT', _1: 'Yukon'},
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'CC':
			return {ctor: '[]'};
		case 'CD':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'CD-KN', _1: 'Kinshasa'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'CD-BC', _1: 'Kongo Central'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'CD-EQ', _1: 'Équateur'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'CD-KE', _1: 'Kasaï-Oriental'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'CD-MA', _1: 'Maniema'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'CD-NK', _1: 'Nord-Kivu'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'CD-SK', _1: 'Sud-Kivu'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'CD-BU', _1: 'Bas-Uélé'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'CD-HK', _1: 'Haut-Katanga'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'CD-HL', _1: 'Haut-Lomami'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'CD-HU', _1: 'Haut-Uélé'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'CD-IT', _1: 'Ituri'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'CD-KC', _1: 'Kasaï Central'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'CD-KG', _1: 'Kwango'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'CD-KL', _1: 'Kwilu'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'CD-KS', _1: 'Kasaï'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'CD-LO', _1: 'Lomami'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'CD-LU', _1: 'Lualaba'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'CD-MN', _1: 'Mai-Ndombe'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'CD-MO', _1: 'Mongala'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'CD-NU', _1: 'Nord-Ubangi'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'CD-SA', _1: 'Sankuru'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'CD-SU', _1: 'Sud-Ubangi'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'CD-TA', _1: 'Tanganyika'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'CD-TO', _1: 'Tshopo'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'CD-TU', _1: 'Tshuapa'},
																													_1: {ctor: '[]'}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'CF':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'CF-BGF', _1: 'Bangui'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'CF-BB', _1: 'Bamingui-Bangoran'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'CF-BK', _1: 'Basse-Kotto'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'CF-HK', _1: 'Haute-Kotto'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'CF-HM', _1: 'Haut-Mbomou'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'CF-HS', _1: 'Haute-Sangha'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'CF-KG', _1: 'Kémo-Gribingui'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'CF-LB', _1: 'Lobaye'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'CF-MB', _1: 'Mbomou'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'CF-NM', _1: 'Nana-Mambéré'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'CF-MP', _1: 'Ombella-Mpoko'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'CF-UK', _1: 'Ouaka'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'CF-AC', _1: 'Ouham'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'CF-OP', _1: 'Ouham-Pendé'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'CF-VK', _1: 'Vakaga'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'CF-KB', _1: 'Gribingui'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'CF-SE', _1: 'Sangha'},
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'CG':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'CG-BZV', _1: 'Brazzaville'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'CG-11', _1: 'Bouenza'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'CG-08 !', _1: 'Cuvette'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'CG-15', _1: 'Cuvette-Ouest'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'CG-05 !', _1: 'Kouilou'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'CG-02 !', _1: 'Lékoumou'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'CG-07 !', _1: 'Likouala'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'CG-09 !', _1: 'Niari'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'CG-14', _1: 'Plateaux'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'CG-16', _1: 'Pointe-Noire'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'CG-12', _1: 'Pool'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'CG-13', _1: 'Sangha'},
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'CH':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'CH-AG', _1: 'Aargau'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'CH-AR', _1: 'Appenzell Ausserrhoden'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'CH-AI', _1: 'Appenzell Innerrhoden'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'CH-BL', _1: 'Basel-Landschaft'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'CH-BS', _1: 'Basel-Stadt'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'CH-BE', _1: 'Bern'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'CH-FR', _1: 'Fribourg'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'CH-GE', _1: 'Genève'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'CH-GL', _1: 'Glarus'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'CH-GR', _1: 'Graubünden'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'CH-JU', _1: 'Jura'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'CH-LU', _1: 'Luzern'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'CH-NE', _1: 'Neuchâtel'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'CH-NW', _1: 'Nidwalden'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'CH-OW', _1: 'Obwalden'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'CH-SG', _1: 'Sankt Gallen'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'CH-SH', _1: 'Schaffhausen'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'CH-SZ', _1: 'Schwyz'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'CH-SO', _1: 'Solothurn'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'CH-TG', _1: 'Thurgau'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'CH-TI', _1: 'Ticino'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'CH-UR', _1: 'Uri'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'CH-VS', _1: 'Valais'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'CH-VD', _1: 'Vaud'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'CH-ZG', _1: 'Zug'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'CH-ZH', _1: 'Zürich'},
																													_1: {ctor: '[]'}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'CI':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'CI-AB', _1: 'Abidjan'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'CI-BS', _1: 'Bas-Sassandra'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'CI-CM', _1: 'Comoé'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'CI-DN', _1: 'Denguélé'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'CI-GD', _1: 'Gôh-Djiboua'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'CI-LC', _1: 'Lacs'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'CI-LG', _1: 'Lagunes'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'CI-MG', _1: 'Montagnes'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'CI-SM', _1: 'Sassandra-Marahoué'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'CI-SV', _1: 'Savanes'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'CI-VB', _1: 'Vallée du Bandama'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'CI-WR', _1: 'Woroba'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'CI-YM', _1: 'Yamoussoukro'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'CI-ZZ', _1: 'Zanzan'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'CK':
			return {ctor: '[]'};
		case 'CL':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'CL-AI', _1: 'Aysén'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'CL-AN', _1: 'Antofagasta'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'CL-AR', _1: 'Araucanía'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'CL-AP', _1: 'Arica y Parinacota'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'CL-AT', _1: 'Atacama'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'CL-BI', _1: 'Biobío'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'CL-CO', _1: 'Coquimbo'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'CL-LI', _1: 'Libertador General Bernardo O\'Higgins'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'CL-LL', _1: 'Los Lagos'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'CL-LR', _1: 'Los Ríos'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'CL-MA', _1: 'Magallanes'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'CL-ML', _1: 'Maule'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'CL-RM', _1: 'Región Metropolitana de Santiago'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'CL-TA', _1: 'Tarapacá'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'CL-VS', _1: 'Valparaíso'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'CM':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'CM-AD', _1: 'Adamaoua'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'CM-CE', _1: 'Centre'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'CM-ES', _1: 'East'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'CM-EN', _1: 'Far North'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'CM-LT', _1: 'Littoral'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'CM-NO', _1: 'North'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'CM-NW', _1: 'North-West'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'CM-SU', _1: 'South'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'CM-SW', _1: 'South-West'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'CM-OU', _1: 'West'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'CN':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'CN-11', _1: 'Beijing'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'CN-12', _1: 'Tianjin'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'CN-13', _1: 'Hebei'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'CN-14', _1: 'Shanxi'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'CN-15', _1: 'Nei Mongol'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'CN-21', _1: 'Liaoning'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'CN-22', _1: 'Jilin'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'CN-23', _1: 'Heilongjiang'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'CN-31', _1: 'Shanghai'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'CN-32', _1: 'Jiangsu'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'CN-33', _1: 'Zhejiang'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'CN-34', _1: 'Anhui'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'CN-35', _1: 'Fujian'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'CN-36', _1: 'Jiangxi'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'CN-37', _1: 'Shandong'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'CN-41', _1: 'Henan'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'CN-42', _1: 'Hubei'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'CN-43', _1: 'Hunan'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'CN-44', _1: 'Guangdong'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'CN-45', _1: 'Guangxi'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'CN-46', _1: 'Hainan'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'CN-50', _1: 'Chongqing'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'CN-51', _1: 'Sichuan'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'CN-52', _1: 'Guizhou'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'CN-53', _1: 'Yunnan'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'CN-54', _1: 'Xizang'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'CN-61', _1: 'Shaanxi'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'CN-62', _1: 'Gansu'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'CN-63', _1: 'Qinghai'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'CN-64', _1: 'Ningxia'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'CN-65', _1: 'Xinjiang'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'CN-71', _1: 'Taiwan'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: 'CN-91', _1: 'Hong Kong'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: 'CN-92', _1: 'Macao'},
																																					_1: {ctor: '[]'}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'CO':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'CO-DC', _1: 'Distrito Capital de Bogotá'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'CO-AMA', _1: 'Amazonas'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'CO-ANT', _1: 'Antioquia'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'CO-ARA', _1: 'Arauca'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'CO-ATL', _1: 'Atlántico'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'CO-BOL', _1: 'Bolívar'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'CO-BOY', _1: 'Boyacá'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'CO-CAL', _1: 'Caldas'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'CO-CAQ', _1: 'Caquetá'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'CO-CAS', _1: 'Casanare'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'CO-CAU', _1: 'Cauca'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'CO-CES', _1: 'Cesar'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'CO-COR', _1: 'Córdoba'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'CO-CUN', _1: 'Cundinamarca'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'CO-CHO', _1: 'Chocó'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'CO-GUA', _1: 'Guainía'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'CO-GUV', _1: 'Guaviare'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'CO-HUI', _1: 'Huila'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'CO-LAG', _1: 'La Guajira'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'CO-MAG', _1: 'Magdalena'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'CO-MET', _1: 'Meta'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'CO-NAR', _1: 'Nariño'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'CO-NSA', _1: 'Norte de Santander'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'CO-PUT', _1: 'Putumayo'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'CO-QUI', _1: 'Quindío'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'CO-RIS', _1: 'Risaralda'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'CO-SAP', _1: 'San Andrés, Providencia y Santa Catalina'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'CO-SAN', _1: 'Santander'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'CO-SUC', _1: 'Sucre'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'CO-TOL', _1: 'Tolima'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'CO-VAC', _1: 'Valle del Cauca'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'CO-VAU', _1: 'Vaupés'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: 'CO-VID', _1: 'Vichada'},
																																				_1: {ctor: '[]'}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'CP':
			return {ctor: '[]'};
		case 'CR':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'CR-A', _1: 'Alajuela'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'CR-C', _1: 'Cartago'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'CR-G', _1: 'Guanacaste'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'CR-H', _1: 'Heredia'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'CR-L', _1: 'Limón'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'CR-P', _1: 'Puntarenas'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'CR-SJ', _1: 'San José'},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			};
		case 'CU':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'CU-15', _1: 'Artemisa'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'CU-09', _1: 'Camagüey'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'CU-08', _1: 'Ciego de Ávila'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'CU-06', _1: 'Cienfuegos'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'CU-12', _1: 'Granma'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'CU-14', _1: 'Guantánamo'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'CU-11', _1: 'Holguín'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'CU-03', _1: 'La Habana'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'CU-10', _1: 'Las Tunas'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'CU-04', _1: 'Matanzas'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'CU-16', _1: 'Mayabeque'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'CU-01', _1: 'Pinar del Río'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'CU-07', _1: 'Sancti Spíritus'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'CU-13', _1: 'Santiago de Cuba'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'CU-05', _1: 'Villa Clara'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'CU-99', _1: 'Isla de la Juventud'},
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'CV':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'CV-B', _1: 'Ilhas de Barlavento'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'CV-S', _1: 'Ilhas de Sotavento'},
					_1: {ctor: '[]'}
				}
			};
		case 'CW':
			return {ctor: '[]'};
		case 'CX':
			return {ctor: '[]'};
		case 'CY':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'CY-04', _1: 'Famagusta'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'CY-06', _1: 'Kyrenia'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'CY-03', _1: 'Larnaca'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'CY-01', _1: 'Nicosia'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'CY-02', _1: 'Limassol'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'CY-05', _1: 'Paphos'},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			};
		case 'CZ':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'CZ-31', _1: 'Jihočeský kraj'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'CZ-64', _1: 'Jihomoravský kraj'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'CZ-41', _1: 'Karlovarský kraj'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'CZ-52', _1: 'Královéhradecký kraj'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'CZ-51', _1: 'Liberecký kraj'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'CZ-80', _1: 'Moravskoslezský kraj'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'CZ-71', _1: 'Olomoucký kraj'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'CZ-53', _1: 'Pardubický kraj'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'CZ-32', _1: 'Plzeňský kraj'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'CZ-10', _1: 'Praha, hlavní město'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'CZ-20', _1: 'Středočeský kraj'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'CZ-42', _1: 'Ústecký kraj'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'CZ-63', _1: 'Vysočina'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'CZ-72', _1: 'Zlínský kraj'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'DE':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'DE-BW', _1: 'Baden-Württemberg'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'DE-BY', _1: 'Bayern'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'DE-BE', _1: 'Berlin'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'DE-BB', _1: 'Brandenburg'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'DE-HB', _1: 'Bremen'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'DE-HH', _1: 'Hamburg'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'DE-HE', _1: 'Hessen'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'DE-MV', _1: 'Mecklenburg-Vorpommern'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'DE-NI', _1: 'Niedersachsen'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'DE-NW', _1: 'Nordrhein-Westfalen'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'DE-RP', _1: 'Rheinland-Pfalz'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'DE-SL', _1: 'Saarland'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'DE-SN', _1: 'Sachsen'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'DE-ST', _1: 'Sachsen-Anhalt'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'DE-SH', _1: 'Schleswig-Holstein'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'DE-TH', _1: 'Thüringen'},
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'DG':
			return {ctor: '[]'};
		case 'DJ':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'DJ-AS', _1: 'Ali Sabieh'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'DJ-AR', _1: 'Arta'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'DJ-DI', _1: 'Dikhil'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'DJ-OB', _1: 'Obock'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'DJ-TA', _1: 'Tadjourah'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'DJ-DJ', _1: 'Djibouti'},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			};
		case 'DK':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'DK-84', _1: 'Hovedstaden'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'DK-82', _1: 'Midtjylland'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'DK-81', _1: 'Nordjylland'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'DK-85', _1: 'Sjælland'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'DK-83', _1: 'Syddanmark'},
								_1: {ctor: '[]'}
							}
						}
					}
				}
			};
		case 'DM':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'DM-02', _1: 'Saint Andrew'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'DM-03', _1: 'Saint David'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'DM-04', _1: 'Saint George'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'DM-05', _1: 'Saint John'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'DM-06', _1: 'Saint Joseph'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'DM-07', _1: 'Saint Luke'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'DM-08', _1: 'Saint Mark'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'DM-09', _1: 'Saint Patrick'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'DM-10', _1: 'Saint Paul'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'DM-11', _1: 'Saint Peter'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'DO':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'DO-33', _1: 'Distrito Nacional'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'DO-40', _1: 'Azua'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'DO-41', _1: 'Baoruco'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'DO-38', _1: 'Barahona'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'DO-38', _1: 'Dajabón'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'DO-34', _1: 'Duarte'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'DO-33', _1: 'El Seibo'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'DO-42', _1: 'Espaillat'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'DO-35', _1: 'Hato Mayor'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'DO-39', _1: 'Independencia'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'DO-38', _1: 'La Altagracia'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'DO-42', _1: 'Elías Piña'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'DO-37', _1: 'La Romana'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'DO-42', _1: 'La Vega'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'DO-36', _1: 'María Trinidad Sánchez'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'DO-33', _1: 'Monseñor Nouel'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'DO-36', _1: 'Monte Cristi'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'DO-34', _1: 'Monte Plata'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'DO-39', _1: 'Pedernales'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'DO-38', _1: 'Peravia'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'DO-41', _1: 'Puerto Plata'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'DO-35', _1: 'Hermanas Mirabal'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'DO-33', _1: 'Samaná'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'DO-33', _1: 'San Cristóbal'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'DO-41', _1: 'San José de Ocoa'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'DO-41', _1: 'San Juan'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'DO-37', _1: 'San Pedro de Macorís'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'DO-39', _1: 'Sánchez Ramírez'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'DO-36', _1: 'Santiago'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'DO-35', _1: 'Santiago Rodríguez'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'DO-34', _1: 'Santo Domingo'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'DO-40', _1: 'Valverde'},
																																			_1: {ctor: '[]'}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'DZ':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'DZ-01', _1: 'Adrar'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'DZ-44', _1: 'Aïn Defla'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'DZ-46', _1: 'Aïn Témouchent'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'DZ-16', _1: 'Alger'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'DZ-23', _1: 'Annaba'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'DZ-05', _1: 'Batna'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'DZ-08', _1: 'Béchar'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'DZ-06', _1: 'Béjaïa'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'DZ-07', _1: 'Biskra'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'DZ-09', _1: 'Blida'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'DZ-34', _1: 'Bordj Bou Arréridj'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'DZ-10', _1: 'Bouira'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'DZ-35', _1: 'Boumerdès'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'DZ-02', _1: 'Chlef'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'DZ-25', _1: 'Constantine'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'DZ-17', _1: 'Djelfa'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'DZ-32', _1: 'El Bayadh'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'DZ-39', _1: 'El Oued'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'DZ-36', _1: 'El Tarf'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'DZ-47', _1: 'Ghardaïa'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'DZ-24', _1: 'Guelma'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'DZ-33', _1: 'Illizi'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'DZ-18', _1: 'Jijel'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'DZ-40', _1: 'Khenchela'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'DZ-03', _1: 'Laghouat'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'DZ-28', _1: 'M\'sila'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'DZ-29', _1: 'Mascara'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'DZ-26', _1: 'Médéa'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'DZ-43', _1: 'Mila'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'DZ-27', _1: 'Mostaganem'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'DZ-45', _1: 'Naama'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'DZ-31', _1: 'Oran'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: 'DZ-30', _1: 'Ouargla'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: 'DZ-04', _1: 'Oum el Bouaghi'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: 'DZ-48', _1: 'Relizane'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: 'DZ-20', _1: 'Saïda'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: 'DZ-19', _1: 'Sétif'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: 'DZ-22', _1: 'Sidi Bel Abbès'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: 'DZ-21', _1: 'Skikda'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: 'DZ-41', _1: 'Souk Ahras'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: 'DZ-11', _1: 'Tamanrasset'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: 'DZ-12', _1: 'Tébessa'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: 'DZ-14', _1: 'Tiaret'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: 'DZ-37', _1: 'Tindouf'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: 'DZ-42', _1: 'Tipaza'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: 'DZ-38', _1: 'Tissemsilt'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: 'DZ-15', _1: 'Tizi Ouzou'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: 'DZ-13', _1: 'Tlemcen'},
																																																			_1: {ctor: '[]'}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'EA':
			return {ctor: '[]'};
		case 'EC':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'EC-A', _1: 'Azuay'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'EC-B', _1: 'Bolívar'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'EC-F', _1: 'Cañar'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'EC-C', _1: 'Carchi'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'EC-H', _1: 'Chimborazo'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'EC-X', _1: 'Cotopaxi'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'EC-O', _1: 'El Oro'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'EC-E', _1: 'Esmeraldas'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'EC-W', _1: 'Galápagos'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'EC-G', _1: 'Guayas'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'EC-I', _1: 'Imbabura'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'EC-L', _1: 'Loja'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'EC-R', _1: 'Los Ríos'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'EC-M', _1: 'Manabí'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'EC-S', _1: 'Morona-Santiago'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'EC-N', _1: 'Napo'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'EC-D', _1: 'Orellana'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'EC-Y', _1: 'Pastaza'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'EC-P', _1: 'Pichincha'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'EC-SE', _1: 'Santa Elena'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'EC-SD', _1: 'Santo Domingo de los Tsáchilas'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'EC-U', _1: 'Sucumbíos'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'EC-T', _1: 'Tungurahua'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'EC-Z', _1: 'Zamora-Chinchipe'},
																											_1: {ctor: '[]'}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'EE':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'EE-37', _1: 'Harjumaa'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'EE-39', _1: 'Hiiumaa'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'EE-44', _1: 'Ida-Virumaa'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'EE-49', _1: 'Jõgevamaa'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'EE-51', _1: 'Järvamaa'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'EE-57', _1: 'Läänemaa'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'EE-59', _1: 'Lääne-Virumaa'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'EE-65', _1: 'Põlvamaa'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'EE-67', _1: 'Pärnumaa'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'EE-70', _1: 'Raplamaa'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'EE-74', _1: 'Saaremaa'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'EE-78', _1: 'Tartumaa'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'EE-82', _1: 'Valgamaa'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'EE-84', _1: 'Viljandimaa'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'EE-86', _1: 'Võrumaa'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'EG':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'EG-DK', _1: 'Ad Daqahlīyah'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'EG-BA', _1: 'Al Baḩr al Aḩmar'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'EG-BH', _1: 'Al Buḩayrah'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'EG-FYM', _1: 'Al Fayyūm'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'EG-GH', _1: 'Al Gharbīyah'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'EG-ALX', _1: 'Al Iskandarīyah'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'EG-IS', _1: 'Al Ismāʿīlīyyah'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'EG-GZ', _1: 'Al Jīzah'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'EG-MNF', _1: 'Al Minūfīyah'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'EG-MN', _1: 'Al Minyā'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'EG-C', _1: 'Al Qāhirah'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'EG-KB', _1: 'Al Qalyūbīyah'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'EG-LX', _1: 'Al Uqşur'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'EG-WAD', _1: 'Al Wādī al Jadīd'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'EG-SHR', _1: 'Ash Sharqīyah'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'EG-SUZ', _1: 'As Suways'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'EG-ASN', _1: 'Aswān'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'EG-AST', _1: 'Asyūţ'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'EG-BNS', _1: 'Banī Suwayf'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'EG-PTS', _1: 'Būr Sa‘īd'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'EG-DT', _1: 'Dumyāţ'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'EG-JS', _1: 'Janūb Sīnā\''},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'EG-KFS', _1: 'Kafr ash Shaykh'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'EG-MT', _1: 'Maţrūḩ'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'EG-KN', _1: 'Qinā'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'EG-SIN', _1: 'Shamāl Sīnā\''},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'EG-SHG', _1: 'Sūhāj'},
																														_1: {ctor: '[]'}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'EH':
			return {ctor: '[]'};
		case 'ER':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'ER-MA', _1: 'Al Awsaţ'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'ER-DU', _1: 'Al Janūbĩ'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'ER-AN', _1: 'Ansabā'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'ER-DK', _1: 'Janūbī al Baḩrī al Aḩmar'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'ER-GB', _1: 'Qāsh-Barkah'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'ER-SK', _1: 'Shimālī al Baḩrī al Aḩmar'},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			};
		case 'ES':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'ES-AN', _1: 'Andalucía'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'ES-AR', _1: 'Aragón'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'ES-AS', _1: 'Asturias, Principado de'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'ES-CN', _1: 'Canarias'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'ES-CB', _1: 'Cantabria'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'ES-CM', _1: 'Castilla-La Mancha'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'ES-CL', _1: 'Castilla y León'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'ES-CT', _1: 'Catalunya'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'ES-EX', _1: 'Extremadura'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'ES-GA', _1: 'Galicia'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'ES-IB', _1: 'Illes Balears'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'ES-RI', _1: 'La Rioja'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'ES-MD', _1: 'Madrid, Comunidad de'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'ES-MC', _1: 'Murcia, Región de'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'ES-NC', _1: 'Navarra, Comunidad Foral de'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'ES-PV', _1: 'País Vasco'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'ES-VC', _1: 'Valenciana, Comunidad'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'ES-CE', _1: 'Ceuta'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'ES-ML', _1: 'Melilla'},
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'ET':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'ET-AA', _1: 'Addis Ababa'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'ET-DD', _1: 'Dire Dawa'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'ET-AF', _1: 'Afar'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'ET-AM', _1: 'Amara'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'ET-BE', _1: 'Benshangul-Gumaz'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'ET-GA', _1: 'Gambela Peoples'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'ET-HA', _1: 'Harari People'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'ET-OR', _1: 'Oromia'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'ET-SO', _1: 'Somali'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'ET-TI', _1: 'Tigrai'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'ET-SN', _1: 'Southern Nations, Nationalities and Peoples'},
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'EU':
			return {ctor: '[]'};
		case 'EZ':
			return {ctor: '[]'};
		case 'FI':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'FI-01', _1: 'Ahvenanmaan maakunta'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'FI-02', _1: 'Etelä-Karjala'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'FI-03', _1: 'Etelä-Pohjanmaa'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'FI-04', _1: 'Etelä-Savo'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'FI-05', _1: 'Kainuu'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'FI-06', _1: 'Kanta-Häme'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'FI-07', _1: 'Keski-Pohjanmaa'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'FI-08', _1: 'Keski-Suomi'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'FI-09', _1: 'Kymenlaakso'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'FI-10', _1: 'Lappi'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'FI-11', _1: 'Pirkanmaa'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'FI-12', _1: 'Pohjanmaa'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'FI-13', _1: 'Pohjois-Karjala'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'FI-14', _1: 'Pohjois-Pohjanmaa'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'FI-15', _1: 'Pohjois-Savo'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'FI-16', _1: 'Päijät-Häme'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'FI-17', _1: 'Satakunta'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'FI-18', _1: 'Uusimaa'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'FI-19', _1: 'Varsinais-Suomi'},
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'FJ':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'FJ-C', _1: 'Central'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'FJ-E', _1: 'Eastern'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'FJ-N', _1: 'Northern'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'FJ-W', _1: 'Western'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'FJ-R', _1: 'Rotuma'},
								_1: {ctor: '[]'}
							}
						}
					}
				}
			};
		case 'FK':
			return {ctor: '[]'};
		case 'FM':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'FM-TRK', _1: 'Chuuk'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'FM-KSA', _1: 'Kosrae'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'FM-PNI', _1: 'Pohnpei'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'FM-YAP', _1: 'Yap'},
							_1: {ctor: '[]'}
						}
					}
				}
			};
		case 'FO':
			return {ctor: '[]'};
		case 'FR':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'FR-ARA', _1: 'Auvergne-Rhône-Alpes'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'FR-BFC', _1: 'Bourgogne-Franche-Comté'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'FR-BRE', _1: 'Bretagne'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'FR-CVL', _1: 'Centre-Val de Loire'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'FR-COR', _1: 'Corse'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'FR-GES', _1: 'Grand Est'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'FR-HDF', _1: 'Hauts-de-France'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'FR-IDF', _1: 'Île-de-France'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'FR-NOR', _1: 'Normandie'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'FR-NAQ', _1: 'Nouvelle-Aquitaine'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'FR-OCC', _1: 'Occitanie'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'FR-PDL', _1: 'Pays de la Loire'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'FR-PAC', _1: 'Provence-Alpes-Côte d\'Azur'},
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'GA':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'GA-1', _1: 'Estuaire'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'GA-2', _1: 'Haut-Ogooué'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'GA-3', _1: 'Moyen-Ogooué'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'GA-4', _1: 'Ngounié'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'GA-5', _1: 'Nyanga'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'GA-6', _1: 'Ogooué-Ivindo'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'GA-7', _1: 'Ogooué-Lolo'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'GA-8', _1: 'Ogooué-Maritime'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'GA-9', _1: 'Woleu-Ntem'},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'GB':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'GB-ENG', _1: 'England'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'GB-NIR', _1: 'Northern Ireland'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'GB-SCT', _1: 'Scotland'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'GB-WLS', _1: 'Wales'},
							_1: {ctor: '[]'}
						}
					}
				}
			};
		case 'GD':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'GD-01', _1: 'Saint Andrew'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'GD-02', _1: 'Saint David'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'GD-03', _1: 'Saint George'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'GD-04', _1: 'Saint John'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'GD-05', _1: 'Saint Mark'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'GD-06', _1: 'Saint Patrick'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'GD-10', _1: 'Southern Grenadine Islands'},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			};
		case 'GE':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'GE-AB', _1: 'Abkhazia'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'GE-AJ', _1: 'Ajaria'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'GE-TB', _1: 'Tbilisi'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'GE-GU', _1: 'Guria'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'GE-IM', _1: 'Imereti'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'GE-KA', _1: 'K\'akheti'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'GE-KK', _1: 'Kvemo Kartli'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'GE-MM', _1: 'Mtskheta-Mtianeti'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'GE-RL', _1: 'Rach\'a-Lechkhumi-Kvemo Svaneti'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'GE-SZ', _1: 'Samegrelo-Zemo Svaneti'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'GE-SJ', _1: 'Samtskhe-Javakheti'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'GE-SK', _1: 'Shida Kartli'},
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'GF':
			return {ctor: '[]'};
		case 'GG':
			return {ctor: '[]'};
		case 'GH':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'GH-AH', _1: 'Ashanti'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'GH-BA', _1: 'Brong-Ahafo'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'GH-CP', _1: 'Central'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'GH-EP', _1: 'Eastern'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'GH-AA', _1: 'Greater Accra'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'GH-NP', _1: 'Northern'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'GH-UE', _1: 'Upper East'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'GH-UW', _1: 'Upper West'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'GH-TV', _1: 'Volta'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'GH-WP', _1: 'Western'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'GI':
			return {ctor: '[]'};
		case 'GL':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'GL-KU', _1: 'Kommune Kujalleq'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'GL-SM', _1: 'Kommuneqarfik Sermersooq'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'GL-QA', _1: 'Qaasuitsup Kommunia'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'GL-QE', _1: 'Qeqqata Kommunia'},
							_1: {ctor: '[]'}
						}
					}
				}
			};
		case 'GM':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'GM-B', _1: 'Banjul'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'GM-M', _1: 'Central River'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'GM-L', _1: 'Lower River'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'GM-N', _1: 'North Bank'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'GM-U', _1: 'Upper River'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'GM-W', _1: 'Western'},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			};
		case 'GN':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'GN-B', _1: 'Boké'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'GN-F', _1: 'Faranah'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'GN-K', _1: 'Kankan'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'GN-D', _1: 'Kindia'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'GN-L', _1: 'Labé'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'GN-M', _1: 'Mamou'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'GN-N', _1: 'Nzérékoré'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'GN-C', _1: 'Conakry'},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'GP':
			return {ctor: '[]'};
		case 'GQ':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'GQ-C', _1: 'Región Continental'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'GQ-I', _1: 'Región Insular'},
					_1: {ctor: '[]'}
				}
			};
		case 'GR':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'GR-A', _1: 'Anatolikí Makedonía kai Thráki'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'GR-I', _1: 'Attikí'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'GR-G', _1: 'Dytikí Elláda'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'GR-C', _1: 'Dytikí Makedonía'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'GR-F', _1: 'Ionía Nísia'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'GR-D', _1: 'Ípeiros'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'GR-B', _1: 'Kentrikí Makedonía'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'GR-M', _1: 'Krítí'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'GR-L', _1: 'Notío Aigaío'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'GR-J', _1: 'Peloponnísos'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'GR-H', _1: 'Stereá Elláda'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'GR-E', _1: 'Thessalía'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'GR-K', _1: 'Voreío Aigaío'},
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'GS':
			return {ctor: '[]'};
		case 'GT':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'GT-AV', _1: 'Alta Verapaz'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'GT-BV', _1: 'Baja Verapaz'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'GT-CM', _1: 'Chimaltenango'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'GT-CQ', _1: 'Chiquimula'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'GT-PR', _1: 'El Progreso'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'GT-ES', _1: 'Escuintla'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'GT-GU', _1: 'Guatemala'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'GT-HU', _1: 'Huehuetenango'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'GT-IZ', _1: 'Izabal'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'GT-JA', _1: 'Jalapa'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'GT-JU', _1: 'Jutiapa'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'GT-PE', _1: 'Petén'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'GT-QZ', _1: 'Quetzaltenango'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'GT-QC', _1: 'Quiché'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'GT-RE', _1: 'Retalhuleu'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'GT-SA', _1: 'Sacatepéquez'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'GT-SM', _1: 'San Marcos'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'GT-SR', _1: 'Santa Rosa'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'GT-SO', _1: 'Sololá'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'GT-SU', _1: 'Suchitepéquez'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'GT-TO', _1: 'Totonicapán'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'GT-ZA', _1: 'Zacapa'},
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'GU':
			return {ctor: '[]'};
		case 'GW':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'GW-L', _1: 'Bissau'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'GW-BA', _1: 'Bafatá'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'GW-BM', _1: 'Biombo'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'GW-BL', _1: 'Bolama'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'GW-CA', _1: 'Cacheu'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'GW-GA', _1: 'Gabú'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'GW-OI', _1: 'Oio'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'GW-QU', _1: 'Quinara'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'GW-TO', _1: 'Tombali'},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'GY':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'GY-BA', _1: 'Barima-Waini'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'GY-CU', _1: 'Cuyuni-Mazaruni'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'GY-DE', _1: 'Demerara-Mahaica'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'GY-EB', _1: 'East Berbice-Corentyne'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'GY-ES', _1: 'Essequibo Islands-West Demerara'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'GY-MA', _1: 'Mahaica-Berbice'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'GY-PM', _1: 'Pomeroon-Supenaam'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'GY-PT', _1: 'Potaro-Siparuni'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'GY-UD', _1: 'Upper Demerara-Berbice'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'GY-UT', _1: 'Upper Takutu-Upper Essequibo'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'HK':
			return {ctor: '[]'};
		case 'HM':
			return {ctor: '[]'};
		case 'HN':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'HN-AT', _1: 'Atlántida'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'HN-CH', _1: 'Choluteca'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'HN-CL', _1: 'Colón'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'HN-CM', _1: 'Comayagua'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'HN-CP', _1: 'Copán'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'HN-CR', _1: 'Cortés'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'HN-EP', _1: 'El Paraíso'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'HN-FM', _1: 'Francisco Morazán'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'HN-GD', _1: 'Gracias a Dios'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'HN-IN', _1: 'Intibucá'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'HN-IB', _1: 'Islas de la Bahía'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'HN-LP', _1: 'La Paz'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'HN-LE', _1: 'Lempira'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'HN-OC', _1: 'Ocotepeque'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'HN-OL', _1: 'Olancho'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'HN-SB', _1: 'Santa Bárbara'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'HN-VA', _1: 'Valle'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'HN-YO', _1: 'Yoro'},
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'HR':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'HR-21', _1: 'Grad Zagreb'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'HR-07', _1: 'Bjelovarsko-bilogorska županija'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'HR-12', _1: 'Brodsko-posavska županija'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'HR-19', _1: 'Dubrovačko-neretvanska županija'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'HR-18', _1: 'Istarska županija'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'HR-04', _1: 'Karlovačka županija'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'HR-06', _1: 'Koprivničko-križevačka županija'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'HR-02', _1: 'Krapinsko-zagorska županija'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'HR-09', _1: 'Ličko-senjska županija'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'HR-20', _1: 'Međimurska županija'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'HR-14', _1: 'Osječko-baranjska županija'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'HR-11', _1: 'Požeško-slavonska županija'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'HR-08', _1: 'Primorsko-goranska županija'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'HR-03', _1: 'Sisačko-moslavačka županija'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'HR-17', _1: 'Splitsko-dalmatinska županija'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'HR-15', _1: 'Šibensko-kninska županija'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'HR-05', _1: 'Varaždinska županija'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'HR-10', _1: 'Virovitičko-podravska županija'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'HR-16', _1: 'Vukovarsko-srijemska županija'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'HR-13', _1: 'Zadarska županija'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'HR-01', _1: 'Zagrebačka županija'},
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'HT':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'HT-AR', _1: 'Artibonite'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'HT-CE', _1: 'Centre'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'HT-GA', _1: 'Grand’Anse'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'HT-NI', _1: 'Nippes'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'HT-ND', _1: 'Nord'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'HT-NE', _1: 'Nord-Est'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'HT-NO', _1: 'Nord-Ouest'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'HT-OU', _1: 'Ouest'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'HT-SD', _1: 'Sud'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'HT-SE', _1: 'Sud-Est'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'HU':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'HU-BU', _1: 'Budapest'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'HU-BK', _1: 'Bács-Kiskun'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'HU-BA', _1: 'Baranya'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'HU-BE', _1: 'Békés'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'HU-BZ', _1: 'Borsod-Abaúj-Zemplén'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'HU-CS', _1: 'Csongrád'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'HU-FE', _1: 'Fejér'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'HU-GS', _1: 'Győr-Moson-Sopron'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'HU-HB', _1: 'Hajdú-Bihar'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'HU-HE', _1: 'Heves'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'HU-JN', _1: 'Jász-Nagykun-Szolnok'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'HU-KE', _1: 'Komárom-Esztergom'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'HU-NO', _1: 'Nógrád'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'HU-PE', _1: 'Pest'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'HU-SO', _1: 'Somogy'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'HU-SZ', _1: 'Szabolcs-Szatmár-Bereg'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'HU-TO', _1: 'Tolna'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'HU-VA', _1: 'Vas'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'HU-VE', _1: 'Veszprém'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'HU-ZA', _1: 'Zala'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'HU-BC', _1: 'Békéscsaba'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'HU-DE', _1: 'Debrecen'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'HU-DU', _1: 'Dunaújváros'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'HU-EG', _1: 'Eger'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'HU-ER', _1: 'Érd'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'HU-GY', _1: 'Győr'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'HU-HV', _1: 'Hódmezővásárhely'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'HU-KV', _1: 'Kaposvár'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'HU-KM', _1: 'Kecskemét'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'HU-MI', _1: 'Miskolc'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'HU-NK', _1: 'Nagykanizsa'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'HU-NY', _1: 'Nyíregyháza'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: 'HU-PS', _1: 'Pécs'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: 'HU-ST', _1: 'Salgótarján'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: 'HU-SN', _1: 'Sopron'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: 'HU-SD', _1: 'Szeged'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: 'HU-SF', _1: 'Székesfehérvár'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: 'HU-SS', _1: 'Szekszárd'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: 'HU-SK', _1: 'Szolnok'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: 'HU-SH', _1: 'Szombathely'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: 'HU-TB', _1: 'Tatabánya'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: 'HU-VM', _1: 'Veszprém'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: 'HU-ZE', _1: 'Zalaegerszeg'},
																																														_1: {ctor: '[]'}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'IC':
			return {ctor: '[]'};
		case 'ID':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'ID-JW', _1: 'Jawa'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'ID-KA', _1: 'Kalimantan'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'ID-ML', _1: 'Maluku'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'ID-NU', _1: 'Nusa Tenggara'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'ID-PP', _1: 'Papua'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'ID-SL', _1: 'Sulawesi'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'ID-SM', _1: 'Sumatera'},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			};
		case 'IE':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'IE-C', _1: 'Connacht'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'IE-L', _1: 'Leinster'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'IE-M', _1: 'Munster'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'IE-U', _1: 'Ulster'},
							_1: {ctor: '[]'}
						}
					}
				}
			};
		case 'IL':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'IL-D', _1: 'מחוז הדרום'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'IL-M', _1: 'מָחוֹז הַמֶרְכָּז'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'IL-Z', _1: 'מחוז הצפון'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'IL-HA', _1: 'מחוז חיפה'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'IL-TA', _1: 'מָחוֹז תֵּל אָבִיב'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'IL-JM', _1: 'מחוז ירושלים'},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			};
		case 'IM':
			return {ctor: '[]'};
		case 'IN':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'IN-AP', _1: 'Andhra Pradesh'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'IN-AR', _1: 'Arunachal Pradesh'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'IN-AS', _1: 'Assam'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'IN-BR', _1: 'Bihar'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'IN-CT', _1: 'Chhattisgarh'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'IN-GA', _1: 'Goa'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'IN-GJ', _1: 'Gujarat'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'IN-HR', _1: 'Haryana'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'IN-HP', _1: 'Himachal Pradesh'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'IN-JK', _1: 'Jammu and Kashmir'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'IN-JH', _1: 'Jharkhand'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'IN-KA', _1: 'Karnataka'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'IN-KL', _1: 'Kerala'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'IN-MP', _1: 'Madhya Pradesh'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'IN-MH', _1: 'Maharashtra'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'IN-MN', _1: 'Manipur'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'IN-ML', _1: 'Meghalaya'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'IN-MZ', _1: 'Mizoram'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'IN-NL', _1: 'Nagaland'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'IN-OR', _1: 'Odisha'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'IN-PB', _1: 'Punjab'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'IN-RJ', _1: 'Rajasthan'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'IN-SK', _1: 'Sikkim'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'IN-TN', _1: 'Tamil Nadu'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'IN-TG', _1: 'Telangana'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'IN-TR', _1: 'Tripura'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'IN-UT', _1: 'Uttarakhand'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'IN-UP', _1: 'Uttar Pradesh'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'IN-WB', _1: 'West Bengal'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'IN-AN', _1: 'Andaman and Nicobar Islands'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'IN-CH', _1: 'Chandigarh'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'IN-DN', _1: 'Dadra and Nagar Haveli'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: 'IN-DD', _1: 'Daman and Diu'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: 'IN-DL', _1: 'Delhi'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: 'IN-LD', _1: 'Lakshadweep'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: 'IN-PY', _1: 'Puducherry'},
																																							_1: {ctor: '[]'}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'IO':
			return {ctor: '[]'};
		case 'IQ':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'IQ-AN', _1: 'Al Anbār'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'IQ-BA', _1: 'Al Başrah'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'IQ-MU', _1: 'Al Muthanná'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'IQ-QA', _1: 'Al Qādisīyah'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'IQ-NA', _1: 'An Najaf'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'IQ-AR', _1: 'Arbīl'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'IQ-SU', _1: 'As Sulaymānīyah'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'IQ-BB', _1: 'Bābil'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'IQ-BG', _1: 'Baghdād'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'IQ-DA', _1: 'Dahūk'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'IQ-DQ', _1: 'Dhī Qār'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'IQ-DI', _1: 'Diyālá'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'IQ-KA', _1: 'Karbalā’'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'IQ-KI', _1: 'Kirkūk'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'IQ-MA', _1: 'Maysān'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'IQ-NI', _1: 'Nīnawá'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'IQ-SD', _1: 'Şalāḩ ad Dīn'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'IQ-WA', _1: 'Wāsiţ'},
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'IR':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'IR-32', _1: 'Alborz'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'IR-03', _1: 'Ardabīl'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'IR-02', _1: 'Āz̄arbāyjān-e Gharbī'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'IR-01', _1: 'Āz̄arbāyjān-e Sharqī'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'IR-06', _1: 'Būshehr'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'IR-08', _1: 'Chahār Maḩāl va Bakhtīārī'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'IR-04', _1: 'Eşfahān'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'IR-14', _1: 'Fārs'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'IR-19', _1: 'Gīlān'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'IR-27', _1: 'Golestān'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'IR-24', _1: 'Hamadān'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'IR-23', _1: 'Hormozgān'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'IR-05', _1: 'Īlām'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'IR-15', _1: 'Kermān'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'IR-17', _1: 'Kermānshāh'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'IR-29', _1: 'Khorāsān-e Jonūbī'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'IR-30', _1: 'Khorāsān-e Raẕavī'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'IR-31', _1: 'Khorāsān-e Shomālī'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'IR-10', _1: 'Khūzestān'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'IR-18', _1: 'Kohgīlūyeh va Bowyer Aḩmad'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'IR-16', _1: 'Kordestān'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'IR-20', _1: 'Lorestān'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'IR-22', _1: 'Markazī'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'IR-21', _1: 'Māzandarān'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'IR-28', _1: 'Qazvīn'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'IR-26', _1: 'Qom'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'IR-12', _1: 'Semnān'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'IR-13', _1: 'Sīstān va Balūchestān'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'IR-07', _1: 'Tehrān'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'IR-25', _1: 'Yazd'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'IR-11', _1: 'Zanjān'},
																																		_1: {ctor: '[]'}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'IS':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'IS-1', _1: 'Höfuðborgarsvæði utan Reykjavíkur'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'IS-2', _1: 'Suðurnes'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'IS-3', _1: 'Vesturland'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'IS-4', _1: 'Vestfirðir'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'IS-5', _1: 'Norðurland vestra'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'IS-6', _1: 'Norðurland eystra'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'IS-7', _1: 'Austurland'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'IS-8', _1: 'Suðurland'},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'IT':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'IT-65', _1: 'Abruzzo'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'IT-77', _1: 'Basilicata'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'IT-78', _1: 'Calabria'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'IT-72', _1: 'Campania'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'IT-45', _1: 'Emilia-Romagna'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'IT-36', _1: 'Friuli-Venezia Giulia'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'IT-62', _1: 'Lazio'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'IT-42', _1: 'Liguria'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'IT-25', _1: 'Lombardia'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'IT-57', _1: 'Marche'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'IT-67', _1: 'Molise'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'IT-21', _1: 'Piemonte'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'IT-75', _1: 'Puglia'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'IT-88', _1: 'Sardegna'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'IT-82', _1: 'Sicilia'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'IT-52', _1: 'Toscana'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'IT-32', _1: 'Trentino-Alto Adige'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'IT-55', _1: 'Umbria'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'IT-23', _1: 'Valle d\'Aosta'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'IT-34', _1: 'Veneto'},
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'JE':
			return {ctor: '[]'};
		case 'JM':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'JM-13', _1: 'Clarendon'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'JM-09', _1: 'Hanover'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'JM-01', _1: 'Kingston'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'JM-12', _1: 'Manchester'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'JM-04', _1: 'Portland'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'JM-02', _1: 'Saint Andrew'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'JM-06', _1: 'Saint Ann'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'JM-14', _1: 'Saint Catherine'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'JM-11', _1: 'Saint Elizabeth'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'JM-08', _1: 'Saint James'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'JM-05', _1: 'Saint Mary'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'JM-03', _1: 'Saint Thomas'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'JM-07', _1: 'Trelawny'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'JM-10', _1: 'Westmoreland'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'JO':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'JO-AJ', _1: '‘Ajlūn'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'JO-AQ', _1: 'Al ‘Aqabah'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'JO-BA', _1: 'Al Balqā’'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'JO-KA', _1: 'Al Karak'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'JO-MA', _1: 'Al Mafraq'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'JO-AM', _1: 'Al ‘A̅şimah'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'JO-AT', _1: 'Aţ Ţafīlah'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'JO-AZ', _1: 'Az Zarqā’'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'JO-IR', _1: 'Irbid'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'JO-JA', _1: 'Jarash'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'JO-MN', _1: 'Ma‘ān'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'JO-MD', _1: 'Mādabā'},
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'JP':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'JP-23', _1: 'Aiti'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'JP-05', _1: 'Akita'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'JP-02', _1: 'Aomori'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'JP-38', _1: 'Ehime'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'JP-21', _1: 'Gihu'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'JP-10', _1: 'Gunma'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'JP-34', _1: 'Hirosima'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'JP-01', _1: 'Hokkaidô'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'JP-18', _1: 'Hukui'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'JP-40', _1: 'Hukuoka'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'JP-07', _1: 'Hukusima'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'JP-28', _1: 'Hyôgo'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'JP-08', _1: 'Ibaraki'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'JP-17', _1: 'Isikawa'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'JP-03', _1: 'Iwate'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'JP-37', _1: 'Kagawa'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'JP-46', _1: 'Kagosima'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'JP-14', _1: 'Kanagawa'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'JP-39', _1: 'Kôti'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'JP-43', _1: 'Kumamoto'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'JP-26', _1: 'Kyôto'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'JP-24', _1: 'Mie'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'JP-04', _1: 'Miyagi'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'JP-45', _1: 'Miyazaki'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'JP-20', _1: 'Nagano'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'JP-42', _1: 'Nagasaki'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'JP-29', _1: 'Nara'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'JP-15', _1: 'Niigata'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'JP-44', _1: 'Ôita'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'JP-33', _1: 'Okayama'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'JP-47', _1: 'Okinawa'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'JP-27', _1: 'Ôsaka'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: 'JP-41', _1: 'Saga'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: 'JP-11', _1: 'Saitama'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: 'JP-25', _1: 'Siga'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: 'JP-32', _1: 'Simane'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: 'JP-22', _1: 'Sizuoka'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: 'JP-12', _1: 'Tiba'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: 'JP-09', _1: 'Totigi'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: 'JP-36', _1: 'Tokusima'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: 'JP-13', _1: 'Tôkyô'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: 'JP-31', _1: 'Tottori'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: 'JP-16', _1: 'Toyama'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: 'JP-30', _1: 'Wakayama'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: 'JP-06', _1: 'Yamagata'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: 'JP-35', _1: 'Yamaguti'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: 'JP-19', _1: 'Yamanasi'},
																																																		_1: {ctor: '[]'}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'KE':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'KE-01', _1: 'Baringo'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'KE-02', _1: 'Bomet'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'KE-03', _1: 'Bungoma'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'KE-04', _1: 'Busia'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'KE-05', _1: 'Elgeyo/Marakwet'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'KE-06', _1: 'Embu'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'KE-07', _1: 'Garissa'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'KE-08', _1: 'Homa Bay'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'KE-09', _1: 'Isiolo'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'KE-10', _1: 'Kajiado'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'KE-11', _1: 'Kakamega'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'KE-12', _1: 'Kericho'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'KE-13', _1: 'Kiambu'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'KE-14', _1: 'Kilifi'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'KE-15', _1: 'Kirinyaga'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'KE-16', _1: 'Kisii'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'KE-17', _1: 'Kisumu'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'KE-18', _1: 'Kitui'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'KE-19', _1: 'Kwale'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'KE-20', _1: 'Laikipia'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'KE-21', _1: 'Lamu'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'KE-22', _1: 'Machakos'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'KE-23', _1: 'Makueni'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'KE-24', _1: 'Mandera'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'KE-25', _1: 'Marsabit'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'KE-26', _1: 'Meru'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'KE-27', _1: 'Migori'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'KE-28', _1: 'Mombasa'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'KE-29', _1: 'Murang\'a'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'KE-30', _1: 'Nairobi City'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'KE-31', _1: 'Nakuru'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'KE-32', _1: 'Nandi'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: 'KE-33', _1: 'Narok'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: 'KE-34', _1: 'Nyamira'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: 'KE-35', _1: 'Nyandarua'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: 'KE-36', _1: 'Nyeri'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: 'KE-37', _1: 'Samburu'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: 'KE-38', _1: 'Siaya'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: 'KE-39', _1: 'Taita/Taveta'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: 'KE-40', _1: 'Tana River'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: 'KE-41', _1: 'Tharaka-Nithi'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: 'KE-42', _1: 'Trans Nzoia'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: 'KE-43', _1: 'Turkana'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: 'KE-44', _1: 'Uasin Gishu'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: 'KE-45', _1: 'Vihiga'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: 'KE-46', _1: 'Wajir'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: 'KE-47', _1: 'West Pokot'},
																																																		_1: {ctor: '[]'}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'KG':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'KG-GB', _1: 'Bishkek'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'KG-GO', _1: 'Osh'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'KG-B', _1: 'Batken'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'KG-C', _1: 'Chü'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'KG-J', _1: 'Jalal-Abad'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'KG-N', _1: 'Naryn'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'KG-O', _1: 'Osh'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'KG-T', _1: 'Talas'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'KG-Y', _1: 'Ysyk-Köl'},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'KH':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'KH-12', _1: 'Phnom Penh'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'KH-02 !', _1: 'Baat Dambang'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'KH-01 !', _1: 'Banteay Mean Chey'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'KH-03 !', _1: 'Kampong Chaam'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'KH-04 !', _1: 'Kampong Chhnang'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'KH-05 !', _1: 'Kampong Spueu'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'KH-06 !', _1: 'Kampong Thum'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'KH-07 !', _1: 'Kampot'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'KH-08 !', _1: 'Kandaal'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'KH-09 !', _1: 'Kaoh Kong'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'KH-10', _1: 'Kracheh'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'KH-23', _1: 'Krong Kaeb'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'KH-24', _1: 'Krong Pailin'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'KH-18', _1: 'Krong Preah Sihanouk'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'KH-11', _1: 'Mondol Kiri'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'KH-22', _1: 'Otdar Mean Chey'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'KH-15', _1: 'Pousaat'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'KH-13', _1: 'Preah Vihear'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'KH-14', _1: 'Prey Veaeng'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'KH-16', _1: 'Rotanak Kiri'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'KH-17', _1: 'Siem Reab'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'KH-19', _1: 'Stueng Traeng'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'KH-20', _1: 'Svaay Rieng'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'KH-21', _1: 'Taakaev'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'KH-25', _1: 'Tbong Khmum'},
																												_1: {ctor: '[]'}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'KI':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'KI-G', _1: 'Gilbert Islands'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'KI-L', _1: 'Line Islands'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'KI-P', _1: 'Phoenix Islands'},
						_1: {ctor: '[]'}
					}
				}
			};
		case 'KM':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'KM-G', _1: 'Grande Comore'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'KM-A', _1: 'Anjouan'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'KM-M', _1: 'Mohéli'},
						_1: {ctor: '[]'}
					}
				}
			};
		case 'KN':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'KN-K', _1: 'Saint Kitts'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'KN-N', _1: 'Nevis'},
					_1: {ctor: '[]'}
				}
			};
		case 'KP':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'KP-01', _1: 'Pyongyang'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'KP-13', _1: 'Rason'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'KP-02', _1: 'South Pyongan'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'KP-03', _1: 'North Pyongan'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'KP-04', _1: 'Chagang'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'KP-05', _1: 'South Hwanghae'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'KP-06', _1: 'North Hwanghae'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'KP-07', _1: 'Kangwon'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'KP-08', _1: 'South Hamgyong'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'KP-09', _1: 'North Hamgyong'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'KP-10', _1: 'Ryanggang'},
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'KR':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'KR-11', _1: 'Seoul'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'KR-26', _1: 'Busan'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'KR-27', _1: 'Daegu'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'KR-30', _1: 'Daejeon'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'KR-29', _1: 'Gwangju'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'KR-28', _1: 'Incheon'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'KR-31', _1: 'Ulsan'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'KR-50', _1: 'Sejong'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'KR-43', _1: 'North Chungcheong'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'KR-44', _1: 'South Chungcheong'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'KR-42', _1: 'Gangwon'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'KR-41', _1: 'Gyeonggi'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'KR-47', _1: 'North Gyeongsang'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'KR-48', _1: 'South Gyeongsang'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'KR-45', _1: 'North Jeolla'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'KR-46', _1: 'South Jeolla'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'KR-49', _1: 'Jeju'},
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'KW':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'KW-AH', _1: 'Al Aḩmadi'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'KW-FA', _1: 'Al Farwānīyah'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'KW-JA', _1: 'Al Jahrā’'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'KW-KU', _1: 'Al ‘Āşimah'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'KW-HA', _1: 'Ḩawallī'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'KW-MU', _1: 'Mubārak al Kabīr'},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			};
		case 'KY':
			return {ctor: '[]'};
		case 'KZ':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'KZ-ALA', _1: 'Almaty'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'KZ-AST', _1: 'Astana'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'KZ-ALM', _1: 'Almaty oblysy'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'KZ-AKM', _1: 'Aqmola oblysy'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'KZ-AKT', _1: 'Aqtöbe oblysy'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'KZ-ATY', _1: 'Atyraū oblysy'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'KZ-BAY', _1: 'Bayqongyr'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'KZ-ZAP', _1: 'Batys Qazaqstan oblysy'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'KZ-MAN', _1: 'Mangghystaū oblysy'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'KZ-YUZ', _1: 'Ongtüstik Qazaqstan oblysy'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'KZ-PAV', _1: 'Pavlodar oblysy'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'KZ-KAR', _1: 'Qaraghandy oblysy'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'KZ-KUS', _1: 'Qostanay oblysy'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'KZ-KZY', _1: 'Qyzylorda oblysy'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'KZ-VOS', _1: 'Shyghys Qazaqstan oblysy'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'KZ-SEV', _1: 'Soltüstik Qazaqstan oblysy'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'KZ-ZHA', _1: 'Zhambyl oblysy'},
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'LA':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'LA-VT', _1: 'Vientiane'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'LA-AT', _1: 'Attapu'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'LA-BK', _1: 'Bokèo'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'LA-BL', _1: 'Bolikhamsai'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'LA-CH', _1: 'Champasak'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'LA-HO', _1: 'Houaphan'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'LA-KH', _1: 'Khammouan'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'LA-LM', _1: 'Louang Namtha'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'LA-LP', _1: 'Louangphabang'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'LA-OU', _1: 'Oudômxai'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'LA-PH', _1: 'Phôngsali'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'LA-SL', _1: 'Salavan'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'LA-SV', _1: 'Savannakhét'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'LA-VI', _1: 'Vientiane'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'LA-XA', _1: 'Xaignabouli'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'LA-XE', _1: 'Xékong'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'LA-XI', _1: 'Xiangkhouang'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'LA-XS', _1: 'Xaisômboun'},
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'LB':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'LB-AK', _1: 'Aakkâr'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'LB-BH', _1: 'Baalbek-Hermel'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'LB-BI', _1: 'Béqaa'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'LB-BA', _1: 'Beyrouth'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'LB-AS', _1: 'Liban-Nord'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'LB-JA', _1: 'Liban-Sud'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'LB-JL', _1: 'Mont-Liban'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'LB-NA', _1: 'Nabatîyé'},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'LC':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'LC-01', _1: 'Anse la Raye'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'LC-12', _1: 'Canaries'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'LC-02', _1: 'Castries'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'LC-03', _1: 'Choiseul'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'LC-05', _1: 'Dennery'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'LC-06', _1: 'Gros Islet'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'LC-07', _1: 'Laborie'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'LC-08', _1: 'Micoud'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'LC-10', _1: 'Soufrière'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'LC-11', _1: 'Vieux Fort'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'LI':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'LI-01', _1: 'Balzers'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'LI-02', _1: 'Eschen'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'LI-03', _1: 'Gamprin'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'LI-04', _1: 'Mauren'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'LI-05', _1: 'Planken'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'LI-06', _1: 'Ruggell'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'LI-07', _1: 'Schaan'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'LI-08', _1: 'Schellenberg'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'LI-09', _1: 'Triesen'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'LI-10', _1: 'Triesenberg'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'LI-11', _1: 'Vaduz'},
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'LK':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'LK-1', _1: 'Western Province'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'LK-2', _1: 'Central Province'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'LK-3', _1: 'Southern Province'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'LK-4', _1: 'Northern Province'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'LK-5', _1: 'Eastern Province'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'LK-6', _1: 'North Western Province'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'LK-7', _1: 'North Central Province'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'LK-8', _1: 'Uva Province'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'LK-9', _1: 'Sabaragamuwa Province'},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'LR':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'LR-BM', _1: 'Bomi'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'LR-BG', _1: 'Bong'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'LR-GP', _1: 'Gbarpolu'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'LR-GB', _1: 'Grand Bassa'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'LR-CM', _1: 'Grand Cape Mount'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'LR-GG', _1: 'Grand Gedeh'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'LR-GK', _1: 'Grand Kru'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'LR-LO', _1: 'Lofa'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'LR-MG', _1: 'Margibi'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'LR-MY', _1: 'Maryland'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'LR-MO', _1: 'Montserrado'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'LR-NI', _1: 'Nimba'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'LR-RI', _1: 'River Cess'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'LR-RG', _1: 'River Gee'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'LR-SI', _1: 'Sinoe'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'LS':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'LS-D', _1: 'Berea'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'LS-B', _1: 'Butha-Buthe'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'LS-C', _1: 'Leribe'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'LS-E', _1: 'Mafeteng'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'LS-A', _1: 'Maseru'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'LS-F', _1: 'Mohale\'s Hoek'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'LS-J', _1: 'Mokhotlong'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'LS-H', _1: 'Qacha\'s Nek'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'LS-G', _1: 'Quthing'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'LS-K', _1: 'Thaba-Tseka'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'LT':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'LT-AL', _1: 'Alytaus Apskritis'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'LT-KU', _1: 'Kauno Apskritis'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'LT-KL', _1: 'Klaipėdos Apskritis'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'LT-MR', _1: 'Marijampolės Apskritis'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'LT-PN', _1: 'Panevėžio Apskritis'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'LT-SA', _1: 'Šiaulių Apskritis'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'LT-TA', _1: 'Tauragės Apskritis'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'LT-TE', _1: 'Telšių Apskritis'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'LT-UT', _1: 'Utenos Apskritis'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'LT-VL', _1: 'Vilniaus Apskritis'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'LU':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'LU-CA', _1: 'Capellen'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'LU-CL', _1: 'Clervaux'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'LU-DI', _1: 'Diekirch'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'LU-EC', _1: 'Echternach'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'LU-ES', _1: 'Esch-sur-Alzette'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'LU-GR', _1: 'Grevenmacher'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'LU-LU', _1: 'Luxembourg'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'LU-ME', _1: 'Mersch'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'LU-RD', _1: 'Redange'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'LU-RM', _1: 'Remich'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'LU-VD', _1: 'Vianden'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'LU-WI', _1: 'Wiltz'},
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'LV':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'LV-001', _1: 'Aglonas novads'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'LV-002', _1: 'Aizkraukles novads'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'LV-003', _1: 'Aizputes novads'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'LV-004', _1: 'Aknīstes novads'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'LV-005', _1: 'Alojas novads'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'LV-006', _1: 'Alsungas novads'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'LV-007', _1: 'Alūksnes novads'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'LV-008', _1: 'Amatas novads'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'LV-009', _1: 'Apes novads'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'LV-010', _1: 'Auces novads'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'LV-011', _1: 'Ādažu novads'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'LV-012', _1: 'Babītes novads'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'LV-013', _1: 'Baldones novads'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'LV-014', _1: 'Baltinavas novads'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'LV-015', _1: 'Balvu novads'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'LV-016', _1: 'Bauskas novads'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'LV-017', _1: 'Beverīnas novads'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'LV-018', _1: 'Brocēnu novads'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'LV-019', _1: 'Burtnieku novads'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'LV-020', _1: 'Carnikavas novads'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'LV-021', _1: 'Cesvaines novads'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'LV-022', _1: 'Cēsu novads'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'LV-023', _1: 'Ciblas novads'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'LV-024', _1: 'Dagdas novads'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'LV-025', _1: 'Daugavpils novads'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'LV-026', _1: 'Dobeles novads'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'LV-027', _1: 'Dundagas novads'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'LV-028', _1: 'Durbes novads'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'LV-029', _1: 'Engures novads'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'LV-030', _1: 'Ērgļu novads'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'LV-031', _1: 'Garkalnes novads'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'LV-032', _1: 'Grobiņas novads'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: 'LV-033', _1: 'Gulbenes novads'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: 'LV-034', _1: 'Iecavas novads'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: 'LV-035', _1: 'Ikšķiles novads'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: 'LV-036', _1: 'Ilūkstes novads'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: 'LV-037', _1: 'Inčukalna novads'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: 'LV-038', _1: 'Jaunjelgavas novads'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: 'LV-039', _1: 'Jaunpiebalgas novads'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: 'LV-040', _1: 'Jaunpils novads'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: 'LV-041', _1: 'Jelgavas novads'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: 'LV-042', _1: 'Jēkabpils novads'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: 'LV-043', _1: 'Kandavas novads'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: 'LV-044', _1: 'Kārsavas novads'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: 'LV-045', _1: 'Kocēnu novads'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: 'LV-046', _1: 'Kokneses novads'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: 'LV-047', _1: 'Krāslavas novads'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: 'LV-048', _1: 'Krimuldas novads'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: 'LV-049', _1: 'Krustpils novads'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: 'LV-050', _1: 'Kuldīgas novads'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: 'LV-051', _1: 'Ķeguma novads'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: 'LV-052', _1: 'Ķekavas novads'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: 'LV-053', _1: 'Lielvārdes novads'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: 'LV-054', _1: 'Limbažu novads'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: 'LV-055', _1: 'Līgatnes novads'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: 'LV-056', _1: 'Līvānu novads'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: 'LV-057', _1: 'Lubānas novads'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: 'LV-058', _1: 'Ludzas novads'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: 'LV-059', _1: 'Madonas novads'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: 'LV-060', _1: 'Mazsalacas novads'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: 'LV-061', _1: 'Mālpils novads'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: 'LV-062', _1: 'Mārupes novads'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: 'LV-063', _1: 'Mērsraga novads'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: 'LV-064', _1: 'Naukšēnu novads'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: 'LV-065', _1: 'Neretas novads'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: 'LV-066', _1: 'Nīcas novads'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: 'LV-067', _1: 'Ogres novads'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: 'LV-068', _1: 'Olaines novads'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: 'LV-069', _1: 'Ozolnieku novads'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: 'LV-070', _1: 'Pārgaujas novads'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: 'LV-071', _1: 'Pāvilostas novads'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: 'LV-072', _1: 'Pļaviņu novads'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: 'LV-073', _1: 'Preiļu novads'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: 'LV-074', _1: 'Priekules novads'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: 'LV-075', _1: 'Priekuļu novads'},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: 'LV-076', _1: 'Raunas novads'},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: 'LV-077', _1: 'Rēzeknes novads'},
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: {ctor: '_Tuple2', _0: 'LV-078', _1: 'Riebiņu novads'},
																																																																																	_1: {
																																																																																		ctor: '::',
																																																																																		_0: {ctor: '_Tuple2', _0: 'LV-079', _1: 'Rojas novads'},
																																																																																		_1: {
																																																																																			ctor: '::',
																																																																																			_0: {ctor: '_Tuple2', _0: 'LV-080', _1: 'Ropažu novads'},
																																																																																			_1: {
																																																																																				ctor: '::',
																																																																																				_0: {ctor: '_Tuple2', _0: 'LV-081', _1: 'Rucavas novads'},
																																																																																				_1: {
																																																																																					ctor: '::',
																																																																																					_0: {ctor: '_Tuple2', _0: 'LV-082', _1: 'Rugāju novads'},
																																																																																					_1: {
																																																																																						ctor: '::',
																																																																																						_0: {ctor: '_Tuple2', _0: 'LV-083', _1: 'Rundāles novads'},
																																																																																						_1: {
																																																																																							ctor: '::',
																																																																																							_0: {ctor: '_Tuple2', _0: 'LV-084', _1: 'Rūjienas novads'},
																																																																																							_1: {
																																																																																								ctor: '::',
																																																																																								_0: {ctor: '_Tuple2', _0: 'LV-085', _1: 'Salas novads'},
																																																																																								_1: {
																																																																																									ctor: '::',
																																																																																									_0: {ctor: '_Tuple2', _0: 'LV-086', _1: 'Salacgrīvas novads'},
																																																																																									_1: {
																																																																																										ctor: '::',
																																																																																										_0: {ctor: '_Tuple2', _0: 'LV-087', _1: 'Salaspils novads'},
																																																																																										_1: {
																																																																																											ctor: '::',
																																																																																											_0: {ctor: '_Tuple2', _0: 'LV-088', _1: 'Saldus novads'},
																																																																																											_1: {
																																																																																												ctor: '::',
																																																																																												_0: {ctor: '_Tuple2', _0: 'LV-089', _1: 'Saulkrastu novads'},
																																																																																												_1: {
																																																																																													ctor: '::',
																																																																																													_0: {ctor: '_Tuple2', _0: 'LV-090', _1: 'Sējas novads'},
																																																																																													_1: {
																																																																																														ctor: '::',
																																																																																														_0: {ctor: '_Tuple2', _0: 'LV-091', _1: 'Siguldas novads'},
																																																																																														_1: {
																																																																																															ctor: '::',
																																																																																															_0: {ctor: '_Tuple2', _0: 'LV-092', _1: 'Skrīveru novads'},
																																																																																															_1: {
																																																																																																ctor: '::',
																																																																																																_0: {ctor: '_Tuple2', _0: 'LV-093', _1: 'Skrundas novads'},
																																																																																																_1: {
																																																																																																	ctor: '::',
																																																																																																	_0: {ctor: '_Tuple2', _0: 'LV-094', _1: 'Smiltenes novads'},
																																																																																																	_1: {
																																																																																																		ctor: '::',
																																																																																																		_0: {ctor: '_Tuple2', _0: 'LV-095', _1: 'Stopiņu novads'},
																																																																																																		_1: {
																																																																																																			ctor: '::',
																																																																																																			_0: {ctor: '_Tuple2', _0: 'LV-096', _1: 'Strenču novads'},
																																																																																																			_1: {
																																																																																																				ctor: '::',
																																																																																																				_0: {ctor: '_Tuple2', _0: 'LV-097', _1: 'Talsu novads'},
																																																																																																				_1: {
																																																																																																					ctor: '::',
																																																																																																					_0: {ctor: '_Tuple2', _0: 'LV-098', _1: 'Tērvetes novads'},
																																																																																																					_1: {
																																																																																																						ctor: '::',
																																																																																																						_0: {ctor: '_Tuple2', _0: 'LV-099', _1: 'Tukuma novads'},
																																																																																																						_1: {
																																																																																																							ctor: '::',
																																																																																																							_0: {ctor: '_Tuple2', _0: 'LV-100', _1: 'Vaiņodes novads'},
																																																																																																							_1: {
																																																																																																								ctor: '::',
																																																																																																								_0: {ctor: '_Tuple2', _0: 'LV-101', _1: 'Valkas novads'},
																																																																																																								_1: {
																																																																																																									ctor: '::',
																																																																																																									_0: {ctor: '_Tuple2', _0: 'LV-102', _1: 'Varakļānu novads'},
																																																																																																									_1: {
																																																																																																										ctor: '::',
																																																																																																										_0: {ctor: '_Tuple2', _0: 'LV-103', _1: 'Vārkavas novads'},
																																																																																																										_1: {
																																																																																																											ctor: '::',
																																																																																																											_0: {ctor: '_Tuple2', _0: 'LV-104', _1: 'Vecpiebalgas novads'},
																																																																																																											_1: {
																																																																																																												ctor: '::',
																																																																																																												_0: {ctor: '_Tuple2', _0: 'LV-105', _1: 'Vecumnieku novads'},
																																																																																																												_1: {
																																																																																																													ctor: '::',
																																																																																																													_0: {ctor: '_Tuple2', _0: 'LV-106', _1: 'Ventspils novads'},
																																																																																																													_1: {
																																																																																																														ctor: '::',
																																																																																																														_0: {ctor: '_Tuple2', _0: 'LV-107', _1: 'Viesītes novads'},
																																																																																																														_1: {
																																																																																																															ctor: '::',
																																																																																																															_0: {ctor: '_Tuple2', _0: 'LV-108', _1: 'Viļakas novads'},
																																																																																																															_1: {
																																																																																																																ctor: '::',
																																																																																																																_0: {ctor: '_Tuple2', _0: 'LV-109', _1: 'Viļānu novads'},
																																																																																																																_1: {
																																																																																																																	ctor: '::',
																																																																																																																	_0: {ctor: '_Tuple2', _0: 'LV-110', _1: 'Zilupes novads'},
																																																																																																																	_1: {
																																																																																																																		ctor: '::',
																																																																																																																		_0: {ctor: '_Tuple2', _0: 'LV-DGV', _1: 'Daugavpils'},
																																																																																																																		_1: {
																																																																																																																			ctor: '::',
																																																																																																																			_0: {ctor: '_Tuple2', _0: 'LV-JEL', _1: 'Jelgava'},
																																																																																																																			_1: {
																																																																																																																				ctor: '::',
																																																																																																																				_0: {ctor: '_Tuple2', _0: 'LV-JKB', _1: 'Jēkabpils'},
																																																																																																																				_1: {
																																																																																																																					ctor: '::',
																																																																																																																					_0: {ctor: '_Tuple2', _0: 'LV-JUR', _1: 'Jūrmala'},
																																																																																																																					_1: {
																																																																																																																						ctor: '::',
																																																																																																																						_0: {ctor: '_Tuple2', _0: 'LV-LPX', _1: 'Liepāja'},
																																																																																																																						_1: {
																																																																																																																							ctor: '::',
																																																																																																																							_0: {ctor: '_Tuple2', _0: 'LV-REZ', _1: 'Rēzekne'},
																																																																																																																							_1: {
																																																																																																																								ctor: '::',
																																																																																																																								_0: {ctor: '_Tuple2', _0: 'LV-RIX', _1: 'Rīga'},
																																																																																																																								_1: {
																																																																																																																									ctor: '::',
																																																																																																																									_0: {ctor: '_Tuple2', _0: 'LV-VMR', _1: 'Valmiera'},
																																																																																																																									_1: {
																																																																																																																										ctor: '::',
																																																																																																																										_0: {ctor: '_Tuple2', _0: 'LV-VEN', _1: 'Ventspils'},
																																																																																																																										_1: {ctor: '[]'}
																																																																																																																									}
																																																																																																																								}
																																																																																																																							}
																																																																																																																						}
																																																																																																																					}
																																																																																																																				}
																																																																																																																			}
																																																																																																																		}
																																																																																																																	}
																																																																																																																}
																																																																																																															}
																																																																																																														}
																																																																																																													}
																																																																																																												}
																																																																																																											}
																																																																																																										}
																																																																																																									}
																																																																																																								}
																																																																																																							}
																																																																																																						}
																																																																																																					}
																																																																																																				}
																																																																																																			}
																																																																																																		}
																																																																																																	}
																																																																																																}
																																																																																															}
																																																																																														}
																																																																																													}
																																																																																												}
																																																																																											}
																																																																																										}
																																																																																									}
																																																																																								}
																																																																																							}
																																																																																						}
																																																																																					}
																																																																																				}
																																																																																			}
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'LY':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'LY-BU', _1: 'Al Buţnān'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'LY-JA', _1: 'Al Jabal al Akhḑar'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'LY-JG', _1: 'Al Jabal al Gharbī'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'LY-JI', _1: 'Al Jafārah'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'LY-JU', _1: 'Al Jufrah'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'LY-KF', _1: 'Al Kufrah'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'LY-MJ', _1: 'Al Marj'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'LY-MB', _1: 'Al Marqab'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'LY-WA', _1: 'Al Wāḩāt'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'LY-NQ', _1: 'An Nuqaţ al Khams'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'LY-ZA', _1: 'Az Zāwiyah'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'LY-BA', _1: 'Banghāzī'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'LY-DR', _1: 'Darnah'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'LY-GT', _1: 'Ghāt'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'LY-MI', _1: 'Mişrātah'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'LY-MQ', _1: 'Murzuq'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'LY-NL', _1: 'Nālūt'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'LY-SB', _1: 'Sabhā'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'LY-SR', _1: 'Surt'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'LY-TB', _1: 'Ţarābulus'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'LY-WD', _1: 'Wādī al Ḩayāt'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'LY-WS', _1: 'Wādī ash Shāţiʾ'},
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'MA':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'MA-09', _1: 'Chaouia-Ouardigha'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'MA-10', _1: 'Doukhala-Abda'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'MA-05', _1: 'Fès-Boulemane'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'MA-02', _1: 'Gharb-Chrarda-Beni Hssen'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'MA-08', _1: 'Grand Casablanca'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'MA-14', _1: 'Guelmim-Es Semara'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'MA-15', _1: 'Laâyoune-Boujdour-Sakia el Hamra'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'MA-04', _1: 'Oriental'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'MA-11', _1: 'Marrakech-Tensift-Al Haouz'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'MA-06', _1: 'Meknès-Tafilalet'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'MA-16', _1: 'Oued ed Dahab-Lagouira'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'MA-07', _1: 'Rabat-Salé-Zemmour-Zaer'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'MA-13', _1: 'Souss-Massa-Drâa'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'MA-12', _1: 'Tadla-Azilal'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'MA-01', _1: 'Tanger-Tétouan'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'MA-03', _1: 'Taza-Al Hoceima-Taounate'},
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'MC':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'MC-FO', _1: 'Fontvieille'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'MC-JE', _1: 'Jardin Exotique'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'MC-CL', _1: 'La Colle'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'MC-CO', _1: 'La Condamine'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'MC-GA', _1: 'La Gare'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'MC-SO', _1: 'La Source'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'MC-LA', _1: 'Larvotto'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'MC-MA', _1: 'Malbousquet'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'MC-MO', _1: 'Monaco-Ville'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'MC-MG', _1: 'Moneghetti'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'MC-MC', _1: 'Monte-Carlo'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'MC-MU', _1: 'Moulins'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'MC-PH', _1: 'Port-Hercule'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'MC-SR', _1: 'Saint-Roman'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'MC-SD', _1: 'Sainte-Dévote'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'MC-SP', _1: 'Spélugues'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'MC-VR', _1: 'Vallon de la Rousse'},
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'MD':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'MD-GA', _1: 'Găgăuzia, Unitatea teritorială autonomă'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'MD-BA', _1: 'Bălți'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'MD-BD', _1: 'Bender'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'MD-CU', _1: 'Chișinău'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'MD-AN', _1: 'Anenii Noi'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'MD-BS', _1: 'Basarabeasca'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'MD-BR', _1: 'Briceni'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'MD-CA', _1: 'Cahul'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'MD-CT', _1: 'Cantemir'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'MD-CL', _1: 'Călărași'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'MD-CS', _1: 'Căușeni'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'MD-CM', _1: 'Cimișlia'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'MD-CR', _1: 'Criuleni'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'MD-DO', _1: 'Dondușeni'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'MD-DR', _1: 'Drochia'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'MD-DU', _1: 'Dubăsari'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'MD-ED', _1: 'Edineț'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'MD-FA', _1: 'Fălești'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'MD-FL', _1: 'Florești'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'MD-GL', _1: 'Glodeni'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'MD-HI', _1: 'Hîncești'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'MD-IA', _1: 'Ialoveni'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'MD-LE', _1: 'Leova'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'MD-NI', _1: 'Nisporeni'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'MD-OC', _1: 'Ocnița'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'MD-OR', _1: 'Orhei'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'MD-RE', _1: 'Rezina'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'MD-RI', _1: 'Rîșcani'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'MD-SI', _1: 'Sîngerei'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'MD-SO', _1: 'Soroca'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'MD-ST', _1: 'Strășeni'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'MD-SD', _1: 'Șoldănești'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: 'MD-SV', _1: 'Ștefan Vodă'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: 'MD-TA', _1: 'Taraclia'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: 'MD-TE', _1: 'Telenești'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: 'MD-UN', _1: 'Ungheni'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: 'MD-SN', _1: 'Stînga Nistrului, unitatea teritorială din'},
																																								_1: {ctor: '[]'}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'ME':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'ME-01', _1: 'Andrijevica'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'ME-02', _1: 'Bar'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'ME-03', _1: 'Berane'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'ME-04', _1: 'Bijelo Polje'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'ME-05', _1: 'Budva'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'ME-06', _1: 'Cetinje'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'ME-07', _1: 'Danilovgrad'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'ME-08', _1: 'Herceg-Novi'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'ME-09', _1: 'Kolašin'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'ME-10', _1: 'Kotor'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'ME-11', _1: 'Mojkovac'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'ME-12', _1: 'Nikšić'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'ME-13', _1: 'Plav'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'ME-14', _1: 'Pljevlja'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'ME-15', _1: 'Plužine'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'ME-16', _1: 'Podgorica'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'ME-17', _1: 'Rožaje'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'ME-18', _1: 'Šavnik'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'ME-19', _1: 'Tivat'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'ME-20', _1: 'Ulcinj'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'ME-21', _1: 'Žabljak'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'ME-22', _1: 'Gusinje'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'ME-23', _1: 'Petnjica'},
																										_1: {ctor: '[]'}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'MF':
			return {ctor: '[]'};
		case 'MG':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'MG-T', _1: 'Antananarivo'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'MG-D', _1: 'Antsiranana'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'MG-F', _1: 'Fianarantsoa'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'MG-M', _1: 'Mahajanga'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'MG-A', _1: 'Toamasina'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'MG-U', _1: 'Toliara'},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			};
		case 'MH':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'MH-L', _1: 'Ralik chain'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'MH-T', _1: 'Ratak chain'},
					_1: {ctor: '[]'}
				}
			};
		case 'MK':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'MK-02', _1: 'Aračinovo'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'MK-03', _1: 'Berovo'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'MK-04', _1: 'Bitola'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'MK-05', _1: 'Bogdanci'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'MK-06', _1: 'Bogovinje'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'MK-07', _1: 'Bosilovo'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'MK-08', _1: 'Brvenica'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'MK-78', _1: 'Centar Župa'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'MK-80', _1: 'Čaška'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'MK-81', _1: 'Češinovo-Obleševo'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'MK-82', _1: 'Čučer Sandevo'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'MK-21', _1: 'Debar'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'MK-22', _1: 'Debarca'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'MK-23', _1: 'Delčevo'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'MK-25', _1: 'Demir Hisar'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'MK-24', _1: 'Demir Kapija'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'MK-26', _1: 'Dojran'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'MK-27', _1: 'Dolneni'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'MK-18', _1: 'Gevgelija'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'MK-19', _1: 'Gostivar'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'MK-20', _1: 'Gradsko'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'MK-34', _1: 'Ilinden'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'MK-35', _1: 'Jegunovce'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'MK-37', _1: 'Karbinci'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'MK-36', _1: 'Kavadarci'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'MK-40', _1: 'Kičevo'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'MK-42', _1: 'Kočani'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'MK-41', _1: 'Konče'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'MK-43', _1: 'Kratovo'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'MK-44', _1: 'Kriva Palanka'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'MK-45', _1: 'Krivogaštani'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'MK-46', _1: 'Kruševo'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: 'MK-47', _1: 'Kumanovo'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: 'MK-48', _1: 'Lipkovo'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: 'MK-49', _1: 'Lozovo'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: 'MK-51', _1: 'Makedonska Kamenica'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: 'MK-52', _1: 'Makedonski Brod'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: 'MK-50', _1: 'Mavrovo i Rostuša'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: 'MK-53', _1: 'Mogila'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: 'MK-54', _1: 'Negotino'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: 'MK-55', _1: 'Novaci'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: 'MK-56', _1: 'Novo Selo'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: 'MK-58', _1: 'Ohrid'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: 'MK-60', _1: 'Pehčevo'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: 'MK-59', _1: 'Petrovec'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: 'MK-61', _1: 'Plasnica'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: 'MK-62', _1: 'Prilep'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: 'MK-63', _1: 'Probištip'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: 'MK-64', _1: 'Radoviš'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: 'MK-65', _1: 'Rankovce'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: 'MK-66', _1: 'Resen'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: 'MK-67', _1: 'Rosoman'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: 'MK-85', _1: 'Skopje'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: 'MK-70', _1: 'Sopište'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: 'MK-71', _1: 'Staro Nagoričane'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: 'MK-72', _1: 'Struga'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: 'MK-73', _1: 'Strumica'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: 'MK-74', _1: 'Studeničani'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: 'MK-69', _1: 'Sveti Nikole'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: 'MK-83', _1: 'Štip'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: 'MK-75', _1: 'Tearce'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: 'MK-76', _1: 'Tetovo'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: 'MK-10', _1: 'Valandovo'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: 'MK-11', _1: 'Vasilevo'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: 'MK-13', _1: 'Veles'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: 'MK-12', _1: 'Vevčani'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: 'MK-14', _1: 'Vinica'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: 'MK-16', _1: 'Vrapčište'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: 'MK-32', _1: 'Zelenikovo'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: 'MK-33', _1: 'Zrnovci'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: 'MK-30', _1: 'Želino'},
																																																																										_1: {ctor: '[]'}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'ML':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'ML-BKO', _1: 'Bamako'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'ML-7', _1: 'Gao'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'ML-1', _1: 'Kayes'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'ML-8', _1: 'Kidal'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'ML-2', _1: 'Koulikoro'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'ML-5', _1: 'Mopti'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'ML-4', _1: 'Ségou'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'ML-3', _1: 'Sikasso'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'ML-6', _1: 'Tombouctou'},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'MM':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'MM-07', _1: 'Ayeyawady'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'MM-02', _1: 'Bago'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'MM-03', _1: 'Magway'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'MM-04', _1: 'Mandalay'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'MM-01', _1: 'Sagaing'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'MM-05', _1: 'Taninthayi'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'MM-06', _1: 'Yangon'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'MM-14', _1: 'Chin'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'MM-11', _1: 'Kachin'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'MM-12', _1: 'Kayah'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'MM-13', _1: 'Kayin'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'MM-15', _1: 'Mon'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'MM-16', _1: 'Rakhine'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'MM-17', _1: 'Shan'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'MM-18', _1: 'Nay Pyi Taw'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'MN':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'MN-001 !', _1: 'Ulaanbaatar'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'MN-073', _1: 'Arhangay'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'MN-069', _1: 'Bayanhongor'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'MN-071', _1: 'Bayan-Ölgiy'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'MN-067', _1: 'Bulgan'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'MN-037', _1: 'Darhan uul'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'MN-061', _1: 'Dornod'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'MN-063', _1: 'Dornogovĭ'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'MN-059', _1: 'Dundgovĭ'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'MN-057', _1: 'Dzavhan'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'MN-065', _1: 'Govĭ-Altay'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'MN-064', _1: 'Govĭ-Sümber'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'MN-039', _1: 'Hentiy'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'MN-043', _1: 'Hovd'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'MN-041', _1: 'Hövsgöl'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'MN-053', _1: 'Ömnögovĭ'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'MN-035', _1: 'Orhon'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'MN-055', _1: 'Övörhangay'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'MN-049', _1: 'Selenge'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'MN-051', _1: 'Sühbaatar'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'MN-047', _1: 'Töv'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'MN-046', _1: 'Uvs'},
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'MO':
			return {ctor: '[]'};
		case 'MP':
			return {ctor: '[]'};
		case 'MQ':
			return {ctor: '[]'};
		case 'MR':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'MR-07', _1: 'Adrar'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'MR-03', _1: 'Assaba'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'MR-05', _1: 'Brakna'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'MR-08', _1: 'Dakhlet Nouâdhibou'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'MR-04', _1: 'Gorgol'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'MR-10', _1: 'Guidimaka'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'MR-01', _1: 'Hodh ech Chargui'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'MR-02', _1: 'Hodh el Gharbi'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'MR-12', _1: 'Inchiri'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'MR-14', _1: 'Nouakchott Nord'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'MR-13', _1: 'Nouakchott Ouest'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'MR-15', _1: 'Nouakchott Sud'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'MR-09', _1: 'Tagant'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'MR-11', _1: 'Tiris Zemmour'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'MR-06', _1: 'Trarza'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'MS':
			return {ctor: '[]'};
		case 'MT':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'MT-01', _1: 'Attard'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'MT-02', _1: 'Balzan'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'MT-03', _1: 'Birgu'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'MT-04', _1: 'Birkirkara'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'MT-05', _1: 'Birżebbuġa'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'MT-06', _1: 'Bormla'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'MT-07', _1: 'Dingli'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'MT-08', _1: 'Fgura'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'MT-09', _1: 'Floriana'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'MT-10', _1: 'Fontana'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'MT-11', _1: 'Gudja'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'MT-12', _1: 'Gżira'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'MT-13', _1: 'Għajnsielem'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'MT-14', _1: 'Għarb'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'MT-15', _1: 'Għargħur'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'MT-16', _1: 'Għasri'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'MT-17', _1: 'Għaxaq'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'MT-18', _1: 'Ħamrun'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'MT-19', _1: 'Iklin'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'MT-20', _1: 'Isla'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'MT-21', _1: 'Kalkara'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'MT-22', _1: 'Kerċem'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'MT-23', _1: 'Kirkop'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'MT-24', _1: 'Lija'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'MT-25', _1: 'Luqa'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'MT-26', _1: 'Marsa'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'MT-27', _1: 'Marsaskala'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'MT-28', _1: 'Marsaxlokk'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'MT-29', _1: 'Mdina'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'MT-30', _1: 'Mellieħa'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'MT-31', _1: 'Mġarr'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'MT-32', _1: 'Mosta'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: 'MT-33', _1: 'Mqabba'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: 'MT-34', _1: 'Msida'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: 'MT-35', _1: 'Mtarfa'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: 'MT-36', _1: 'Munxar'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: 'MT-37', _1: 'Nadur'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: 'MT-38', _1: 'Naxxar'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: 'MT-39', _1: 'Paola'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: 'MT-40', _1: 'Pembroke'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: 'MT-41', _1: 'Pietà'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: 'MT-42', _1: 'Qala'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: 'MT-43', _1: 'Qormi'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: 'MT-44', _1: 'Qrendi'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: 'MT-45', _1: 'mt'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: 'MT-46', _1: 'Rabat Malta'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: 'MT-47', _1: 'Safi'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: 'MT-48', _1: 'mt'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: 'MT-49', _1: 'mt'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: 'MT-50', _1: 'mt'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: 'MT-51', _1: 'mt'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: 'MT-52', _1: 'Sannat'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: 'MT-53', _1: 'mt'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: 'MT-54', _1: 'Santa Venera'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: 'MT-55', _1: 'Siġġiewi'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: 'MT-56', _1: 'Sliema'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: 'MT-57', _1: 'Swieqi'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: 'MT-58', _1: 'Ta\' Xbiex'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: 'MT-59', _1: 'Tarxien'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: 'MT-60', _1: 'Valletta'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: 'MT-61', _1: 'Xagħra'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: 'MT-62', _1: 'Xewkija'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: 'MT-63', _1: 'Xgħajra'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: 'MT-64', _1: 'Żabbar'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: 'MT-65', _1: 'mt'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: 'MT-66', _1: 'Żebbuġ Malta'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: 'MT-67', _1: 'Żejtun'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: 'MT-68', _1: 'Żurrieq'},
																																																																							_1: {ctor: '[]'}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'MU':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'MU-BR', _1: 'Beau Bassin-Rose Hill'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'MU-CU', _1: 'Curepipe'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'MU-PU', _1: 'Port Louis'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'MU-QB', _1: 'Quatre Bornes'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'MU-VP', _1: 'Vacoas-Phoenix'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'MU-AG', _1: 'Agalega Islands'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'MU-CC', _1: 'Cargados Carajos Shoals'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'MU-RO', _1: 'Rodrigues Island'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'MU-BL', _1: 'Black River'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'MU-FL', _1: 'Flacq'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'MU-GP', _1: 'Grand Port'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'MU-MO', _1: 'Moka'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'MU-PA', _1: 'Pamplemousses'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'MU-PW', _1: 'Plaines Wilhems'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'MU-PL', _1: 'Port Louis'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'MU-RR', _1: 'Rivière du Rempart'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'MU-SA', _1: 'Savanne'},
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'MV':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'MV-MLE', _1: 'Male'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'MV-CE', _1: 'Central'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'MV-NO', _1: 'North'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'MV-NC', _1: 'North Central'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'MV-SU', _1: 'South'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'MV-SC', _1: 'South Central'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'MV-UN', _1: 'Upper North'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'MV-US', _1: 'Upper South'},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'MW':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'MW-C', _1: 'Central Region'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'MW-N', _1: 'Northern Region'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'MW-S', _1: 'Southern Region'},
						_1: {ctor: '[]'}
					}
				}
			};
		case 'MX':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'MX-CMX', _1: 'Mexican Federal District'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'MX-AGU', _1: 'Aguascalientes'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'MX-BCN', _1: 'Baja California'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'MX-BCS', _1: 'Baja California Sur'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'MX-CAM', _1: 'Campeche'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'MX-COA', _1: 'Coahuila'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'MX-COL', _1: 'Colima'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'MX-CHP', _1: 'Chiapas'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'MX-CHH', _1: 'Chihuahua'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'MX-DUR', _1: 'Durango'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'MX-GUA', _1: 'Guanajuato'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'MX-GRO', _1: 'Guerrero'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'MX-HID', _1: 'Hidalgo'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'MX-JAL', _1: 'Jalisco'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'MX-MEX', _1: 'México'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'MX-MIC', _1: 'Michoacán'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'MX-MOR', _1: 'Morelos'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'MX-NAY', _1: 'Nayarit'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'MX-NLE', _1: 'Nuevo León'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'MX-OAX', _1: 'Oaxaca'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'MX-PUE', _1: 'Puebla'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'MX-QUE', _1: 'Querétaro'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'MX-ROO', _1: 'Quintana Roo'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'MX-SLP', _1: 'San Luis Potosí'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'MX-SIN', _1: 'Sinaloa'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'MX-SON', _1: 'Sonora'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'MX-TAB', _1: 'Tabasco'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'MX-TAM', _1: 'Tamaulipas'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'MX-TLA', _1: 'Tlaxcala'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'MX-VER', _1: 'Veracruz'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'MX-YUC', _1: 'Yucatán'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'MX-ZAC', _1: 'Zacatecas'},
																																			_1: {ctor: '[]'}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'MY':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'MY-14', _1: 'Wilayah Persekutuan Kuala Lumpur'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'MY-15', _1: 'Wilayah Persekutuan Labuan'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'MY-16', _1: 'Wilayah Persekutuan Putrajaya'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'MY-01', _1: 'Johor'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'MY-02', _1: 'Kedah'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'MY-03', _1: 'Kelantan'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'MY-04', _1: 'Melaka'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'MY-05', _1: 'Negeri Sembilan'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'MY-06', _1: 'Pahang'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'MY-08', _1: 'Perak'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'MY-09', _1: 'Perlis'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'MY-07', _1: 'Pulau Pinang'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'MY-12', _1: 'Sabah'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'MY-13', _1: 'Sarawak'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'MY-10', _1: 'Selangor'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'MY-11', _1: 'Terengganu'},
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'MZ':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'MZ-MPM', _1: 'Maputo'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'MZ-P', _1: 'Cabo Delgado'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'MZ-G', _1: 'Gaza'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'MZ-I', _1: 'Inhambane'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'MZ-B', _1: 'Manica'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'MZ-L', _1: 'Maputo'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'MZ-N', _1: 'Nampula'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'MZ-A', _1: 'Niassa'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'MZ-S', _1: 'Sofala'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'MZ-T', _1: 'Tete'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'MZ-Q', _1: 'Zambézia'},
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'NA':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'NA-ER', _1: 'Erongo'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'NA-HA', _1: 'Hardap'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'NA-KA', _1: 'Karas'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'NA-KE', _1: 'Kavango East'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'NA-KW', _1: 'Kavango West'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'NA-KH', _1: 'Khomas'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'NA-KU', _1: 'Kunene'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'NA-OW', _1: 'Ohangwena'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'NA-OH', _1: 'Omaheke'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'NA-OS', _1: 'Omusati'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'NA-ON', _1: 'Oshana'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'NA-OT', _1: 'Oshikoto'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'NA-OD', _1: 'Otjozondjupa'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'NA-CA', _1: 'Zambezi'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'NC':
			return {ctor: '[]'};
		case 'NE':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'NE-8', _1: 'Niamey'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'NE-1', _1: 'Agadez'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'NE-2', _1: 'Diffa'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'NE-3', _1: 'Dosso'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'NE-4', _1: 'Maradi'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'NE-5', _1: 'Tahoua'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'NE-6', _1: 'Tillabéri'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'NE-7', _1: 'Zinder'},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'NF':
			return {ctor: '[]'};
		case 'NG':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'NG-FC', _1: 'Abuja Federal Capital Territory'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'NG-AB', _1: 'Abia'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'NG-AD', _1: 'Adamawa'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'NG-AK', _1: 'Akwa Ibom'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'NG-AN', _1: 'Anambra'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'NG-BA', _1: 'Bauchi'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'NG-BY', _1: 'Bayelsa'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'NG-BE', _1: 'Benue'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'NG-BO', _1: 'Borno'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'NG-CR', _1: 'Cross River'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'NG-DE', _1: 'Delta'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'NG-EB', _1: 'Ebonyi'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'NG-ED', _1: 'Edo'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'NG-EK', _1: 'Ekiti'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'NG-EN', _1: 'Enugu'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'NG-GO', _1: 'Gombe'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'NG-IM', _1: 'Imo'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'NG-JI', _1: 'Jigawa'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'NG-KD', _1: 'Kaduna'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'NG-KN', _1: 'Kano'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'NG-KT', _1: 'Katsina'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'NG-KE', _1: 'Kebbi'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'NG-KO', _1: 'Kogi'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'NG-KW', _1: 'Kwara'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'NG-LA', _1: 'Lagos'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'NG-NA', _1: 'Nasarawa'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'NG-NI', _1: 'Niger'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'NG-OG', _1: 'Ogun'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'NG-ON', _1: 'Ondo'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'NG-OS', _1: 'Osun'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'NG-OY', _1: 'Oyo'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'NG-PL', _1: 'Plateau'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: 'NG-RI', _1: 'Rivers'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: 'NG-SO', _1: 'Sokoto'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: 'NG-TA', _1: 'Taraba'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: 'NG-YO', _1: 'Yobe'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: 'NG-ZA', _1: 'Zamfara'},
																																								_1: {ctor: '[]'}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'NI':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'NI-BO', _1: 'Boaco'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'NI-CA', _1: 'Carazo'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'NI-CI', _1: 'Chinandega'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'NI-CO', _1: 'Chontales'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'NI-ES', _1: 'Estelí'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'NI-GR', _1: 'Granada'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'NI-JI', _1: 'Jinotega'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'NI-LE', _1: 'León'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'NI-MD', _1: 'Madriz'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'NI-MN', _1: 'Managua'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'NI-MS', _1: 'Masaya'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'NI-MT', _1: 'Matagalpa'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'NI-NS', _1: 'Nueva Segovia'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'NI-SJ', _1: 'Río San Juan'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'NI-RI', _1: 'Rivas'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'NI-AN', _1: 'Atlántico Norte'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'NI-AS', _1: 'Atlántico Sur'},
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'NL':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'NL-DR', _1: 'Drenthe'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'NL-FL', _1: 'Flevoland'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'NL-FR', _1: 'Fryslân'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'NL-GE', _1: 'Gelderland'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'NL-GR', _1: 'Groningen'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'NL-LI', _1: 'Limburg'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'NL-NB', _1: 'Noord-Brabant'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'NL-NH', _1: 'Noord-Holland'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'NL-OV', _1: 'Overijssel'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'NL-UT', _1: 'Utrecht'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'NL-ZE', _1: 'Zeeland'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'NL-ZH', _1: 'Zuid-Holland'},
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'NO':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'NO-02', _1: 'Akershus'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'NO-09', _1: 'Aust-Agder'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'NO-06', _1: 'Buskerud'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'NO-20', _1: 'Finnmark'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'NO-04', _1: 'Hedmark'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'NO-12', _1: 'Hordaland'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'NO-15', _1: 'Møre og Romsdal'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'NO-18', _1: 'Nordland'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'NO-17', _1: 'Nord-Trøndelag'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'NO-05', _1: 'Oppland'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'NO-03', _1: 'Oslo'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'NO-11', _1: 'Rogaland'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'NO-14', _1: 'Sogn og Fjordane'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'NO-16', _1: 'Sør-Trøndelag'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'NO-08', _1: 'Telemark'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'NO-19', _1: 'Troms'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'NO-10', _1: 'Vest-Agder'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'NO-07', _1: 'Vestfold'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'NO-01', _1: 'Østfold'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'NO-22', _1: 'Jan Mayen'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'NO-21', _1: 'Svalbard'},
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'NP':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'NP-1', _1: 'Madhyamanchal'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'NP-2', _1: 'Madhya Pashchimanchal'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'NP-3', _1: 'Pashchimanchal'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'NP-4', _1: 'Purwanchal'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'NP-5', _1: 'Sudur Pashchimanchal'},
								_1: {ctor: '[]'}
							}
						}
					}
				}
			};
		case 'NR':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'NR-01', _1: 'Aiwo'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'NR-02', _1: 'Anabar'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'NR-03', _1: 'Anetan'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'NR-04', _1: 'Anibare'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'NR-05', _1: 'Baiti'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'NR-06', _1: 'Boe'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'NR-07', _1: 'Buada'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'NR-08', _1: 'Denigomodu'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'NR-09', _1: 'Ewa'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'NR-10', _1: 'Ijuw'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'NR-11', _1: 'Meneng'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'NR-12', _1: 'Nibok'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'NR-13', _1: 'Uaboe'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'NR-14', _1: 'Yaren'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'NU':
			return {ctor: '[]'};
		case 'NZ':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'NZ-AUK', _1: 'Auckland'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'NZ-BOP', _1: 'Bay of Plenty'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'NZ-CAN', _1: 'Canterbury'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'NZ-GIS', _1: 'Gisborne'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'NZ-HKB', _1: 'Hawke\'s Bay'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'NZ-MBH', _1: 'Marlborough'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'NZ-MWT', _1: 'Manawatu-Wanganui'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'NZ-NSN', _1: 'Nelson'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'NZ-NTL', _1: 'Northland'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'NZ-OTA', _1: 'Otago'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'NZ-STL', _1: 'Southland'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'NZ-TAS', _1: 'Tasman'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'NZ-TKI', _1: 'Taranaki'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'NZ-WKO', _1: 'Waikato'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'NZ-WGN', _1: 'Wellington'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'NZ-WTC', _1: 'West Coast'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'NZ-CIT', _1: 'Chatham Islands Territory'},
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'OM':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'OM-DA', _1: 'Ad Dākhilīyah'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'OM-BS', _1: 'Shamāl al Bāţinah'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'OM-BJ', _1: 'Janūb al Bāţinah'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'OM-WU', _1: 'Al Wusţá'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'OM-SS', _1: 'Shamāl ash Sharqīyah'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'OM-SJ', _1: 'Janūb ash Sharqīyah'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'OM-ZA', _1: 'Az̧ Z̧āhirah'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'OM-BU', _1: 'Al Buraymī'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'OM-MA', _1: 'Masqaţ'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'OM-MU', _1: 'Musandam'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'OM-ZU', _1: 'Z̧ufār'},
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'PA':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'PA-1', _1: 'Bocas del Toro'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'PA-4', _1: 'Chiriquí'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'PA-2', _1: 'Coclé'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'PA-3', _1: 'Colón'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'PA-5', _1: 'Darién'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'PA-6', _1: 'Herrera'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'PA-7', _1: 'Los Santos'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'PA-8', _1: 'Panamá'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'PA-9', _1: 'Veraguas'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'PA-10', _1: 'Panamá Oeste'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'PA-EM', _1: 'Emberá'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'PA-KY', _1: 'Kuna Yala'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'PA-NB', _1: 'Ngöbe-Buglé'},
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'PE':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'PE-LMA', _1: 'Municipalidad Metropolitana de Lima'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'PE-AMA', _1: 'Amazonas'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'PE-ANC', _1: 'Ancash'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'PE-APU', _1: 'Apurímac'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'PE-ARE', _1: 'Arequipa'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'PE-AYA', _1: 'Ayacucho'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'PE-CAJ', _1: 'Cajamarca'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'PE-CUS', _1: 'Cusco'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'PE-CAL', _1: 'El Callao'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'PE-HUV', _1: 'Huancavelica'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'PE-HUC', _1: 'Huánuco'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'PE-ICA', _1: 'Ica'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'PE-JUN', _1: 'Junín'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'PE-LAL', _1: 'La Libertad'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'PE-LAM', _1: 'Lambayeque'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'PE-LIM', _1: 'Lima'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'PE-LOR', _1: 'Loreto'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'PE-MDD', _1: 'Madre de Dios'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'PE-MOQ', _1: 'Moquegua'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'PE-PAS', _1: 'Pasco'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'PE-PIU', _1: 'Piura'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'PE-PUN', _1: 'Puno'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'PE-SAM', _1: 'San Martín'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'PE-TAC', _1: 'Tacna'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'PE-TUM', _1: 'Tumbes'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'PE-UCA', _1: 'Ucayali'},
																													_1: {ctor: '[]'}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'PF':
			return {ctor: '[]'};
		case 'PG':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'PG-NCD', _1: 'National Capital District'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'PG-CPM', _1: 'Central'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'PG-CPK', _1: 'Chimbu'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'PG-EHG', _1: 'Eastern Highlands'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'PG-EBR', _1: 'East New Britain'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'PG-ESW', _1: 'East Sepik'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'PG-EPW', _1: 'Enga'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'PG-GPK', _1: 'Gulf'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'PG-HLA', _1: 'Hela'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'PG-JWK', _1: 'Jiwaka'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'PG-MPM', _1: 'Madang'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'PG-MRL', _1: 'Manus'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'PG-MBA', _1: 'Milne Bay'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'PG-MPL', _1: 'Morobe'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'PG-NIK', _1: 'New Ireland'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'PG-NPP', _1: 'Northern'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'PG-SAN', _1: 'West Sepik'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'PG-SHM', _1: 'Southern Highlands'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'PG-WPD', _1: 'Western'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'PG-WHM', _1: 'Western Highlands'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'PG-WBK', _1: 'West New Britain'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'PG-NSB', _1: 'Bougainville'},
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'PH':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'PH-14', _1: 'Autonomous Region in Muslim Mindanao'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'PH-05', _1: 'Bicol'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'PH-02', _1: 'Cagayan Valley'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'PH-40', _1: 'Calabarzon'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'PH-13', _1: 'Caraga'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'PH-03', _1: 'Central Luzon'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'PH-07', _1: 'Central Visayas'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'PH-15', _1: 'Cordillera Administrative Region'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'PH-11', _1: 'Davao'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'PH-08', _1: 'Eastern Visayas'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'PH-01', _1: 'Ilocos'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'PH-41', _1: 'Mimaropa'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'PH-00', _1: 'National Capital Region'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'PH-10', _1: 'Northern Mindanao'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'PH-12', _1: 'Soccsksargen'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'PH-06', _1: 'Western Visayas'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'PH-09', _1: 'Zamboanga Peninsula'},
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'PK':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'PK-IS', _1: 'Islamabad'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'PK-BA', _1: 'Balochistan'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'PK-KP', _1: 'Khyber Pakhtunkhwa'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'PK-PB', _1: 'Punjab'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'PK-SD', _1: 'Sindh'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'PK-TA', _1: 'Federally Administered Tribal Areas'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'PK-JK', _1: 'Azad Kashmir'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'PK-GB', _1: 'Gilgit-Baltistan'},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'PL':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'PL-DS', _1: 'Dolnośląskie'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'PL-KP', _1: 'Kujawsko-pomorskie'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'PL-LU', _1: 'Lubelskie'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'PL-LB', _1: 'Lubuskie'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'PL-LD', _1: 'Łódzkie'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'PL-MA', _1: 'Małopolskie'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'PL-MZ', _1: 'Mazowieckie'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'PL-OP', _1: 'Opolskie'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'PL-PK', _1: 'Podkarpackie'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'PL-PD', _1: 'Podlaskie'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'PL-PM', _1: 'Pomorskie'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'PL-SL', _1: 'Śląskie'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'PL-SK', _1: 'Świętokrzyskie'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'PL-WN', _1: 'Warmińsko-mazurskie'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'PL-WP', _1: 'Wielkopolskie'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'PL-ZP', _1: 'Zachodniopomorskie'},
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'PM':
			return {ctor: '[]'};
		case 'PN':
			return {ctor: '[]'};
		case 'PR':
			return {ctor: '[]'};
		case 'PS':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'PS-GZZ', _1: 'Gaza Strip'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'PS-WBK', _1: 'West Bank'},
					_1: {ctor: '[]'}
				}
			};
		case 'PT':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'PT-01', _1: 'Aveiro'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'PT-02', _1: 'Beja'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'PT-03', _1: 'Braga'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'PT-04', _1: 'Bragança'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'PT-05', _1: 'Castelo Branco'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'PT-06', _1: 'Coimbra'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'PT-07', _1: 'Évora'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'PT-08', _1: 'Faro'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'PT-09', _1: 'Guarda'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'PT-10', _1: 'Leiria'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'PT-11', _1: 'Lisboa'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'PT-12', _1: 'Portalegre'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'PT-13', _1: 'Porto'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'PT-14', _1: 'Santarém'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'PT-15', _1: 'Setúbal'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'PT-16', _1: 'Viana do Castelo'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'PT-17', _1: 'Vila Real'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'PT-18', _1: 'Viseu'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'PT-20', _1: 'Região Autónoma dos Açores'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'PT-30', _1: 'Região Autónoma da Madeira'},
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'PW':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'PW-002', _1: 'Aimeliik'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'PW-004', _1: 'Airai'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'PW-010', _1: 'Angaur'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'PW-050', _1: 'Hatobohei'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'PW-100', _1: 'Kayangel'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'PW-150', _1: 'Koror'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'PW-212', _1: 'Melekeok'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'PW-214', _1: 'Ngaraard'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'PW-218', _1: 'Ngarchelong'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'PW-222', _1: 'Ngardmau'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'PW-224', _1: 'Ngatpang'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'PW-226', _1: 'Ngchesar'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'PW-227', _1: 'Ngeremlengui'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'PW-228', _1: 'Ngiwal'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'PW-350', _1: 'Peleliu'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'PW-370', _1: 'Sonsorol'},
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'PY':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'PY-ASU', _1: 'Asunción'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'PY-16', _1: 'Alto Paraguay'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'PY-10', _1: 'Alto Paraná'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'PY-13', _1: 'Amambay'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'PY-19', _1: 'Boquerón'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'PY-05 !', _1: 'Caaguazú'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'PY-06 !', _1: 'Caazapá'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'PY-14', _1: 'Canindeyú'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'PY-11', _1: 'Central'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'PY-01 !', _1: 'Concepción'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'PY-03 !', _1: 'Cordillera'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'PY-04 !', _1: 'Guairá'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'PY-07 !', _1: 'Itapúa'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'PY-08 !', _1: 'Misiones'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'PY-12', _1: 'Ñeembucú'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'PY-09 !', _1: 'Paraguarí'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'PY-15', _1: 'Presidente Hayes'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'PY-02 !', _1: 'San Pedro'},
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'QA':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'QA-DA', _1: 'Ad Dawḩah'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'QA-KH', _1: 'Al Khawr wa adh Dhakhīrah'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'QA-WA', _1: 'Al Wakrah'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'QA-RA', _1: 'Ar Rayyān'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'QA-MS', _1: 'Ash Shamāl'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'QA-ZA', _1: 'Az̧ Za̧`āyin'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'QA-US', _1: 'Umm Şalāl'},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			};
		case 'QO':
			return {ctor: '[]'};
		case 'RE':
			return {ctor: '[]'};
		case 'RO':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'RO-AB', _1: 'Alba'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'RO-AR', _1: 'Arad'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'RO-AG', _1: 'Argeș'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'RO-BC', _1: 'Bacău'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'RO-BH', _1: 'Bihor'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'RO-BN', _1: 'Bistrița-Năsăud'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'RO-BT', _1: 'Botoșani'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'RO-BV', _1: 'Brașov'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'RO-BR', _1: 'Brăila'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'RO-BZ', _1: 'Buzău'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'RO-CS', _1: 'Caraș-Severin'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'RO-CL', _1: 'Călărași'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'RO-CJ', _1: 'Cluj'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'RO-CT', _1: 'Constanța'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'RO-CV', _1: 'Covasna'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'RO-DB', _1: 'Dâmbovița'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'RO-DJ', _1: 'Dolj'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'RO-GL', _1: 'Galați'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'RO-GR', _1: 'Giurgiu'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'RO-GJ', _1: 'Gorj'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'RO-HR', _1: 'Harghita'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'RO-HD', _1: 'Hunedoara'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'RO-IL', _1: 'Ialomița'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'RO-IS', _1: 'Iași'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'RO-IF', _1: 'Ilfov'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'RO-MM', _1: 'Maramureș'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'RO-MH', _1: 'Mehedinți'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'RO-MS', _1: 'Mureș'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'RO-NT', _1: 'Neamț'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'RO-OT', _1: 'Olt'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'RO-PH', _1: 'Prahova'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'RO-SM', _1: 'Satu Mare'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: 'RO-SJ', _1: 'Sălaj'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: 'RO-SB', _1: 'Sibiu'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: 'RO-SV', _1: 'Suceava'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: 'RO-TR', _1: 'Teleorman'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: 'RO-TM', _1: 'Timiș'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: 'RO-TL', _1: 'Tulcea'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: 'RO-VS', _1: 'Vaslui'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: 'RO-VL', _1: 'Vâlcea'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: 'RO-VN', _1: 'Vrancea'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: 'RO-B', _1: 'București'},
																																													_1: {ctor: '[]'}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'RS':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'RS-KM', _1: 'Kosovo-Metohija'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'RS-VO', _1: 'Vojvodina'},
					_1: {ctor: '[]'}
				}
			};
		case 'RU':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'RU-AD', _1: 'Adygeya, Respublika'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'RU-AL', _1: 'Altay, Respublika'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'RU-BA', _1: 'Bashkortostan, Respublika'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'RU-BU', _1: 'Buryatiya, Respublika'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'RU-CE', _1: 'Chechenskaya Respublika'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'RU-CU', _1: 'Chuvashskaya Respublika'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'RU-DA', _1: 'Dagestan, Respublika'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'RU-IN', _1: 'Ingushetiya, Respublika'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'RU-KB', _1: 'Kabardino-Balkarskaya Respublika'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'RU-KL', _1: 'Kalmykiya, Respublika'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'RU-KC', _1: 'Karachayevo-Cherkesskaya Respublika'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'RU-KR', _1: 'Kareliya, Respublika'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'RU-KK', _1: 'Khakasiya, Respublika'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'RU-KO', _1: 'Komi, Respublika'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'RU-ME', _1: 'Mariy El, Respublika'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'RU-MO', _1: 'Mordoviya, Respublika'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'RU-SA', _1: 'Sakha, Respublika'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'RU-SE', _1: 'Severnaya Osetiya-Alaniya, Respublika'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'RU-TA', _1: 'Tatarstan, Respublika'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'RU-TY', _1: 'Tyva, Respublika'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'RU-UD', _1: 'Udmurtskaya Respublika'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'RU-ALT', _1: 'Altayskiy kray'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'RU-KAM', _1: 'Kamchatskiy kray'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'RU-KHA', _1: 'Khabarovskiy kray'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'RU-KDA', _1: 'Krasnodarskiy kray'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'RU-KYA', _1: 'Krasnoyarskiy kray'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'RU-PER', _1: 'Permskiy kray'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'RU-PRI', _1: 'Primorskiy kray'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'RU-STA', _1: 'Stavropol\'skiy kray'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'RU-ZAB', _1: 'Zabaykal\'skiy kray'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'RU-AMU', _1: 'Amurskaya oblast\''},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'RU-ARK', _1: 'Arkhangel\'skaya oblast\''},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: 'RU-AST', _1: 'Astrakhanskaya oblast\''},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: 'RU-BEL', _1: 'Belgorodskaya oblast\''},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: 'RU-BRY', _1: 'Bryanskaya oblast\''},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: 'RU-CHE', _1: 'Chelyabinskaya oblast\''},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: 'RU-IRK', _1: 'Irkutskaya oblast\''},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: 'RU-IVA', _1: 'Ivanovskaya oblast\''},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: 'RU-KGD', _1: 'Kaliningradskaya oblast\''},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: 'RU-KLU', _1: 'Kaluzhskaya oblast\''},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: 'RU-KEM', _1: 'Kemerovskaya oblast\''},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: 'RU-KIR', _1: 'Kirovskaya oblast\''},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: 'RU-KOS', _1: 'Kostromskaya oblast\''},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: 'RU-KGN', _1: 'Kurganskaya oblast\''},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: 'RU-KRS', _1: 'Kurskaya oblast\''},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: 'RU-LEN', _1: 'Leningradskaya oblast\''},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: 'RU-LIP', _1: 'Lipetskaya oblast\''},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: 'RU-MAG', _1: 'Magadanskaya oblast\''},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: 'RU-MOS', _1: 'Moskovskaya oblast\''},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: 'RU-MUR', _1: 'Murmanskaya oblast\''},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: 'RU-NIZ', _1: 'Nizhegorodskaya oblast\''},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: 'RU-NGR', _1: 'Novgorodskaya oblast\''},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: 'RU-NVS', _1: 'Novosibirskaya oblast\''},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: 'RU-OMS', _1: 'Omskaya oblast\''},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: 'RU-ORE', _1: 'Orenburgskaya oblast\''},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: 'RU-ORL', _1: 'Orlovskaya oblast\''},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: 'RU-PNZ', _1: 'Penzenskaya oblast\''},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: 'RU-PSK', _1: 'Pskovskaya oblast\''},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: 'RU-ROS', _1: 'Rostovskaya oblast\''},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: 'RU-RYA', _1: 'Ryazanskaya oblast\''},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: 'RU-SAK', _1: 'Sakhalinskaya oblast\''},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: 'RU-SAM', _1: 'Samarskaya oblast\''},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: 'RU-SAR', _1: 'Saratovskaya oblast\''},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: 'RU-SMO', _1: 'Smolenskaya oblast\''},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: 'RU-SVE', _1: 'Sverdlovskaya oblast\''},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: 'RU-TAM', _1: 'Tambovskaya oblast\''},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: 'RU-TOM', _1: 'Tomskaya oblast\''},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: 'RU-TUL', _1: 'Tul\'skaya oblast\''},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: 'RU-TVE', _1: 'Tverskaya oblast\''},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: 'RU-TYU', _1: 'Tyumenskaya oblast\''},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: 'RU-ULY', _1: 'Ul\'yanovskaya oblast\''},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: 'RU-VLA', _1: 'Vladimirskaya oblast\''},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: 'RU-VGG', _1: 'Volgogradskaya oblast\''},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: 'RU-VLG', _1: 'Vologodskaya oblast\''},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: 'RU-VOR', _1: 'Voronezhskaya oblast\''},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: 'RU-YAR', _1: 'Yaroslavskaya oblast\''},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: 'RU-MOW', _1: 'Moskva'},
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: {ctor: '_Tuple2', _0: 'RU-SPE', _1: 'Sankt-Peterburg'},
																																																																																	_1: {
																																																																																		ctor: '::',
																																																																																		_0: {ctor: '_Tuple2', _0: 'RU-YEV', _1: 'Yevreyskaya avtonomnaya oblast\''},
																																																																																		_1: {
																																																																																			ctor: '::',
																																																																																			_0: {ctor: '_Tuple2', _0: 'RU-CHU', _1: 'Chukotskiy avtonomnyy okrug'},
																																																																																			_1: {
																																																																																				ctor: '::',
																																																																																				_0: {ctor: '_Tuple2', _0: 'RU-KHM', _1: 'Khanty-Mansiyskiy avtonomnyy okrug-Yugra'},
																																																																																				_1: {
																																																																																					ctor: '::',
																																																																																					_0: {ctor: '_Tuple2', _0: 'RU-NEN', _1: 'Nenetskiy avtonomnyy okrug'},
																																																																																					_1: {
																																																																																						ctor: '::',
																																																																																						_0: {ctor: '_Tuple2', _0: 'RU-YAN', _1: 'Yamalo-Nenetskiy avtonomnyy okrug'},
																																																																																						_1: {ctor: '[]'}
																																																																																					}
																																																																																				}
																																																																																			}
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'RW':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'RW-01', _1: 'City of Kigali'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'RW-02', _1: 'Eastern'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'RW-03', _1: 'Northern'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'RW-04', _1: 'Western'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'RW-05', _1: 'Southern'},
								_1: {ctor: '[]'}
							}
						}
					}
				}
			};
		case 'SA':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'SA-11', _1: 'Al Bāḩah'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'SA-08', _1: 'Al Ḩudūd ash Shamālīyah'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'SA-12', _1: 'Al Jawf'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'SA-03', _1: 'Al Madīnah al Munawwarah'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'SA-05', _1: 'Al Qaşīm'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'SA-01', _1: 'Ar Riyāḑ'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'SA-04', _1: 'Ash Sharqīyah'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'SA-14', _1: '\'Asīr'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'SA-06', _1: 'Ḩā\'il'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'SA-09', _1: 'Jāzān'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'SA-02', _1: 'Makkah al Mukarramah'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'SA-10', _1: 'Najrān'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'SA-07', _1: 'Tabūk'},
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'SB':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'SB-CT', _1: 'Capital Territory'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'SB-CE', _1: 'Central'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'SB-CH', _1: 'Choiseul'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'SB-GU', _1: 'Guadalcanal'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'SB-IS', _1: 'Isabel'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'SB-MK', _1: 'Makira-Ulawa'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'SB-ML', _1: 'Malaita'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'SB-RB', _1: 'Rennell and Bellona'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'SB-TE', _1: 'Temotu'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'SB-WE', _1: 'Western'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'SC':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'SC-01', _1: 'Anse aux Pins'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'SC-02', _1: 'Anse Boileau'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'SC-03', _1: 'Anse Etoile'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'SC-05', _1: 'Anse Royale'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'SC-04', _1: 'Au Cap'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'SC-06', _1: 'Baie Lazare'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'SC-07', _1: 'Baie Sainte Anne'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'SC-08', _1: 'Beau Vallon'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'SC-09', _1: 'Bel Air'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'SC-10', _1: 'Bel Ombre'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'SC-11', _1: 'Cascade'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'SC-12', _1: 'Glacis'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'SC-13', _1: 'Grand Anse Mahe'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'SC-14', _1: 'Grand Anse Praslin'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'SC-15', _1: 'La Digue'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'SC-16', _1: 'English River'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'SC-24', _1: 'Les Mamelles'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'SC-17', _1: 'Mont Buxton'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'SC-18', _1: 'Mont Fleuri'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'SC-19', _1: 'Plaisance'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'SC-20', _1: 'Pointe Larue'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'SC-21', _1: 'Port Glaud'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'SC-25', _1: 'Roche Caiman'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'SC-22', _1: 'Saint Louis'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'SC-23', _1: 'Takamaka'},
																												_1: {ctor: '[]'}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'SD':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'SD-RS', _1: 'Al Baḩr al Aḩmar'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'SD-GZ', _1: 'Al Jazīrah'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'SD-KH', _1: 'Al Kharţūm'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'SD-GD', _1: 'Al Qaḑārif'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'SD-NR', _1: 'Nahr an Nīl'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'SD-NW', _1: 'An Nīl al Abyaḑ'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'SD-NB', _1: 'An Nīl al Azraq'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'SD-NO', _1: 'Ash Shamālīyah'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'SD-DW', _1: 'Gharb Dārfūr'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'SD-GK', _1: 'Gharb Kurdufān'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'SD-DS', _1: 'Janūb Dārfūr'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'SD-KS', _1: 'Janūb Kurdufān'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'SD-KA', _1: 'Kassalā'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'SD-DN', _1: 'Shamāl Dārfūr'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'SD-KN', _1: 'Shiamāl Kurdufān'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'SD-DE', _1: 'Sharq Dārfūr'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'SD-SI', _1: 'Sinnār'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'SD-DC', _1: 'Wasaţ Dārfūr Zālinjay'},
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'SE':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'SE-K', _1: 'Blekinge län'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'SE-10', _1: 'Dalarnas län'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'SE-20', _1: 'Gotlands län'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'SE-09', _1: 'Gävleborgs län'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'SE-21', _1: 'Hallands län'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'SE-13', _1: 'Jämtlands län'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'SE-23', _1: 'Jönköpings län'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'SE-06', _1: 'Kalmar län'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'SE-08', _1: 'Kronobergs län'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'SE-07', _1: 'Norrbottens län'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'SE-25', _1: 'Skåne län'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'SE-12', _1: 'Stockholms län'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'SE-01', _1: 'Södermanlands län'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'SE-04', _1: 'Uppsala län'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'SE-03', _1: 'Värmlands län'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'SE-17', _1: 'Västerbottens län'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'SE-24', _1: 'Västernorrlands län'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'SE-22', _1: 'Västmanlands län'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'SE-19', _1: 'Västra Götalands län'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'SE-14', _1: 'Örebro län'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'SE-18', _1: 'Östergötlands län'},
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'SG':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'SG-01', _1: 'Central Singapore'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'SG-02', _1: 'North East'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'SG-03', _1: 'North West'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'SG-04', _1: 'South East'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'SG-05', _1: 'South West'},
								_1: {ctor: '[]'}
							}
						}
					}
				}
			};
		case 'SH':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'SH-AC', _1: 'Ascension'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'SH-HL', _1: 'Saint Helena'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'SH-TA', _1: 'Tristan da Cunha'},
						_1: {ctor: '[]'}
					}
				}
			};
		case 'SI':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'SI-001', _1: 'Ajdovščina'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'SI-195', _1: 'Apače'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'SI-002', _1: 'Beltinci'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'SI-148', _1: 'Benedikt'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'SI-149', _1: 'Bistrica ob Sotli'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'SI-003', _1: 'Bled'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'SI-150', _1: 'Bloke'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'SI-004', _1: 'Bohinj'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'SI-005', _1: 'Borovnica'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'SI-006', _1: 'Bovec'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'SI-151', _1: 'Braslovče'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'SI-007', _1: 'Brda'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'SI-009', _1: 'Brežice'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'SI-008', _1: 'Brezovica'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'SI-152', _1: 'Cankova'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'SI-011', _1: 'Celje'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'SI-012', _1: 'Cerklje na Gorenjskem'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'SI-013', _1: 'Cerknica'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'SI-014', _1: 'Cerkno'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'SI-153', _1: 'Cerkvenjak'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'SI-196', _1: 'Cirkulane'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'SI-015', _1: 'Črenšovci'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'SI-016', _1: 'Črna na Koroškem'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'SI-017', _1: 'Črnomelj'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'SI-018', _1: 'Destrnik'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'SI-019', _1: 'Divača'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'SI-154', _1: 'Dobje'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'SI-020', _1: 'Dobrepolje'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'SI-155', _1: 'Dobrna'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'SI-021', _1: 'Dobrova–Polhov Gradec'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'SI-156', _1: 'Dobrovnik'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'SI-157', _1: 'Dolenjske Toplice'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: 'SI-022', _1: 'Dol pri Ljubljani'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: 'SI-023', _1: 'Domžale'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: 'SI-024', _1: 'Dornava'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: 'SI-025', _1: 'Dravograd'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: 'SI-026', _1: 'Duplek'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: 'SI-027', _1: 'Gorenja vas–Poljane'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: 'SI-028', _1: 'Gorišnica'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: 'SI-207', _1: 'Gorje'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: 'SI-029', _1: 'Gornja Radgona'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: 'SI-030', _1: 'Gornji Grad'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: 'SI-031', _1: 'Gornji Petrovci'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: 'SI-158', _1: 'Grad'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: 'SI-032', _1: 'Grosuplje'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: 'SI-159', _1: 'Hajdina'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: 'SI-160', _1: 'Hoče–Slivnica'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: 'SI-161', _1: 'Hodoš'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: 'SI-162', _1: 'Horjul'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: 'SI-034', _1: 'Hrastnik'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: 'SI-035', _1: 'Hrpelje-Kozina'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: 'SI-036', _1: 'Idrija'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: 'SI-037', _1: 'Ig'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: 'SI-038', _1: 'Ilirska Bistrica'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: 'SI-039', _1: 'Ivančna Gorica'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: 'SI-040', _1: 'Izola'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: 'SI-041', _1: 'Jesenice'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: 'SI-163', _1: 'Jezersko'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: 'SI-042', _1: 'Juršinci'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: 'SI-043', _1: 'Kamnik'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: 'SI-044', _1: 'Kanal'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: 'SI-045', _1: 'Kidričevo'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: 'SI-046', _1: 'Kobarid'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: 'SI-047', _1: 'Kobilje'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: 'SI-048', _1: 'Kočevje'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: 'SI-049', _1: 'Komen'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: 'SI-164', _1: 'Komenda'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: 'SI-050', _1: 'Koper'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: 'SI-197', _1: 'Kosanjevica na Krki'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: 'SI-165', _1: 'Kostel'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: 'SI-051', _1: 'Kozje'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: 'SI-052', _1: 'Kranj'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: 'SI-053', _1: 'Kranjska Gora'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: 'SI-166', _1: 'Križevci'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: 'SI-054', _1: 'Krško'},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: 'SI-055', _1: 'Kungota'},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: 'SI-056', _1: 'Kuzma'},
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: {ctor: '_Tuple2', _0: 'SI-057', _1: 'Laško'},
																																																																																	_1: {
																																																																																		ctor: '::',
																																																																																		_0: {ctor: '_Tuple2', _0: 'SI-058', _1: 'Lenart'},
																																																																																		_1: {
																																																																																			ctor: '::',
																																																																																			_0: {ctor: '_Tuple2', _0: 'SI-059', _1: 'Lendava'},
																																																																																			_1: {
																																																																																				ctor: '::',
																																																																																				_0: {ctor: '_Tuple2', _0: 'SI-060', _1: 'Litija'},
																																																																																				_1: {
																																																																																					ctor: '::',
																																																																																					_0: {ctor: '_Tuple2', _0: 'SI-061', _1: 'Ljubljana'},
																																																																																					_1: {
																																																																																						ctor: '::',
																																																																																						_0: {ctor: '_Tuple2', _0: 'SI-062', _1: 'Ljubno'},
																																																																																						_1: {
																																																																																							ctor: '::',
																																																																																							_0: {ctor: '_Tuple2', _0: 'SI-063', _1: 'Ljutomer'},
																																																																																							_1: {
																																																																																								ctor: '::',
																																																																																								_0: {ctor: '_Tuple2', _0: 'SI-064', _1: 'Logatec'},
																																																																																								_1: {
																																																																																									ctor: '::',
																																																																																									_0: {ctor: '_Tuple2', _0: 'SI-208', _1: 'Log-Dragomer'},
																																																																																									_1: {
																																																																																										ctor: '::',
																																																																																										_0: {ctor: '_Tuple2', _0: 'SI-065', _1: 'Loška Dolina'},
																																																																																										_1: {
																																																																																											ctor: '::',
																																																																																											_0: {ctor: '_Tuple2', _0: 'SI-066', _1: 'Loški Potok'},
																																																																																											_1: {
																																																																																												ctor: '::',
																																																																																												_0: {ctor: '_Tuple2', _0: 'SI-167', _1: 'Lovrenc na Pohorju'},
																																																																																												_1: {
																																																																																													ctor: '::',
																																																																																													_0: {ctor: '_Tuple2', _0: 'SI-067', _1: 'Luče'},
																																																																																													_1: {
																																																																																														ctor: '::',
																																																																																														_0: {ctor: '_Tuple2', _0: 'SI-068', _1: 'Lukovica'},
																																																																																														_1: {
																																																																																															ctor: '::',
																																																																																															_0: {ctor: '_Tuple2', _0: 'SI-069', _1: 'Majšperk'},
																																																																																															_1: {
																																																																																																ctor: '::',
																																																																																																_0: {ctor: '_Tuple2', _0: 'SI-198', _1: 'Makole'},
																																																																																																_1: {
																																																																																																	ctor: '::',
																																																																																																	_0: {ctor: '_Tuple2', _0: 'SI-070', _1: 'Maribor'},
																																																																																																	_1: {
																																																																																																		ctor: '::',
																																																																																																		_0: {ctor: '_Tuple2', _0: 'SI-168', _1: 'Markovci'},
																																																																																																		_1: {
																																																																																																			ctor: '::',
																																																																																																			_0: {ctor: '_Tuple2', _0: 'SI-071', _1: 'Medvode'},
																																																																																																			_1: {
																																																																																																				ctor: '::',
																																																																																																				_0: {ctor: '_Tuple2', _0: 'SI-072', _1: 'Mengeš'},
																																																																																																				_1: {
																																																																																																					ctor: '::',
																																																																																																					_0: {ctor: '_Tuple2', _0: 'SI-073', _1: 'Metlika'},
																																																																																																					_1: {
																																																																																																						ctor: '::',
																																																																																																						_0: {ctor: '_Tuple2', _0: 'SI-074', _1: 'Mežica'},
																																																																																																						_1: {
																																																																																																							ctor: '::',
																																																																																																							_0: {ctor: '_Tuple2', _0: 'SI-169', _1: 'Miklavž na Dravskem Polju'},
																																																																																																							_1: {
																																																																																																								ctor: '::',
																																																																																																								_0: {ctor: '_Tuple2', _0: 'SI-075', _1: 'Miren-Kostanjevica'},
																																																																																																								_1: {
																																																																																																									ctor: '::',
																																																																																																									_0: {ctor: '_Tuple2', _0: 'SI-212', _1: 'Mirna'},
																																																																																																									_1: {
																																																																																																										ctor: '::',
																																																																																																										_0: {ctor: '_Tuple2', _0: 'SI-170', _1: 'Mirna Peč'},
																																																																																																										_1: {
																																																																																																											ctor: '::',
																																																																																																											_0: {ctor: '_Tuple2', _0: 'SI-076', _1: 'Mislinja'},
																																																																																																											_1: {
																																																																																																												ctor: '::',
																																																																																																												_0: {ctor: '_Tuple2', _0: 'SI-199', _1: 'Mokronog-Trebelno'},
																																																																																																												_1: {
																																																																																																													ctor: '::',
																																																																																																													_0: {ctor: '_Tuple2', _0: 'SI-077', _1: 'Moravče'},
																																																																																																													_1: {
																																																																																																														ctor: '::',
																																																																																																														_0: {ctor: '_Tuple2', _0: 'SI-078', _1: 'Moravske Toplice'},
																																																																																																														_1: {
																																																																																																															ctor: '::',
																																																																																																															_0: {ctor: '_Tuple2', _0: 'SI-079', _1: 'Mozirje'},
																																																																																																															_1: {
																																																																																																																ctor: '::',
																																																																																																																_0: {ctor: '_Tuple2', _0: 'SI-080', _1: 'Murska Sobota'},
																																																																																																																_1: {
																																																																																																																	ctor: '::',
																																																																																																																	_0: {ctor: '_Tuple2', _0: 'SI-081', _1: 'Muta'},
																																																																																																																	_1: {
																																																																																																																		ctor: '::',
																																																																																																																		_0: {ctor: '_Tuple2', _0: 'SI-082', _1: 'Naklo'},
																																																																																																																		_1: {
																																																																																																																			ctor: '::',
																																																																																																																			_0: {ctor: '_Tuple2', _0: 'SI-083', _1: 'Nazarje'},
																																																																																																																			_1: {
																																																																																																																				ctor: '::',
																																																																																																																				_0: {ctor: '_Tuple2', _0: 'SI-084', _1: 'Nova Gorica'},
																																																																																																																				_1: {
																																																																																																																					ctor: '::',
																																																																																																																					_0: {ctor: '_Tuple2', _0: 'SI-085', _1: 'Novo Mesto'},
																																																																																																																					_1: {
																																																																																																																						ctor: '::',
																																																																																																																						_0: {ctor: '_Tuple2', _0: 'SI-086', _1: 'Odranci'},
																																																																																																																						_1: {
																																																																																																																							ctor: '::',
																																																																																																																							_0: {ctor: '_Tuple2', _0: 'SI-171', _1: 'Oplotnica'},
																																																																																																																							_1: {
																																																																																																																								ctor: '::',
																																																																																																																								_0: {ctor: '_Tuple2', _0: 'SI-087', _1: 'Ormož'},
																																																																																																																								_1: {
																																																																																																																									ctor: '::',
																																																																																																																									_0: {ctor: '_Tuple2', _0: 'SI-088', _1: 'Osilnica'},
																																																																																																																									_1: {
																																																																																																																										ctor: '::',
																																																																																																																										_0: {ctor: '_Tuple2', _0: 'SI-089', _1: 'Pesnica'},
																																																																																																																										_1: {
																																																																																																																											ctor: '::',
																																																																																																																											_0: {ctor: '_Tuple2', _0: 'SI-090', _1: 'Piran'},
																																																																																																																											_1: {
																																																																																																																												ctor: '::',
																																																																																																																												_0: {ctor: '_Tuple2', _0: 'SI-091', _1: 'Pivka'},
																																																																																																																												_1: {
																																																																																																																													ctor: '::',
																																																																																																																													_0: {ctor: '_Tuple2', _0: 'SI-092', _1: 'Podčetrtek'},
																																																																																																																													_1: {
																																																																																																																														ctor: '::',
																																																																																																																														_0: {ctor: '_Tuple2', _0: 'SI-172', _1: 'Podlehnik'},
																																																																																																																														_1: {
																																																																																																																															ctor: '::',
																																																																																																																															_0: {ctor: '_Tuple2', _0: 'SI-093', _1: 'Podvelka'},
																																																																																																																															_1: {
																																																																																																																																ctor: '::',
																																																																																																																																_0: {ctor: '_Tuple2', _0: 'SI-200', _1: 'Poljčane'},
																																																																																																																																_1: {
																																																																																																																																	ctor: '::',
																																																																																																																																	_0: {ctor: '_Tuple2', _0: 'SI-173', _1: 'Polzela'},
																																																																																																																																	_1: {
																																																																																																																																		ctor: '::',
																																																																																																																																		_0: {ctor: '_Tuple2', _0: 'SI-094', _1: 'Postojna'},
																																																																																																																																		_1: {
																																																																																																																																			ctor: '::',
																																																																																																																																			_0: {ctor: '_Tuple2', _0: 'SI-174', _1: 'Prebold'},
																																																																																																																																			_1: {
																																																																																																																																				ctor: '::',
																																																																																																																																				_0: {ctor: '_Tuple2', _0: 'SI-095', _1: 'Preddvor'},
																																																																																																																																				_1: {
																																																																																																																																					ctor: '::',
																																																																																																																																					_0: {ctor: '_Tuple2', _0: 'SI-175', _1: 'Prevalje'},
																																																																																																																																					_1: {
																																																																																																																																						ctor: '::',
																																																																																																																																						_0: {ctor: '_Tuple2', _0: 'SI-096', _1: 'Ptuj'},
																																																																																																																																						_1: {
																																																																																																																																							ctor: '::',
																																																																																																																																							_0: {ctor: '_Tuple2', _0: 'SI-097', _1: 'Puconci'},
																																																																																																																																							_1: {
																																																																																																																																								ctor: '::',
																																																																																																																																								_0: {ctor: '_Tuple2', _0: 'SI-098', _1: 'Rače–Fram'},
																																																																																																																																								_1: {
																																																																																																																																									ctor: '::',
																																																																																																																																									_0: {ctor: '_Tuple2', _0: 'SI-099', _1: 'Radeče'},
																																																																																																																																									_1: {
																																																																																																																																										ctor: '::',
																																																																																																																																										_0: {ctor: '_Tuple2', _0: 'SI-100', _1: 'Radenci'},
																																																																																																																																										_1: {
																																																																																																																																											ctor: '::',
																																																																																																																																											_0: {ctor: '_Tuple2', _0: 'SI-101', _1: 'Radlje ob Dravi'},
																																																																																																																																											_1: {
																																																																																																																																												ctor: '::',
																																																																																																																																												_0: {ctor: '_Tuple2', _0: 'SI-102', _1: 'Radovljica'},
																																																																																																																																												_1: {
																																																																																																																																													ctor: '::',
																																																																																																																																													_0: {ctor: '_Tuple2', _0: 'SI-103', _1: 'Ravne na Koroškem'},
																																																																																																																																													_1: {
																																																																																																																																														ctor: '::',
																																																																																																																																														_0: {ctor: '_Tuple2', _0: 'SI-176', _1: 'Razkrižje'},
																																																																																																																																														_1: {
																																																																																																																																															ctor: '::',
																																																																																																																																															_0: {ctor: '_Tuple2', _0: 'SI-209', _1: 'Rečica ob Savinji'},
																																																																																																																																															_1: {
																																																																																																																																																ctor: '::',
																																																																																																																																																_0: {ctor: '_Tuple2', _0: 'SI-201', _1: 'Renče-Vogrsko'},
																																																																																																																																																_1: {
																																																																																																																																																	ctor: '::',
																																																																																																																																																	_0: {ctor: '_Tuple2', _0: 'SI-104', _1: 'Ribnica'},
																																																																																																																																																	_1: {
																																																																																																																																																		ctor: '::',
																																																																																																																																																		_0: {ctor: '_Tuple2', _0: 'SI-177', _1: 'Ribnica na Pohorju'},
																																																																																																																																																		_1: {
																																																																																																																																																			ctor: '::',
																																																																																																																																																			_0: {ctor: '_Tuple2', _0: 'SI-106', _1: 'Rogaška Slatina'},
																																																																																																																																																			_1: {
																																																																																																																																																				ctor: '::',
																																																																																																																																																				_0: {ctor: '_Tuple2', _0: 'SI-105', _1: 'Rogašovci'},
																																																																																																																																																				_1: {
																																																																																																																																																					ctor: '::',
																																																																																																																																																					_0: {ctor: '_Tuple2', _0: 'SI-107', _1: 'Rogatec'},
																																																																																																																																																					_1: {
																																																																																																																																																						ctor: '::',
																																																																																																																																																						_0: {ctor: '_Tuple2', _0: 'SI-108', _1: 'Ruše'},
																																																																																																																																																						_1: {
																																																																																																																																																							ctor: '::',
																																																																																																																																																							_0: {ctor: '_Tuple2', _0: 'SI-178', _1: 'Selnica ob Dravi'},
																																																																																																																																																							_1: {
																																																																																																																																																								ctor: '::',
																																																																																																																																																								_0: {ctor: '_Tuple2', _0: 'SI-109', _1: 'Semič'},
																																																																																																																																																								_1: {
																																																																																																																																																									ctor: '::',
																																																																																																																																																									_0: {ctor: '_Tuple2', _0: 'SI-110', _1: 'Sevnica'},
																																																																																																																																																									_1: {
																																																																																																																																																										ctor: '::',
																																																																																																																																																										_0: {ctor: '_Tuple2', _0: 'SI-111', _1: 'Sežana'},
																																																																																																																																																										_1: {
																																																																																																																																																											ctor: '::',
																																																																																																																																																											_0: {ctor: '_Tuple2', _0: 'SI-112', _1: 'Slovenj Gradec'},
																																																																																																																																																											_1: {
																																																																																																																																																												ctor: '::',
																																																																																																																																																												_0: {ctor: '_Tuple2', _0: 'SI-113', _1: 'Slovenska Bistrica'},
																																																																																																																																																												_1: {
																																																																																																																																																													ctor: '::',
																																																																																																																																																													_0: {ctor: '_Tuple2', _0: 'SI-114', _1: 'Slovenske Konjice'},
																																																																																																																																																													_1: {
																																																																																																																																																														ctor: '::',
																																																																																																																																																														_0: {ctor: '_Tuple2', _0: 'SI-179', _1: 'Sodražica'},
																																																																																																																																																														_1: {
																																																																																																																																																															ctor: '::',
																																																																																																																																																															_0: {ctor: '_Tuple2', _0: 'SI-180', _1: 'Solčava'},
																																																																																																																																																															_1: {
																																																																																																																																																																ctor: '::',
																																																																																																																																																																_0: {ctor: '_Tuple2', _0: 'SI-202', _1: 'Središče ob Dravi'},
																																																																																																																																																																_1: {
																																																																																																																																																																	ctor: '::',
																																																																																																																																																																	_0: {ctor: '_Tuple2', _0: 'SI-115', _1: 'Starše'},
																																																																																																																																																																	_1: {
																																																																																																																																																																		ctor: '::',
																																																																																																																																																																		_0: {ctor: '_Tuple2', _0: 'SI-203', _1: 'Straža'},
																																																																																																																																																																		_1: {
																																																																																																																																																																			ctor: '::',
																																																																																																																																																																			_0: {ctor: '_Tuple2', _0: 'SI-181', _1: 'Sveta Ana'},
																																																																																																																																																																			_1: {
																																																																																																																																																																				ctor: '::',
																																																																																																																																																																				_0: {ctor: '_Tuple2', _0: 'SI-204', _1: 'Sveta Trojica v Slovenskih Goricah'},
																																																																																																																																																																				_1: {
																																																																																																																																																																					ctor: '::',
																																																																																																																																																																					_0: {ctor: '_Tuple2', _0: 'SI-182', _1: 'Sveti Andraž v Slovenskih Goricah'},
																																																																																																																																																																					_1: {
																																																																																																																																																																						ctor: '::',
																																																																																																																																																																						_0: {ctor: '_Tuple2', _0: 'SI-116', _1: 'Sveti Jurij'},
																																																																																																																																																																						_1: {
																																																																																																																																																																							ctor: '::',
																																																																																																																																																																							_0: {ctor: '_Tuple2', _0: 'SI-210', _1: 'Sveti Jurij v Slovenskih Goricah'},
																																																																																																																																																																							_1: {
																																																																																																																																																																								ctor: '::',
																																																																																																																																																																								_0: {ctor: '_Tuple2', _0: 'SI-205', _1: 'Sveti Tomaž'},
																																																																																																																																																																								_1: {
																																																																																																																																																																									ctor: '::',
																																																																																																																																																																									_0: {ctor: '_Tuple2', _0: 'SI-033', _1: 'Šalovci'},
																																																																																																																																																																									_1: {
																																																																																																																																																																										ctor: '::',
																																																																																																																																																																										_0: {ctor: '_Tuple2', _0: 'SI-183', _1: 'Šempeter-Vrtojba'},
																																																																																																																																																																										_1: {
																																																																																																																																																																											ctor: '::',
																																																																																																																																																																											_0: {ctor: '_Tuple2', _0: 'SI-117', _1: 'Šenčur'},
																																																																																																																																																																											_1: {
																																																																																																																																																																												ctor: '::',
																																																																																																																																																																												_0: {ctor: '_Tuple2', _0: 'SI-118', _1: 'Šentilj'},
																																																																																																																																																																												_1: {
																																																																																																																																																																													ctor: '::',
																																																																																																																																																																													_0: {ctor: '_Tuple2', _0: 'SI-119', _1: 'Šentjernej'},
																																																																																																																																																																													_1: {
																																																																																																																																																																														ctor: '::',
																																																																																																																																																																														_0: {ctor: '_Tuple2', _0: 'SI-120', _1: 'Šentjur'},
																																																																																																																																																																														_1: {
																																																																																																																																																																															ctor: '::',
																																																																																																																																																																															_0: {ctor: '_Tuple2', _0: 'SI-211', _1: 'Šentrupert'},
																																																																																																																																																																															_1: {
																																																																																																																																																																																ctor: '::',
																																																																																																																																																																																_0: {ctor: '_Tuple2', _0: 'SI-121', _1: 'Škocjan'},
																																																																																																																																																																																_1: {
																																																																																																																																																																																	ctor: '::',
																																																																																																																																																																																	_0: {ctor: '_Tuple2', _0: 'SI-122', _1: 'Škofja Loka'},
																																																																																																																																																																																	_1: {
																																																																																																																																																																																		ctor: '::',
																																																																																																																																																																																		_0: {ctor: '_Tuple2', _0: 'SI-123', _1: 'Škofljica'},
																																																																																																																																																																																		_1: {
																																																																																																																																																																																			ctor: '::',
																																																																																																																																																																																			_0: {ctor: '_Tuple2', _0: 'SI-124', _1: 'Šmarje pri Jelšah'},
																																																																																																																																																																																			_1: {
																																																																																																																																																																																				ctor: '::',
																																																																																																																																																																																				_0: {ctor: '_Tuple2', _0: 'SI-206', _1: 'Šmarješke Toplice'},
																																																																																																																																																																																				_1: {
																																																																																																																																																																																					ctor: '::',
																																																																																																																																																																																					_0: {ctor: '_Tuple2', _0: 'SI-125', _1: 'Šmartno ob Paki'},
																																																																																																																																																																																					_1: {
																																																																																																																																																																																						ctor: '::',
																																																																																																																																																																																						_0: {ctor: '_Tuple2', _0: 'SI-194', _1: 'Šmartno pri Litiji'},
																																																																																																																																																																																						_1: {
																																																																																																																																																																																							ctor: '::',
																																																																																																																																																																																							_0: {ctor: '_Tuple2', _0: 'SI-126', _1: 'Šoštanj'},
																																																																																																																																																																																							_1: {
																																																																																																																																																																																								ctor: '::',
																																																																																																																																																																																								_0: {ctor: '_Tuple2', _0: 'SI-127', _1: 'Štore'},
																																																																																																																																																																																								_1: {
																																																																																																																																																																																									ctor: '::',
																																																																																																																																																																																									_0: {ctor: '_Tuple2', _0: 'SI-184', _1: 'Tabor'},
																																																																																																																																																																																									_1: {
																																																																																																																																																																																										ctor: '::',
																																																																																																																																																																																										_0: {ctor: '_Tuple2', _0: 'SI-010', _1: 'Tišina'},
																																																																																																																																																																																										_1: {
																																																																																																																																																																																											ctor: '::',
																																																																																																																																																																																											_0: {ctor: '_Tuple2', _0: 'SI-128', _1: 'Tolmin'},
																																																																																																																																																																																											_1: {
																																																																																																																																																																																												ctor: '::',
																																																																																																																																																																																												_0: {ctor: '_Tuple2', _0: 'SI-129', _1: 'Trbovlje'},
																																																																																																																																																																																												_1: {
																																																																																																																																																																																													ctor: '::',
																																																																																																																																																																																													_0: {ctor: '_Tuple2', _0: 'SI-130', _1: 'Trebnje'},
																																																																																																																																																																																													_1: {
																																																																																																																																																																																														ctor: '::',
																																																																																																																																																																																														_0: {ctor: '_Tuple2', _0: 'SI-185', _1: 'Trnovska Vas'},
																																																																																																																																																																																														_1: {
																																																																																																																																																																																															ctor: '::',
																																																																																																																																																																																															_0: {ctor: '_Tuple2', _0: 'SI-186', _1: 'Trzin'},
																																																																																																																																																																																															_1: {
																																																																																																																																																																																																ctor: '::',
																																																																																																																																																																																																_0: {ctor: '_Tuple2', _0: 'SI-131', _1: 'Tržič'},
																																																																																																																																																																																																_1: {
																																																																																																																																																																																																	ctor: '::',
																																																																																																																																																																																																	_0: {ctor: '_Tuple2', _0: 'SI-132', _1: 'Turnišče'},
																																																																																																																																																																																																	_1: {
																																																																																																																																																																																																		ctor: '::',
																																																																																																																																																																																																		_0: {ctor: '_Tuple2', _0: 'SI-133', _1: 'Velenje'},
																																																																																																																																																																																																		_1: {
																																																																																																																																																																																																			ctor: '::',
																																																																																																																																																																																																			_0: {ctor: '_Tuple2', _0: 'SI-187', _1: 'Velika Polana'},
																																																																																																																																																																																																			_1: {
																																																																																																																																																																																																				ctor: '::',
																																																																																																																																																																																																				_0: {ctor: '_Tuple2', _0: 'SI-134', _1: 'Velike Lašče'},
																																																																																																																																																																																																				_1: {
																																																																																																																																																																																																					ctor: '::',
																																																																																																																																																																																																					_0: {ctor: '_Tuple2', _0: 'SI-188', _1: 'Veržej'},
																																																																																																																																																																																																					_1: {
																																																																																																																																																																																																						ctor: '::',
																																																																																																																																																																																																						_0: {ctor: '_Tuple2', _0: 'SI-135', _1: 'Videm'},
																																																																																																																																																																																																						_1: {
																																																																																																																																																																																																							ctor: '::',
																																																																																																																																																																																																							_0: {ctor: '_Tuple2', _0: 'SI-136', _1: 'Vipava'},
																																																																																																																																																																																																							_1: {
																																																																																																																																																																																																								ctor: '::',
																																																																																																																																																																																																								_0: {ctor: '_Tuple2', _0: 'SI-137', _1: 'Vitanje'},
																																																																																																																																																																																																								_1: {
																																																																																																																																																																																																									ctor: '::',
																																																																																																																																																																																																									_0: {ctor: '_Tuple2', _0: 'SI-138', _1: 'Vodice'},
																																																																																																																																																																																																									_1: {
																																																																																																																																																																																																										ctor: '::',
																																																																																																																																																																																																										_0: {ctor: '_Tuple2', _0: 'SI-139', _1: 'Vojnik'},
																																																																																																																																																																																																										_1: {
																																																																																																																																																																																																											ctor: '::',
																																																																																																																																																																																																											_0: {ctor: '_Tuple2', _0: 'SI-189', _1: 'Vransko'},
																																																																																																																																																																																																											_1: {
																																																																																																																																																																																																												ctor: '::',
																																																																																																																																																																																																												_0: {ctor: '_Tuple2', _0: 'SI-140', _1: 'Vrhnika'},
																																																																																																																																																																																																												_1: {
																																																																																																																																																																																																													ctor: '::',
																																																																																																																																																																																																													_0: {ctor: '_Tuple2', _0: 'SI-141', _1: 'Vuzenica'},
																																																																																																																																																																																																													_1: {
																																																																																																																																																																																																														ctor: '::',
																																																																																																																																																																																																														_0: {ctor: '_Tuple2', _0: 'SI-142', _1: 'Zagorje ob Savi'},
																																																																																																																																																																																																														_1: {
																																																																																																																																																																																																															ctor: '::',
																																																																																																																																																																																																															_0: {ctor: '_Tuple2', _0: 'SI-143', _1: 'Zavrč'},
																																																																																																																																																																																																															_1: {
																																																																																																																																																																																																																ctor: '::',
																																																																																																																																																																																																																_0: {ctor: '_Tuple2', _0: 'SI-144', _1: 'Zreče'},
																																																																																																																																																																																																																_1: {
																																																																																																																																																																																																																	ctor: '::',
																																																																																																																																																																																																																	_0: {ctor: '_Tuple2', _0: 'SI-190', _1: 'Žalec'},
																																																																																																																																																																																																																	_1: {
																																																																																																																																																																																																																		ctor: '::',
																																																																																																																																																																																																																		_0: {ctor: '_Tuple2', _0: 'SI-146', _1: 'Železniki'},
																																																																																																																																																																																																																		_1: {
																																																																																																																																																																																																																			ctor: '::',
																																																																																																																																																																																																																			_0: {ctor: '_Tuple2', _0: 'SI-191', _1: 'Žetale'},
																																																																																																																																																																																																																			_1: {
																																																																																																																																																																																																																				ctor: '::',
																																																																																																																																																																																																																				_0: {ctor: '_Tuple2', _0: 'SI-147', _1: 'Žiri'},
																																																																																																																																																																																																																				_1: {
																																																																																																																																																																																																																					ctor: '::',
																																																																																																																																																																																																																					_0: {ctor: '_Tuple2', _0: 'SI-192', _1: 'Žirovnica'},
																																																																																																																																																																																																																					_1: {
																																																																																																																																																																																																																						ctor: '::',
																																																																																																																																																																																																																						_0: {ctor: '_Tuple2', _0: 'SI-193', _1: 'Žužemberk'},
																																																																																																																																																																																																																						_1: {
																																																																																																																																																																																																																							ctor: '::',
																																																																																																																																																																																																																							_0: {ctor: '_Tuple2', _0: 'SI-213', _1: 'Ankaran'},
																																																																																																																																																																																																																							_1: {ctor: '[]'}
																																																																																																																																																																																																																						}
																																																																																																																																																																																																																					}
																																																																																																																																																																																																																				}
																																																																																																																																																																																																																			}
																																																																																																																																																																																																																		}
																																																																																																																																																																																																																	}
																																																																																																																																																																																																																}
																																																																																																																																																																																																															}
																																																																																																																																																																																																														}
																																																																																																																																																																																																													}
																																																																																																																																																																																																												}
																																																																																																																																																																																																											}
																																																																																																																																																																																																										}
																																																																																																																																																																																																									}
																																																																																																																																																																																																								}
																																																																																																																																																																																																							}
																																																																																																																																																																																																						}
																																																																																																																																																																																																					}
																																																																																																																																																																																																				}
																																																																																																																																																																																																			}
																																																																																																																																																																																																		}
																																																																																																																																																																																																	}
																																																																																																																																																																																																}
																																																																																																																																																																																															}
																																																																																																																																																																																														}
																																																																																																																																																																																													}
																																																																																																																																																																																												}
																																																																																																																																																																																											}
																																																																																																																																																																																										}
																																																																																																																																																																																									}
																																																																																																																																																																																								}
																																																																																																																																																																																							}
																																																																																																																																																																																						}
																																																																																																																																																																																					}
																																																																																																																																																																																				}
																																																																																																																																																																																			}
																																																																																																																																																																																		}
																																																																																																																																																																																	}
																																																																																																																																																																																}
																																																																																																																																																																															}
																																																																																																																																																																														}
																																																																																																																																																																													}
																																																																																																																																																																												}
																																																																																																																																																																											}
																																																																																																																																																																										}
																																																																																																																																																																									}
																																																																																																																																																																								}
																																																																																																																																																																							}
																																																																																																																																																																						}
																																																																																																																																																																					}
																																																																																																																																																																				}
																																																																																																																																																																			}
																																																																																																																																																																		}
																																																																																																																																																																	}
																																																																																																																																																																}
																																																																																																																																																															}
																																																																																																																																																														}
																																																																																																																																																													}
																																																																																																																																																												}
																																																																																																																																																											}
																																																																																																																																																										}
																																																																																																																																																									}
																																																																																																																																																								}
																																																																																																																																																							}
																																																																																																																																																						}
																																																																																																																																																					}
																																																																																																																																																				}
																																																																																																																																																			}
																																																																																																																																																		}
																																																																																																																																																	}
																																																																																																																																																}
																																																																																																																																															}
																																																																																																																																														}
																																																																																																																																													}
																																																																																																																																												}
																																																																																																																																											}
																																																																																																																																										}
																																																																																																																																									}
																																																																																																																																								}
																																																																																																																																							}
																																																																																																																																						}
																																																																																																																																					}
																																																																																																																																				}
																																																																																																																																			}
																																																																																																																																		}
																																																																																																																																	}
																																																																																																																																}
																																																																																																																															}
																																																																																																																														}
																																																																																																																													}
																																																																																																																												}
																																																																																																																											}
																																																																																																																										}
																																																																																																																									}
																																																																																																																								}
																																																																																																																							}
																																																																																																																						}
																																																																																																																					}
																																																																																																																				}
																																																																																																																			}
																																																																																																																		}
																																																																																																																	}
																																																																																																																}
																																																																																																															}
																																																																																																														}
																																																																																																													}
																																																																																																												}
																																																																																																											}
																																																																																																										}
																																																																																																									}
																																																																																																								}
																																																																																																							}
																																																																																																						}
																																																																																																					}
																																																																																																				}
																																																																																																			}
																																																																																																		}
																																																																																																	}
																																																																																																}
																																																																																															}
																																																																																														}
																																																																																													}
																																																																																												}
																																																																																											}
																																																																																										}
																																																																																									}
																																																																																								}
																																																																																							}
																																																																																						}
																																																																																					}
																																																																																				}
																																																																																			}
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'SJ':
			return {ctor: '[]'};
		case 'SK':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'SK-BC', _1: 'Banskobystrický kraj'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'SK-BL', _1: 'Bratislavský kraj'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'SK-KI', _1: 'Košický kraj'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'SK-NI', _1: 'Nitriansky kraj'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'SK-PV', _1: 'Prešovský kraj'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'SK-TC', _1: 'Trenčiansky kraj'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'SK-TA', _1: 'Trnavský kraj'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'SK-ZI', _1: 'Žilinský kraj'},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'SL':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'SL-W', _1: 'Western Area'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'SL-E', _1: 'Eastern'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'SL-N', _1: 'Northern'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'SL-S', _1: 'Southern'},
							_1: {ctor: '[]'}
						}
					}
				}
			};
		case 'SM':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'SM-01', _1: 'Acquaviva'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'SM-06', _1: 'Borgo Maggiore'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'SM-02', _1: 'Chiesanuova'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'SM-03', _1: 'Domagnano'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'SM-04', _1: 'Faetano'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'SM-05', _1: 'Fiorentino'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'SM-08', _1: 'Montegiardino'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'SM-07', _1: 'San Marino'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'SM-09', _1: 'Serravalle'},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'SN':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'SN-DK', _1: 'Dakar'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'SN-DB', _1: 'Diourbel'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'SN-FK', _1: 'Fatick'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'SN-KA', _1: 'Kaffrine'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'SN-KL', _1: 'Kaolack'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'SN-KE', _1: 'Kédougou'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'SN-KD', _1: 'Kolda'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'SN-LG', _1: 'Louga'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'SN-MT', _1: 'Matam'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'SN-SL', _1: 'Saint-Louis'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'SN-SE', _1: 'Sédhiou'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'SN-TC', _1: 'Tambacounda'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'SN-TH', _1: 'Thiès'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'SN-ZG', _1: 'Ziguinchor'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'SO':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'SO-AW', _1: 'Awdal'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'SO-BK', _1: 'Bakool'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'SO-BN', _1: 'Banaadir'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'SO-BR', _1: 'Bari'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'SO-BY', _1: 'Bay'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'SO-GA', _1: 'Galguduud'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'SO-GE', _1: 'Gedo'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'SO-HI', _1: 'Hiiraan'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'SO-JD', _1: 'Jubbada Dhexe'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'SO-JH', _1: 'Jubbada Hoose'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'SO-MU', _1: 'Mudug'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'SO-NU', _1: 'Nugaal'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'SO-SA', _1: 'Sanaag'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'SO-SD', _1: 'Shabeellaha Dhexe'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'SO-SH', _1: 'Shabeellaha Hoose'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'SO-SO', _1: 'Sool'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'SO-TO', _1: 'Togdheer'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'SO-WO', _1: 'Woqooyi Galbeed'},
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'SR':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'SR-BR', _1: 'Brokopondo'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'SR-CM', _1: 'Commewijne'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'SR-CR', _1: 'Coronie'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'SR-MA', _1: 'Marowijne'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'SR-NI', _1: 'Nickerie'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'SR-PR', _1: 'Para'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'SR-PM', _1: 'Paramaribo'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'SR-SA', _1: 'Saramacca'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'SR-SI', _1: 'Sipaliwini'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'SR-WA', _1: 'Wanica'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'SS':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'SS-EC', _1: 'Central Equatoria'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'SS-EE', _1: 'Eastern Equatoria'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'SS-JG', _1: 'Jonglei'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'SS-LK', _1: 'Lakes'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'SS-BN', _1: 'Northern Bahr el Ghazal'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'SS-UY', _1: 'Unity'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'SS-NU', _1: 'Upper Nile'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'SS-WR', _1: 'Warrap'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'SS-BW', _1: 'Western Bahr el Ghazal'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'SS-EW', _1: 'Western Equatoria'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'ST':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'ST-P', _1: 'Príncipe'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'ST-S', _1: 'São Tomé'},
					_1: {ctor: '[]'}
				}
			};
		case 'SV':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'SV-AH', _1: 'Ahuachapán'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'SV-CA', _1: 'Cabañas'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'SV-CU', _1: 'Cuscatlán'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'SV-CH', _1: 'Chalatenango'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'SV-LI', _1: 'La Libertad'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'SV-PA', _1: 'La Paz'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'SV-UN', _1: 'La Unión'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'SV-MO', _1: 'Morazán'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'SV-SM', _1: 'San Miguel'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'SV-SS', _1: 'San Salvador'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'SV-SA', _1: 'Santa Ana'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'SV-SV', _1: 'San Vicente'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'SV-SO', _1: 'Sonsonate'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'SV-US', _1: 'Usulután'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'SX':
			return {ctor: '[]'};
		case 'SY':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'SY-HA', _1: 'Al Ḩasakah'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'SY-LA', _1: 'Al Lādhiqīyah'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'SY-QU', _1: 'Al Qunayţirah'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'SY-RA', _1: 'Ar Raqqah'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'SY-SU', _1: 'As Suwaydā\''},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'SY-DR', _1: 'Dar\'ā'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'SY-DY', _1: 'Dayr az Zawr'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'SY-DI', _1: 'Dimashq'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'SY-HL', _1: 'Ḩalab'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'SY-HM', _1: 'Ḩamāh'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'SY-HI', _1: 'Ḩimş'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'SY-ID', _1: 'Idlib'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'SY-RD', _1: 'Rīf Dimashq'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'SY-TA', _1: 'Ţarţūs'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'SZ':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'SZ-HH', _1: 'Hhohho'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'SZ-LU', _1: 'Lubombo'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'SZ-MA', _1: 'Manzini'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'SZ-SH', _1: 'Shiselweni'},
							_1: {ctor: '[]'}
						}
					}
				}
			};
		case 'TA':
			return {ctor: '[]'};
		case 'TC':
			return {ctor: '[]'};
		case 'TD':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'TD-BA', _1: 'Batha'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'TD-LC', _1: 'Lac'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'TD-BG', _1: 'Bahr el Gazel'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'TD-BO', _1: 'Borkou'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'TD-HL', _1: 'Hadjer Lamis'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'TD-EE', _1: 'Ennedi-Est'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'TD-EO', _1: 'Ennedi-Ouest'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'TD-KA', _1: 'Kanem'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'TD-LO', _1: 'Logone-Occidental'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'TD-LR', _1: 'Logone-Oriental'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'TD-ND', _1: 'Ville de Ndjamena'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'TD-MA', _1: 'Mandoul'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'TD-MO', _1: 'Mayo-Kébbi-Ouest'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'TD-ME', _1: 'Mayo-Kébbi-Est'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'TD-GR', _1: 'Guéra'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'TD-SA', _1: 'Salamat'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'TD-MC', _1: 'Moyen-Chari'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'TD-CB', _1: 'Chari-Baguirmi'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'TD-SI', _1: 'Sila'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'TD-TA', _1: 'Tandjilé'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'TD-TI', _1: 'Tibesti'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'TD-OD', _1: 'Ouaddaï'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'TD-WF', _1: 'Wadi Fira'},
																										_1: {ctor: '[]'}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'TF':
			return {ctor: '[]'};
		case 'TG':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'TG-C', _1: 'Centre'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'TG-K', _1: 'Kara'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'TG-M', _1: 'Maritime'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'TG-P', _1: 'Plateaux'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'TG-S', _1: 'Savannes'},
								_1: {ctor: '[]'}
							}
						}
					}
				}
			};
		case 'TH':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'TH-10', _1: 'Bangkok'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'TH-S', _1: 'Phatthaya'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'TH-37', _1: 'Amnat Charoen'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'TH-15', _1: 'Ang Thong'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'TH-38', _1: 'Bueng Kan'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'TH-31', _1: 'Buri Ram'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'TH-24', _1: 'Chachoengsao'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'TH-18', _1: 'Chai Nat'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'TH-36', _1: 'Chaiyaphum'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'TH-22', _1: 'Chanthaburi'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'TH-50', _1: 'Chiang Mai'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'TH-57', _1: 'Chiang Rai'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'TH-20', _1: 'Chon Buri'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'TH-86', _1: 'Chumphon'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'TH-46', _1: 'Kalasin'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'TH-62', _1: 'Kamphaeng Phet'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'TH-71', _1: 'Kanchanaburi'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'TH-40', _1: 'Khon Kaen'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'TH-81', _1: 'Krabi'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'TH-52', _1: 'Lampang'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'TH-51', _1: 'Lamphun'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'TH-42', _1: 'Loei'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'TH-16', _1: 'Lop Buri'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'TH-58', _1: 'Mae Hong Son'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'TH-44', _1: 'Maha Sarakham'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'TH-49', _1: 'Mukdahan'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'TH-26', _1: 'Nakhon Nayok'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'TH-73', _1: 'Nakhon Pathom'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'TH-48', _1: 'Nakhon Phanom'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'TH-30', _1: 'Nakhon Ratchasima'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'TH-60', _1: 'Nakhon Sawan'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'TH-80', _1: 'Nakhon Si Thammarat'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: 'TH-55', _1: 'Nan'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: 'TH-96', _1: 'Narathiwat'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: 'TH-39', _1: 'Nong Bua Lam Phu'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: 'TH-43', _1: 'Nong Khai'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: 'TH-12', _1: 'Nonthaburi'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: 'TH-13', _1: 'Pathum Thani'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: 'TH-94', _1: 'Pattani'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: 'TH-82', _1: 'Phangnga'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: 'TH-93', _1: 'Phatthalung'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: 'TH-56', _1: 'Phayao'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: 'TH-67', _1: 'Phetchabun'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: 'TH-76', _1: 'Phetchaburi'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: 'TH-66', _1: 'Phichit'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: 'TH-65', _1: 'Phitsanulok'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: 'TH-54', _1: 'Phrae'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: 'TH-14', _1: 'Phra Nakhon Si Ayutthaya'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: 'TH-83', _1: 'Phuket'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: 'TH-25', _1: 'Prachin Buri'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: 'TH-77', _1: 'Prachuap Khiri Khan'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: 'TH-85', _1: 'Ranong'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: 'TH-70', _1: 'Ratchaburi'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: 'TH-21', _1: 'Rayong'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: 'TH-45', _1: 'Roi Et'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: 'TH-27', _1: 'Sa Kaeo'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: 'TH-47', _1: 'Sakon Nakhon'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: 'TH-11', _1: 'Samut Prakan'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: 'TH-74', _1: 'Samut Sakhon'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: 'TH-75', _1: 'Samut Songkhram'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: 'TH-19', _1: 'Saraburi'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: 'TH-91', _1: 'Satun'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: 'TH-17', _1: 'Sing Buri'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: 'TH-33', _1: 'Si Sa Ket'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: 'TH-90', _1: 'Songkhla'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: 'TH-64', _1: 'Sukhothai'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: 'TH-72', _1: 'Suphan Buri'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: 'TH-84', _1: 'Surat Thani'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: 'TH-32', _1: 'Surin'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: 'TH-63', _1: 'Tak'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: 'TH-92', _1: 'Trang'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: 'TH-23', _1: 'Trat'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: 'TH-34', _1: 'Ubon Ratchathani'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: 'TH-41', _1: 'Udon Thani'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: 'TH-61', _1: 'Uthai Thani'},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: 'TH-53', _1: 'Uttaradit'},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: 'TH-95', _1: 'Yala'},
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: {ctor: '_Tuple2', _0: 'TH-35', _1: 'Yasothon'},
																																																																																	_1: {ctor: '[]'}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'TJ':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'TJ-DU', _1: 'Dushanbe'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'TJ-GB', _1: 'Kŭhistoni Badakhshon'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'TJ-KT', _1: 'Khatlon'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'TJ-SU', _1: 'Sughd'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'TJ-RA', _1: 'Nohiyahoi Tobei Jumhurí'},
								_1: {ctor: '[]'}
							}
						}
					}
				}
			};
		case 'TK':
			return {ctor: '[]'};
		case 'TL':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'TL-AL', _1: 'Aileu'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'TL-AN', _1: 'Ainaro'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'TL-BA', _1: 'Baucau'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'TL-BO', _1: 'Bobonaro'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'TL-CO', _1: 'Cova Lima'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'TL-DI', _1: 'Díli'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'TL-ER', _1: 'Ermera'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'TL-LA', _1: 'Lautem'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'TL-LI', _1: 'Liquiça'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'TL-MT', _1: 'Manatuto'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'TL-MF', _1: 'Manufahi'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'TL-OE', _1: 'Oecussi'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'TL-VI', _1: 'Viqueque'},
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'TM':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'TM-A', _1: 'Ahal'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'TM-B', _1: 'Balkan'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'TM-D', _1: 'Daşoguz'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'TM-L', _1: 'Lebap'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'TM-M', _1: 'Mary'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'TM-S', _1: 'Aşgabat'},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			};
		case 'TN':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'TN-31', _1: 'Béja'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'TN-13', _1: 'Ben Arous'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'TN-23', _1: 'Bizerte'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'TN-81', _1: 'Gabès'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'TN-71', _1: 'Gafsa'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'TN-32', _1: 'Jendouba'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'TN-41', _1: 'Kairouan'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'TN-42', _1: 'Kasserine'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'TN-73', _1: 'Kébili'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'TN-12', _1: 'L\'Ariana'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'TN-14', _1: 'La Manouba'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'TN-33', _1: 'Le Kef'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'TN-53', _1: 'Mahdia'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'TN-82', _1: 'Médenine'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'TN-52', _1: 'Monastir'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'TN-21', _1: 'Nabeul'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'TN-61', _1: 'Sfax'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'TN-43', _1: 'Sidi Bouzid'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'TN-34', _1: 'Siliana'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'TN-51', _1: 'Sousse'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'TN-83', _1: 'Tataouine'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'TN-72', _1: 'Tozeur'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'TN-11', _1: 'Tunis'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'TN-22', _1: 'Zaghouan'},
																											_1: {ctor: '[]'}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'TO':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'TO-01', _1: '\'Eua'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'TO-02', _1: 'Ha\'apai'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'TO-03', _1: 'Niuas'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'TO-04', _1: 'Tongatapu'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'TO-05', _1: 'Vava\'u'},
								_1: {ctor: '[]'}
							}
						}
					}
				}
			};
		case 'TR':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'TR-01', _1: 'Adana'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'TR-02', _1: 'Adıyaman'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'TR-03', _1: 'Afyonkarahisar'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'TR-04', _1: 'Ağrı'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'TR-68', _1: 'Aksaray'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'TR-05', _1: 'Amasya'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'TR-06', _1: 'Ankara'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'TR-07', _1: 'Antalya'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'TR-75', _1: 'Ardahan'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'TR-08', _1: 'Artvin'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'TR-09', _1: 'Aydın'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'TR-10', _1: 'Balıkesir'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'TR-74', _1: 'Bartın'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'TR-72', _1: 'Batman'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'TR-69', _1: 'Bayburt'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'TR-11', _1: 'Bilecik'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'TR-12', _1: 'Bingöl'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'TR-13', _1: 'Bitlis'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'TR-14', _1: 'Bolu'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'TR-15', _1: 'Burdur'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'TR-16', _1: 'Bursa'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'TR-17', _1: 'Çanakkale'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'TR-18', _1: 'Çankırı'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'TR-19', _1: 'Çorum'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'TR-20', _1: 'Denizli'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'TR-21', _1: 'Diyarbakır'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'TR-81', _1: 'Düzce'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'TR-22', _1: 'Edirne'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'TR-23', _1: 'Elazığ'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'TR-24', _1: 'Erzincan'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'TR-25', _1: 'Erzurum'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'TR-26', _1: 'Eskişehir'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: 'TR-27', _1: 'Gaziantep'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: 'TR-28', _1: 'Giresun'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: 'TR-29', _1: 'Gümüşhane'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: 'TR-30', _1: 'Hakkâri'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: 'TR-31', _1: 'Hatay'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: 'TR-76', _1: 'Iğdır'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: 'TR-32', _1: 'Isparta'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: 'TR-34', _1: 'İstanbul'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: 'TR-35', _1: 'İzmir'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: 'TR-46', _1: 'Kahramanmaraş'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: 'TR-78', _1: 'Karabük'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: 'TR-70', _1: 'Karaman'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: 'TR-36', _1: 'Kars'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: 'TR-37', _1: 'Kastamonu'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: 'TR-38', _1: 'Kayseri'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: 'TR-71', _1: 'Kırıkkale'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: 'TR-39', _1: 'Kırklareli'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: 'TR-40', _1: 'Kırşehir'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: 'TR-79', _1: 'Kilis'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: 'TR-41', _1: 'Kocaeli'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: 'TR-42', _1: 'Konya'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: 'TR-43', _1: 'Kütahya'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: 'TR-44', _1: 'Malatya'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: 'TR-45', _1: 'Manisa'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: 'TR-47', _1: 'Mardin'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: 'TR-33', _1: 'Mersin'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: 'TR-48', _1: 'Muğla'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: 'TR-49', _1: 'Muş'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: 'TR-50', _1: 'Nevşehir'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: 'TR-51', _1: 'Niğde'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: 'TR-52', _1: 'Ordu'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: 'TR-80', _1: 'Osmaniye'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: 'TR-53', _1: 'Rize'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: 'TR-54', _1: 'Sakarya'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: 'TR-55', _1: 'Samsun'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: 'TR-56', _1: 'Siirt'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: 'TR-57', _1: 'Sinop'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: 'TR-58', _1: 'Sivas'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: 'TR-63', _1: 'Şanlıurfa'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: 'TR-73', _1: 'Şırnak'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: 'TR-59', _1: 'Tekirdağ'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: 'TR-60', _1: 'Tokat'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: 'TR-61', _1: 'Trabzon'},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: 'TR-62', _1: 'Tunceli'},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: 'TR-64', _1: 'Uşak'},
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: {ctor: '_Tuple2', _0: 'TR-65', _1: 'Van'},
																																																																																	_1: {
																																																																																		ctor: '::',
																																																																																		_0: {ctor: '_Tuple2', _0: 'TR-77', _1: 'Yalova'},
																																																																																		_1: {
																																																																																			ctor: '::',
																																																																																			_0: {ctor: '_Tuple2', _0: 'TR-66', _1: 'Yozgat'},
																																																																																			_1: {
																																																																																				ctor: '::',
																																																																																				_0: {ctor: '_Tuple2', _0: 'TR-67', _1: 'Zonguldak'},
																																																																																				_1: {ctor: '[]'}
																																																																																			}
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'TT':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'TT-CTT', _1: 'Couva-Tabaquite-Talparo'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'TT-DMN', _1: 'Diego Martin'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'TT-MRC', _1: 'Mayaro-Rio Claro'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'TT-PED', _1: 'Penal-Debe'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'TT-PRT', _1: 'Princes Town'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'TT-SGE', _1: 'Sangre Grande'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'TT-SJL', _1: 'San Juan-Laventille'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'TT-SIP', _1: 'Siparia'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'TT-TUP', _1: 'Tunapuna-Piarco'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'TT-ARI', _1: 'Arima'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'TT-CHA', _1: 'Chaguanas'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'TT-PTF', _1: 'Point Fortin'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'TT-POS', _1: 'Port of Spain'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'TT-SFO', _1: 'San Fernando'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'TT-TOB', _1: 'Tobago'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'TV':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'TV-FUN', _1: 'Funafuti'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'TV-NMG', _1: 'Nanumanga'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'TV-NMA', _1: 'Nanumea'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'TV-NIT', _1: 'Niutao'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'TV-NUI', _1: 'Nui'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'TV-NKF', _1: 'Nukufetau'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'TV-NKL', _1: 'Nukulaelae'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'TV-VAI', _1: 'Vaitupu'},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'TW':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'TW-CHA', _1: 'Changhua'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'TW-CYI', _1: 'Chiayi'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'TW-CYQ', _1: 'Chiayi'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'TW-HSZ', _1: 'Hsinchu'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'TW-HSQ', _1: 'Hsinchu'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'TW-HUA', _1: 'Hualien'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'TW-KHH', _1: 'Kaohsiung'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'TW-KEE', _1: 'Keelung'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'TW-KIN', _1: 'Kinmen'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'TW-LIE', _1: 'Lienchiang'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'TW-MIA', _1: 'Miaoli'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'TW-NAN', _1: 'Nantou'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'TW-NWT', _1: 'New Taipei'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'TW-PEN', _1: 'Penghu'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'TW-PIF', _1: 'Pingtung'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'TW-TXG', _1: 'Taichung'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'TW-TNN', _1: 'Tainan'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'TW-TPE', _1: 'Taipei'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'TW-TTT', _1: 'Taitung'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'TW-TAO', _1: 'Taoyuan'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'TW-ILA', _1: 'Yilan'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'TW-YUN', _1: 'Yunlin'},
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'TZ':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'TZ-01', _1: 'Arusha'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'TZ-02', _1: 'Dar es Salaam'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'TZ-03', _1: 'Dodoma'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'TZ-27', _1: 'Geita'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'TZ-04', _1: 'Iringa'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'TZ-05', _1: 'Kagera'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'TZ-06', _1: 'Pemba North'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'TZ-07', _1: 'Zanzibar North'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'TZ-28', _1: 'Katavi'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'TZ-08', _1: 'Kigoma'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'TZ-09', _1: 'Kilimanjaro'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'TZ-10', _1: 'Pemba South'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'TZ-11', _1: 'Zanzibar South'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'TZ-12', _1: 'Lindi'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'TZ-26', _1: 'Manyara'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'TZ-13', _1: 'Mara'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'TZ-14', _1: 'Mbeya'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'TZ-15', _1: 'Zanzibar West'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'TZ-16', _1: 'Morogoro'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'TZ-17', _1: 'Mtwara'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'TZ-18', _1: 'Mwanza'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'TZ-29', _1: 'Njombe'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'TZ-19', _1: 'Coast'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'TZ-20', _1: 'Rukwa'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'TZ-21', _1: 'Ruvuma'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'TZ-22', _1: 'Shinyanga'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'TZ-30', _1: 'Simiyu'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'TZ-23', _1: 'Singida'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'TZ-24', _1: 'Tabora'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'TZ-25', _1: 'Tanga'},
																																	_1: {ctor: '[]'}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'UA':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'UA-71', _1: 'Cherkaska oblast'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'UA-74', _1: 'Chernihivska oblast'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'UA-77', _1: 'Chernivetska oblast'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'UA-12', _1: 'Dnipropetrovska oblast'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'UA-14', _1: 'Donetska oblast'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'UA-26', _1: 'Ivano-Frankivska oblast'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'UA-63', _1: 'Kharkivska oblast'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'UA-65', _1: 'Khersonska oblast'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'UA-68', _1: 'Khmelnytska oblast'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'UA-35', _1: 'Kirovohradska oblast'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'UA-32', _1: 'Kyivska oblast'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'UA-09', _1: 'Luhanska oblast'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'UA-46', _1: 'Lvivska oblast'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'UA-48', _1: 'Mykolaivska oblast'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'UA-51', _1: 'Odeska oblast'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'UA-53', _1: 'Poltavska oblast'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'UA-56', _1: 'Rivnenska oblast'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'UA-59', _1: 'Sumska oblast'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'UA-61', _1: 'Ternopilska oblast'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'UA-05', _1: 'Vinnytska oblast'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'UA-07', _1: 'Volynska oblast'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'UA-21', _1: 'Zakarpatska oblast'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'UA-23', _1: 'Zaporizka oblast'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'UA-18', _1: 'Zhytomyrska oblast'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'UA-43', _1: 'Avtonomna Respublika Krym'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'UA-30', _1: 'Kyiv'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'UA-40', _1: 'Sevastopol'},
																														_1: {ctor: '[]'}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'UG':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'UG-C', _1: 'Central'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'UG-E', _1: 'Eastern'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'UG-N', _1: 'Northern'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'UG-W', _1: 'Western'},
							_1: {ctor: '[]'}
						}
					}
				}
			};
		case 'UM':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'UM-81', _1: 'Baker Island'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'UM-84', _1: 'Howland Island'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'UM-86', _1: 'Jarvis Island'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'UM-67', _1: 'Johnston Atoll'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'UM-89', _1: 'Kingman Reef'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'UM-71', _1: 'Midway Islands'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'UM-76', _1: 'Navassa Island'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'UM-95', _1: 'Palmyra Atoll'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'UM-79', _1: 'Wake Island'},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'UN':
			return {ctor: '[]'};
		case 'US':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'US-AL', _1: 'Alabama'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'US-AK', _1: 'Alaska'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'US-AZ', _1: 'Arizona'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'US-AR', _1: 'Arkansas'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'US-CA', _1: 'California'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'US-CO', _1: 'Colorado'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'US-CT', _1: 'Connecticut'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'US-DE', _1: 'Delaware'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'US-FL', _1: 'Florida'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'US-GA', _1: 'Georgia'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'US-HI', _1: 'Hawaii'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'US-ID', _1: 'Idaho'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'US-IL', _1: 'Illinois'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'US-IN', _1: 'Indiana'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'US-IA', _1: 'Iowa'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'US-KS', _1: 'Kansas'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'US-KY', _1: 'Kentucky'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'US-LA', _1: 'Louisiana'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'US-ME', _1: 'Maine'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'US-MD', _1: 'Maryland'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'US-MA', _1: 'Massachusetts'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'US-MI', _1: 'Michigan'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'US-MN', _1: 'Minnesota'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'US-MS', _1: 'Mississippi'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'US-MO', _1: 'Missouri'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'US-MT', _1: 'Montana'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'US-NE', _1: 'Nebraska'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'US-NV', _1: 'Nevada'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'US-NH', _1: 'New Hampshire'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'US-NJ', _1: 'New Jersey'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'US-NM', _1: 'New Mexico'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'US-NY', _1: 'New York'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: 'US-NC', _1: 'North Carolina'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: 'US-ND', _1: 'North Dakota'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: 'US-OH', _1: 'Ohio'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: 'US-OK', _1: 'Oklahoma'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: 'US-OR', _1: 'Oregon'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: 'US-PA', _1: 'Pennsylvania'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: 'US-RI', _1: 'Rhode Island'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: 'US-SC', _1: 'South Carolina'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: 'US-SD', _1: 'South Dakota'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: 'US-TN', _1: 'Tennessee'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: 'US-TX', _1: 'Texas'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: 'US-UT', _1: 'Utah'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: 'US-VT', _1: 'Vermont'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: 'US-VA', _1: 'Virginia'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: 'US-WA', _1: 'Washington'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: 'US-WV', _1: 'West Virginia'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: 'US-WI', _1: 'Wisconsin'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: 'US-WY', _1: 'Wyoming'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: 'US-DC', _1: 'District of Columbia'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: 'US-AS', _1: 'American Samoa'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: 'US-GU', _1: 'Guam'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: 'US-MP', _1: 'Northern Mariana Islands'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: 'US-PR', _1: 'Puerto Rico'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: 'US-UM', _1: 'United States Minor Outlying Islands'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: 'US-VI', _1: 'Virgin Islands, U.S.'},
																																																												_1: {ctor: '[]'}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'UY':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'UY-AR', _1: 'Artigas'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'UY-CA', _1: 'Canelones'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'UY-CL', _1: 'Cerro Largo'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'UY-CO', _1: 'Colonia'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'UY-DU', _1: 'Durazno'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'UY-FS', _1: 'Flores'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'UY-FD', _1: 'Florida'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'UY-LA', _1: 'Lavalleja'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'UY-MA', _1: 'Maldonado'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'UY-MO', _1: 'Montevideo'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'UY-PA', _1: 'Paysandú'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'UY-RN', _1: 'Río Negro'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'UY-RV', _1: 'Rivera'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'UY-RO', _1: 'Rocha'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'UY-SA', _1: 'Salto'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'UY-SJ', _1: 'San José'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'UY-SO', _1: 'Soriano'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'UY-TA', _1: 'Tacuarembó'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'UY-TT', _1: 'Treinta y Tres'},
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'UZ':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'UZ-TK', _1: 'Toshkent'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'UZ-AN', _1: 'Andijon'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'UZ-BU', _1: 'Buxoro'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'UZ-FA', _1: 'Farg‘ona'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'UZ-JI', _1: 'Jizzax'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'UZ-NG', _1: 'Namangan'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'UZ-NW', _1: 'Navoiy'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'UZ-QA', _1: 'Qashqadaryo'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'UZ-SA', _1: 'Samarqand'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'UZ-SI', _1: 'Sirdaryo'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'UZ-SU', _1: 'Surxondaryo'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'UZ-TO', _1: 'Toshkent'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'UZ-XO', _1: 'Xorazm'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'UZ-QR', _1: 'Qoraqalpog‘iston Respublikasi'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'VA':
			return {ctor: '[]'};
		case 'VC':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'VC-01', _1: 'Charlotte'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'VC-06', _1: 'Grenadines'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'VC-02', _1: 'Saint Andrew'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'VC-03', _1: 'Saint David'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'VC-04', _1: 'Saint George'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'VC-05', _1: 'Saint Patrick'},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			};
		case 'VE':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'VE-W', _1: 'Dependencias Federales'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'VE-A', _1: 'Distrito Federal'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'VE-Z', _1: 'Amazonas'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'VE-B', _1: 'Anzoátegui'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'VE-C', _1: 'Apure'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'VE-D', _1: 'Aragua'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'VE-E', _1: 'Barinas'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'VE-F', _1: 'Bolívar'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'VE-G', _1: 'Carabobo'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'VE-H', _1: 'Cojedes'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'VE-Y', _1: 'Delta Amacuro'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'VE-I', _1: 'Falcón'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'VE-J', _1: 'Guárico'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'VE-K', _1: 'Lara'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'VE-L', _1: 'Mérida'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'VE-M', _1: 'Miranda'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'VE-N', _1: 'Monagas'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'VE-O', _1: 'Nueva Esparta'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'VE-P', _1: 'Portuguesa'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'VE-R', _1: 'Sucre'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'VE-S', _1: 'Táchira'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'VE-T', _1: 'Trujillo'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'VE-X', _1: 'Vargas'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'VE-U', _1: 'Yaracuy'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'VE-V', _1: 'Zulia'},
																												_1: {ctor: '[]'}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'VG':
			return {ctor: '[]'};
		case 'VI':
			return {ctor: '[]'};
		case 'VN':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'VN-44', _1: 'An Giang'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'VN-43', _1: 'Bà Rịa–Vũng Tàu'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'VN-54', _1: 'Bắc Giang'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'VN-53', _1: 'Bắc Kạn'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'VN-55', _1: 'Bạc Liêu'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'VN-56', _1: 'Bắc Ninh'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'VN-50', _1: 'Bến Tre'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'VN-31', _1: 'Bình Định'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'VN-57', _1: 'Bình Dương'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'VN-58', _1: 'Bình Phước'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'VN-40', _1: 'Bình Thuận'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'VN-59', _1: 'Cà Mau'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'VN-04', _1: 'Cao Bằng'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'VN-33', _1: 'Đắk Lắk'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'VN-72', _1: 'Đắk Nông'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'VN-71', _1: 'Điện Biên'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'VN-39', _1: 'Đồng Nai'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'VN-45', _1: 'Đồng Tháp'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'VN-30', _1: 'Gia Lai'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'VN-03', _1: 'Hà Giang'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'VN-63', _1: 'Hà Nam'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'VN-23', _1: 'Hà Tĩnh'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: 'VN-61', _1: 'Hải Dương'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: 'VN-73', _1: 'Hậu Giang'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'VN-14', _1: 'Hòa Bình'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'VN-66', _1: 'Hưng Yên'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: 'VN-34', _1: 'Khánh Hòa'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: 'VN-47', _1: 'Kiên Giang'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: 'VN-28', _1: 'Kon Tum'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: 'VN-01', _1: 'Lai Châu'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: 'VN-35', _1: 'Lâm Đồng'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'VN-09', _1: 'Lạng Sơn'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: 'VN-02', _1: 'Lào Cai'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: 'VN-41', _1: 'Long An'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: 'VN-67', _1: 'Nam Định'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: 'VN-22', _1: 'Nghệ An'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: 'VN-18', _1: 'Ninh Bình'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: 'VN-36', _1: 'Ninh Thuận'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: 'VN-68', _1: 'Phú Thọ'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: 'VN-32', _1: 'Phú Yên'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: 'VN-24', _1: 'Quảng Bình'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: 'VN-27', _1: 'Quảng Nam'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: 'VN-29', _1: 'Quảng Ngãi'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: 'VN-13', _1: 'Quảng Ninh'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: 'VN-25', _1: 'Quảng Trị'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: 'VN-52', _1: 'Sóc Trăng'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: 'VN-05', _1: 'Sơn La'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: 'VN-37', _1: 'Tây Ninh'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: 'VN-20', _1: 'Thái Bình'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: 'VN-69', _1: 'Thái Nguyên'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: 'VN-21', _1: 'Thanh Hóa'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: 'VN-26', _1: 'Thừa Thiên–Huế'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: 'VN-46', _1: 'Tiền Giang'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: 'VN-51', _1: 'Trà Vinh'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: 'VN-07', _1: 'Tuyên Quang'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: 'VN-49', _1: 'Vĩnh Long'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: 'VN-70', _1: 'Vĩnh Phúc'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: 'VN-06', _1: 'Yên Bái'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: 'VN-CT', _1: 'Cần Thơ'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: 'VN-DN', _1: 'Đà Nẵng'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: 'VN-HN', _1: 'Hà Nội'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: 'VN-HP', _1: 'Hải Phòng'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: 'VN-SG', _1: 'Hồ Chí Minh'},
																																																																		_1: {ctor: '[]'}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'VU':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'VU-MAP', _1: 'Malampa'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'VU-PAM', _1: 'Pénama'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'VU-SAM', _1: 'Sanma'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'VU-SEE', _1: 'Shéfa'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'VU-TAE', _1: 'Taféa'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'VU-TOB', _1: 'Torba'},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			};
		case 'WF':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'WF-AL', _1: 'Alo'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'WF-SG', _1: 'Sigave'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'WF-UV', _1: 'Uvea'},
						_1: {ctor: '[]'}
					}
				}
			};
		case 'WS':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'WS-AA', _1: 'A\'ana'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'WS-AL', _1: 'Aiga-i-le-Tai'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'WS-AT', _1: 'Atua'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'WS-FA', _1: 'Fa\'asaleleaga'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'WS-GE', _1: 'Gaga\'emauga'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'WS-GI', _1: 'Gagaifomauga'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'WS-PA', _1: 'Palauli'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'WS-SA', _1: 'Satupa\'itea'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'WS-TU', _1: 'Tuamasaga'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'WS-VF', _1: 'Va\'a-o-Fonoti'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'WS-VS', _1: 'Vaisigano'},
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'XK':
			return {ctor: '[]'};
		case 'YE':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'YE-SA', _1: 'Amānat al ‘Āşimah'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'YE-AB', _1: 'Abyān'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'YE-AD', _1: '‘Adan'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'YE-DA', _1: 'Aḑ Ḑāli‘'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'YE-BA', _1: 'Al Bayḑā’'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'YE-HU', _1: 'Al Ḩudaydah'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'YE-JA', _1: 'Al Jawf'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'YE-MR', _1: 'Al Mahrah'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'YE-MW', _1: 'Al Maḩwīt'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'YE-AM', _1: '‘Amrān'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'YE-SU', _1: 'Arkhabīl Suquţrá'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'YE-DH', _1: 'Dhamār'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'YE-HD', _1: 'Ḩaḑramawt'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'YE-HJ', _1: 'Ḩajjah'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'YE-IB', _1: 'Ibb'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'YE-LA', _1: 'Laḩij'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'YE-MA', _1: 'Ma’rib'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: 'YE-RA', _1: 'Raymah'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'YE-SD', _1: 'Şāʻdah'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'YE-SN', _1: 'Şanʻā’'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'YE-SH', _1: 'Shabwah'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'YE-TA', _1: 'Tā‘izz'},
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'YT':
			return {ctor: '[]'};
		case 'ZA':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'ZA-EC', _1: 'Eastern Cape'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'ZA-FS', _1: 'Free State'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'ZA-GT', _1: 'Gauteng'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'ZA-NL', _1: 'KwaZulu-Natal'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'ZA-LP', _1: 'Limpopo'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'ZA-MP', _1: 'Mpumalanga'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'ZA-NC', _1: 'Northern Cape'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'ZA-NW', _1: 'North West'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'ZA-WC', _1: 'Western Cape'},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'ZM':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'ZM-02', _1: 'Central'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'ZM-08', _1: 'Copperbelt'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'ZM-03', _1: 'Eastern'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'ZM-04', _1: 'Luapula'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'ZM-09', _1: 'Lusaka'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'ZM-05', _1: 'Northern'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'ZM-06', _1: 'North-Western'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'ZM-07', _1: 'Southern'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'ZM-01', _1: 'Western'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'ZM-10', _1: 'Muchinga'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		case 'ZW':
			return {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'ZW-BU', _1: 'Bulawayo'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'ZW-HA', _1: 'Harare'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'ZW-MA', _1: 'Manicaland'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'ZW-MC', _1: 'Mashonaland Central'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'ZW-ME', _1: 'Mashonaland East'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'ZW-MW', _1: 'Mashonaland West'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'ZW-MV', _1: 'Masvingo'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'ZW-MN', _1: 'Matabeleland North'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'ZW-MS', _1: 'Matabeleland South'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'ZW-MI', _1: 'Midlands'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			};
		default:
			return {ctor: '[]'};
	}
};
var _gizra$backoffice$Country$ZW = {ctor: 'ZW'};
var _gizra$backoffice$Country$ZM = {ctor: 'ZM'};
var _gizra$backoffice$Country$ZA = {ctor: 'ZA'};
var _gizra$backoffice$Country$YT = {ctor: 'YT'};
var _gizra$backoffice$Country$YE = {ctor: 'YE'};
var _gizra$backoffice$Country$XK = {ctor: 'XK'};
var _gizra$backoffice$Country$WS = {ctor: 'WS'};
var _gizra$backoffice$Country$WF = {ctor: 'WF'};
var _gizra$backoffice$Country$VU = {ctor: 'VU'};
var _gizra$backoffice$Country$VN = {ctor: 'VN'};
var _gizra$backoffice$Country$VI = {ctor: 'VI'};
var _gizra$backoffice$Country$VG = {ctor: 'VG'};
var _gizra$backoffice$Country$VE = {ctor: 'VE'};
var _gizra$backoffice$Country$VC = {ctor: 'VC'};
var _gizra$backoffice$Country$VA = {ctor: 'VA'};
var _gizra$backoffice$Country$UZ = {ctor: 'UZ'};
var _gizra$backoffice$Country$UY = {ctor: 'UY'};
var _gizra$backoffice$Country$US = {ctor: 'US'};
var _gizra$backoffice$Country$UN = {ctor: 'UN'};
var _gizra$backoffice$Country$UM = {ctor: 'UM'};
var _gizra$backoffice$Country$UG = {ctor: 'UG'};
var _gizra$backoffice$Country$UA = {ctor: 'UA'};
var _gizra$backoffice$Country$TZ = {ctor: 'TZ'};
var _gizra$backoffice$Country$TW = {ctor: 'TW'};
var _gizra$backoffice$Country$TV = {ctor: 'TV'};
var _gizra$backoffice$Country$TT = {ctor: 'TT'};
var _gizra$backoffice$Country$TR = {ctor: 'TR'};
var _gizra$backoffice$Country$TO = {ctor: 'TO'};
var _gizra$backoffice$Country$TN = {ctor: 'TN'};
var _gizra$backoffice$Country$TM = {ctor: 'TM'};
var _gizra$backoffice$Country$TL = {ctor: 'TL'};
var _gizra$backoffice$Country$TK = {ctor: 'TK'};
var _gizra$backoffice$Country$TJ = {ctor: 'TJ'};
var _gizra$backoffice$Country$TH = {ctor: 'TH'};
var _gizra$backoffice$Country$TG = {ctor: 'TG'};
var _gizra$backoffice$Country$TF = {ctor: 'TF'};
var _gizra$backoffice$Country$TD = {ctor: 'TD'};
var _gizra$backoffice$Country$TC = {ctor: 'TC'};
var _gizra$backoffice$Country$TA = {ctor: 'TA'};
var _gizra$backoffice$Country$SZ = {ctor: 'SZ'};
var _gizra$backoffice$Country$SY = {ctor: 'SY'};
var _gizra$backoffice$Country$SX = {ctor: 'SX'};
var _gizra$backoffice$Country$SV = {ctor: 'SV'};
var _gizra$backoffice$Country$ST = {ctor: 'ST'};
var _gizra$backoffice$Country$SS = {ctor: 'SS'};
var _gizra$backoffice$Country$SR = {ctor: 'SR'};
var _gizra$backoffice$Country$SO = {ctor: 'SO'};
var _gizra$backoffice$Country$SN = {ctor: 'SN'};
var _gizra$backoffice$Country$SM = {ctor: 'SM'};
var _gizra$backoffice$Country$SL = {ctor: 'SL'};
var _gizra$backoffice$Country$SK = {ctor: 'SK'};
var _gizra$backoffice$Country$SJ = {ctor: 'SJ'};
var _gizra$backoffice$Country$SI = {ctor: 'SI'};
var _gizra$backoffice$Country$SH = {ctor: 'SH'};
var _gizra$backoffice$Country$SG = {ctor: 'SG'};
var _gizra$backoffice$Country$SE = {ctor: 'SE'};
var _gizra$backoffice$Country$SD = {ctor: 'SD'};
var _gizra$backoffice$Country$SC = {ctor: 'SC'};
var _gizra$backoffice$Country$SB = {ctor: 'SB'};
var _gizra$backoffice$Country$SA = {ctor: 'SA'};
var _gizra$backoffice$Country$RW = {ctor: 'RW'};
var _gizra$backoffice$Country$RU = {ctor: 'RU'};
var _gizra$backoffice$Country$RS = {ctor: 'RS'};
var _gizra$backoffice$Country$RO = {ctor: 'RO'};
var _gizra$backoffice$Country$RE = {ctor: 'RE'};
var _gizra$backoffice$Country$QO = {ctor: 'QO'};
var _gizra$backoffice$Country$QA = {ctor: 'QA'};
var _gizra$backoffice$Country$PY = {ctor: 'PY'};
var _gizra$backoffice$Country$PW = {ctor: 'PW'};
var _gizra$backoffice$Country$PT = {ctor: 'PT'};
var _gizra$backoffice$Country$PS = {ctor: 'PS'};
var _gizra$backoffice$Country$PR = {ctor: 'PR'};
var _gizra$backoffice$Country$PN = {ctor: 'PN'};
var _gizra$backoffice$Country$PM = {ctor: 'PM'};
var _gizra$backoffice$Country$PL = {ctor: 'PL'};
var _gizra$backoffice$Country$PK = {ctor: 'PK'};
var _gizra$backoffice$Country$PH = {ctor: 'PH'};
var _gizra$backoffice$Country$PG = {ctor: 'PG'};
var _gizra$backoffice$Country$PF = {ctor: 'PF'};
var _gizra$backoffice$Country$PE = {ctor: 'PE'};
var _gizra$backoffice$Country$PA = {ctor: 'PA'};
var _gizra$backoffice$Country$OM = {ctor: 'OM'};
var _gizra$backoffice$Country$NZ = {ctor: 'NZ'};
var _gizra$backoffice$Country$NU = {ctor: 'NU'};
var _gizra$backoffice$Country$NR = {ctor: 'NR'};
var _gizra$backoffice$Country$NP = {ctor: 'NP'};
var _gizra$backoffice$Country$NO = {ctor: 'NO'};
var _gizra$backoffice$Country$NL = {ctor: 'NL'};
var _gizra$backoffice$Country$NI = {ctor: 'NI'};
var _gizra$backoffice$Country$NG = {ctor: 'NG'};
var _gizra$backoffice$Country$NF = {ctor: 'NF'};
var _gizra$backoffice$Country$NE = {ctor: 'NE'};
var _gizra$backoffice$Country$NC = {ctor: 'NC'};
var _gizra$backoffice$Country$NA = {ctor: 'NA'};
var _gizra$backoffice$Country$MZ = {ctor: 'MZ'};
var _gizra$backoffice$Country$MY = {ctor: 'MY'};
var _gizra$backoffice$Country$MX = {ctor: 'MX'};
var _gizra$backoffice$Country$MW = {ctor: 'MW'};
var _gizra$backoffice$Country$MV = {ctor: 'MV'};
var _gizra$backoffice$Country$MU = {ctor: 'MU'};
var _gizra$backoffice$Country$MT = {ctor: 'MT'};
var _gizra$backoffice$Country$MS = {ctor: 'MS'};
var _gizra$backoffice$Country$MR = {ctor: 'MR'};
var _gizra$backoffice$Country$MQ = {ctor: 'MQ'};
var _gizra$backoffice$Country$MP = {ctor: 'MP'};
var _gizra$backoffice$Country$MO = {ctor: 'MO'};
var _gizra$backoffice$Country$MN = {ctor: 'MN'};
var _gizra$backoffice$Country$MM = {ctor: 'MM'};
var _gizra$backoffice$Country$ML = {ctor: 'ML'};
var _gizra$backoffice$Country$MK = {ctor: 'MK'};
var _gizra$backoffice$Country$MH = {ctor: 'MH'};
var _gizra$backoffice$Country$MG = {ctor: 'MG'};
var _gizra$backoffice$Country$MF = {ctor: 'MF'};
var _gizra$backoffice$Country$ME = {ctor: 'ME'};
var _gizra$backoffice$Country$MD = {ctor: 'MD'};
var _gizra$backoffice$Country$MC = {ctor: 'MC'};
var _gizra$backoffice$Country$MA = {ctor: 'MA'};
var _gizra$backoffice$Country$LY = {ctor: 'LY'};
var _gizra$backoffice$Country$LV = {ctor: 'LV'};
var _gizra$backoffice$Country$LU = {ctor: 'LU'};
var _gizra$backoffice$Country$LT = {ctor: 'LT'};
var _gizra$backoffice$Country$LS = {ctor: 'LS'};
var _gizra$backoffice$Country$LR = {ctor: 'LR'};
var _gizra$backoffice$Country$LK = {ctor: 'LK'};
var _gizra$backoffice$Country$LI = {ctor: 'LI'};
var _gizra$backoffice$Country$LC = {ctor: 'LC'};
var _gizra$backoffice$Country$LB = {ctor: 'LB'};
var _gizra$backoffice$Country$LA = {ctor: 'LA'};
var _gizra$backoffice$Country$KZ = {ctor: 'KZ'};
var _gizra$backoffice$Country$KY = {ctor: 'KY'};
var _gizra$backoffice$Country$KW = {ctor: 'KW'};
var _gizra$backoffice$Country$KR = {ctor: 'KR'};
var _gizra$backoffice$Country$KP = {ctor: 'KP'};
var _gizra$backoffice$Country$KN = {ctor: 'KN'};
var _gizra$backoffice$Country$KM = {ctor: 'KM'};
var _gizra$backoffice$Country$KI = {ctor: 'KI'};
var _gizra$backoffice$Country$KH = {ctor: 'KH'};
var _gizra$backoffice$Country$KG = {ctor: 'KG'};
var _gizra$backoffice$Country$KE = {ctor: 'KE'};
var _gizra$backoffice$Country$JP = {ctor: 'JP'};
var _gizra$backoffice$Country$JO = {ctor: 'JO'};
var _gizra$backoffice$Country$JM = {ctor: 'JM'};
var _gizra$backoffice$Country$JE = {ctor: 'JE'};
var _gizra$backoffice$Country$IT = {ctor: 'IT'};
var _gizra$backoffice$Country$IS = {ctor: 'IS'};
var _gizra$backoffice$Country$IR = {ctor: 'IR'};
var _gizra$backoffice$Country$IQ = {ctor: 'IQ'};
var _gizra$backoffice$Country$IO = {ctor: 'IO'};
var _gizra$backoffice$Country$IN = {ctor: 'IN'};
var _gizra$backoffice$Country$IM = {ctor: 'IM'};
var _gizra$backoffice$Country$IL = {ctor: 'IL'};
var _gizra$backoffice$Country$IE = {ctor: 'IE'};
var _gizra$backoffice$Country$ID = {ctor: 'ID'};
var _gizra$backoffice$Country$IC = {ctor: 'IC'};
var _gizra$backoffice$Country$HU = {ctor: 'HU'};
var _gizra$backoffice$Country$HT = {ctor: 'HT'};
var _gizra$backoffice$Country$HR = {ctor: 'HR'};
var _gizra$backoffice$Country$HN = {ctor: 'HN'};
var _gizra$backoffice$Country$HM = {ctor: 'HM'};
var _gizra$backoffice$Country$HK = {ctor: 'HK'};
var _gizra$backoffice$Country$GY = {ctor: 'GY'};
var _gizra$backoffice$Country$GW = {ctor: 'GW'};
var _gizra$backoffice$Country$GU = {ctor: 'GU'};
var _gizra$backoffice$Country$GT = {ctor: 'GT'};
var _gizra$backoffice$Country$GS = {ctor: 'GS'};
var _gizra$backoffice$Country$GR = {ctor: 'GR'};
var _gizra$backoffice$Country$GQ = {ctor: 'GQ'};
var _gizra$backoffice$Country$GP = {ctor: 'GP'};
var _gizra$backoffice$Country$GN = {ctor: 'GN'};
var _gizra$backoffice$Country$GM = {ctor: 'GM'};
var _gizra$backoffice$Country$GL = {ctor: 'GL'};
var _gizra$backoffice$Country$GI = {ctor: 'GI'};
var _gizra$backoffice$Country$GH = {ctor: 'GH'};
var _gizra$backoffice$Country$GG = {ctor: 'GG'};
var _gizra$backoffice$Country$GF = {ctor: 'GF'};
var _gizra$backoffice$Country$GE = {ctor: 'GE'};
var _gizra$backoffice$Country$GD = {ctor: 'GD'};
var _gizra$backoffice$Country$GB = {ctor: 'GB'};
var _gizra$backoffice$Country$GA = {ctor: 'GA'};
var _gizra$backoffice$Country$FR = {ctor: 'FR'};
var _gizra$backoffice$Country$FO = {ctor: 'FO'};
var _gizra$backoffice$Country$FM = {ctor: 'FM'};
var _gizra$backoffice$Country$FK = {ctor: 'FK'};
var _gizra$backoffice$Country$FJ = {ctor: 'FJ'};
var _gizra$backoffice$Country$FI = {ctor: 'FI'};
var _gizra$backoffice$Country$EZ = {ctor: 'EZ'};
var _gizra$backoffice$Country$EU = {ctor: 'EU'};
var _gizra$backoffice$Country$ET = {ctor: 'ET'};
var _gizra$backoffice$Country$ES = {ctor: 'ES'};
var _gizra$backoffice$Country$ER = {ctor: 'ER'};
var _gizra$backoffice$Country$EH = {ctor: 'EH'};
var _gizra$backoffice$Country$EG = {ctor: 'EG'};
var _gizra$backoffice$Country$EE = {ctor: 'EE'};
var _gizra$backoffice$Country$EC = {ctor: 'EC'};
var _gizra$backoffice$Country$EA = {ctor: 'EA'};
var _gizra$backoffice$Country$DZ = {ctor: 'DZ'};
var _gizra$backoffice$Country$DO = {ctor: 'DO'};
var _gizra$backoffice$Country$DM = {ctor: 'DM'};
var _gizra$backoffice$Country$DK = {ctor: 'DK'};
var _gizra$backoffice$Country$DJ = {ctor: 'DJ'};
var _gizra$backoffice$Country$DG = {ctor: 'DG'};
var _gizra$backoffice$Country$DE = {ctor: 'DE'};
var _gizra$backoffice$Country$CZ = {ctor: 'CZ'};
var _gizra$backoffice$Country$CY = {ctor: 'CY'};
var _gizra$backoffice$Country$CX = {ctor: 'CX'};
var _gizra$backoffice$Country$CW = {ctor: 'CW'};
var _gizra$backoffice$Country$CV = {ctor: 'CV'};
var _gizra$backoffice$Country$CU = {ctor: 'CU'};
var _gizra$backoffice$Country$CR = {ctor: 'CR'};
var _gizra$backoffice$Country$CP = {ctor: 'CP'};
var _gizra$backoffice$Country$CO = {ctor: 'CO'};
var _gizra$backoffice$Country$CN = {ctor: 'CN'};
var _gizra$backoffice$Country$CM = {ctor: 'CM'};
var _gizra$backoffice$Country$CL = {ctor: 'CL'};
var _gizra$backoffice$Country$CK = {ctor: 'CK'};
var _gizra$backoffice$Country$CI = {ctor: 'CI'};
var _gizra$backoffice$Country$CH = {ctor: 'CH'};
var _gizra$backoffice$Country$CG = {ctor: 'CG'};
var _gizra$backoffice$Country$CF = {ctor: 'CF'};
var _gizra$backoffice$Country$CD = {ctor: 'CD'};
var _gizra$backoffice$Country$CC = {ctor: 'CC'};
var _gizra$backoffice$Country$CA = {ctor: 'CA'};
var _gizra$backoffice$Country$BZ = {ctor: 'BZ'};
var _gizra$backoffice$Country$BY = {ctor: 'BY'};
var _gizra$backoffice$Country$BW = {ctor: 'BW'};
var _gizra$backoffice$Country$BV = {ctor: 'BV'};
var _gizra$backoffice$Country$BT = {ctor: 'BT'};
var _gizra$backoffice$Country$BS = {ctor: 'BS'};
var _gizra$backoffice$Country$BR = {ctor: 'BR'};
var _gizra$backoffice$Country$BQ = {ctor: 'BQ'};
var _gizra$backoffice$Country$BO = {ctor: 'BO'};
var _gizra$backoffice$Country$BN = {ctor: 'BN'};
var _gizra$backoffice$Country$BM = {ctor: 'BM'};
var _gizra$backoffice$Country$BL = {ctor: 'BL'};
var _gizra$backoffice$Country$BJ = {ctor: 'BJ'};
var _gizra$backoffice$Country$BI = {ctor: 'BI'};
var _gizra$backoffice$Country$BH = {ctor: 'BH'};
var _gizra$backoffice$Country$BG = {ctor: 'BG'};
var _gizra$backoffice$Country$BF = {ctor: 'BF'};
var _gizra$backoffice$Country$BE = {ctor: 'BE'};
var _gizra$backoffice$Country$BD = {ctor: 'BD'};
var _gizra$backoffice$Country$BB = {ctor: 'BB'};
var _gizra$backoffice$Country$BA = {ctor: 'BA'};
var _gizra$backoffice$Country$AZ = {ctor: 'AZ'};
var _gizra$backoffice$Country$AX = {ctor: 'AX'};
var _gizra$backoffice$Country$AW = {ctor: 'AW'};
var _gizra$backoffice$Country$AU = {ctor: 'AU'};
var _gizra$backoffice$Country$AT = {ctor: 'AT'};
var _gizra$backoffice$Country$AS = {ctor: 'AS'};
var _gizra$backoffice$Country$AR = {ctor: 'AR'};
var _gizra$backoffice$Country$AQ = {ctor: 'AQ'};
var _gizra$backoffice$Country$AO = {ctor: 'AO'};
var _gizra$backoffice$Country$AM = {ctor: 'AM'};
var _gizra$backoffice$Country$AL = {ctor: 'AL'};
var _gizra$backoffice$Country$AI = {ctor: 'AI'};
var _gizra$backoffice$Country$AG = {ctor: 'AG'};
var _gizra$backoffice$Country$AF = {ctor: 'AF'};
var _gizra$backoffice$Country$AE = {ctor: 'AE'};
var _gizra$backoffice$Country$AD = {ctor: 'AD'};
var _gizra$backoffice$Country$AC = {ctor: 'AC'};
var _gizra$backoffice$Country$allCountries = {
	ctor: '::',
	_0: _gizra$backoffice$Country$AC,
	_1: {
		ctor: '::',
		_0: _gizra$backoffice$Country$AD,
		_1: {
			ctor: '::',
			_0: _gizra$backoffice$Country$AE,
			_1: {
				ctor: '::',
				_0: _gizra$backoffice$Country$AF,
				_1: {
					ctor: '::',
					_0: _gizra$backoffice$Country$AG,
					_1: {
						ctor: '::',
						_0: _gizra$backoffice$Country$AI,
						_1: {
							ctor: '::',
							_0: _gizra$backoffice$Country$AL,
							_1: {
								ctor: '::',
								_0: _gizra$backoffice$Country$AM,
								_1: {
									ctor: '::',
									_0: _gizra$backoffice$Country$AO,
									_1: {
										ctor: '::',
										_0: _gizra$backoffice$Country$AQ,
										_1: {
											ctor: '::',
											_0: _gizra$backoffice$Country$AR,
											_1: {
												ctor: '::',
												_0: _gizra$backoffice$Country$AS,
												_1: {
													ctor: '::',
													_0: _gizra$backoffice$Country$AT,
													_1: {
														ctor: '::',
														_0: _gizra$backoffice$Country$AU,
														_1: {
															ctor: '::',
															_0: _gizra$backoffice$Country$AW,
															_1: {
																ctor: '::',
																_0: _gizra$backoffice$Country$AX,
																_1: {
																	ctor: '::',
																	_0: _gizra$backoffice$Country$AZ,
																	_1: {
																		ctor: '::',
																		_0: _gizra$backoffice$Country$BA,
																		_1: {
																			ctor: '::',
																			_0: _gizra$backoffice$Country$BB,
																			_1: {
																				ctor: '::',
																				_0: _gizra$backoffice$Country$BD,
																				_1: {
																					ctor: '::',
																					_0: _gizra$backoffice$Country$BE,
																					_1: {
																						ctor: '::',
																						_0: _gizra$backoffice$Country$BF,
																						_1: {
																							ctor: '::',
																							_0: _gizra$backoffice$Country$BG,
																							_1: {
																								ctor: '::',
																								_0: _gizra$backoffice$Country$BH,
																								_1: {
																									ctor: '::',
																									_0: _gizra$backoffice$Country$BI,
																									_1: {
																										ctor: '::',
																										_0: _gizra$backoffice$Country$BJ,
																										_1: {
																											ctor: '::',
																											_0: _gizra$backoffice$Country$BL,
																											_1: {
																												ctor: '::',
																												_0: _gizra$backoffice$Country$BM,
																												_1: {
																													ctor: '::',
																													_0: _gizra$backoffice$Country$BN,
																													_1: {
																														ctor: '::',
																														_0: _gizra$backoffice$Country$BO,
																														_1: {
																															ctor: '::',
																															_0: _gizra$backoffice$Country$BQ,
																															_1: {
																																ctor: '::',
																																_0: _gizra$backoffice$Country$BR,
																																_1: {
																																	ctor: '::',
																																	_0: _gizra$backoffice$Country$BS,
																																	_1: {
																																		ctor: '::',
																																		_0: _gizra$backoffice$Country$BT,
																																		_1: {
																																			ctor: '::',
																																			_0: _gizra$backoffice$Country$BV,
																																			_1: {
																																				ctor: '::',
																																				_0: _gizra$backoffice$Country$BW,
																																				_1: {
																																					ctor: '::',
																																					_0: _gizra$backoffice$Country$BY,
																																					_1: {
																																						ctor: '::',
																																						_0: _gizra$backoffice$Country$BZ,
																																						_1: {
																																							ctor: '::',
																																							_0: _gizra$backoffice$Country$CA,
																																							_1: {
																																								ctor: '::',
																																								_0: _gizra$backoffice$Country$CC,
																																								_1: {
																																									ctor: '::',
																																									_0: _gizra$backoffice$Country$CD,
																																									_1: {
																																										ctor: '::',
																																										_0: _gizra$backoffice$Country$CF,
																																										_1: {
																																											ctor: '::',
																																											_0: _gizra$backoffice$Country$CG,
																																											_1: {
																																												ctor: '::',
																																												_0: _gizra$backoffice$Country$CH,
																																												_1: {
																																													ctor: '::',
																																													_0: _gizra$backoffice$Country$CI,
																																													_1: {
																																														ctor: '::',
																																														_0: _gizra$backoffice$Country$CK,
																																														_1: {
																																															ctor: '::',
																																															_0: _gizra$backoffice$Country$CL,
																																															_1: {
																																																ctor: '::',
																																																_0: _gizra$backoffice$Country$CM,
																																																_1: {
																																																	ctor: '::',
																																																	_0: _gizra$backoffice$Country$CN,
																																																	_1: {
																																																		ctor: '::',
																																																		_0: _gizra$backoffice$Country$CO,
																																																		_1: {
																																																			ctor: '::',
																																																			_0: _gizra$backoffice$Country$CP,
																																																			_1: {
																																																				ctor: '::',
																																																				_0: _gizra$backoffice$Country$CR,
																																																				_1: {
																																																					ctor: '::',
																																																					_0: _gizra$backoffice$Country$CU,
																																																					_1: {
																																																						ctor: '::',
																																																						_0: _gizra$backoffice$Country$CV,
																																																						_1: {
																																																							ctor: '::',
																																																							_0: _gizra$backoffice$Country$CW,
																																																							_1: {
																																																								ctor: '::',
																																																								_0: _gizra$backoffice$Country$CX,
																																																								_1: {
																																																									ctor: '::',
																																																									_0: _gizra$backoffice$Country$CY,
																																																									_1: {
																																																										ctor: '::',
																																																										_0: _gizra$backoffice$Country$CZ,
																																																										_1: {
																																																											ctor: '::',
																																																											_0: _gizra$backoffice$Country$DE,
																																																											_1: {
																																																												ctor: '::',
																																																												_0: _gizra$backoffice$Country$DG,
																																																												_1: {
																																																													ctor: '::',
																																																													_0: _gizra$backoffice$Country$DJ,
																																																													_1: {
																																																														ctor: '::',
																																																														_0: _gizra$backoffice$Country$DK,
																																																														_1: {
																																																															ctor: '::',
																																																															_0: _gizra$backoffice$Country$DM,
																																																															_1: {
																																																																ctor: '::',
																																																																_0: _gizra$backoffice$Country$DO,
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: _gizra$backoffice$Country$DZ,
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: _gizra$backoffice$Country$EA,
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: _gizra$backoffice$Country$EC,
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: _gizra$backoffice$Country$EE,
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: _gizra$backoffice$Country$EG,
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: _gizra$backoffice$Country$EH,
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: _gizra$backoffice$Country$ER,
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: _gizra$backoffice$Country$ES,
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: _gizra$backoffice$Country$ET,
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: _gizra$backoffice$Country$EU,
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: _gizra$backoffice$Country$EZ,
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: _gizra$backoffice$Country$FI,
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: _gizra$backoffice$Country$FJ,
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: _gizra$backoffice$Country$FK,
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: _gizra$backoffice$Country$FM,
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: _gizra$backoffice$Country$FO,
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: _gizra$backoffice$Country$FR,
																																																																																	_1: {
																																																																																		ctor: '::',
																																																																																		_0: _gizra$backoffice$Country$GA,
																																																																																		_1: {
																																																																																			ctor: '::',
																																																																																			_0: _gizra$backoffice$Country$GB,
																																																																																			_1: {
																																																																																				ctor: '::',
																																																																																				_0: _gizra$backoffice$Country$GD,
																																																																																				_1: {
																																																																																					ctor: '::',
																																																																																					_0: _gizra$backoffice$Country$GE,
																																																																																					_1: {
																																																																																						ctor: '::',
																																																																																						_0: _gizra$backoffice$Country$GF,
																																																																																						_1: {
																																																																																							ctor: '::',
																																																																																							_0: _gizra$backoffice$Country$GG,
																																																																																							_1: {
																																																																																								ctor: '::',
																																																																																								_0: _gizra$backoffice$Country$GH,
																																																																																								_1: {
																																																																																									ctor: '::',
																																																																																									_0: _gizra$backoffice$Country$GI,
																																																																																									_1: {
																																																																																										ctor: '::',
																																																																																										_0: _gizra$backoffice$Country$GL,
																																																																																										_1: {
																																																																																											ctor: '::',
																																																																																											_0: _gizra$backoffice$Country$GM,
																																																																																											_1: {
																																																																																												ctor: '::',
																																																																																												_0: _gizra$backoffice$Country$GN,
																																																																																												_1: {
																																																																																													ctor: '::',
																																																																																													_0: _gizra$backoffice$Country$GP,
																																																																																													_1: {
																																																																																														ctor: '::',
																																																																																														_0: _gizra$backoffice$Country$GQ,
																																																																																														_1: {
																																																																																															ctor: '::',
																																																																																															_0: _gizra$backoffice$Country$GR,
																																																																																															_1: {
																																																																																																ctor: '::',
																																																																																																_0: _gizra$backoffice$Country$GS,
																																																																																																_1: {
																																																																																																	ctor: '::',
																																																																																																	_0: _gizra$backoffice$Country$GT,
																																																																																																	_1: {
																																																																																																		ctor: '::',
																																																																																																		_0: _gizra$backoffice$Country$GU,
																																																																																																		_1: {
																																																																																																			ctor: '::',
																																																																																																			_0: _gizra$backoffice$Country$GW,
																																																																																																			_1: {
																																																																																																				ctor: '::',
																																																																																																				_0: _gizra$backoffice$Country$GY,
																																																																																																				_1: {
																																																																																																					ctor: '::',
																																																																																																					_0: _gizra$backoffice$Country$HK,
																																																																																																					_1: {
																																																																																																						ctor: '::',
																																																																																																						_0: _gizra$backoffice$Country$HM,
																																																																																																						_1: {
																																																																																																							ctor: '::',
																																																																																																							_0: _gizra$backoffice$Country$HN,
																																																																																																							_1: {
																																																																																																								ctor: '::',
																																																																																																								_0: _gizra$backoffice$Country$HR,
																																																																																																								_1: {
																																																																																																									ctor: '::',
																																																																																																									_0: _gizra$backoffice$Country$HT,
																																																																																																									_1: {
																																																																																																										ctor: '::',
																																																																																																										_0: _gizra$backoffice$Country$HU,
																																																																																																										_1: {
																																																																																																											ctor: '::',
																																																																																																											_0: _gizra$backoffice$Country$IC,
																																																																																																											_1: {
																																																																																																												ctor: '::',
																																																																																																												_0: _gizra$backoffice$Country$ID,
																																																																																																												_1: {
																																																																																																													ctor: '::',
																																																																																																													_0: _gizra$backoffice$Country$IE,
																																																																																																													_1: {
																																																																																																														ctor: '::',
																																																																																																														_0: _gizra$backoffice$Country$IL,
																																																																																																														_1: {
																																																																																																															ctor: '::',
																																																																																																															_0: _gizra$backoffice$Country$IM,
																																																																																																															_1: {
																																																																																																																ctor: '::',
																																																																																																																_0: _gizra$backoffice$Country$IN,
																																																																																																																_1: {
																																																																																																																	ctor: '::',
																																																																																																																	_0: _gizra$backoffice$Country$IO,
																																																																																																																	_1: {
																																																																																																																		ctor: '::',
																																																																																																																		_0: _gizra$backoffice$Country$IQ,
																																																																																																																		_1: {
																																																																																																																			ctor: '::',
																																																																																																																			_0: _gizra$backoffice$Country$IR,
																																																																																																																			_1: {
																																																																																																																				ctor: '::',
																																																																																																																				_0: _gizra$backoffice$Country$IS,
																																																																																																																				_1: {
																																																																																																																					ctor: '::',
																																																																																																																					_0: _gizra$backoffice$Country$IT,
																																																																																																																					_1: {
																																																																																																																						ctor: '::',
																																																																																																																						_0: _gizra$backoffice$Country$JE,
																																																																																																																						_1: {
																																																																																																																							ctor: '::',
																																																																																																																							_0: _gizra$backoffice$Country$JM,
																																																																																																																							_1: {
																																																																																																																								ctor: '::',
																																																																																																																								_0: _gizra$backoffice$Country$JO,
																																																																																																																								_1: {
																																																																																																																									ctor: '::',
																																																																																																																									_0: _gizra$backoffice$Country$JP,
																																																																																																																									_1: {
																																																																																																																										ctor: '::',
																																																																																																																										_0: _gizra$backoffice$Country$KE,
																																																																																																																										_1: {
																																																																																																																											ctor: '::',
																																																																																																																											_0: _gizra$backoffice$Country$KG,
																																																																																																																											_1: {
																																																																																																																												ctor: '::',
																																																																																																																												_0: _gizra$backoffice$Country$KH,
																																																																																																																												_1: {
																																																																																																																													ctor: '::',
																																																																																																																													_0: _gizra$backoffice$Country$KI,
																																																																																																																													_1: {
																																																																																																																														ctor: '::',
																																																																																																																														_0: _gizra$backoffice$Country$KM,
																																																																																																																														_1: {
																																																																																																																															ctor: '::',
																																																																																																																															_0: _gizra$backoffice$Country$KN,
																																																																																																																															_1: {
																																																																																																																																ctor: '::',
																																																																																																																																_0: _gizra$backoffice$Country$KP,
																																																																																																																																_1: {
																																																																																																																																	ctor: '::',
																																																																																																																																	_0: _gizra$backoffice$Country$KR,
																																																																																																																																	_1: {
																																																																																																																																		ctor: '::',
																																																																																																																																		_0: _gizra$backoffice$Country$KW,
																																																																																																																																		_1: {
																																																																																																																																			ctor: '::',
																																																																																																																																			_0: _gizra$backoffice$Country$KY,
																																																																																																																																			_1: {
																																																																																																																																				ctor: '::',
																																																																																																																																				_0: _gizra$backoffice$Country$KZ,
																																																																																																																																				_1: {
																																																																																																																																					ctor: '::',
																																																																																																																																					_0: _gizra$backoffice$Country$LA,
																																																																																																																																					_1: {
																																																																																																																																						ctor: '::',
																																																																																																																																						_0: _gizra$backoffice$Country$LB,
																																																																																																																																						_1: {
																																																																																																																																							ctor: '::',
																																																																																																																																							_0: _gizra$backoffice$Country$LC,
																																																																																																																																							_1: {
																																																																																																																																								ctor: '::',
																																																																																																																																								_0: _gizra$backoffice$Country$LI,
																																																																																																																																								_1: {
																																																																																																																																									ctor: '::',
																																																																																																																																									_0: _gizra$backoffice$Country$LK,
																																																																																																																																									_1: {
																																																																																																																																										ctor: '::',
																																																																																																																																										_0: _gizra$backoffice$Country$LR,
																																																																																																																																										_1: {
																																																																																																																																											ctor: '::',
																																																																																																																																											_0: _gizra$backoffice$Country$LS,
																																																																																																																																											_1: {
																																																																																																																																												ctor: '::',
																																																																																																																																												_0: _gizra$backoffice$Country$LT,
																																																																																																																																												_1: {
																																																																																																																																													ctor: '::',
																																																																																																																																													_0: _gizra$backoffice$Country$LU,
																																																																																																																																													_1: {
																																																																																																																																														ctor: '::',
																																																																																																																																														_0: _gizra$backoffice$Country$LV,
																																																																																																																																														_1: {
																																																																																																																																															ctor: '::',
																																																																																																																																															_0: _gizra$backoffice$Country$LY,
																																																																																																																																															_1: {
																																																																																																																																																ctor: '::',
																																																																																																																																																_0: _gizra$backoffice$Country$MA,
																																																																																																																																																_1: {
																																																																																																																																																	ctor: '::',
																																																																																																																																																	_0: _gizra$backoffice$Country$MC,
																																																																																																																																																	_1: {
																																																																																																																																																		ctor: '::',
																																																																																																																																																		_0: _gizra$backoffice$Country$MD,
																																																																																																																																																		_1: {
																																																																																																																																																			ctor: '::',
																																																																																																																																																			_0: _gizra$backoffice$Country$ME,
																																																																																																																																																			_1: {
																																																																																																																																																				ctor: '::',
																																																																																																																																																				_0: _gizra$backoffice$Country$MF,
																																																																																																																																																				_1: {
																																																																																																																																																					ctor: '::',
																																																																																																																																																					_0: _gizra$backoffice$Country$MG,
																																																																																																																																																					_1: {
																																																																																																																																																						ctor: '::',
																																																																																																																																																						_0: _gizra$backoffice$Country$MH,
																																																																																																																																																						_1: {
																																																																																																																																																							ctor: '::',
																																																																																																																																																							_0: _gizra$backoffice$Country$MK,
																																																																																																																																																							_1: {
																																																																																																																																																								ctor: '::',
																																																																																																																																																								_0: _gizra$backoffice$Country$ML,
																																																																																																																																																								_1: {
																																																																																																																																																									ctor: '::',
																																																																																																																																																									_0: _gizra$backoffice$Country$MM,
																																																																																																																																																									_1: {
																																																																																																																																																										ctor: '::',
																																																																																																																																																										_0: _gizra$backoffice$Country$MN,
																																																																																																																																																										_1: {
																																																																																																																																																											ctor: '::',
																																																																																																																																																											_0: _gizra$backoffice$Country$MO,
																																																																																																																																																											_1: {
																																																																																																																																																												ctor: '::',
																																																																																																																																																												_0: _gizra$backoffice$Country$MP,
																																																																																																																																																												_1: {
																																																																																																																																																													ctor: '::',
																																																																																																																																																													_0: _gizra$backoffice$Country$MQ,
																																																																																																																																																													_1: {
																																																																																																																																																														ctor: '::',
																																																																																																																																																														_0: _gizra$backoffice$Country$MR,
																																																																																																																																																														_1: {
																																																																																																																																																															ctor: '::',
																																																																																																																																																															_0: _gizra$backoffice$Country$MS,
																																																																																																																																																															_1: {
																																																																																																																																																																ctor: '::',
																																																																																																																																																																_0: _gizra$backoffice$Country$MT,
																																																																																																																																																																_1: {
																																																																																																																																																																	ctor: '::',
																																																																																																																																																																	_0: _gizra$backoffice$Country$MU,
																																																																																																																																																																	_1: {
																																																																																																																																																																		ctor: '::',
																																																																																																																																																																		_0: _gizra$backoffice$Country$MV,
																																																																																																																																																																		_1: {
																																																																																																																																																																			ctor: '::',
																																																																																																																																																																			_0: _gizra$backoffice$Country$MW,
																																																																																																																																																																			_1: {
																																																																																																																																																																				ctor: '::',
																																																																																																																																																																				_0: _gizra$backoffice$Country$MX,
																																																																																																																																																																				_1: {
																																																																																																																																																																					ctor: '::',
																																																																																																																																																																					_0: _gizra$backoffice$Country$MY,
																																																																																																																																																																					_1: {
																																																																																																																																																																						ctor: '::',
																																																																																																																																																																						_0: _gizra$backoffice$Country$MZ,
																																																																																																																																																																						_1: {
																																																																																																																																																																							ctor: '::',
																																																																																																																																																																							_0: _gizra$backoffice$Country$NA,
																																																																																																																																																																							_1: {
																																																																																																																																																																								ctor: '::',
																																																																																																																																																																								_0: _gizra$backoffice$Country$NC,
																																																																																																																																																																								_1: {
																																																																																																																																																																									ctor: '::',
																																																																																																																																																																									_0: _gizra$backoffice$Country$NE,
																																																																																																																																																																									_1: {
																																																																																																																																																																										ctor: '::',
																																																																																																																																																																										_0: _gizra$backoffice$Country$NF,
																																																																																																																																																																										_1: {
																																																																																																																																																																											ctor: '::',
																																																																																																																																																																											_0: _gizra$backoffice$Country$NG,
																																																																																																																																																																											_1: {
																																																																																																																																																																												ctor: '::',
																																																																																																																																																																												_0: _gizra$backoffice$Country$NI,
																																																																																																																																																																												_1: {
																																																																																																																																																																													ctor: '::',
																																																																																																																																																																													_0: _gizra$backoffice$Country$NL,
																																																																																																																																																																													_1: {
																																																																																																																																																																														ctor: '::',
																																																																																																																																																																														_0: _gizra$backoffice$Country$NO,
																																																																																																																																																																														_1: {
																																																																																																																																																																															ctor: '::',
																																																																																																																																																																															_0: _gizra$backoffice$Country$NP,
																																																																																																																																																																															_1: {
																																																																																																																																																																																ctor: '::',
																																																																																																																																																																																_0: _gizra$backoffice$Country$NR,
																																																																																																																																																																																_1: {
																																																																																																																																																																																	ctor: '::',
																																																																																																																																																																																	_0: _gizra$backoffice$Country$NU,
																																																																																																																																																																																	_1: {
																																																																																																																																																																																		ctor: '::',
																																																																																																																																																																																		_0: _gizra$backoffice$Country$NZ,
																																																																																																																																																																																		_1: {
																																																																																																																																																																																			ctor: '::',
																																																																																																																																																																																			_0: _gizra$backoffice$Country$OM,
																																																																																																																																																																																			_1: {
																																																																																																																																																																																				ctor: '::',
																																																																																																																																																																																				_0: _gizra$backoffice$Country$PA,
																																																																																																																																																																																				_1: {
																																																																																																																																																																																					ctor: '::',
																																																																																																																																																																																					_0: _gizra$backoffice$Country$PE,
																																																																																																																																																																																					_1: {
																																																																																																																																																																																						ctor: '::',
																																																																																																																																																																																						_0: _gizra$backoffice$Country$PF,
																																																																																																																																																																																						_1: {
																																																																																																																																																																																							ctor: '::',
																																																																																																																																																																																							_0: _gizra$backoffice$Country$PG,
																																																																																																																																																																																							_1: {
																																																																																																																																																																																								ctor: '::',
																																																																																																																																																																																								_0: _gizra$backoffice$Country$PH,
																																																																																																																																																																																								_1: {
																																																																																																																																																																																									ctor: '::',
																																																																																																																																																																																									_0: _gizra$backoffice$Country$PK,
																																																																																																																																																																																									_1: {
																																																																																																																																																																																										ctor: '::',
																																																																																																																																																																																										_0: _gizra$backoffice$Country$PL,
																																																																																																																																																																																										_1: {
																																																																																																																																																																																											ctor: '::',
																																																																																																																																																																																											_0: _gizra$backoffice$Country$PM,
																																																																																																																																																																																											_1: {
																																																																																																																																																																																												ctor: '::',
																																																																																																																																																																																												_0: _gizra$backoffice$Country$PN,
																																																																																																																																																																																												_1: {
																																																																																																																																																																																													ctor: '::',
																																																																																																																																																																																													_0: _gizra$backoffice$Country$PR,
																																																																																																																																																																																													_1: {
																																																																																																																																																																																														ctor: '::',
																																																																																																																																																																																														_0: _gizra$backoffice$Country$PS,
																																																																																																																																																																																														_1: {
																																																																																																																																																																																															ctor: '::',
																																																																																																																																																																																															_0: _gizra$backoffice$Country$PT,
																																																																																																																																																																																															_1: {
																																																																																																																																																																																																ctor: '::',
																																																																																																																																																																																																_0: _gizra$backoffice$Country$PW,
																																																																																																																																																																																																_1: {
																																																																																																																																																																																																	ctor: '::',
																																																																																																																																																																																																	_0: _gizra$backoffice$Country$PY,
																																																																																																																																																																																																	_1: {
																																																																																																																																																																																																		ctor: '::',
																																																																																																																																																																																																		_0: _gizra$backoffice$Country$QA,
																																																																																																																																																																																																		_1: {
																																																																																																																																																																																																			ctor: '::',
																																																																																																																																																																																																			_0: _gizra$backoffice$Country$QO,
																																																																																																																																																																																																			_1: {
																																																																																																																																																																																																				ctor: '::',
																																																																																																																																																																																																				_0: _gizra$backoffice$Country$RE,
																																																																																																																																																																																																				_1: {
																																																																																																																																																																																																					ctor: '::',
																																																																																																																																																																																																					_0: _gizra$backoffice$Country$RO,
																																																																																																																																																																																																					_1: {
																																																																																																																																																																																																						ctor: '::',
																																																																																																																																																																																																						_0: _gizra$backoffice$Country$RS,
																																																																																																																																																																																																						_1: {
																																																																																																																																																																																																							ctor: '::',
																																																																																																																																																																																																							_0: _gizra$backoffice$Country$RU,
																																																																																																																																																																																																							_1: {
																																																																																																																																																																																																								ctor: '::',
																																																																																																																																																																																																								_0: _gizra$backoffice$Country$RW,
																																																																																																																																																																																																								_1: {
																																																																																																																																																																																																									ctor: '::',
																																																																																																																																																																																																									_0: _gizra$backoffice$Country$SA,
																																																																																																																																																																																																									_1: {
																																																																																																																																																																																																										ctor: '::',
																																																																																																																																																																																																										_0: _gizra$backoffice$Country$SB,
																																																																																																																																																																																																										_1: {
																																																																																																																																																																																																											ctor: '::',
																																																																																																																																																																																																											_0: _gizra$backoffice$Country$SC,
																																																																																																																																																																																																											_1: {
																																																																																																																																																																																																												ctor: '::',
																																																																																																																																																																																																												_0: _gizra$backoffice$Country$SD,
																																																																																																																																																																																																												_1: {
																																																																																																																																																																																																													ctor: '::',
																																																																																																																																																																																																													_0: _gizra$backoffice$Country$SE,
																																																																																																																																																																																																													_1: {
																																																																																																																																																																																																														ctor: '::',
																																																																																																																																																																																																														_0: _gizra$backoffice$Country$SG,
																																																																																																																																																																																																														_1: {
																																																																																																																																																																																																															ctor: '::',
																																																																																																																																																																																																															_0: _gizra$backoffice$Country$SH,
																																																																																																																																																																																																															_1: {
																																																																																																																																																																																																																ctor: '::',
																																																																																																																																																																																																																_0: _gizra$backoffice$Country$SI,
																																																																																																																																																																																																																_1: {
																																																																																																																																																																																																																	ctor: '::',
																																																																																																																																																																																																																	_0: _gizra$backoffice$Country$SJ,
																																																																																																																																																																																																																	_1: {
																																																																																																																																																																																																																		ctor: '::',
																																																																																																																																																																																																																		_0: _gizra$backoffice$Country$SK,
																																																																																																																																																																																																																		_1: {
																																																																																																																																																																																																																			ctor: '::',
																																																																																																																																																																																																																			_0: _gizra$backoffice$Country$SL,
																																																																																																																																																																																																																			_1: {
																																																																																																																																																																																																																				ctor: '::',
																																																																																																																																																																																																																				_0: _gizra$backoffice$Country$SM,
																																																																																																																																																																																																																				_1: {
																																																																																																																																																																																																																					ctor: '::',
																																																																																																																																																																																																																					_0: _gizra$backoffice$Country$SN,
																																																																																																																																																																																																																					_1: {
																																																																																																																																																																																																																						ctor: '::',
																																																																																																																																																																																																																						_0: _gizra$backoffice$Country$SO,
																																																																																																																																																																																																																						_1: {
																																																																																																																																																																																																																							ctor: '::',
																																																																																																																																																																																																																							_0: _gizra$backoffice$Country$SR,
																																																																																																																																																																																																																							_1: {
																																																																																																																																																																																																																								ctor: '::',
																																																																																																																																																																																																																								_0: _gizra$backoffice$Country$SS,
																																																																																																																																																																																																																								_1: {
																																																																																																																																																																																																																									ctor: '::',
																																																																																																																																																																																																																									_0: _gizra$backoffice$Country$ST,
																																																																																																																																																																																																																									_1: {
																																																																																																																																																																																																																										ctor: '::',
																																																																																																																																																																																																																										_0: _gizra$backoffice$Country$SV,
																																																																																																																																																																																																																										_1: {
																																																																																																																																																																																																																											ctor: '::',
																																																																																																																																																																																																																											_0: _gizra$backoffice$Country$SX,
																																																																																																																																																																																																																											_1: {
																																																																																																																																																																																																																												ctor: '::',
																																																																																																																																																																																																																												_0: _gizra$backoffice$Country$SY,
																																																																																																																																																																																																																												_1: {
																																																																																																																																																																																																																													ctor: '::',
																																																																																																																																																																																																																													_0: _gizra$backoffice$Country$SZ,
																																																																																																																																																																																																																													_1: {
																																																																																																																																																																																																																														ctor: '::',
																																																																																																																																																																																																																														_0: _gizra$backoffice$Country$TA,
																																																																																																																																																																																																																														_1: {
																																																																																																																																																																																																																															ctor: '::',
																																																																																																																																																																																																																															_0: _gizra$backoffice$Country$TC,
																																																																																																																																																																																																																															_1: {
																																																																																																																																																																																																																																ctor: '::',
																																																																																																																																																																																																																																_0: _gizra$backoffice$Country$TD,
																																																																																																																																																																																																																																_1: {
																																																																																																																																																																																																																																	ctor: '::',
																																																																																																																																																																																																																																	_0: _gizra$backoffice$Country$TF,
																																																																																																																																																																																																																																	_1: {
																																																																																																																																																																																																																																		ctor: '::',
																																																																																																																																																																																																																																		_0: _gizra$backoffice$Country$TG,
																																																																																																																																																																																																																																		_1: {
																																																																																																																																																																																																																																			ctor: '::',
																																																																																																																																																																																																																																			_0: _gizra$backoffice$Country$TH,
																																																																																																																																																																																																																																			_1: {
																																																																																																																																																																																																																																				ctor: '::',
																																																																																																																																																																																																																																				_0: _gizra$backoffice$Country$TJ,
																																																																																																																																																																																																																																				_1: {
																																																																																																																																																																																																																																					ctor: '::',
																																																																																																																																																																																																																																					_0: _gizra$backoffice$Country$TK,
																																																																																																																																																																																																																																					_1: {
																																																																																																																																																																																																																																						ctor: '::',
																																																																																																																																																																																																																																						_0: _gizra$backoffice$Country$TL,
																																																																																																																																																																																																																																						_1: {
																																																																																																																																																																																																																																							ctor: '::',
																																																																																																																																																																																																																																							_0: _gizra$backoffice$Country$TM,
																																																																																																																																																																																																																																							_1: {
																																																																																																																																																																																																																																								ctor: '::',
																																																																																																																																																																																																																																								_0: _gizra$backoffice$Country$TN,
																																																																																																																																																																																																																																								_1: {
																																																																																																																																																																																																																																									ctor: '::',
																																																																																																																																																																																																																																									_0: _gizra$backoffice$Country$TO,
																																																																																																																																																																																																																																									_1: {
																																																																																																																																																																																																																																										ctor: '::',
																																																																																																																																																																																																																																										_0: _gizra$backoffice$Country$TR,
																																																																																																																																																																																																																																										_1: {
																																																																																																																																																																																																																																											ctor: '::',
																																																																																																																																																																																																																																											_0: _gizra$backoffice$Country$TT,
																																																																																																																																																																																																																																											_1: {
																																																																																																																																																																																																																																												ctor: '::',
																																																																																																																																																																																																																																												_0: _gizra$backoffice$Country$TV,
																																																																																																																																																																																																																																												_1: {
																																																																																																																																																																																																																																													ctor: '::',
																																																																																																																																																																																																																																													_0: _gizra$backoffice$Country$TW,
																																																																																																																																																																																																																																													_1: {
																																																																																																																																																																																																																																														ctor: '::',
																																																																																																																																																																																																																																														_0: _gizra$backoffice$Country$TZ,
																																																																																																																																																																																																																																														_1: {
																																																																																																																																																																																																																																															ctor: '::',
																																																																																																																																																																																																																																															_0: _gizra$backoffice$Country$UA,
																																																																																																																																																																																																																																															_1: {
																																																																																																																																																																																																																																																ctor: '::',
																																																																																																																																																																																																																																																_0: _gizra$backoffice$Country$UG,
																																																																																																																																																																																																																																																_1: {
																																																																																																																																																																																																																																																	ctor: '::',
																																																																																																																																																																																																																																																	_0: _gizra$backoffice$Country$UM,
																																																																																																																																																																																																																																																	_1: {
																																																																																																																																																																																																																																																		ctor: '::',
																																																																																																																																																																																																																																																		_0: _gizra$backoffice$Country$UN,
																																																																																																																																																																																																																																																		_1: {
																																																																																																																																																																																																																																																			ctor: '::',
																																																																																																																																																																																																																																																			_0: _gizra$backoffice$Country$US,
																																																																																																																																																																																																																																																			_1: {
																																																																																																																																																																																																																																																				ctor: '::',
																																																																																																																																																																																																																																																				_0: _gizra$backoffice$Country$UY,
																																																																																																																																																																																																																																																				_1: {
																																																																																																																																																																																																																																																					ctor: '::',
																																																																																																																																																																																																																																																					_0: _gizra$backoffice$Country$UZ,
																																																																																																																																																																																																																																																					_1: {
																																																																																																																																																																																																																																																						ctor: '::',
																																																																																																																																																																																																																																																						_0: _gizra$backoffice$Country$VA,
																																																																																																																																																																																																																																																						_1: {
																																																																																																																																																																																																																																																							ctor: '::',
																																																																																																																																																																																																																																																							_0: _gizra$backoffice$Country$VC,
																																																																																																																																																																																																																																																							_1: {
																																																																																																																																																																																																																																																								ctor: '::',
																																																																																																																																																																																																																																																								_0: _gizra$backoffice$Country$VE,
																																																																																																																																																																																																																																																								_1: {
																																																																																																																																																																																																																																																									ctor: '::',
																																																																																																																																																																																																																																																									_0: _gizra$backoffice$Country$VG,
																																																																																																																																																																																																																																																									_1: {
																																																																																																																																																																																																																																																										ctor: '::',
																																																																																																																																																																																																																																																										_0: _gizra$backoffice$Country$VI,
																																																																																																																																																																																																																																																										_1: {
																																																																																																																																																																																																																																																											ctor: '::',
																																																																																																																																																																																																																																																											_0: _gizra$backoffice$Country$VN,
																																																																																																																																																																																																																																																											_1: {
																																																																																																																																																																																																																																																												ctor: '::',
																																																																																																																																																																																																																																																												_0: _gizra$backoffice$Country$VU,
																																																																																																																																																																																																																																																												_1: {
																																																																																																																																																																																																																																																													ctor: '::',
																																																																																																																																																																																																																																																													_0: _gizra$backoffice$Country$WF,
																																																																																																																																																																																																																																																													_1: {
																																																																																																																																																																																																																																																														ctor: '::',
																																																																																																																																																																																																																																																														_0: _gizra$backoffice$Country$WS,
																																																																																																																																																																																																																																																														_1: {
																																																																																																																																																																																																																																																															ctor: '::',
																																																																																																																																																																																																																																																															_0: _gizra$backoffice$Country$XK,
																																																																																																																																																																																																																																																															_1: {
																																																																																																																																																																																																																																																																ctor: '::',
																																																																																																																																																																																																																																																																_0: _gizra$backoffice$Country$YE,
																																																																																																																																																																																																																																																																_1: {
																																																																																																																																																																																																																																																																	ctor: '::',
																																																																																																																																																																																																																																																																	_0: _gizra$backoffice$Country$YT,
																																																																																																																																																																																																																																																																	_1: {
																																																																																																																																																																																																																																																																		ctor: '::',
																																																																																																																																																																																																																																																																		_0: _gizra$backoffice$Country$ZA,
																																																																																																																																																																																																																																																																		_1: {
																																																																																																																																																																																																																																																																			ctor: '::',
																																																																																																																																																																																																																																																																			_0: _gizra$backoffice$Country$ZM,
																																																																																																																																																																																																																																																																			_1: {
																																																																																																																																																																																																																																																																				ctor: '::',
																																																																																																																																																																																																																																																																				_0: _gizra$backoffice$Country$ZW,
																																																																																																																																																																																																																																																																				_1: {ctor: '[]'}
																																																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																																														}
																																																																																																																																																																																																																																																													}
																																																																																																																																																																																																																																																												}
																																																																																																																																																																																																																																																											}
																																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																																									}
																																																																																																																																																																																																																																																								}
																																																																																																																																																																																																																																																							}
																																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																														}
																																																																																																																																																																																																																																													}
																																																																																																																																																																																																																																												}
																																																																																																																																																																																																																																											}
																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																									}
																																																																																																																																																																																																																																								}
																																																																																																																																																																																																																																							}
																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																}
																																																																																																																																																																																																																															}
																																																																																																																																																																																																																														}
																																																																																																																																																																																																																													}
																																																																																																																																																																																																																												}
																																																																																																																																																																																																																											}
																																																																																																																																																																																																																										}
																																																																																																																																																																																																																									}
																																																																																																																																																																																																																								}
																																																																																																																																																																																																																							}
																																																																																																																																																																																																																						}
																																																																																																																																																																																																																					}
																																																																																																																																																																																																																				}
																																																																																																																																																																																																																			}
																																																																																																																																																																																																																		}
																																																																																																																																																																																																																	}
																																																																																																																																																																																																																}
																																																																																																																																																																																																															}
																																																																																																																																																																																																														}
																																																																																																																																																																																																													}
																																																																																																																																																																																																												}
																																																																																																																																																																																																											}
																																																																																																																																																																																																										}
																																																																																																																																																																																																									}
																																																																																																																																																																																																								}
																																																																																																																																																																																																							}
																																																																																																																																																																																																						}
																																																																																																																																																																																																					}
																																																																																																																																																																																																				}
																																																																																																																																																																																																			}
																																																																																																																																																																																																		}
																																																																																																																																																																																																	}
																																																																																																																																																																																																}
																																																																																																																																																																																															}
																																																																																																																																																																																														}
																																																																																																																																																																																													}
																																																																																																																																																																																												}
																																																																																																																																																																																											}
																																																																																																																																																																																										}
																																																																																																																																																																																									}
																																																																																																																																																																																								}
																																																																																																																																																																																							}
																																																																																																																																																																																						}
																																																																																																																																																																																					}
																																																																																																																																																																																				}
																																																																																																																																																																																			}
																																																																																																																																																																																		}
																																																																																																																																																																																	}
																																																																																																																																																																																}
																																																																																																																																																																															}
																																																																																																																																																																														}
																																																																																																																																																																													}
																																																																																																																																																																												}
																																																																																																																																																																											}
																																																																																																																																																																										}
																																																																																																																																																																									}
																																																																																																																																																																								}
																																																																																																																																																																							}
																																																																																																																																																																						}
																																																																																																																																																																					}
																																																																																																																																																																				}
																																																																																																																																																																			}
																																																																																																																																																																		}
																																																																																																																																																																	}
																																																																																																																																																																}
																																																																																																																																																															}
																																																																																																																																																														}
																																																																																																																																																													}
																																																																																																																																																												}
																																																																																																																																																											}
																																																																																																																																																										}
																																																																																																																																																									}
																																																																																																																																																								}
																																																																																																																																																							}
																																																																																																																																																						}
																																																																																																																																																					}
																																																																																																																																																				}
																																																																																																																																																			}
																																																																																																																																																		}
																																																																																																																																																	}
																																																																																																																																																}
																																																																																																																																															}
																																																																																																																																														}
																																																																																																																																													}
																																																																																																																																												}
																																																																																																																																											}
																																																																																																																																										}
																																																																																																																																									}
																																																																																																																																								}
																																																																																																																																							}
																																																																																																																																						}
																																																																																																																																					}
																																																																																																																																				}
																																																																																																																																			}
																																																																																																																																		}
																																																																																																																																	}
																																																																																																																																}
																																																																																																																															}
																																																																																																																														}
																																																																																																																													}
																																																																																																																												}
																																																																																																																											}
																																																																																																																										}
																																																																																																																									}
																																																																																																																								}
																																																																																																																							}
																																																																																																																						}
																																																																																																																					}
																																																																																																																				}
																																																																																																																			}
																																																																																																																		}
																																																																																																																	}
																																																																																																																}
																																																																																																															}
																																																																																																														}
																																																																																																													}
																																																																																																												}
																																																																																																											}
																																																																																																										}
																																																																																																									}
																																																																																																								}
																																																																																																							}
																																																																																																						}
																																																																																																					}
																																																																																																				}
																																																																																																			}
																																																																																																		}
																																																																																																	}
																																																																																																}
																																																																																															}
																																																																																														}
																																																																																													}
																																																																																												}
																																																																																											}
																																																																																										}
																																																																																									}
																																																																																								}
																																																																																							}
																																																																																						}
																																																																																					}
																																																																																				}
																																																																																			}
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};


var _sporto$erl$Erl_Query$getValuesForKey = function (key) {
	return function (_p0) {
		return A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Tuple$second,
			A2(
				_elm_lang$core$List$filter,
				function (_p1) {
					var _p2 = _p1;
					return _elm_lang$core$Native_Utils.eq(_p2._0, key);
				},
				_p0));
	};
};
var _sporto$erl$Erl_Query$remove = F2(
	function (key, query) {
		return A2(
			_elm_lang$core$List$filter,
			function (_p3) {
				var _p4 = _p3;
				return !_elm_lang$core$Native_Utils.eq(_p4._0, key);
			},
			query);
	});
var _sporto$erl$Erl_Query$add = F2(
	function (key, val) {
		return function (_p5) {
			return _elm_lang$core$List$reverse(
				A2(
					F2(
						function (x, y) {
							return {ctor: '::', _0: x, _1: y};
						}),
					{ctor: '_Tuple2', _0: key, _1: val},
					_elm_lang$core$List$reverse(_p5)));
		};
	});
var _sporto$erl$Erl_Query$set = F3(
	function (key, val, query) {
		var without = A2(_sporto$erl$Erl_Query$remove, key, query);
		return A3(_sporto$erl$Erl_Query$add, key, val, without);
	});
var _sporto$erl$Erl_Query$toString = function (query) {
	var encodedTuples = A2(
		_elm_lang$core$List$map,
		function (_p6) {
			var _p7 = _p6;
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$http$Http$encodeUri(_p7._0),
				_1: _elm_lang$http$Http$encodeUri(_p7._1)
			};
		},
		query);
	var parts = A2(
		_elm_lang$core$List$map,
		function (_p8) {
			var _p9 = _p8;
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p9._0,
				A2(_elm_lang$core$Basics_ops['++'], '=', _p9._1));
		},
		encodedTuples);
	return _elm_lang$core$List$isEmpty(query) ? '' : A2(
		_elm_lang$core$Basics_ops['++'],
		'?',
		A2(_elm_lang$core$String$join, '&', parts));
};
var _sporto$erl$Erl_Query$queryStringElementToTuple = function (element) {
	var splitted = A2(_elm_lang$core$String$split, '=', element);
	var first = A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		_elm_lang$core$List$head(splitted));
	var firstDecoded = A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		_elm_lang$http$Http$decodeUri(first));
	var second = A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		_elm_lang$core$List$head(
			A2(_elm_lang$core$List$drop, 1, splitted)));
	var secondDecoded = A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		_elm_lang$http$Http$decodeUri(second));
	return {ctor: '_Tuple2', _0: firstDecoded, _1: secondDecoded};
};
var _sporto$erl$Erl_Query$parse = function (queryString) {
	var trimmed = A2(
		_elm_lang$core$String$join,
		'',
		A2(_elm_lang$core$String$split, '?', queryString));
	var splitted = A2(_elm_lang$core$String$split, '&', trimmed);
	return _elm_lang$core$String$isEmpty(trimmed) ? {ctor: '[]'} : A2(_elm_lang$core$List$map, _sporto$erl$Erl_Query$queryStringElementToTuple, splitted);
};

var _sporto$erl$Erl$appendPathSegments = F2(
	function (segments, url) {
		var newPath = A2(_elm_lang$core$List$append, url.path, segments);
		return _elm_lang$core$Native_Utils.update(
			url,
			{path: newPath});
	});
var _sporto$erl$Erl$getQueryValuesForKey = F2(
	function (key, url) {
		return A2(_sporto$erl$Erl_Query$getValuesForKey, key, url.query);
	});
var _sporto$erl$Erl$removeQuery = F2(
	function (key, url) {
		return _elm_lang$core$Native_Utils.update(
			url,
			{
				query: A2(_sporto$erl$Erl_Query$remove, key, url.query)
			});
	});
var _sporto$erl$Erl$setQuery = F3(
	function (key, val, url) {
		return _elm_lang$core$Native_Utils.update(
			url,
			{
				query: A3(_sporto$erl$Erl_Query$set, key, val, url.query)
			});
	});
var _sporto$erl$Erl$addQuery = F3(
	function (key, val, url) {
		return _elm_lang$core$Native_Utils.update(
			url,
			{
				query: A3(_sporto$erl$Erl_Query$add, key, val, url.query)
			});
	});
var _sporto$erl$Erl$clearQuery = function (url) {
	return _elm_lang$core$Native_Utils.update(
		url,
		{
			query: {ctor: '[]'}
		});
};
var _sporto$erl$Erl$new = {
	protocol: '',
	username: '',
	password: '',
	host: {ctor: '[]'},
	path: {ctor: '[]'},
	hasLeadingSlash: false,
	hasTrailingSlash: false,
	port_: 0,
	hash: '',
	query: {ctor: '[]'}
};
var _sporto$erl$Erl$hashToString = function (url) {
	return _elm_lang$core$String$isEmpty(url.hash) ? '' : A2(_elm_lang$core$Basics_ops['++'], '#', url.hash);
};
var _sporto$erl$Erl$trailingSlashComponent = function (url) {
	return _elm_lang$core$Native_Utils.eq(url.hasTrailingSlash, true) ? '/' : '';
};
var _sporto$erl$Erl$portComponent = function (url) {
	var _p0 = url.port_;
	switch (_p0) {
		case 0:
			return '';
		case 80:
			return '';
		case 443:
			return _elm_lang$core$Native_Utils.eq(url.protocol, 'https') ? '' : ':443';
		default:
			return A2(
				_elm_lang$core$Basics_ops['++'],
				':',
				_elm_lang$core$Basics$toString(url.port_));
	}
};
var _sporto$erl$Erl$hostComponent = function (url) {
	return _elm_lang$http$Http$encodeUri(
		A2(_elm_lang$core$String$join, '.', url.host));
};
var _sporto$erl$Erl$pathComponent = function (url) {
	var leadingSlash = ((!_elm_lang$core$Native_Utils.eq(
		_sporto$erl$Erl$hostComponent(url),
		'')) || url.hasLeadingSlash) ? '/' : '';
	var encoded = A2(_elm_lang$core$List$map, _elm_lang$http$Http$encodeUri, url.path);
	return _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$List$length(url.path),
		0) ? '' : A2(
		_elm_lang$core$Basics_ops['++'],
		leadingSlash,
		A2(_elm_lang$core$String$join, '/', encoded));
};
var _sporto$erl$Erl$protocolComponent = function (url) {
	var _p1 = url.protocol;
	if (_p1 === '') {
		return '';
	} else {
		return A2(_elm_lang$core$Basics_ops['++'], url.protocol, '://');
	}
};
var _sporto$erl$Erl$queryToString = function (_p2) {
	return _sporto$erl$Erl_Query$toString(
		function (_) {
			return _.query;
		}(_p2));
};
var _sporto$erl$Erl$toAbsoluteString = function (url) {
	var hash = _sporto$erl$Erl$hashToString(url);
	var query_ = _sporto$erl$Erl$queryToString(url);
	var trailingSlash_ = _sporto$erl$Erl$trailingSlashComponent(url);
	var path_ = _sporto$erl$Erl$pathComponent(url);
	return A2(
		_elm_lang$core$Basics_ops['++'],
		path_,
		A2(
			_elm_lang$core$Basics_ops['++'],
			trailingSlash_,
			A2(_elm_lang$core$Basics_ops['++'], query_, hash)));
};
var _sporto$erl$Erl$toString = function (url) {
	var port_ = _sporto$erl$Erl$portComponent(url);
	var host_ = _sporto$erl$Erl$hostComponent(url);
	var protocol_ = _sporto$erl$Erl$protocolComponent(url);
	return A2(
		_elm_lang$core$Basics_ops['++'],
		protocol_,
		A2(
			_elm_lang$core$Basics_ops['++'],
			host_,
			A2(
				_elm_lang$core$Basics_ops['++'],
				port_,
				_sporto$erl$Erl$toAbsoluteString(url))));
};
var _sporto$erl$Erl$parseQuery = _sporto$erl$Erl_Query$parse;
var _sporto$erl$Erl$extractQuery = function (str) {
	var query = A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		_elm_lang$core$List$head(
			A2(
				_elm_lang$core$String$split,
				'#',
				A2(
					_elm_lang$core$Maybe$withDefault,
					'',
					_elm_lang$core$List$head(
						A2(
							_elm_lang$core$List$drop,
							1,
							A2(_elm_lang$core$String$split, '?', str)))))));
	return _elm_lang$core$String$isEmpty(query) ? '' : A2(_elm_lang$core$Basics_ops['++'], '?', query);
};
var _sporto$erl$Erl$queryFromAll = function (all) {
	return _sporto$erl$Erl$parseQuery(
		_sporto$erl$Erl$extractQuery(all));
};
var _sporto$erl$Erl$extractHash = function (str) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		_elm_lang$core$List$head(
			A2(
				_elm_lang$core$List$drop,
				1,
				A2(_elm_lang$core$String$split, '#', str))));
};
var _sporto$erl$Erl$hashFromAll = function (str) {
	return _sporto$erl$Erl$extractHash(str);
};
var _sporto$erl$Erl$parseHost = function (str) {
	return A2(_elm_lang$core$String$split, '.', str);
};
var _sporto$erl$Erl$schemeHostDelim = function (str) {
	return A2(_elm_lang$core$String$startsWith, '//', str) ? _elm_lang$core$Maybe$Just('//') : (A2(_elm_lang$core$String$contains, '://', str) ? _elm_lang$core$Maybe$Just('://') : _elm_lang$core$Maybe$Nothing);
};
var _sporto$erl$Erl$extractProtocol = function (str) {
	var parts = A2(_elm_lang$core$String$split, '://', str);
	var _p3 = _elm_lang$core$List$length(parts);
	if (_p3 === 1) {
		return '';
	} else {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			_elm_lang$core$List$head(parts));
	}
};
var _sporto$erl$Erl$extractPort = function (str) {
	var rx = _elm_lang$core$Regex$regex(':\\d+');
	var res = A3(
		_elm_lang$core$Regex$find,
		_elm_lang$core$Regex$AtMost(1),
		rx,
		str);
	return function (result) {
		var _p4 = result;
		if (_p4.ctor === 'Ok') {
			return _p4._0;
		} else {
			var _p5 = _sporto$erl$Erl$extractProtocol(str);
			switch (_p5) {
				case 'http':
					return 80;
				case 'https':
					return 443;
				case 'ftp':
					return 21;
				case 'sftp':
					return 22;
				default:
					return 0;
			}
		}
	}(
		_elm_lang$core$String$toInt(
			A2(
				_elm_lang$core$String$dropLeft,
				1,
				A2(
					_elm_lang$core$Maybe$withDefault,
					'',
					_elm_lang$core$List$head(
						A2(
							_elm_lang$core$List$map,
							function (_) {
								return _.match;
							},
							res))))));
};
var _sporto$erl$Erl$leftFrom = F2(
	function (delimiter, str) {
		var parts = A2(_elm_lang$core$String$split, delimiter, str);
		var head = _elm_lang$core$List$head(parts);
		var _p6 = _elm_lang$core$List$length(parts);
		switch (_p6) {
			case 0:
				return '';
			case 1:
				return '';
			default:
				return A2(_elm_lang$core$Maybe$withDefault, '', head);
		}
	});
var _sporto$erl$Erl$leftFromOrSame = F2(
	function (delimiter, str) {
		var parts = A2(_elm_lang$core$String$split, delimiter, str);
		return A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			_elm_lang$core$List$head(parts));
	});
var _sporto$erl$Erl$rightFromOrSame = F2(
	function (delimiter, str) {
		var parts = A2(_elm_lang$core$String$split, delimiter, str);
		return A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			_elm_lang$core$List$head(
				_elm_lang$core$List$reverse(parts)));
	});
var _sporto$erl$Erl$rightFromLeftMost = F2(
	function (delimiter, str) {
		var parts = A2(_elm_lang$core$String$split, delimiter, str);
		var _p7 = _elm_lang$core$List$length(parts);
		switch (_p7) {
			case 0:
				return '';
			case 1:
				return '';
			default:
				return A2(
					_elm_lang$core$String$join,
					delimiter,
					A2(
						_elm_lang$core$Maybe$withDefault,
						{ctor: '[]'},
						_elm_lang$core$List$tail(parts)));
		}
	});
var _sporto$erl$Erl$extractHost = function (str) {
	var delim = _sporto$erl$Erl$schemeHostDelim(str);
	var _p8 = delim;
	if (_p8.ctor === 'Just') {
		return A2(
			_sporto$erl$Erl$leftFromOrSame,
			':',
			A2(
				_sporto$erl$Erl$leftFromOrSame,
				'/',
				A2(_sporto$erl$Erl$rightFromLeftMost, _p8._0, str)));
	} else {
		var rx = '((\\w|-)+\\.)+(\\w|-)+';
		return A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			_elm_lang$core$List$head(
				A2(
					_elm_lang$core$List$map,
					function (_) {
						return _.match;
					},
					A3(
						_elm_lang$core$Regex$find,
						_elm_lang$core$Regex$AtMost(1),
						_elm_lang$core$Regex$regex(rx),
						A2(_sporto$erl$Erl$leftFromOrSame, '/', str)))));
	}
};
var _sporto$erl$Erl$host = function (str) {
	return _sporto$erl$Erl$parseHost(
		_sporto$erl$Erl$extractHost(str));
};
var _sporto$erl$Erl$extractPath = function (str) {
	var delim = _sporto$erl$Erl$schemeHostDelim(str);
	var trimmed = function () {
		var _p9 = delim;
		if (_p9.ctor === 'Just') {
			return A2(_sporto$erl$Erl$rightFromLeftMost, _p9._0, str);
		} else {
			return str;
		}
	}();
	var host = _sporto$erl$Erl$extractHost(str);
	return A4(
		_elm_lang$core$Regex$replace,
		_elm_lang$core$Regex$AtMost(1),
		_elm_lang$core$Regex$regex(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'^.*?',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Regex$escape(host),
					'(:\\d+)?'))),
		function (_p10) {
			return '';
		},
		A2(
			_sporto$erl$Erl$leftFromOrSame,
			'#',
			A2(_sporto$erl$Erl$leftFromOrSame, '?', trimmed)));
};
var _sporto$erl$Erl$hasLeadingSlashFromAll = function (str) {
	return A2(
		_elm_lang$core$Regex$contains,
		_elm_lang$core$Regex$regex('^/'),
		_sporto$erl$Erl$extractPath(str));
};
var _sporto$erl$Erl$hasTrailingSlashFromAll = function (str) {
	return A2(
		_elm_lang$core$Regex$contains,
		_elm_lang$core$Regex$regex('/$'),
		_sporto$erl$Erl$extractPath(str));
};
var _sporto$erl$Erl$rightFrom = F2(
	function (delimiter, str) {
		var parts = A2(_elm_lang$core$String$split, delimiter, str);
		var _p11 = _elm_lang$core$List$length(parts);
		switch (_p11) {
			case 0:
				return '';
			case 1:
				return '';
			default:
				return A2(
					_elm_lang$core$Maybe$withDefault,
					'',
					_elm_lang$core$List$head(
						_elm_lang$core$List$reverse(parts)));
		}
	});
var _sporto$erl$Erl$notEmpty = function (str) {
	return !_elm_lang$core$String$isEmpty(str);
};
var _sporto$erl$Erl$parsePath = function (str) {
	return A2(
		_elm_lang$core$List$map,
		_elm_lang$core$Maybe$withDefault(''),
		A2(
			_elm_lang$core$List$map,
			_elm_lang$http$Http$decodeUri,
			A2(
				_elm_lang$core$List$filter,
				_sporto$erl$Erl$notEmpty,
				A2(_elm_lang$core$String$split, '/', str))));
};
var _sporto$erl$Erl$pathFromAll = function (str) {
	return _sporto$erl$Erl$parsePath(
		_sporto$erl$Erl$extractPath(str));
};
var _sporto$erl$Erl$parse = function (str) {
	return {
		host: _sporto$erl$Erl$host(str),
		hash: _sporto$erl$Erl$hashFromAll(str),
		password: '',
		path: _sporto$erl$Erl$pathFromAll(str),
		hasLeadingSlash: _sporto$erl$Erl$hasLeadingSlashFromAll(str),
		hasTrailingSlash: _sporto$erl$Erl$hasTrailingSlashFromAll(str),
		port_: _sporto$erl$Erl$extractPort(str),
		protocol: _sporto$erl$Erl$extractProtocol(str),
		query: _sporto$erl$Erl$queryFromAll(str),
		username: ''
	};
};
var _sporto$erl$Erl$Url = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {protocol: a, username: b, password: c, host: d, port_: e, path: f, hasLeadingSlash: g, hasTrailingSlash: h, hash: i, query: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};

var _gizra$backoffice$Translate$translateCountry = function (country) {
	var _p0 = country;
	switch (_p0.ctor) {
		case 'AC':
			return {english: 'Ascension Island', dutch: 'Ascension Island', german: 'Ascension', hebrew: 'האי אסנשן', russian: 'Остров Вознесения', chinese: '阿森松岛', french: 'Île de l\'Ascension'};
		case 'AD':
			return {english: 'Andorra', dutch: 'Andorra', german: 'Andorra', hebrew: 'אנדורה', russian: 'Андорра', chinese: '安道尔', french: 'Andorre'};
		case 'AE':
			return {english: 'United Arab Emirates', dutch: 'United Arab Emirates', german: 'Vereinigte Arabische Emirate', hebrew: 'איחוד האמירויות הערביות', russian: 'Объединенные Арабские Эмираты', chinese: '阿联酋', french: 'Émirats arabes unis'};
		case 'AF':
			return {english: 'Afghanistan', dutch: 'Afghanistan', german: 'Afghanistan', hebrew: 'אפגניסטן', russian: 'Афганистан', chinese: '阿富汗', french: 'Afghanistan'};
		case 'AG':
			return {english: 'Antigua & Barbuda', dutch: 'Antigua & Barbuda', german: 'Antigua und Barbuda', hebrew: 'אנטיגואה וברבודה', russian: 'Антигуа и Барбуда', chinese: '安提瓜和巴布达', french: 'Antigua-et-Barbuda'};
		case 'AL':
			return {english: 'Albania', dutch: 'Albanië', german: 'Albanien', hebrew: 'אלבניה', russian: 'Албания', chinese: '阿尔巴尼亚', french: 'Albanie'};
		case 'AM':
			return {english: 'Armenia', dutch: 'Armenië', german: 'Armenien', hebrew: 'ארמניה', russian: 'Армения', chinese: '亚美尼亚', french: 'Arménie'};
		case 'AI':
			return {english: 'Anguilla', dutch: 'Anguilla', german: 'Anguilla', hebrew: 'אנגילה', russian: 'Ангилья', chinese: '安圭拉', french: 'Anguilla'};
		case 'AO':
			return {english: 'Angola', dutch: 'Angola', german: 'Angola', hebrew: 'אנגולה', russian: 'Ангола', chinese: '安哥拉', french: 'Angola'};
		case 'AQ':
			return {english: 'Antarctica', dutch: 'Antarctica', german: 'Antarktis', hebrew: 'אנטארקטיקה', russian: 'Антарктика', chinese: '南极洲', french: 'Antarctique'};
		case 'AR':
			return {english: 'Argentina', dutch: 'Argentinië', german: 'Argentinien', hebrew: 'ארגנטינה', russian: 'Аргентина', chinese: '阿根廷', french: 'Argentine'};
		case 'AS':
			return {english: 'American Samoa', dutch: 'American Samoa', german: 'Amerikanisch-Samoa', hebrew: 'סמואה האמריקנית', russian: 'Американское Самоа', chinese: '美属萨摩亚', french: 'Samoa américaines'};
		case 'AT':
			return {english: 'Austria', dutch: 'Oostenrijk', german: 'Österreich', hebrew: 'אוסטריה', russian: 'Австрия', chinese: '奥地利', french: 'Autriche'};
		case 'AU':
			return {english: 'Australia', dutch: 'Australië', german: 'Australien', hebrew: 'אוסטרליה', russian: 'Австралия', chinese: '澳大利亚', french: 'Australie'};
		case 'AW':
			return {english: 'Aruba', dutch: 'Aruba', german: 'Aruba', hebrew: 'ארובה', russian: 'Аруба', chinese: '阿鲁巴', french: 'Aruba'};
		case 'AX':
			return {english: 'Åland Islands', dutch: 'Åland Islands', german: 'Ålandinseln', hebrew: 'איי אולנד', russian: 'Аландские острова', chinese: '奥兰群岛', french: 'Îles Åland'};
		case 'AZ':
			return {english: 'Azerbaijan', dutch: 'Azerbeidzjan', german: 'Aserbaidschan', hebrew: 'אזרבייג׳ן', russian: 'Азербайджан', chinese: '阿塞拜疆', french: 'Azerbaïdjan'};
		case 'BA':
			return {english: 'Bosnia & Herzegovina', dutch: 'Bosnia & Herzegovina', german: 'Bosnien und Herzegowina', hebrew: 'בוסניה והרצגובינה', russian: 'Босния и Герцеговина', chinese: '波斯尼亚和黑塞哥维那', french: 'Bosnie-Herzégovine'};
		case 'BB':
			return {english: 'Barbados', dutch: 'Barbados', german: 'Barbados', hebrew: 'ברבדוס', russian: 'Барбадос', chinese: '巴巴多斯', french: 'Barbade'};
		case 'BD':
			return {english: 'Bangladesh', dutch: 'Bangladesh', german: 'Bangladesch', hebrew: 'בנגלדש', russian: 'Бангладеш', chinese: '孟加拉国', french: 'Bangladesh'};
		case 'BE':
			return {english: 'Belgium', dutch: 'België', german: 'Belgien', hebrew: 'בלגיה', russian: 'Бельгия', chinese: '比利时', french: 'Belgique'};
		case 'BF':
			return {english: 'Burkina Faso', dutch: 'Burkina Faso', german: 'Burkina Faso', hebrew: 'בורקינה פאסו', russian: 'Буркина-Фасо', chinese: '布基纳法索', french: 'Burkina Faso'};
		case 'BG':
			return {english: 'Bulgaria', dutch: 'Bulgarije', german: 'Bulgarien', hebrew: 'בולגריה', russian: 'Болгария', chinese: '保加利亚', french: 'Bulgarie'};
		case 'BH':
			return {english: 'Bahrain', dutch: 'Bahrein', german: 'Bahrain', hebrew: 'בחריין', russian: 'Бахрейн', chinese: '巴林', french: 'Bahreïn'};
		case 'BI':
			return {english: 'Burundi', dutch: 'Burundi', german: 'Burundi', hebrew: 'בורונדי', russian: 'Бурунди', chinese: '布隆迪', french: 'Burundi'};
		case 'BJ':
			return {english: 'Benin', dutch: 'Benin', german: 'Benin', hebrew: 'בנין', russian: 'Бенин', chinese: '贝宁', french: 'Bénin'};
		case 'BL':
			return {english: 'St. Barthélemy', dutch: 'St. Barthélemy', german: 'St. Barthélemy', hebrew: 'סנט ברתולומיאו', russian: 'Сент-Бартелеми', chinese: '圣巴泰勒米', french: 'Saint-Barthélemy'};
		case 'BM':
			return {english: 'Bermuda', dutch: 'Bermuda', german: 'Bermuda', hebrew: 'ברמודה', russian: 'Бермуды', chinese: '百慕大', french: 'Bermudes'};
		case 'BN':
			return {english: 'Brunei', dutch: 'Brunei', german: 'Brunei Darussalam', hebrew: 'ברוניי', russian: 'Бруней', chinese: '文莱', french: 'Brunei'};
		case 'BO':
			return {english: 'Bolivia', dutch: 'Bolivia', german: 'Bolivien', hebrew: 'בוליביה', russian: 'Боливия', chinese: '玻利维亚', french: 'Bolivie'};
		case 'BQ':
			return {english: 'Caribbean Netherlands', dutch: 'Caribbean Netherlands', german: 'Bonaire, Sint Eustatius und Saba', hebrew: 'האיים הקריביים ההולנדיים', russian: 'Карибские Нидерланды', chinese: '荷兰加勒比区', french: 'Pays-Bas caribéens'};
		case 'BR':
			return {english: 'Brazil', dutch: 'Brazilië', german: 'Brasilien', hebrew: 'ברזיל', russian: 'Бразилия', chinese: '巴西', french: 'Brésil'};
		case 'BS':
			return {english: 'Bahamas', dutch: 'Bahama\'s', german: 'Bahamas', hebrew: 'איי בהאמה', russian: 'Багамы', chinese: '巴哈马', french: 'Bahamas'};
		case 'BT':
			return {english: 'Bhutan', dutch: 'Bhutan', german: 'Bhutan', hebrew: 'בהוטן', russian: 'Бутан', chinese: '不丹', french: 'Bhoutan'};
		case 'BV':
			return {english: 'Bouvet Island', dutch: 'Bouvet', german: 'Bouvetinsel', hebrew: 'איי בובה', russian: 'Остров Буве', chinese: '布韦岛', french: 'Île Bouvet'};
		case 'BW':
			return {english: 'Botswana', dutch: 'Botswana', german: 'Botsuana', hebrew: 'בוצוואנה', russian: 'Ботсвана', chinese: '博茨瓦纳', french: 'Botswana'};
		case 'BY':
			return {english: 'Belarus', dutch: 'Wit-Rusland', german: 'Belarus', hebrew: 'בלארוס', russian: 'Беларусь', chinese: '白俄罗斯', french: 'Biélorussie'};
		case 'BZ':
			return {english: 'Belize', dutch: 'Belize', german: 'Belize', hebrew: 'בליז', russian: 'Белиз', chinese: '伯利兹', french: 'Belize'};
		case 'CA':
			return {english: 'Canada', dutch: 'Canada', german: 'Kanada', hebrew: 'קנדה', russian: 'Канада', chinese: '加拿大', french: 'Canada'};
		case 'CC':
			return {english: 'Cocos (Keeling) Islands', dutch: 'Cocoseilanden', german: 'Kokosinseln', hebrew: 'איי קוקוס (קילינג)', russian: 'Кокосовые (Килинг) острова', chinese: '科科斯（基林）群岛', french: 'Îles Cocos (Keeling)'};
		case 'CD':
			return {english: 'Congo - Kinshasa', dutch: 'Congo - Kinshasa', german: 'Kongo-Kinshasa', hebrew: 'קונגו - קינשאסה', russian: 'Конго - Киншаса', chinese: '刚果（金）', french: 'Congo - Kinshasa'};
		case 'CF':
			return {english: 'Central African Republic', dutch: 'Central African Republic', german: 'Zentralafrikanische Republik', hebrew: 'הרפובליקה של מרכז אפריקה', russian: 'Центральноафриканская Республика', chinese: '中非共和国', french: 'République centrafricaine'};
		case 'CG':
			return {english: 'Congo - Brazzaville', dutch: 'Congo - Brazzaville', german: 'Kongo-Brazzaville', hebrew: 'קונגו - ברזאויל', russian: 'Конго - Браззавиль', chinese: '刚果（布）', french: 'Congo - Brazzaville'};
		case 'CH':
			return {english: 'Switzerland', dutch: 'Zwitserland', german: 'Schweiz', hebrew: 'שווייץ', russian: 'Швейцария', chinese: '瑞士', french: 'Suisse'};
		case 'CI':
			return {english: 'Côte d’Ivoire', dutch: 'Ivoorkust', german: 'Elfenbeinküste', hebrew: 'חוף השנהב', russian: 'Кот-д\'Ивуар', chinese: '科特迪瓦', french: 'Côte d\'Ivoire'};
		case 'CK':
			return {english: 'Cook Islands', dutch: 'Cookeilanden', german: 'Cookinseln', hebrew: 'איי קוק', russian: 'Острова Кука', chinese: '库克群岛', french: 'Îles Cook'};
		case 'CV':
			return {english: 'Cape Verde', dutch: 'Kaapverdië', german: 'Cabo Verde', hebrew: 'כף ורדה', russian: 'Кабо-Верде', chinese: '佛得角', french: 'Cap-Vert'};
		case 'CW':
			return {english: 'Curaçao', dutch: 'Curaçao', german: 'Curaçao', hebrew: 'קוראסאו', russian: 'Кюрасао', chinese: '库拉索', french: 'Curaçao'};
		case 'CX':
			return {english: 'Christmas Island', dutch: 'Christmas Island', german: 'Weihnachtsinsel', hebrew: 'האי כריסטמס', russian: 'Остров Рождества', chinese: '圣诞岛', french: 'Île Christmas'};
		case 'CY':
			return {english: 'Cyprus', dutch: 'Cyprus', german: 'Zypern', hebrew: 'קפריסין', russian: 'Кипр', chinese: '塞浦路斯', french: 'Chypre'};
		case 'CZ':
			return {english: 'Czechia', dutch: 'Tsjechië', german: 'Tschechien', hebrew: 'צ’כיה', russian: 'Чехия', chinese: '捷克', french: 'Tchéquie'};
		case 'DE':
			return {english: 'Germany', dutch: 'Duitsland', german: 'Deutschland', hebrew: 'גרמניה', russian: 'Германия', chinese: '德国', french: 'Allemagne'};
		case 'DG':
			return {english: 'Diego Garcia', dutch: 'Diego Garcia', german: 'Diego Garcia', hebrew: 'דייגו גרסיה', russian: 'Диего-Гарсия', chinese: '迭戈加西亚', french: 'Diego Garcia'};
		case 'CL':
			return {english: 'Chile', dutch: 'Chili', german: 'Chile', hebrew: 'צ’ילה', russian: 'Чили', chinese: '智利', french: 'Chili'};
		case 'CM':
			return {english: 'Cameroon', dutch: 'Kameroen', german: 'Kamerun', hebrew: 'קמרון', russian: 'Камерун', chinese: '喀麦隆', french: 'Cameroun'};
		case 'CN':
			return {english: 'China', dutch: 'China', german: 'China', hebrew: 'סין', russian: 'Китай', chinese: '中国', french: 'Chine'};
		case 'CO':
			return {english: 'Colombia', dutch: 'Colombia', german: 'Kolumbien', hebrew: 'קולומביה', russian: 'Колумбия', chinese: '哥伦比亚', french: 'Colombie'};
		case 'CP':
			return {english: 'Clipperton Island', dutch: 'Clipperton Island', german: 'Clipperton-Insel', hebrew: 'האי קליפרטון', russian: 'Остров Клиппертон', chinese: '克利珀顿岛', french: 'Île Clipperton'};
		case 'CR':
			return {english: 'Costa Rica', dutch: 'Costa Rica', german: 'Costa Rica', hebrew: 'קוסטה ריקה', russian: 'Коста-Рика', chinese: '哥斯达黎加', french: 'Costa Rica'};
		case 'CU':
			return {english: 'Cuba', dutch: 'Cuba', german: 'Kuba', hebrew: 'קובה', russian: 'Куба', chinese: '古巴', french: 'Cuba'};
		case 'DJ':
			return {english: 'Djibouti', dutch: 'Djibouti', german: 'Dschibuti', hebrew: 'ג׳יבוטי', russian: 'Джибути', chinese: '吉布提', french: 'Djibouti'};
		case 'DK':
			return {english: 'Denmark', dutch: 'Denemarken', german: 'Dänemark', hebrew: 'דנמרק', russian: 'Дания', chinese: '丹麦', french: 'Danemark'};
		case 'DM':
			return {english: 'Dominica', dutch: 'Dominica', german: 'Dominica', hebrew: 'דומיניקה', russian: 'Доминика', chinese: '多米尼克', french: 'Dominique'};
		case 'DO':
			return {english: 'Dominican Republic', dutch: 'Dominican Republic', german: 'Dominikanische Republik', hebrew: 'הרפובליקה הדומיניקנית', russian: 'Доминиканская Республика', chinese: '多米尼加共和国', french: 'République dominicaine'};
		case 'DZ':
			return {english: 'Algeria', dutch: 'Algerije', german: 'Algerien', hebrew: 'אלג׳יריה', russian: 'Алжир', chinese: '阿尔及利亚', french: 'Algérie'};
		case 'EA':
			return {english: 'Ceuta & Melilla', dutch: 'Ceuta & Melilla', german: 'Ceuta und Melilla', hebrew: 'סאוטה ומלייה', russian: 'Сеута и Мелилья', chinese: '休达与梅利利亚', french: 'Ceuta et Melilla'};
		case 'EC':
			return {english: 'Ecuador', dutch: 'Ecuador', german: 'Ecuador', hebrew: 'אקוודור', russian: 'Эквадор', chinese: '厄瓜多尔', french: 'Équateur'};
		case 'EE':
			return {english: 'Estonia', dutch: 'Estland', german: 'Estland', hebrew: 'אסטוניה', russian: 'Эстония', chinese: '爱沙尼亚', french: 'Estonie'};
		case 'EG':
			return {english: 'Egypt', dutch: 'Egypte', german: 'Ägypten', hebrew: 'מצרים', russian: 'Египет', chinese: '埃及', french: 'Égypte'};
		case 'EH':
			return {english: 'Western Sahara', dutch: 'Western Sahara', german: 'Westsahara', hebrew: 'סהרה המערבית', russian: 'Западная Сахара', chinese: '西撒哈拉', french: 'Sahara occidental'};
		case 'ER':
			return {english: 'Eritrea', dutch: 'Eritrea', german: 'Eritrea', hebrew: 'אריתריאה', russian: 'Эритрея', chinese: '厄立特里亚', french: 'Érythrée'};
		case 'ES':
			return {english: 'Spain', dutch: 'Spanje', german: 'Spanien', hebrew: 'ספרד', russian: 'Испания', chinese: '西班牙', french: 'Espagne'};
		case 'ET':
			return {english: 'Ethiopia', dutch: 'Ethiopië', german: 'Äthiopien', hebrew: 'אתיופיה', russian: 'Эфиопия', chinese: '埃塞俄比亚', french: 'Éthiopie'};
		case 'EU':
			return {english: 'European Union', dutch: 'European Union', german: 'Europäische Union', hebrew: 'האיחוד האירופי', russian: 'Европейский союз', chinese: '欧洲联盟', french: 'Union européenne'};
		case 'EZ':
			return {english: 'Eurozone', dutch: 'Eurozone', german: 'EZ', hebrew: 'EZ', russian: 'Еврозона', chinese: '欧元区', french: 'Zone euro'};
		case 'FI':
			return {english: 'Finland', dutch: 'Finland', german: 'Finnland', hebrew: 'פינלנד', russian: 'Финляндия', chinese: '芬兰', french: 'Finlande'};
		case 'FJ':
			return {english: 'Fiji', dutch: 'Fiji', german: 'Fidschi', hebrew: 'פיג׳י', russian: 'Фиджи', chinese: '斐济', french: 'Fidji'};
		case 'FK':
			return {english: 'Falkland Islands', dutch: 'Falkland Islands', german: 'Falklandinseln', hebrew: 'איי פוקלנד', russian: 'Фолклендские острова', chinese: '福克兰群岛', french: 'Îles Malouines'};
		case 'FM':
			return {english: 'Micronesia', dutch: 'Micronesië', german: 'Mikronesien', hebrew: 'מיקרונזיה', russian: 'Микронезия', chinese: '密克罗尼西亚', french: 'Micronésie'};
		case 'FO':
			return {english: 'Faroe Islands', dutch: 'Faeröer', german: 'Färöer', hebrew: 'איי פארו', russian: 'Фарерские острова', chinese: '法罗群岛', french: 'Îles Féroé'};
		case 'FR':
			return {english: 'France', dutch: 'Frankrijk', german: 'Frankreich', hebrew: 'צרפת', russian: 'Франция', chinese: '法国', french: 'France'};
		case 'GA':
			return {english: 'Gabon', dutch: 'Gabon', german: 'Gabun', hebrew: 'גבון', russian: 'Габон', chinese: '加蓬', french: 'Gabon'};
		case 'GB':
			return {english: 'United Kingdom', dutch: 'Verenigd Koninkrijk', german: 'Vereinigtes Königreich', hebrew: 'הממלכה המאוחדת', russian: 'Великобритания', chinese: '英国', french: 'Royaume-Uni'};
		case 'GD':
			return {english: 'Grenada', dutch: 'Grenada', german: 'Grenada', hebrew: 'גרנדה', russian: 'Гренада', chinese: '格林纳达', french: 'Grenade'};
		case 'GE':
			return {english: 'Georgia', dutch: 'Georgië', german: 'Georgien', hebrew: 'גאורגיה', russian: 'Грузия', chinese: '格鲁吉亚', french: 'Géorgie'};
		case 'GF':
			return {english: 'French Guiana', dutch: 'Frans-Guyana', german: 'Französisch-Guayana', hebrew: 'גיאנה הצרפתית', russian: 'Французская Гвиана', chinese: '法属圭亚那', french: 'Guyane française'};
		case 'GG':
			return {english: 'Guernsey', dutch: 'Guernsey', german: 'Guernsey', hebrew: 'גרנסי', russian: 'Гернси', chinese: '根西岛', french: 'Guernesey'};
		case 'GH':
			return {english: 'Ghana', dutch: 'Ghana', german: 'Ghana', hebrew: 'גאנה', russian: 'Гана', chinese: '加纳', french: 'Ghana'};
		case 'GI':
			return {english: 'Gibraltar', dutch: 'Gibraltar', german: 'Gibraltar', hebrew: 'גיברלטר', russian: 'Гибралтар', chinese: '直布罗陀', french: 'Gibraltar'};
		case 'GL':
			return {english: 'Greenland', dutch: 'Groenland', german: 'Grönland', hebrew: 'גרינלנד', russian: 'Гренландия', chinese: '格陵兰', french: 'Groenland'};
		case 'GM':
			return {english: 'Gambia', dutch: 'Gambia', german: 'Gambia', hebrew: 'גמביה', russian: 'Гамбия', chinese: '冈比亚', french: 'Gambie'};
		case 'GN':
			return {english: 'Guinea', dutch: 'Guinee', german: 'Guinea', hebrew: 'גינאה', russian: 'Гвинея', chinese: '几内亚', french: 'Guinée'};
		case 'GP':
			return {english: 'Guadeloupe', dutch: 'Guadeloupe', german: 'Guadeloupe', hebrew: 'גוואדלופ', russian: 'Гваделупа', chinese: '瓜德罗普', french: 'Guadeloupe'};
		case 'GQ':
			return {english: 'Equatorial Guinea', dutch: 'Equatoriaal-Guinea', german: 'Äquatorialguinea', hebrew: 'גינאה המשוונית', russian: 'Экваториальная Гвинея', chinese: '赤道几内亚', french: 'Guinée équatoriale'};
		case 'GR':
			return {english: 'Greece', dutch: 'Griekenland', german: 'Griechenland', hebrew: 'יוון', russian: 'Греция', chinese: '希腊', french: 'Grèce'};
		case 'GS':
			return {english: 'South Georgia & South Sandwich Islands', dutch: 'Zuid-Georgië en de Zuidelijke Sandwicheilanden', german: 'Südgeorgien und die Südlichen Sandwichinseln', hebrew: 'ג׳ורג׳יה הדרומית ואיי סנדוויץ׳ הדרומיים', russian: 'Южная Георгия и Южные Сандвичевы острова', chinese: '南乔治亚和南桑威奇群岛', french: 'Géorgie du Sud et les îles Sandwich du Sud'};
		case 'GT':
			return {english: 'Guatemala', dutch: 'Guatemala', german: 'Guatemala', hebrew: 'גואטמלה', russian: 'Гватемала', chinese: '危地马拉', french: 'Guatemala'};
		case 'GU':
			return {english: 'Guam', dutch: 'Guam', german: 'Guam', hebrew: 'גואם', russian: 'Гуам', chinese: '关岛', french: 'Guam'};
		case 'GW':
			return {english: 'Guinea-Bissau', dutch: 'Guinee-Bissau', german: 'Guinea-Bissau', hebrew: 'גינאה ביסאו', russian: 'Гвинея-Бисау', chinese: '几内亚比绍', french: 'Guinée-Bissau'};
		case 'GY':
			return {english: 'Guyana', dutch: 'Guyana', german: 'Guyana', hebrew: 'גיאנה', russian: 'Гайана', chinese: '圭亚那', french: 'Guyane'};
		case 'HK':
			return {english: 'Hong Kong SAR China', dutch: 'Hong Kong', german: 'Sonderverwaltungszone Hongkong', hebrew: 'הונג קונג (מחוז מנהלי מיוחד של סין)', russian: 'Гонконг (САР)', chinese: '香港特别行政区', french: 'Hong Kong'};
		case 'HM':
			return {english: 'Heard & McDonald Islands', dutch: 'Heard & McDonald Islands', german: 'Heard und McDonaldinseln', hebrew: 'איי הרד ומקדונלד', russian: 'Острова Херд и Макдональд', chinese: '赫德与麦克唐纳群岛', french: 'Îles Heard et MacDonald'};
		case 'HN':
			return {english: 'Honduras', dutch: 'Honduras', german: 'Honduras', hebrew: 'הונדורס', russian: 'Гондурас', chinese: '洪都拉斯', french: 'Honduras'};
		case 'HR':
			return {english: 'Croatia', dutch: 'Kroatië', german: 'Kroatien', hebrew: 'קרואטיה', russian: 'Хорватия', chinese: '克罗地亚', french: 'Croatie'};
		case 'HT':
			return {english: 'Haiti', dutch: 'Haïti', german: 'Haiti', hebrew: 'האיטי', russian: 'Гаити', chinese: '海地', french: 'Haïti'};
		case 'HU':
			return {english: 'Hungary', dutch: 'Hongarije', german: 'Ungarn', hebrew: 'הונגריה', russian: 'Венгрия', chinese: '匈牙利', french: 'Hongrie'};
		case 'IC':
			return {english: 'Canary Islands', dutch: 'Canary Islands', german: 'Kanarische Inseln', hebrew: 'האיים הקנריים', russian: 'Канарские острова', chinese: '加那利群岛', french: 'Îles Canaries'};
		case 'ID':
			return {english: 'Indonesia', dutch: 'Indonesië', german: 'Indonesien', hebrew: 'אינדונזיה', russian: 'Индонезия', chinese: '印度尼西亚', french: 'Indonésie'};
		case 'IE':
			return {english: 'Ireland', dutch: 'Ierland', german: 'Irland', hebrew: 'אירלנד', russian: 'Ирландия', chinese: '爱尔兰', french: 'Irlande'};
		case 'IL':
			return {english: 'Israel', dutch: 'Israël', german: 'Israel', hebrew: 'ישראל', russian: 'Израиль', chinese: '以色列', french: 'Israël'};
		case 'IM':
			return {english: 'Isle of Man', dutch: 'Man', german: 'Isle of Man', hebrew: 'האי מאן', russian: 'Остров Мэн', chinese: '马恩岛', french: 'Île de Man'};
		case 'IN':
			return {english: 'India', dutch: 'India', german: 'Indien', hebrew: 'הודו', russian: 'Индия', chinese: '印度', french: 'Inde'};
		case 'IO':
			return {english: 'British Indian Ocean Territory', dutch: 'British Indian Ocean Territory', german: 'Britisches Territorium im Indischen Ozean', hebrew: 'הטריטוריה הבריטית באוקיינוס ההודי', russian: 'Британская территория Индийского океана', chinese: '英属印度洋领地', french: 'Territoire britannique de l\'océan Indien'};
		case 'IQ':
			return {english: 'Iraq', dutch: 'Irak', german: 'Irak', hebrew: 'עיראק', russian: 'Ирак', chinese: '伊拉克', french: 'Irak'};
		case 'IR':
			return {english: 'Iran', dutch: 'Iran', german: 'Iran', hebrew: 'איראן', russian: 'Иран', chinese: '伊朗', french: 'Iran'};
		case 'IS':
			return {english: 'Iceland', dutch: 'IJsland', german: 'Island', hebrew: 'איסלנד', russian: 'Исландия', chinese: '冰岛', french: 'Islande'};
		case 'IT':
			return {english: 'Italy', dutch: 'Italië', german: 'Italien', hebrew: 'איטליה', russian: 'Италия', chinese: '意大利', french: 'Italie'};
		case 'JE':
			return {english: 'Jersey', dutch: 'Jersey', german: 'Jersey', hebrew: 'ג׳רסי', russian: 'Джерси', chinese: '泽西', french: 'Jersey'};
		case 'JM':
			return {english: 'Jamaica', dutch: 'Jamaica', german: 'Jamaika', hebrew: 'ג׳מייקה', russian: 'Ямайка', chinese: '牙买加', french: 'Jamaïque'};
		case 'JO':
			return {english: 'Jordan', dutch: 'Jordanië', german: 'Jordanien', hebrew: 'ירדן', russian: 'Иордания', chinese: '约旦', french: 'Jordanie'};
		case 'JP':
			return {english: 'Japan', dutch: 'Japan', german: 'Japan', hebrew: 'יפן', russian: 'Япония', chinese: '日本', french: 'Japon'};
		case 'KE':
			return {english: 'Kenya', dutch: 'Kenia', german: 'Kenia', hebrew: 'קניה', russian: 'Кения', chinese: '肯尼亚', french: 'Kenya'};
		case 'KG':
			return {english: 'Kyrgyzstan', dutch: 'Kirgizië', german: 'Kirgisistan', hebrew: 'קירגיזסטן', russian: 'Киргизия', chinese: '吉尔吉斯斯坦', french: 'Kirghizistan'};
		case 'KH':
			return {english: 'Cambodia', dutch: 'Cambodja', german: 'Kambodscha', hebrew: 'קמבודיה', russian: 'Камбоджа', chinese: '柬埔寨', french: 'Cambodge'};
		case 'KI':
			return {english: 'Kiribati', dutch: 'Kiribati', german: 'Kiribati', hebrew: 'קיריבאטי', russian: 'Кирибати', chinese: '基里巴斯', french: 'Kiribati'};
		case 'KM':
			return {english: 'Comoros', dutch: 'Comoren', german: 'Komoren', hebrew: 'קומורו', russian: 'Коморы', chinese: '科摩罗', french: 'Comores'};
		case 'KN':
			return {english: 'St. Kitts & Nevis', dutch: 'St. Kitts & Nevis', german: 'St. Kitts und Nevis', hebrew: 'סנט קיטס ונוויס', russian: 'Сент-Китс и Невис', chinese: '圣基茨和尼维斯', french: 'Saint-Christophe-et-Niévès'};
		case 'KP':
			return {english: 'North Korea', dutch: 'Noord-Korea', german: 'Nordkorea', hebrew: 'קוריאה הצפונית', russian: 'Северная Корея', chinese: '朝鲜', french: 'Corée du Nord'};
		case 'KR':
			return {english: 'South Korea', dutch: 'Zuid-Korea', german: 'Südkorea', hebrew: 'קוריאה הדרומית', russian: 'Южная Корея', chinese: '韩国', french: 'Corée du Sud'};
		case 'KW':
			return {english: 'Kuwait', dutch: 'Koeweit', german: 'Kuwait', hebrew: 'כווית', russian: 'Кувейт', chinese: '科威特', french: 'Koweït'};
		case 'KY':
			return {english: 'Cayman Islands', dutch: 'Cayman Islands', german: 'Kaimaninseln', hebrew: 'איי קיימן', russian: 'Каймановы острова', chinese: '开曼群岛', french: 'Îles Caïmans'};
		case 'KZ':
			return {english: 'Kazakhstan', dutch: 'Kazachstan', german: 'Kasachstan', hebrew: 'קזחסטן', russian: 'Казахстан', chinese: '哈萨克斯坦', french: 'Kazakhstan'};
		case 'LA':
			return {english: 'Laos', dutch: 'Laos', german: 'Laos', hebrew: 'לאוס', russian: 'Лаос', chinese: '老挝', french: 'Laos'};
		case 'LB':
			return {english: 'Lebanon', dutch: 'Libanon', german: 'Libanon', hebrew: 'לבנון', russian: 'Ливан', chinese: '黎巴嫩', french: 'Liban'};
		case 'LC':
			return {english: 'St. Lucia', dutch: 'Saint Lucia', german: 'St. Lucia', hebrew: 'סנט לוסיה', russian: 'Сент-Люсия', chinese: '圣卢西亚', french: 'Sainte-Lucie'};
		case 'LI':
			return {english: 'Liechtenstein', dutch: 'Liechtenstein', german: 'Liechtenstein', hebrew: 'ליכטנשטיין', russian: 'Лихтенштейн', chinese: '列支敦士登', french: 'Liechtenstein'};
		case 'LK':
			return {english: 'Sri Lanka', dutch: 'Sri Lanka', german: 'Sri Lanka', hebrew: 'סרי לנקה', russian: 'Шри-Ланка', chinese: '斯里兰卡', french: 'Sri Lanka'};
		case 'LR':
			return {english: 'Liberia', dutch: 'Liberia', german: 'Liberia', hebrew: 'ליבריה', russian: 'Либерия', chinese: '利比里亚', french: 'Libéria'};
		case 'LS':
			return {english: 'Lesotho', dutch: 'Lesotho', german: 'Lesotho', hebrew: 'לסוטו', russian: 'Лесото', chinese: '莱索托', french: 'Lesotho'};
		case 'LT':
			return {english: 'Lithuania', dutch: 'Lithuania', german: 'Litauen', hebrew: 'ליטא', russian: 'Литва', chinese: '立陶宛', french: 'Lituanie'};
		case 'LU':
			return {english: 'Luxembourg', dutch: 'Luxemburg', german: 'Luxemburg', hebrew: 'לוקסמבורג', russian: 'Люксембург', chinese: '卢森堡', french: 'Luxembourg'};
		case 'LV':
			return {english: 'Latvia', dutch: 'Letland', german: 'Lettland', hebrew: 'לטביה', russian: 'Латвия', chinese: '拉脱维亚', french: 'Lettonie'};
		case 'LY':
			return {english: 'Libya', dutch: 'Libië', german: 'Libyen', hebrew: 'לוב', russian: 'Ливия', chinese: '利比亚', french: 'Libye'};
		case 'MA':
			return {english: 'Morocco', dutch: 'Marokko', german: 'Marokko', hebrew: 'מרוקו', russian: 'Марокко', chinese: '摩洛哥', french: 'Maroc'};
		case 'MC':
			return {english: 'Monaco', dutch: 'Monaco', german: 'Monaco', hebrew: 'מונקו', russian: 'Монако', chinese: '摩纳哥', french: 'Monaco'};
		case 'MD':
			return {english: 'Moldova', dutch: 'Moldavië', german: 'Republik Moldau', hebrew: 'מולדובה', russian: 'Молдова', chinese: '摩尔多瓦', french: 'Moldavie'};
		case 'ME':
			return {english: 'Montenegro', dutch: 'Montenegro', german: 'Montenegro', hebrew: 'מונטנגרו', russian: 'Черногория', chinese: '黑山', french: 'Monténégro'};
		case 'MF':
			return {english: 'St. Martin', dutch: 'St. Martin', german: 'St. Martin', hebrew: 'סן מרטן', russian: 'Сен-Мартен', chinese: '圣马丁', french: 'Saint-Martin'};
		case 'MG':
			return {english: 'Madagascar', dutch: 'Madagaskar', german: 'Madagaskar', hebrew: 'מדגסקר', russian: 'Мадагаскар', chinese: '马达加斯加', french: 'Madagascar'};
		case 'MH':
			return {english: 'Marshall Islands', dutch: 'Marshall Islands', german: 'Marshallinseln', hebrew: 'איי מרשל', russian: 'Маршалловы Острова', chinese: '马绍尔群岛', french: 'Îles Marshall'};
		case 'MK':
			return {english: 'Macedonia', dutch: 'Macedonia', german: 'Mazedonien', hebrew: 'מקדוניה', russian: 'Македония', chinese: '马其顿', french: 'Macédoine'};
		case 'ML':
			return {english: 'Mali', dutch: 'Mali', german: 'Mali', hebrew: 'מאלי', russian: 'Мали', chinese: '马里', french: 'Mali'};
		case 'MM':
			return {english: 'Myanmar (Burma)', dutch: 'Myanmar', german: 'Myanmar', hebrew: 'מיאנמר (בורמה)', russian: 'Мьянма (Бирма)', chinese: '缅甸', french: 'Myanmar (Birmanie)'};
		case 'MN':
			return {english: 'Mongolia', dutch: 'Mongolië', german: 'Mongolei', hebrew: 'מונגוליה', russian: 'Монголия', chinese: '蒙古', french: 'Mongolie'};
		case 'MO':
			return {english: 'Macau SAR China', dutch: 'Macau', german: 'Sonderverwaltungsregion Macau', hebrew: 'מקאו (מחוז מנהלי מיוחד של סין)', russian: 'Макао (особый административный район Китая)', chinese: '澳门特别行政区', french: 'Macao RAS Chine'};
		case 'MP':
			return {english: 'Northern Mariana Islands', dutch: 'Northern Mariana Islands', german: 'Nördliche Marianen', hebrew: 'איי מריאנה הצפוניים', russian: 'Северные Марианские острова', chinese: '北马里亚纳群岛', french: 'Îles Mariannes du Nord'};
		case 'MQ':
			return {english: 'Martinique', dutch: 'Martinique', german: 'Martinique', hebrew: 'מרטיניק', russian: 'Мартиника', chinese: '马提尼克', french: 'Martinique'};
		case 'MR':
			return {english: 'Mauritania', dutch: 'Mauritanië', german: 'Mauretanien', hebrew: 'מאוריטניה', russian: 'Мавритания', chinese: '毛里塔尼亚', french: 'Mauritanie'};
		case 'MS':
			return {english: 'Montserrat', dutch: 'Montserrat', german: 'Montserrat', hebrew: 'מונסראט', russian: 'Монтсеррат', chinese: '蒙特塞拉特', french: 'Montserrat'};
		case 'MT':
			return {english: 'Malta', dutch: 'Malta', german: 'Malta', hebrew: 'מלטה', russian: 'Мальта', chinese: '马耳他', french: 'Malte'};
		case 'MU':
			return {english: 'Mauritius', dutch: 'Mauritius', german: 'Mauritius', hebrew: 'מאוריציוס', russian: 'Маврикий', chinese: '毛里求斯', french: 'Maurice'};
		case 'MV':
			return {english: 'Maldives', dutch: 'Maldiven', german: 'Malediven', hebrew: 'האיים המלדיביים', russian: 'Мальдивы', chinese: '马尔代夫', french: 'Maldives'};
		case 'MW':
			return {english: 'Malawi', dutch: 'Malawi', german: 'Malawi', hebrew: 'מלאווי', russian: 'Малави', chinese: '马拉维', french: 'Malawi'};
		case 'MX':
			return {english: 'Mexico', dutch: 'Mexico', german: 'Mexiko', hebrew: 'מקסיקו', russian: 'Мексика', chinese: '墨西哥', french: 'Mexique'};
		case 'MY':
			return {english: 'Malaysia', dutch: 'Maleisië', german: 'Malaysia', hebrew: 'מלזיה', russian: 'Малайзия', chinese: '马来西亚', french: 'Malaisie'};
		case 'MZ':
			return {english: 'Mozambique', dutch: 'Mozambique', german: 'Mosambik', hebrew: 'מוזמביק', russian: 'Мозамбик', chinese: '莫桑比克', french: 'Mozambique'};
		case 'NA':
			return {english: 'Namibia', dutch: 'Namibië', german: 'Namibia', hebrew: 'נמיביה', russian: 'Намибия', french: 'Namibie', chinese: '纳米比亚'};
		case 'NC':
			return {english: 'New Caledonia', dutch: 'Nieuw-Caledonië', german: 'Neukaledonien', hebrew: 'קלדוניה החדשה', russian: 'Новая Каледония', french: 'Nouvelle-Calédonie', chinese: '新喀里多尼亚'};
		case 'NE':
			return {english: 'Niger', dutch: 'Niger', german: 'Niger', hebrew: 'ניז׳ר', russian: 'Нигер', chinese: '尼日尔', french: 'Niger'};
		case 'NF':
			return {english: 'Norfolk Island', dutch: 'Norfolk', german: 'Norfolkinsel', hebrew: 'איי נורפוק', russian: 'Остров Норфолк', chinese: '诺福克岛', french: 'Île Norfolk'};
		case 'NG':
			return {english: 'Nigeria', dutch: 'Nigeria', german: 'Nigeria', hebrew: 'ניגריה', russian: 'Нигерия', chinese: '尼日利亚', french: 'Nigeria'};
		case 'NI':
			return {english: 'Nicaragua', dutch: 'Nicaragua', german: 'Nicaragua', hebrew: 'ניקרגואה', russian: 'Никарагуа', chinese: '尼加拉瓜', french: 'Nicaragua'};
		case 'NL':
			return {english: 'Netherlands', dutch: 'Nederland', german: 'Niederlande', hebrew: 'הולנד', russian: 'Нидерланды', chinese: '荷兰', french: 'Pays-Bas'};
		case 'NO':
			return {english: 'Norway', dutch: 'Noorwegen', german: 'Norwegen', hebrew: 'נורווגיה', russian: 'Норвегия', chinese: '挪威', french: 'Norvège'};
		case 'NP':
			return {english: 'Nepal', dutch: 'Nepal', german: 'Nepal', hebrew: 'נפאל', russian: 'Непал', chinese: '尼泊尔', french: 'Népal'};
		case 'NR':
			return {english: 'Nauru', dutch: 'Nauru', german: 'Nauru', hebrew: 'נאורו', russian: 'Науру', chinese: '瑙鲁', french: 'Nauru'};
		case 'NU':
			return {english: 'Niue', dutch: 'Niue', german: 'Niue', hebrew: 'ניווה', russian: 'Ниуэ', chinese: '纽埃', french: 'Niue'};
		case 'NZ':
			return {english: 'New Zealand', dutch: 'Nieuw-Zeeland', german: 'Neuseeland', hebrew: 'ניו זילנד', russian: 'Новая Зеландия', chinese: '新西兰', french: 'Nouvelle-Zélande'};
		case 'OM':
			return {english: 'Oman', dutch: 'Oman', german: 'Oman', hebrew: 'עומאן', russian: 'Оман', chinese: '阿曼', french: 'Oman'};
		case 'PA':
			return {english: 'Panama', dutch: 'Panama', german: 'Panama', hebrew: 'פנמה', russian: 'Панама', chinese: '巴拿马', french: 'Panama'};
		case 'PE':
			return {english: 'Peru', dutch: 'Peru', german: 'Peru', hebrew: 'פרו', russian: 'Перу', chinese: '秘鲁', french: 'Pérou'};
		case 'PF':
			return {english: 'French Polynesia', dutch: 'French Polynesia', german: 'Französisch-Polynesien', hebrew: 'פולינזיה הצרפתית', russian: 'Французская Полинезия', chinese: '法属波利尼西亚', french: 'Polynésie française'};
		case 'PG':
			return {english: 'Papua New Guinea', dutch: 'Papua New Guinea', german: 'Papua-Neuguinea', hebrew: 'פפואה גינאה החדשה', russian: 'Папуа — Новая Гвинея', chinese: '巴布亚新几内亚', french: 'Papouasie-Nouvelle-Guinée'};
		case 'PH':
			return {english: 'Philippines', dutch: 'Filippijnen', german: 'Philippinen', hebrew: 'הפיליפינים', russian: 'Филиппины', chinese: '菲律宾', french: 'Philippines'};
		case 'PK':
			return {english: 'Pakistan', dutch: 'Pakistan', german: 'Pakistan', hebrew: 'פקיסטן', russian: 'Пакистан', chinese: '巴基斯坦', french: 'Pakistan'};
		case 'PL':
			return {english: 'Poland', dutch: 'Polen', german: 'Polen', hebrew: 'פולין', russian: 'Польша', chinese: '波兰', french: 'Pologne'};
		case 'PM':
			return {english: 'Saint Pierre and Miquelon', dutch: 'Saint Pierre en Miquelon', german: 'Saint-Pierre und Miquelon', hebrew: 'סן פייר ומיקלון', russian: 'Сен-Пьер и Микелон', chinese: '圣皮埃尔和密克隆群岛', french: 'Saint-Pierre-et-Miquelon'};
		case 'PN':
			return {english: 'Pitcairn Islands', dutch: 'Pitcairn Islands', german: 'Pitcairninseln', hebrew: 'איי פיטקרן', russian: 'Острова Питкэрн', chinese: '皮特凯恩群岛', french: 'Îles Pitcairn'};
		case 'PR':
			return {english: 'Puerto Rico', dutch: 'Puerto Rico', german: 'Puerto Rico', hebrew: 'פוארטו ריקו', russian: 'Пуэрто-Рико', chinese: '波多黎各', french: 'Porto Rico'};
		case 'PS':
			return {english: 'Palestinian Territories', dutch: 'Palestinian Territories', german: 'Palästinensische Autonomiegebiete', hebrew: 'השטחים הפלסטיניים', russian: 'Палестинские территории', chinese: '巴勒斯坦领土', french: 'Territoires palestiniens'};
		case 'PT':
			return {english: 'Portugal', dutch: 'Portugal', german: 'Portugal', hebrew: 'פורטוגל', russian: 'Португалия', chinese: '葡萄牙', french: 'Portugal'};
		case 'PW':
			return {english: 'Palau', dutch: 'Palau', german: 'Palau', hebrew: 'פלאו', russian: 'Палау', chinese: '帕劳', french: 'Palaos'};
		case 'PY':
			return {english: 'Paraguay', dutch: 'Paraguay', german: 'Paraguay', hebrew: 'פרגוואי', russian: 'Парагвай', chinese: '巴拉圭', french: 'Paraguay'};
		case 'QA':
			return {english: 'Qatar', dutch: 'Qatar', german: 'Katar', hebrew: 'קטאר', russian: 'Катар', chinese: '卡塔尔', french: 'Qatar'};
		case 'QO':
			return {english: 'Outlying Oceania', dutch: 'Outlying Oceania', german: 'Äußeres Ozeanien', hebrew: 'טריטוריות באוקיאניה', russian: 'Отдаленная Океания', chinese: '外属大洋洲', french: 'Océanie éloignée'};
		case 'RE':
			return {english: 'Réunion', dutch: 'Rëunion', german: 'Réunion', hebrew: 'ראוניון', russian: 'Реюньон', chinese: '留尼汪', french: 'La Réunion'};
		case 'RO':
			return {english: 'Romania', dutch: 'Roemenië', german: 'Rumänien', hebrew: 'רומניה', russian: 'Румыния', chinese: '罗马尼亚', french: 'Roumanie'};
		case 'RS':
			return {english: 'Serbia', dutch: 'Servië', german: 'Serbien', hebrew: 'סרביה', russian: 'Сербия', chinese: '塞尔维亚', french: 'Serbie'};
		case 'RU':
			return {english: 'Russia', dutch: 'Rusland', german: 'Russland', hebrew: 'רוסיה', russian: 'Россия', chinese: '俄罗斯', french: 'Russie'};
		case 'RW':
			return {english: 'Rwanda', dutch: 'Rwanda', german: 'Ruanda', hebrew: 'רואנדה', russian: 'Руанда', chinese: '卢旺达', french: 'Rwanda'};
		case 'SA':
			return {english: 'Saudi Arabia', dutch: 'Saoedi-Arabië', german: 'Saudi-Arabien', hebrew: 'ערב הסעודית', russian: 'Саудовская Аравия', chinese: '沙特阿拉伯', french: 'Arabie saoudite'};
		case 'SB':
			return {english: 'Solomon Islands', dutch: 'Solomon Islands', german: 'Salomonen', hebrew: 'איי שלמה', russian: 'Соломоновы острова', chinese: '所罗门群岛', french: 'Îles Salomon'};
		case 'SC':
			return {english: 'Seychelles', dutch: 'Seychellen', german: 'Seychellen', hebrew: 'איי סיישל', russian: 'Сейшельские острова', chinese: '塞舌尔', french: 'Seychelles'};
		case 'SD':
			return {english: 'Sudan', dutch: 'Soedan', german: 'Sudan', hebrew: 'סודן', russian: 'Судан', chinese: '苏丹', french: 'Soudan'};
		case 'SE':
			return {english: 'Sweden', dutch: 'Zweden', german: 'Schweden', hebrew: 'שוודיה', russian: 'Швеция', chinese: '瑞典', french: 'Suède'};
		case 'SG':
			return {english: 'Singapore', dutch: 'Singapore', german: 'Singapur', hebrew: 'סינגפור', russian: 'Сингапур', chinese: '新加坡', french: 'Singapour'};
		case 'SH':
			return {english: 'St. Helena', dutch: 'Sint Helena', german: 'St. Helena', hebrew: 'סנט הלנה', russian: 'Остров Святой Елены', chinese: '圣赫勒拿', french: 'Sainte-Hélène'};
		case 'SI':
			return {english: 'Slovenia', dutch: 'Slovenië', german: 'Slowenien', hebrew: 'סלובניה', russian: 'Словения', chinese: '斯洛文尼亚', french: 'Slovénie'};
		case 'SJ':
			return {english: 'Svalbard & Jan Mayen', dutch: 'Svalbard & Jan Mayen', german: 'Spitzbergen', hebrew: 'סוולבארד ויאן מאיין', russian: 'Шпицберген и Ян-Майен', chinese: '斯瓦尔巴特和扬马廷', french: 'Svalbard et Jan Mayen'};
		case 'SK':
			return {english: 'Slovakia', dutch: 'Slowakije', german: 'Slowakei', hebrew: 'סלובקיה', russian: 'Словакия', chinese: '斯洛伐克', french: 'Slovaquie'};
		case 'SL':
			return {english: 'Sierra Leone', dutch: 'Sierra Leone', german: 'Sierra Leone', hebrew: 'סיירה לאונה', russian: 'Сьерра-Леоне', chinese: '塞拉利昂', french: 'Sierra Leone'};
		case 'SM':
			return {english: 'San Marino', dutch: 'San Marino', german: 'San Marino', hebrew: 'סן מרינו', russian: 'Сан-Марино', chinese: '圣马力诺', french: 'Saint-Marin'};
		case 'SN':
			return {english: 'Senegal', dutch: 'Senegal', german: 'Senegal', hebrew: 'סנגל', russian: 'Сенегал', chinese: '塞内加尔', french: 'Sénégal'};
		case 'SO':
			return {english: 'Somalia', dutch: 'Somalië', german: 'Somalia', hebrew: 'סומליה', russian: 'Сомали', chinese: '索马里', french: 'Somalie'};
		case 'SR':
			return {english: 'Suriname', dutch: 'Suriname', german: 'Suriname', hebrew: 'סורינם', russian: 'Суринам', chinese: '苏里南', french: 'Suriname'};
		case 'SS':
			return {english: 'South Sudan', dutch: 'Zuid-Soedan', german: 'Südsudan', hebrew: 'דרום סודן', russian: 'Южный Судан', chinese: '南苏丹', french: 'Soudan du Sud'};
		case 'ST':
			return {english: 'São Tomé & Príncipe', dutch: 'São Tomé & Príncipe', german: 'São Tomé und Príncipe', hebrew: 'סאו טומה ופרינסיפה', russian: 'Сан-Томе и Принсипи', chinese: '圣多美和普林西比', french: 'Sao Tomé-et-Principe'};
		case 'SV':
			return {english: 'El Salvador', dutch: 'El Salvador', german: 'El Salvador', hebrew: 'אל סלבדור', russian: 'Сальвадор', chinese: '萨尔瓦多', french: 'Salvador'};
		case 'SX':
			return {english: 'Sint Maarten', dutch: 'Sint Maarten', german: 'Sint Maarten', hebrew: 'סנט מארטן', russian: 'Синт-Мартен', chinese: '圣马丁', french: 'Sint Maarten'};
		case 'SY':
			return {english: 'Syria', dutch: 'Syrië', german: 'Syrien', hebrew: 'סוריה', russian: 'Сирия', chinese: '叙利亚', french: 'Syrie'};
		case 'SZ':
			return {english: 'Swaziland', dutch: 'Swaziland', german: 'Swasiland', hebrew: 'סווזילנד', russian: 'Свазиленд', chinese: '斯威士兰', french: 'Swaziland'};
		case 'TA':
			return {english: 'Tristan da Cunha', dutch: 'Tristan da Cunha', german: 'Tristan da Cunha', hebrew: 'טריסטן דה קונה', russian: 'Тристан-да-Кунья', chinese: '特里斯坦-达库尼亚', french: 'Tristan da Cunha'};
		case 'TC':
			return {english: 'Turks & Caicos Islands', dutch: 'Turks & Caicos Islands', german: 'Turks- und Caicosinseln', hebrew: 'איי טורקס וקאיקוס', russian: 'Острова Теркс и Кайкос', chinese: '特克斯和凯科斯群岛', french: 'Îles Turques-et-Caïques'};
		case 'TD':
			return {english: 'Chad', dutch: 'Tsjaad', german: 'Tschad', hebrew: 'צ׳אד', russian: 'Чад', chinese: '乍得', french: 'Tchad'};
		case 'TF':
			return {english: 'French Southern Territories', dutch: 'French Southern Territories', german: 'Französische Süd- und Antarktisgebiete', hebrew: 'הטריטוריות הדרומיות של צרפת', russian: 'Французские Южные и Антарктические территории', chinese: '法属南部领地', french: 'Terres australes françaises'};
		case 'TG':
			return {english: 'Togo', dutch: 'Togo', german: 'Togo', hebrew: 'טוגו', russian: 'Того', chinese: '多哥', french: 'Togo'};
		case 'TH':
			return {english: 'Thailand', dutch: 'Thailand', german: 'Thailand', hebrew: 'תאילנד', russian: 'Таиланд', chinese: '泰国', french: 'Thaïlande'};
		case 'TJ':
			return {english: 'Tajikistan', dutch: 'Tadzjikistan', german: 'Tadschikistan', hebrew: 'טג׳יקיסטן', russian: 'Таджикистан', chinese: '塔吉克斯坦', french: 'Tadjikistan'};
		case 'TK':
			return {english: 'Tokelau', dutch: 'Tokelau', german: 'Tokelau', hebrew: 'טוקלאו', russian: 'Токелау', chinese: '托克劳', french: 'Tokelau'};
		case 'TL':
			return {english: 'Timor-Leste', dutch: 'Oost-Timor', german: 'Osttimor', hebrew: 'טימור לסטה', russian: 'Восточный Тимор', chinese: '东帝汶', french: 'Timor oriental'};
		case 'TM':
			return {english: 'Turkmenistan', dutch: 'Turkmenistan', german: 'Turkmenistan', hebrew: 'טורקמניסטן', russian: 'Туркмения', chinese: '土库曼斯坦', french: 'Turkménistan'};
		case 'TN':
			return {english: 'Tunisia', dutch: 'Tunesië', german: 'Tunesien', hebrew: 'טוניסיה', russian: 'Тунис', chinese: '突尼斯', french: 'Tunisie'};
		case 'TO':
			return {english: 'Tonga', dutch: 'Tonga', german: 'Tonga', hebrew: 'טונגה', russian: 'Тонга', chinese: '汤加', french: 'Tonga'};
		case 'TR':
			return {english: 'Turkey', dutch: 'Turkije', german: 'Türkei', hebrew: 'טורקיה', russian: 'Турция', chinese: '土耳其', french: 'Turquie'};
		case 'TT':
			return {english: 'Trinidad & Tobago', dutch: 'Trinidad & Tobago', german: 'Trinidad und Tobago', hebrew: 'טרינידד וטובגו', russian: 'Тринидад и Тобаго', chinese: '特立尼达和多巴哥', french: 'Trinité-et-Tobago'};
		case 'TV':
			return {english: 'Tuvalu', dutch: 'Tuvalu', german: 'Tuvalu', hebrew: 'טובאלו', russian: 'Тувалу', chinese: '图瓦卢', french: 'Tuvalu'};
		case 'TW':
			return {english: 'Taiwan', dutch: 'Taiwan', german: 'Taiwan', hebrew: 'טייוואן', russian: 'Тайвань', chinese: '台湾', french: 'Taïwan'};
		case 'TZ':
			return {english: 'Tanzania', dutch: 'Tanzania', german: 'Tansania', hebrew: 'טנזניה', russian: 'Танзания', chinese: '坦桑尼亚', french: 'Tanzanie'};
		case 'UA':
			return {english: 'Ukraine', dutch: 'Oekraine', german: 'Ukraine', hebrew: 'אוקראינה', russian: 'Украина', chinese: '乌克兰', french: 'Ukraine'};
		case 'UG':
			return {english: 'Uganda', dutch: 'Oeganda', german: 'Uganda', hebrew: 'אוגנדה', russian: 'Уганда', chinese: '乌干达', french: 'Ouganda'};
		case 'UM':
			return {english: 'U.S. Outlying Islands', dutch: 'U.S. Outlying Islands', german: 'Amerikanische Überseeinseln', hebrew: 'האיים המרוחקים הקטנים של ארה״ב', russian: 'Внешние малые острова США', chinese: '美国本土外小岛屿', french: 'Îles mineures éloignées des États-Unis'};
		case 'UN':
			return {english: 'United Nations', dutch: 'United Nations', german: 'Vereinte Nationen', hebrew: 'האומות המאוחדות', russian: 'Организация Объединённых Наций', chinese: '联合国', french: 'Nations unies'};
		case 'US':
			return {english: 'United States', dutch: 'United States', german: 'Vereinigte Staaten', hebrew: 'ארצות הברית', russian: 'США', chinese: '美国', french: 'États-Unis'};
		case 'UY':
			return {english: 'Uruguay', dutch: 'Uruguay', german: 'Uruguay', hebrew: 'אורוגוואי', russian: 'Уругвай', chinese: '乌拉圭', french: 'Uruguay'};
		case 'UZ':
			return {english: 'Uzbekistan', dutch: 'Oezbekistan', german: 'Usbekistan', hebrew: 'אוזבקיסטן', russian: 'Узбекистан', chinese: '乌兹别克斯坦', french: 'Ouzbékistan'};
		case 'VA':
			return {english: 'Vatican City', dutch: 'Vaticaan', german: 'Vatikanstadt', hebrew: 'הוותיקן', russian: 'Ватикан', chinese: '梵蒂冈', french: 'Vatican'};
		case 'VC':
			return {english: 'St. Vincent & Grenadines', dutch: 'St. Vincent & Grenadines', german: 'St. Vincent und die Grenadinen', hebrew: 'סנט וינסנט והגרנדינים', russian: 'Сент-Винсент и Гренадины', chinese: '圣文森特和格林纳丁斯', french: 'Saint-Vincent-et-les-Grenadines'};
		case 'VE':
			return {english: 'Venezuela', dutch: 'Venezuela', german: 'Venezuela', hebrew: 'ונצואלה', russian: 'Венесуэла', chinese: '委内瑞拉', french: 'Venezuela'};
		case 'VG':
			return {english: 'British Virgin Islands', dutch: 'British Virgin Islands', german: 'Britische Jungferninseln', hebrew: 'איי הבתולה הבריטיים', russian: 'Британские Виргинские острова', chinese: '英属维尔京群岛', french: 'Îles Vierges britanniques'};
		case 'VI':
			return {english: 'U.S. Virgin Islands', dutch: 'U.S. Virgin Islands', german: 'Amerikanische Jungferninseln', hebrew: 'איי הבתולה של ארצות הברית', russian: 'Американские Виргинские острова', chinese: '美属维尔京群岛', french: 'Îles Vierges des États-Unis'};
		case 'VN':
			return {english: 'Vietnam', dutch: 'Vietnam', german: 'Vietnam', hebrew: 'וייטנאם', russian: 'Вьетнам', chinese: '越南', french: 'Viêt Nam'};
		case 'VU':
			return {english: 'Vanuatu', dutch: 'Vanuatu', german: 'Vanuatu', hebrew: 'ונואטו', russian: 'Вануату', chinese: '瓦努阿图', french: 'Vanuatu'};
		case 'WF':
			return {english: 'Wallis & Futuna', dutch: 'Wallis & Futuna', german: 'Wallis und Futuna', hebrew: 'איי ווליס ופוטונה', russian: 'Уоллис и Футуна', chinese: '瓦利斯和富图纳', french: 'Wallis-et-Futuna'};
		case 'WS':
			return {english: 'Samoa', dutch: 'Samoa', german: 'Samoa', hebrew: 'סמואה', russian: 'Самоа', chinese: '萨摩亚', french: 'Samoa'};
		case 'XK':
			return {english: 'Kosovo', dutch: 'Kosovo', german: 'Kosovo', hebrew: 'קוסובו', russian: 'Косово', chinese: '科索沃', french: 'Kosovo'};
		case 'YE':
			return {english: 'Yemen', dutch: 'Jemen', german: 'Jemen', hebrew: 'תימן', russian: 'Йемен', chinese: '也门', french: 'Yémen'};
		case 'YT':
			return {english: 'Mayotte', dutch: 'Mayotte', german: 'Mayotte', hebrew: 'מאיוט', russian: 'Майотта', chinese: '马约特', french: 'Mayotte'};
		case 'ZA':
			return {english: 'South Africa', dutch: 'Zuid-Afrika', german: 'Südafrika', hebrew: 'דרום אפריקה', russian: 'Южная Африка', chinese: '南非', french: 'Afrique du Sud'};
		case 'ZM':
			return {english: 'Zambia', dutch: 'Zambia', german: 'Sambia', hebrew: 'זמביה', russian: 'Замбия', chinese: '赞比亚', french: 'Zambie'};
		default:
			return {english: 'Zimbabwe', dutch: 'Zimbabwe', german: 'Simbabwe', hebrew: 'זימבבואה', russian: 'Зимбабве', chinese: '津巴布韦', french: 'Zimbabwe'};
	}
};
var _gizra$backoffice$Translate$languageToCode = function (language) {
	var _p1 = language;
	switch (_p1.ctor) {
		case 'English':
			return 'en';
		case 'Chinese':
			return 'zh-hans';
		case 'Dutch':
			return 'nl';
		case 'German':
			return 'de';
		case 'Hebrew':
			return 'he';
		case 'Russian':
			return 'ru';
		default:
			return 'fr';
	}
};
var _gizra$backoffice$Translate$translateUserBlock = function (transId) {
	var _p2 = transId;
	switch (_p2.ctor) {
		case 'Login_':
			return {english: 'Login', dutch: 'Login', german: 'Login', hebrew: 'התחברות', russian: 'Вход', french: 'Connexion', chinese: '登录'};
		case 'Logout':
			return {english: 'Logout', dutch: 'Uitloggen', german: 'Abmelden', hebrew: 'יציאה', russian: 'Выход', french: 'Déconnexion', chinese: '登出'};
		case 'MyAccount_':
			return {english: 'My Account', dutch: 'Mijn profiel', german: 'Mein Konto', hebrew: 'החשבון שלי', russian: 'Мой аккаунт', french: 'Mon compte', chinese: '我的账户'};
		case 'MyBids_':
			return {english: 'My Bids', dutch: 'Mijn biedingen', german: 'Meine Gebote', hebrew: 'ההצעות שלי', russian: 'Мои ставки', french: 'Mes offres', chinese: '我的出价'};
		case 'MyCredit_':
			return {english: 'My Credit', dutch: 'Mijn krediet', german: 'Mein Kredit', hebrew: 'האשראי שלי', russian: 'Мой кредит', french: 'Mon crédit', chinese: '我的信用'};
		case 'Register_':
			return {english: 'Register', dutch: 'Registreer', german: 'Registrieren', hebrew: 'הרשם', russian: 'Регистрация', french: 'S\'inscrire', chinese: '注册'};
		case 'ToPlaceBid':
			return {english: 'to place bid', dutch: 'bod plaatsen', german: 'um ein Gebot abzugeben', hebrew: 'כדי להגיש הצעה', russian: 'чтобы сделать ставку', french: 'pour placer une offre', chinese: '出价'};
		default:
			return {english: 'Sorry, unrecognized username or password', dutch: 'Sorry, niet-herkende gebruikersnaam of wachtwoord', german: 'Benutzername oder Passwort ist falsch', hebrew: 'שם משתמש או סיסמה אינם מזוהים', russian: 'Извините, неопознанные имя пользователя или пароль', french: 'Désolé, nom d\'utilisateur ou mot de passe non reconnu', chinese: '对不起，无法识别的用户名或密码'};
	}
};
var _gizra$backoffice$Translate$translateRegister = function (transId) {
	var _p3 = transId;
	switch (_p3.ctor) {
		case 'AcceptTerms':
			return {english: 'Accept Terms', dutch: 'Voorwaarden accepteren', german: 'AGB akzeptieren', hebrew: 'הסכמה לתנאים', russian: 'Принять условия', french: 'Accepter les conditions', chinese: '接受条款'};
		case 'ConfirmPassword':
			return {english: 'Confirm password', dutch: 'Bevestig wachtwoord', german: 'Passwort bestätigen', hebrew: 'אישור סיסמא', russian: 'Подтвердить пароль', french: 'Confirmer le mot de passe', chinese: '确认密码'};
		case 'CreateAnAccount':
			return {english: 'Create an account', dutch: 'Account aanmaken', german: 'Ein Konto erstellen', hebrew: 'פתיחת חשבון', russian: 'Создать учетную запись', french: 'Créer un compte', chinese: '创建一个账户'};
		case 'FieldIsRequired':
			return {english: 'This field is required', dutch: 'Dit veld is verplicht', german: 'Dies ist ein Pflichtfeld', hebrew: 'שדה חובה', russian: 'Это поле обязательно для заполнения', french: 'Ce champ est obligatoire', chinese: '该字段是必填项'};
		case 'FirstName':
			return {english: 'First Name', dutch: 'Voornaam', german: 'Vorname', hebrew: 'שם פרטי', russian: 'Имя', french: 'Prénom', chinese: '名字'};
		case 'InvalidEmail':
			return {english: 'Invalid email address', dutch: 'Ongeldig e-mailadres', german: 'Ungültige E-Mail', hebrew: 'אימייל לא תקין', russian: 'Неверный адрес электронной почты', french: 'Adresse e-mail invalide', chinese: '无效的邮箱地址'};
		case 'InvalidLanguage':
			return {english: 'Invalid language', dutch: 'Ongeldige taal', german: 'ungültige Sprache', hebrew: 'שפה לא מזוהה', russian: 'Неверный язык', french: 'Langue invalide', chinese: '无效的语言'};
		case 'LastName':
			return {english: 'Last name', dutch: 'Achternaam', german: 'Nachname', hebrew: 'שם משפחה', russian: 'Фамилия', french: 'Nom de famille', chinese: '姓氏'};
		case 'Language_':
			return {english: 'Language', dutch: 'Taal', german: 'Sprache', hebrew: 'שפה', russian: 'Язык', french: 'Langue', chinese: '语言'};
		case 'Password':
			return {english: 'Password', dutch: 'Wachtwoord', german: 'Passwort', hebrew: 'סיסמא', russian: 'Пароль', french: 'Mot de passe', chinese: '密码'};
		case 'PasswordsDontMatch':
			return {english: 'Passwords don\'t match', dutch: 'Wachtwoorden komen niet overeen', german: 'Passwörter stimmen nicht überein', hebrew: 'הסיסמאות אינן זהות', russian: 'Пароли не совпадают', french: 'Les mots de passe ne correspondent pas', chinese: '密码不匹配'};
		case 'References':
			return {english: 'Areas of interest / References', dutch: 'Interessegebieden / Referenties', german: 'Interessengebiete / Referenzen', hebrew: 'תחומי עניין', russian: 'Области интереса / Ссылки', french: 'Domaines d\'intérêt / Références', chinese: '兴趣领域 / 参考'};
		case 'RegistrationError':
			return {english: 'Registration error, the email is invalid or already exists for another user', dutch: 'Registratiefout, het e-mailadres is ongeldig of bestaat al voor een andere gebruiker', german: 'Fehler, die Emailadresse wird bereits verwendet und ist ungültig', hebrew: 'שגיאת הרשמות, האימייל לא חוקי או שייך למשתמש אחר', russian: 'Ошибка регистрации, адрес электронной почты недействителен или уже существует для другого пользователя', french: 'Erreur d\'enregistrement, l\'adresse e-mail est invalide ou existe déjà pour un autre utilisateur', chinese: '注册错误，电子邮件无效或已经存在于另一名用户'};
		case 'SelectAState':
			return {english: 'Select a state...', dutch: 'Selecteer een staat...', german: 'Bundesland auswählen...', hebrew: 'בחר מדינה...', russian: 'Выберите штат...', french: 'Sélectionnez un état...', chinese: '选择一个州...'};
		case 'SelectLanguage':
			return {english: 'Select language...', dutch: 'Selecteer taal...', german: 'Bitte wählen Sie Ihre Sprache...', hebrew: 'בחר שפה...', russian: 'Выберите язык...', french: 'Sélectionnez la langue...', chinese: '选择语言...'};
		case 'SignUpNow':
			return {english: 'Sign Up Now', dutch: 'Meld u nu aan', german: 'jetzt Anmelden', hebrew: 'הרשם עכשיו', russian: 'Зарегистрироваться сейчас', french: 'Inscrivez-vous maintenant', chinese: '现在注册'};
		case 'SubscribeToNewsLetter':
			return {english: 'Subscribe to our newsletter', dutch: 'Abonneer op onze nieuwsbrief', german: 'für den Newsletter anmelden', hebrew: 'הרשם לרשימת התפוצה שלנו', russian: 'Подписаться на нашу рассылку', french: 'Abonnez-vous à notre newsletter', chinese: '订阅我们的新闻简讯'};
		case 'YouMustAgreeToTheTerms':
			return {english: 'You must agree to the terms and conditions', dutch: 'U moet akkoord gaan met de algemene voorwaarden', german: 'Sie müssen den AGBs zustimmen', hebrew: 'יש להסכים לתנאי השימוש', russian: 'Вы должны согласиться с условиями и положениями', french: 'Vous devez accepter les termes et conditions', chinese: '您必须同意条款和条件'};
		case 'YourAccountDetailsHaveBeenSaved':
			return {english: 'Your account details have been saved', dutch: 'Uw accountgegevens zijn opgeslagen', german: 'Ihr Kontodaten wurden gespeichert', hebrew: 'פרטי חשבונך נשמרו', russian: 'Данные вашего аккаунта сохранены', french: 'Les détails de votre compte ont été enregistrés', chinese: '您的账户详情已被保存'};
		default:
			return {english: '(Will be used as your username)', dutch: '(Wordt gebruikt als uw gebruikersnaam)', german: '(Wird als Ihr Benutzernamen verwendet)', hebrew: '(ישמש כשם משתמש)', russian: '(Будет использоваться в качестве вашего имени пользователя)', french: '(Sera utilisé comme votre nom d\'utilisateur)', chinese: '(将用作您的用户名)'};
	}
};
var _gizra$backoffice$Translate$translateMyBids = function (transId) {
	var _p4 = transId;
	switch (_p4.ctor) {
		case 'NoBidsPlaced':
			return {english: 'No bids placed', dutch: 'Geen biedingen geplaatst', german: 'Keine Gebote gegeben', hebrew: 'לא הוגשו הצעות', russian: 'Ставок не сделано', french: 'Aucune offre placée', chinese: '没有出价'};
		case 'ViewMoreLotDetails':
			return {english: 'View More Lot Details', dutch: 'Bekijk Kavel', german: 'Losdetails', hebrew: 'פרטים נוספים על הפריט', russian: 'Подробнее о лоте', french: 'Voir plus de détails sur le lot', chinese: '查看更多批次详情'};
		default:
			var _p5 = _p4._0;
			return {
				english: A2(_elm_lang$core$Basics_ops['++'], 'Lot ', _p5),
				dutch: A2(_elm_lang$core$Basics_ops['++'], 'Kavel ', _p5),
				german: A2(_elm_lang$core$Basics_ops['++'], 'Los ', _p5),
				hebrew: A2(_elm_lang$core$Basics_ops['++'], 'פריט ', _p5),
				russian: A2(_elm_lang$core$Basics_ops['++'], 'Лот ', _p5),
				french: A2(_elm_lang$core$Basics_ops['++'], 'Lot ', _p5),
				chinese: A2(_elm_lang$core$Basics_ops['++'], '批次 ', _p5)
			};
	}
};
var _gizra$backoffice$Translate$translateMyAccount = function (transId) {
	var _p6 = transId;
	switch (_p6.ctor) {
		case 'ChangePassword':
			return {english: 'Change password', dutch: 'Wijzig wachtwoord', german: 'Passwort ändern', hebrew: 'שנה סיסמא', russian: 'Сменить пароль', french: 'Changer le mot de passe', chinese: '更改密码'};
		case 'EnterNewPassword':
			return {english: 'Enter new password', dutch: 'Voer nieuw wachtwoord in', german: 'Neues Passwort', hebrew: 'סיסמה חדשה', russian: 'Введите новый пароль', french: 'Entrer un nouveau mot de passe', chinese: '输入新密码'};
		case 'UpdateMyAccount':
			return {english: 'Update My Account', dutch: 'Mijn account bijwerken', german: 'Meinen Account aktualisieren', hebrew: 'עדכן את החשבון שלי', russian: 'Обновить мой аккаунт', french: 'Mettre à jour mon compte', chinese: '更新我的账户'};
		default:
			return {english: 'Your account details have been updated', dutch: 'Uw accountgegevens zijn bijgewerkt', german: 'Ihre Accountdetails wurden erfolgreich aktualisiert', hebrew: 'פרטי החשבון שלך עודכנו', russian: 'Данные вашей учетной записи обновлены', french: 'Les détails de votre compte ont été mis à jour', chinese: '您的账户详情已更新'};
	}
};
var _gizra$backoffice$Translate$translateLogin = function (transId) {
	var _p7 = transId;
	switch (_p7.ctor) {
		case 'ForgotYourPassword':
			return {english: 'Forgot your password', dutch: 'Wachtwoord vergeten', german: 'Passwort vergessen', hebrew: 'שכחתי את הסיסמא', russian: 'Забыли пароль', french: 'Mot de passe oublié', chinese: '忘记密码了'};
		case 'SignInToYourAccount':
			return {english: 'Sign in to your account', dutch: 'Log in op uw account', german: 'Loggen Sie sich in Ihr Konto ein', hebrew: 'כניסה לחשבונך', russian: 'Войдите в свой аккаунт', french: 'Connectez-vous à votre compte', chinese: '登录到您的账户'};
		default:
			return {english: 'Sign In Now', dutch: 'Meld u nu aan', german: 'Melden Sie sich jetzt an', hebrew: 'הכנס עכשיו', russian: 'Войти сейчас', french: 'Se connecter maintenant', chinese: '现在登录'};
	}
};
var _gizra$backoffice$Translate$translateGeneral = function (transId) {
	var _p8 = transId;
	switch (_p8.ctor) {
		case 'All':
			return {english: 'All', dutch: 'Alle', german: 'Alle', hebrew: 'הכל', russian: 'Все', french: 'Tout', chinese: '所有'};
		case 'Bidder':
			return {english: 'Bidder', dutch: 'Bieder', german: 'Bieter', hebrew: 'מציע', russian: 'Участник торгов', french: 'Enchérisseur', chinese: '竞标者'};
		case 'BidServerConnect':
			return {english: 'You must connect to the Bid Server', dutch: 'U moet verbinding maken met de biedserver', german: 'Sie müssen mit dem BidServer verbunden sein', hebrew: 'אתה חייב להתחבר לשרת הבידים', russian: 'Вы должны подключиться к серверу ставок', french: 'Vous devez vous connecter au serveur d\'enchères', chinese: '您必须连接到出价服务器'};
		case 'Buyers':
			return {english: 'Buyers', dutch: 'Kopers', german: 'Käufer', hebrew: 'קונים', russian: 'Покупатели', french: 'Acheteurs', chinese: '买家'};
		case 'Delete':
			return {english: 'Delete', dutch: 'Verwijderen', german: 'Löschen', hebrew: 'מחק', russian: 'Удалить', french: 'Supprimer', chinese: '删除'};
		case 'Email':
			return {english: 'Email', dutch: 'E-mail', german: 'E-Mail', hebrew: 'אימייל', russian: 'Электронная почта', french: 'Email', chinese: '电子邮件'};
		case 'From':
			return {english: 'From', dutch: 'Van', german: 'Von', hebrew: 'מ', russian: 'От', french: 'De', chinese: '从'};
		case 'LanguageName_':
			var _p9 = _p8._0;
			switch (_p9.ctor) {
				case 'English':
					return {english: 'English', dutch: 'Engels', german: 'Englisch', hebrew: 'אנגלית', russian: 'Английский', french: 'Anglais', chinese: '英语'};
				case 'Chinese':
					return {english: 'Chinese', dutch: 'Chinees', german: 'Chinesisch', hebrew: 'סינית', russian: 'Китайский', french: 'Chinois', chinese: '中文'};
				case 'Dutch':
					return {english: 'Dutch', dutch: 'Nederlands', german: 'Niederländisch', hebrew: 'הולנדית', russian: 'Голландский', french: 'Néerlandais', chinese: '荷兰语'};
				case 'German':
					return {english: 'German', dutch: 'Duits', german: 'Deutsch', hebrew: 'גרמנית', russian: 'Немецкий', french: 'Allemand', chinese: '德语'};
				case 'Hebrew':
					return {english: 'Hebrew', dutch: 'Hebreeuws', german: 'Hebräisch', hebrew: 'עברית', russian: 'Иврит', french: 'Hébreu', chinese: '希伯来语'};
				case 'Russian':
					return {english: 'Russian', dutch: 'Russisch', german: 'Russisch', hebrew: 'רוסית', russian: 'Русский', french: 'Russe', chinese: '俄语'};
				default:
					return {english: 'French', dutch: 'Frans', german: 'Französisch', hebrew: 'צרפתית', russian: 'Французский', french: 'Français', chinese: '法语'};
			}
		case 'No':
			return {english: 'No', dutch: 'Nee', german: 'Nein', hebrew: 'לא', russian: 'Нет', french: 'Non', chinese: '否'};
		case 'Note':
			return {english: 'Note', dutch: 'Opmerking', german: 'Notiz', hebrew: 'הערה', russian: 'Заметка', french: 'Note', chinese: '注意'};
		case 'Or':
			return {english: 'or', dutch: 'of', german: 'oder', hebrew: 'או', russian: 'или', french: 'ou', chinese: '或'};
		case 'Reset':
			return {english: 'Reset', dutch: 'Resetten', german: 'Zurücksetzen', hebrew: 'אתחול', russian: 'Сброс', french: 'Réinitialiser', chinese: '重置'};
		case 'Save':
			return {english: 'Save', dutch: 'Opslaan', german: 'Speichern', hebrew: 'שמור', russian: 'Сохранить', french: 'Enregistrer', chinese: '保存'};
		case 'Send':
			return {english: 'Send', dutch: 'Versturen', german: 'Senden', hebrew: 'שלח', russian: 'Отправить', french: 'Envoyer', chinese: '发送'};
		case 'To':
			return {english: 'To', dutch: 'Naar', german: 'Zu', hebrew: 'עד', russian: 'До', french: 'À', chinese: '到'};
		case 'Unsold_':
			return {english: 'Unsold', dutch: 'Onverkocht', german: 'Unverkauft', hebrew: 'לא נמכר', russian: 'Не продано', french: 'Invendu', chinese: '未售出'};
		default:
			return {english: 'Yes', dutch: 'Ja', german: 'Ja', hebrew: 'כן', russian: 'Да', french: 'Oui', chinese: '是的'};
	}
};
var _gizra$backoffice$Translate$translateItemPreLiveSale = function (transId) {
	var _p10 = transId;
	switch (_p10.ctor) {
		case 'ChangeBidAmount':
			return {english: 'Change bid', dutch: 'Bod wijzigen', german: 'Gebot ändern', hebrew: 'שנה הצעה', russian: 'Изменить ставку', french: 'Modifier l\'enchère', chinese: '更改出价'};
		case 'DeleteCurrentBid':
			return {english: 'Delete current bid', dutch: 'Huidig bod verwijderen', german: 'Aktuelles Gebot löschen', hebrew: 'מחק ההצעה הנוכחית', russian: 'Удалить текущую ставку', french: 'Supprimer l\'offre actuelle', chinese: '删除当前出价'};
		case 'EnterYourBid':
			return {english: 'Enter your bid', dutch: 'Voer uw bod in', german: 'Geben Sie Ihr Gebot ein', hebrew: 'להוסיף הצעה', russian: 'Введите свою ставку', french: 'Entrez votre offre', chinese: '输入您的出价'};
		case 'FollowLot':
			return {english: 'Follow Lot', dutch: 'Volg Kavel', german: 'Favorit hinzufügen', hebrew: 'עקוב אחר פריט', russian: 'Следить за лотом', french: 'Suivre le lot', chinese: '关注拍品'};
		case 'ItemNotActiveButAlreadyHasLiveBids_':
			return {english: 'Item not active but already has live bids', dutch: 'Artikel niet actief maar heeft al live biedingen', german: 'Artikel ist nicht aktiv, hat aber Gebote', hebrew: 'הפריט הוא לא הנוכחי אבל יש לו כבר הצעות חיות', russian: 'Лот неактивен, но уже есть живые ставки', french: 'L\'article n\'est pas actif mais a déjà des offres en direct', chinese: '物品尚未激活，但已有实时出价'};
		case 'JoinLiveAuction':
			return {english: 'Join Live Auction', dutch: 'Doe mee aan live veiling', german: 'Treten Sie der Live-Auktion bei', hebrew: 'למכירה החיה', russian: 'Присоединиться к живому аукциону', french: 'Rejoignez la vente aux enchères en direct', chinese: '加入现场拍卖'};
		case 'LiveAuctionOpen':
			return {english: 'Live auction open', dutch: 'Live veiling geopend', german: 'Live Auktion aktiv', hebrew: 'מכירה פתוחה', russian: 'Живой аукцион открыт', french: 'Vente aux enchères en direct ouverte', chinese: '现场拍卖开放'};
		case 'LotWithdrawnFromSale':
			return {english: 'Lot withdrawn from sale', dutch: 'Kavel teruggetrokken uit veiling', german: 'Dieses Los wurde zurückgezogen', hebrew: 'פריט זה הוצא מהמכירה', russian: 'Лот был снят с продажи', french: 'Lot retiré de la vente', chinese: '拍品已从出售中撤回'};
		case 'MakeAnOffer':
			return {english: 'Make an offer', dutch: 'Plaats een bod', german: 'Machen Sie ein Angebot', hebrew: 'הגש הצעה', russian: 'Сделать предложение', french: 'Faire une offre', chinese: '提出报价'};
		case 'NoKeepMyBid':
			return {english: 'No, keep my bid', dutch: 'Nee, behoud mijn bod', german: 'Nein, behalte mein Gebot', hebrew: 'לא, שמור על ההצעה שלי', russian: 'Нет, оставьте мою ставку', french: 'Non, gardez mon enchère', chinese: '不，保留我的出价'};
		case 'OnlineAgent':
			return {english: 'Online agent', dutch: 'Auto-bod', german: 'Autogebot ', hebrew: 'סוכן חכם', russian: 'Онлайн-агент', french: 'Agent en ligne', chinese: '在线代理'};
		case 'PlaceBid':
			return {english: 'Place Bid', dutch: 'Bod plaatsen', german: 'Gebot abgeben', hebrew: 'הגש הצעה', russian: 'Сделать ставку', french: 'Placer une offre', chinese: '出价'};
		case 'PromptDeleteCurrentBid':
			return {english: 'Are you sure you want to delete the Bid? (You can always add a new one after)', dutch: 'Weet u zeker dat u het bod wilt verwijderen? (U kunt altijd daarna een nieuwe toevoegen)', german: 'Sind Sie sicher, dass Sie das Gebot löschen möchten? (Sie können jederzeit ein neues hinzufügen)', hebrew: 'האם אתה בטוח שברצונך למחוק את ההצעה? (תמיד תוכל להוסיף חדשה לאחר מכן)', russian: 'Вы уверены, что хотите удалить ставку? (Вы всегда можете добавить новую позже)', french: 'Êtes-vous sûr de vouloir supprimer l\'enchère ? (Vous pouvez toujours en ajouter une nouvelle par la suite)', chinese: '您确定要删除出价吗？（之后您总是可以添加新的）'};
		case 'SoldFor':
			var value = A2(_gizra$backoffice$Amount$showAmountWithCurrencyAsString, _p10._0, _p10._1);
			return {
				english: A2(_elm_lang$core$Basics_ops['++'], 'Sold for ', value),
				dutch: A2(_elm_lang$core$Basics_ops['++'], 'Verkocht voor ', value),
				german: A2(_elm_lang$core$Basics_ops['++'], 'verkauft für ', value),
				hebrew: A2(_elm_lang$core$Basics_ops['++'], 'נמכר: ', value),
				russian: A2(_elm_lang$core$Basics_ops['++'], 'Продано за ', value),
				french: A2(_elm_lang$core$Basics_ops['++'], 'Vendu pour ', value),
				chinese: A2(_elm_lang$core$Basics_ops['++'], '售价 ', value)
			};
		case 'YesDeleteIt':
			return {english: 'Yes, delete it', dutch: 'Ja, verwijder het', german: 'Ja, löschen Sie es', hebrew: 'כן, מחק את זה', russian: 'Да, удалите это', french: 'Oui, supprimez-le', chinese: '是的，删除它'};
		case 'YouAreTheHighestBidder':
			return {english: 'You are the highest bidder!', dutch: 'U bent de hoogste bieder', german: 'Sie sind der Höchstbietende', hebrew: '!ההצעה שלך היא הגבוה ביותר', russian: 'Вы самый высокий заявитель!', french: 'Vous êtes le plus offrant!', chinese: '您是最高出价者！'};
		case 'YouWon':
			var value = A2(_gizra$backoffice$Amount$showAmountWithCurrencyAsString, _p10._0, _p10._1);
			return {
				english: A2(_elm_lang$core$Basics_ops['++'], 'You won this lot for ', value),
				dutch: A2(_elm_lang$core$Basics_ops['++'], 'U heeft dit kavel gewonnen voor ', value),
				german: A2(
					_elm_lang$core$Basics_ops['++'],
					'Sie haben dieses Los für ',
					A2(_elm_lang$core$Basics_ops['++'], value, ' gewonnen')),
				hebrew: A2(_elm_lang$core$Basics_ops['++'], 'זכית בפריט זה עבור ', value),
				russian: A2(_elm_lang$core$Basics_ops['++'], 'Вы выиграли этот лот за ', value),
				french: A2(_elm_lang$core$Basics_ops['++'], 'Vous avez remporté ce lot pour ', value),
				chinese: A2(_elm_lang$core$Basics_ops['++'], '您赢得了这个拍品，价格为 ', value)
			};
		default:
			return {english: 'Your account is pending approval for bidding.', dutch: 'Uw account wacht op goedkeuring voor bieden.', german: 'Ihr Konto wartet auf Freigabe fürs Bieten.', hebrew: 'חשבונך טרם אושר להגשת הצעות.', russian: 'Ваш аккаунт ожидает подтверждения для участия в торгах.', french: 'Votre compte est en attente d\'approbation pour enchérir.', chinese: '您的帐户正在等待批准以进行出价。'};
	}
};
var _gizra$backoffice$Translate$translateHttpError = function (transId) {
	var _p11 = transId;
	switch (_p11.ctor) {
		case 'ErrorBadUrl':
			return {english: 'URL is not valid.', dutch: 'URL is niet geldig', german: 'URL ist nicht gültig', hebrew: 'כתובת שגוייה', russian: 'URL не действителен.', french: 'L\'URL n\'est pas valide.', chinese: 'URL无效。'};
		case 'ErrorBadPayload':
			var _p12 = _p11._0;
			return {
				english: A2(_elm_lang$core$Basics_ops['++'], 'The server responded with data of an unexpected type: ', _p12),
				dutch: A2(_elm_lang$core$Basics_ops['++'], 'De server reageerde met gegevens van een onverwacht type: ', _p12),
				german: A2(_elm_lang$core$Basics_ops['++'], 'Der Server hat mit einem unerwarteten Type geantwortet: ', _p12),
				hebrew: A2(_elm_lang$core$Basics_ops['++'], 'השרת שלח מידע בלתי צפוי: ', _p12),
				russian: A2(_elm_lang$core$Basics_ops['++'], 'Сервер ответил данными неожиданного типа: ', _p12),
				french: A2(_elm_lang$core$Basics_ops['++'], 'Le serveur a répondu avec des données d\'un type inattendu : ', _p12),
				chinese: A2(_elm_lang$core$Basics_ops['++'], '服务器响应了意外类型的数据：', _p12)
			};
		case 'ErrorBadStatus':
			var _p13 = _p11._0;
			return {english: _p13, dutch: _p13, german: _p13, hebrew: _p13, russian: _p13, french: _p13, chinese: _p13};
		case 'ErrorNetworkError':
			return {english: 'There was a network error.', dutch: 'Er is een netwerkfout opgetreden', german: 'Es gab einen Netzwerk-Fehler', hebrew: 'בעיית רשת', russian: 'Произошла ошибка сети.', french: 'Il y a eu une erreur réseau.', chinese: '出现网络错误。'};
		default:
			return {english: 'The network request timed out.', dutch: 'Er is een time-out opgetreden voor het netwerkverzoek.', german: 'Die Netzwerkanfrage ist abgelaufen.', hebrew: 'הקריאה לשרת ארכה זמן רב מדי', russian: 'Время ожидания сетевого запроса истекло.', french: 'La demande réseau a expiré.', chinese: '网络请求超时。'};
	}
};
var _gizra$backoffice$Translate$translateCredit = function (transId) {
	var _p14 = transId;
	switch (_p14.ctor) {
		case 'BidderLimitNote':
			return {english: 'Please note that this limit only applies to your written bids (including those submitted in the online catalogue).', dutch: 'Houd er rekening mee dat deze limiet alleen van toepassing is op uw schriftelijke biedingen (inclusief die in de online catalogus)', german: 'Bitte beachten Sie, dass dieses Limit ausschließlich für Ihre schriftlichen Gebote (u.a. die im Online Katalog abgegeben) zählt.', hebrew: 'שים לב שאשראי זה מתייחס רק להצעות מראש כולל אלו שהוגשו דרך האתר', russian: 'Обратите внимание, что этот лимит применяется только к вашим письменным ставкам (включая те, которые были сделаны в онлайн-каталоге)', french: 'Veuillez noter que cette limite ne s\'applique qu\'à vos enchères écrites (y compris celles soumises dans le catalogue en ligne)', chinese: '请注意，此限制仅适用于您的书面出价（包括在线目录中提交的出价）'};
		case 'BidderLimitDescription':
			return {english: 'Please enter the maximum amount you would like to bid excluding commission and lot fee, please note that a deviation of approx. 10% cannot always be avoided.', dutch: 'Vul a.u.b. het maximale bedrag in dat u wilt bieden exclusief commissie en kavelgeld, houd er rekening mee dat een afwijking van ca. 10% niet altijd te vermijden is.', german: 'Bitte geben Sie die Summe ein für die Sie maximal, zuzüglich Aufgeld und Los Gebühr, kaufen möchten. Bitte beachten Sie, dass sich eine ca. 10%ige Abweichung nicht immer vermeiden lässt.', hebrew: 'הזן בבקשה את הסכום המקסימלי בו תרצה לזכות בפריטים, סכום זה לא כולל עלויות נוספות כגון עמלה מעמ אלה מתייחס לסכום הזכיה בלבד', russian: 'Введите максимальную сумму, которую вы хотите поставить, не учитывая комиссию и плату за лот, обратите внимание, что отклонение примерно 10% не всегда можно избежать', french: 'Veuillez entrer le montant maximum que vous souhaitez enchérir, hors commission et frais de lot, veuillez noter qu\'un écart d\'environ 10% ne peut pas toujours être évité.', chinese: '请输入您想要出价的最高金额，不包括佣金和批量费用，请注意，大约10％的偏差不总是可以避免的。'};
		case 'CreditRequest':
			return {english: 'Request Credit for Online Bidding', dutch: 'Krediet aanvragen voor online bieden', german: 'Kreditanfrage für Online Live Bidding', hebrew: 'בקש אשראי', russian: 'Запрос кредита для онлайн-ставок', french: 'Demande de crédit pour les enchères en ligne', chinese: '请求在线出价信用'};
		case 'CreditRequestDescription':
			return {english: 'How much credit would you like to request? Once this limit is reached, you will not be able to place further bids.', dutch: 'Hoeveel krediet wilt u aanvragen? Zodra deze limiet is bereikt, kunt u niet meer bieden.', german: 'Geben Sie den Betrag ein, den Sie als Guthaben für das Onlive Live Bidding festlegen möchten. Sobald dieses Limit erreicht ist, können Sie keine weiteren Gebote abgeben.', hebrew: 'הכנס את הסכום אותו תרצה כאשראי ממנהל המכירה.', russian: 'Сколько кредита вы хотите запросить? Как только это ограничение будет достигнуто, вы не сможете делать дальнейшие ставки.', french: 'Combien de crédit souhaitez-vous demander ? Une fois cette limite atteinte, vous ne pourrez plus placer d\'offres.', chinese: '您想申请多少信用额度？一旦达到此限制，您将无法再进一步出价。'};
		case 'CreditRequestPending':
			return {english: 'Thank you for your credit request. A member of staff will review your request shortly.', dutch: 'Bedankt voor uw kredietaanvraag. Een medewerker zal uw aanvraag zo spoedig mogelijk beoordelen.', german: 'Vielen Dank für die Beantragung des Kreditlimits. Wir werden es umgehend prüfen.', hebrew: 'תודה רבה על בקשתך, נבדוק את האשראי שלך בהקדם', russian: 'Спасибо за ваш запрос на кредит. Сотрудник скоро рассмотрит ваш запрос.', french: 'Merci pour votre demande de crédit. Un membre de notre personnel examinera votre demande sous peu.', chinese: '感谢您的信用申请。工作人员将尽快审查您的请求。'};
		case 'CreditUnlimited':
			return {english: 'You have unlimited credit.', dutch: 'U heeft onbegrensd krediet', german: 'Sie haben unbegrenzten Kredit.', hebrew: 'יש לך אשראי בלתי מוגבל.', russian: 'У вас неограниченный кредит.', french: 'Vous avez un crédit illimité.', chinese: '您的信用是无限的。'};
		case 'CurrentCredit':
			var _p15 = _p14._0;
			switch (_p15.ctor) {
				case 'None':
					return {english: 'No credit', dutch: 'Geen krediet', german: 'Kein Kredit', hebrew: 'אין לך אשראי', russian: 'У вас нет кредита', french: 'Pas de crédit', chinese: '没有信用'};
				case 'Regular':
					var value = A2(_gizra$backoffice$Amount$showAmountWithCurrencyAsString, _p15._0, _p14._1);
					return {
						english: A2(_elm_lang$core$Basics_ops['++'], 'Your current credit is ', value),
						dutch: A2(_elm_lang$core$Basics_ops['++'], 'Uw huidige krediet is ', value),
						german: A2(_elm_lang$core$Basics_ops['++'], 'Ihr aktuelles Kreditlimit beträgt ', value),
						hebrew: A2(_elm_lang$core$Basics_ops['++'], 'האשראי שלך הוא ', value),
						russian: A2(_elm_lang$core$Basics_ops['++'], 'Ваш текущий кредит составляет ', value),
						french: A2(_elm_lang$core$Basics_ops['++'], 'Votre crédit actuel est de ', value),
						chinese: A2(_elm_lang$core$Basics_ops['++'], '您当前的信用是 ', value)
					};
				default:
					return {english: 'Your current credit is unlimited', dutch: 'Uw huidige krediet is onbegrensd', german: 'Ihr aktuelles Kreditlimit ist unbegrenzt', hebrew: 'האשראי הנוכחי שלך הוא ללא הגבלה', russian: 'Ваш текущий кредит не ограничен', french: 'Votre crédit actuel est illimité', chinese: '您当前的信用是无限的'};
			}
		case 'CurrentCreditAndPending':
			var _p17 = _p14._2;
			var _p16 = {ctor: '_Tuple2', _0: _p14._0, _1: _p14._1};
			_v13_3:
			do {
				if (_p16.ctor === '_Tuple2') {
					switch (_p16._0.ctor) {
						case 'Regular':
							if (_p16._1.ctor === 'Regular') {
								var pending = A2(_gizra$backoffice$Amount$showAmountWithCurrencyAsString, _p16._1._0, _p17);
								var existing = A2(_gizra$backoffice$Amount$showAmountWithCurrencyAsString, _p16._0._0, _p17);
								return {
									english: A2(
										_elm_lang$core$Basics_ops['++'],
										'Your current credit is ',
										A2(
											_elm_lang$core$Basics_ops['++'],
											existing,
											A2(_elm_lang$core$Basics_ops['++'], ' and you have a pending request for ', pending))),
									dutch: A2(
										_elm_lang$core$Basics_ops['++'],
										'Uw huidige krediet is ',
										A2(
											_elm_lang$core$Basics_ops['++'],
											existing,
											A2(_elm_lang$core$Basics_ops['++'], ' en u heeft een aanvraag in behandeling voor ', pending))),
									german: A2(
										_elm_lang$core$Basics_ops['++'],
										'Ihr aktuelles Kreditlimit beträgt ',
										A2(
											_elm_lang$core$Basics_ops['++'],
											existing,
											A2(_elm_lang$core$Basics_ops['++'], '. Sie haben eine ausstehende Anfrage über ', pending))),
									hebrew: A2(
										_elm_lang$core$Basics_ops['++'],
										'האשראי הנוכחי שלך הוא ',
										A2(
											_elm_lang$core$Basics_ops['++'],
											existing,
											A2(_elm_lang$core$Basics_ops['++'], ' ויש לך בקשת אשראי על סכום ', pending))),
									russian: A2(
										_elm_lang$core$Basics_ops['++'],
										'Ваш текущий кредит составляет ',
										A2(
											_elm_lang$core$Basics_ops['++'],
											existing,
											A2(_elm_lang$core$Basics_ops['++'], ', и у вас есть ожидающий запрос на ', pending))),
									french: A2(
										_elm_lang$core$Basics_ops['++'],
										'Votre crédit actuel est de ',
										A2(
											_elm_lang$core$Basics_ops['++'],
											existing,
											A2(_elm_lang$core$Basics_ops['++'], ' et vous avez une demande en attente de ', pending))),
									chinese: A2(
										_elm_lang$core$Basics_ops['++'],
										'您当前的信用是 ',
										A2(
											_elm_lang$core$Basics_ops['++'],
											existing,
											A2(
												_elm_lang$core$Basics_ops['++'],
												'，并且您有一个待处理的 ',
												A2(_elm_lang$core$Basics_ops['++'], pending, ' 请求'))))
								};
							} else {
								break _v13_3;
							}
						case 'None':
							if (_p16._1.ctor === 'Regular') {
								var pending = A2(_gizra$backoffice$Amount$showAmountWithCurrencyAsString, _p16._1._0, _p17);
								return {
									english: A2(_elm_lang$core$Basics_ops['++'], 'You have no current credit but you have a pending request for ', pending),
									dutch: A2(_elm_lang$core$Basics_ops['++'], 'U heeft momenteel geen krediet, maar u heeft een aanvraag in behandeling voor ', pending),
									german: A2(
										_elm_lang$core$Basics_ops['++'],
										'Aktuell haben Sie noch kein Live Limit, wir bearbeiten Ihren Antrag über ',
										A2(_elm_lang$core$Basics_ops['++'], pending, ' schnellstmöglich.')),
									hebrew: A2(_elm_lang$core$Basics_ops['++'], 'אין לך אשראי אבל יש בקשת אשראי ממך על סכום ', pending),
									russian: A2(_elm_lang$core$Basics_ops['++'], 'У вас нет текущего кредита, но у вас есть ожидающий запрос на ', pending),
									french: A2(_elm_lang$core$Basics_ops['++'], 'Vous n\'avez pas de crédit actuel mais vous avez une demande en attente de ', pending),
									chinese: A2(
										_elm_lang$core$Basics_ops['++'],
										'您目前没有信用，但您有一个待处理的 ',
										A2(_elm_lang$core$Basics_ops['++'], pending, ' 请求'))
								};
							} else {
								break _v13_3;
							}
						default:
							return {english: 'Your current credit is unlimited', dutch: 'Uw huidige krediet is onbegrensd', german: 'Ihr aktuelles Kreditlimit ist unbegrenzt', hebrew: 'האשראי הנוכחי שלך הוא ללא הגבלה', russian: 'Ваш текущий кредит не ограничен', french: 'Votre crédit actuel est illimité', chinese: '您当前的信用是无限的'};
					}
				} else {
					break _v13_3;
				}
			} while(false);
			return {english: '', dutch: '', german: '', hebrew: '', russian: '', french: '', chinese: ''};
		case 'CurrentMaximum':
			var _p18 = _p14._0;
			switch (_p18.ctor) {
				case 'None':
					return {english: 'Your current maximum is not set', dutch: 'Uw huidige maximum is niet ingesteld', german: 'Ihr aktuelles Maximum ist nicht festgelegt', hebrew: 'אין לך מקסימום להגשה', russian: 'Ваш текущий максимум не установлен', french: 'Votre maximum actuel n\'est pas défini', chinese: '您当前的最大值未设置'};
				case 'Regular':
					var value = A2(_gizra$backoffice$Amount$showAmountWithCurrencyAsString, _p18._0, _p14._1);
					return {
						english: A2(_elm_lang$core$Basics_ops['++'], 'Your current maximum is ', value),
						dutch: A2(_elm_lang$core$Basics_ops['++'], 'Uw huidige maximum is ', value),
						german: A2(_elm_lang$core$Basics_ops['++'], 'Ihr aktuelles Maximum beträgt ', value),
						hebrew: A2(_elm_lang$core$Basics_ops['++'], 'המקסימום שלך הוא ', value),
						russian: A2(_elm_lang$core$Basics_ops['++'], 'Ваш текущий максимум составляет ', value),
						french: A2(_elm_lang$core$Basics_ops['++'], 'Votre maximum actuel est de ', value),
						chinese: A2(_elm_lang$core$Basics_ops['++'], '您当前的最大值是 ', value)
					};
				default:
					return {english: 'Your current maximum is unlimited', dutch: 'Uw huidige maximum is onbegrensd', german: 'Ihr aktuelles Maximum ist unbegrenzt', hebrew: 'אין לך הגבלת מקסימום', russian: 'Ваш текущий максимум не ограничен', french: 'Votre maximum actuel est illimité', chinese: '您当前的最大值是无限的'};
			}
		case 'NumberInput':
			return {english: 'Please do not use commas or decimal points.', dutch: 'Gebruik geen komma\'s of decimalen.', german: 'Bitte geben Sie die Zahl ohne Tausendertrennzeichen und Nachkommastellen ein.', hebrew: 'בבקשה הזן מספר ללא פסיק בין האלפים וללא נקודה עשרונית', russian: 'Пожалуйста, не используйте запятые или десятичные точки.', french: 'Veuillez ne pas utiliser de virgules ou de points décimaux.', chinese: '请不要使用逗号或小数点。'};
		default:
			return {english: 'Your bidder limit has been updated', dutch: 'Uw biedlimiet is bijgewerkt', german: 'Ihr Maximalgebot wurde gespeichert', hebrew: 'המקסימום זכיה שלך עודכן בהצלחה', russian: 'Ваш лимит ставок был обновлен', french: 'Votre limite d\'enchère a été mise à jour', chinese: '您的竞标限额已更新'};
	}
};
var _gizra$backoffice$Translate$translateHtml = F2(
	function (language, transId) {
		var translationSet = function () {
			var _p19 = transId;
			switch (_p19.ctor) {
				case 'AgreedWithTerms':
					var _p20 = _p19._0;
					var privacyLinkAttr = function (privacyUrl) {
						return {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$href(
								A2(_elm_lang$core$Basics_ops['++'], _p20, privacyUrl)),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$target('_blank'),
								_1: {ctor: '[]'}
							}
						};
					};
					var termsLinkAttr = {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$href(
							A2(_elm_lang$core$Basics_ops['++'], _p20, '/terms-conditions')),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$target('_blank'),
							_1: {ctor: '[]'}
						}
					};
					return {
						english: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('I have read and accepted the Auctioneers '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									termsLinkAttr,
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Terms and Conditions'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(' and '),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$a,
											privacyLinkAttr('/privacy-policy'),
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Data Privacy Terms'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html$text(' and I agree to abide by them.'),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						},
						dutch: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Ik heb de '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									termsLinkAttr,
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Voorwaarden'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(' en '),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$a,
											privacyLinkAttr('/datenschutzerklärung'),
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Privacy policy'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html$text(' gelezen en geaccepteerd'),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						},
						german: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Ich habe die '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									termsLinkAttr,
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('AGB'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(' sowie die '),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$a,
											privacyLinkAttr('/datenschutzerklärung'),
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Datenschutzerklärung'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html$text(' gelesen und stimme ihnen zu.'),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						},
						hebrew: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('קראתי ואני מסכים עם '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									termsLinkAttr,
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('התנאים וההגבלות'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(' ו'),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$a,
											privacyLinkAttr('/privacy-policy'),
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('תנאי פרטיות המידע '),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html$text(' ואני מסכים לציית להם'),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						},
						russian: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Я прочитал и принял '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									termsLinkAttr,
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Условия и положения'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(' и '),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$a,
											privacyLinkAttr('/privacy-policy'),
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Политика конфиденциальности'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html$text(' и согласен им следовать.'),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						},
						french: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('J\'ai lu et accepté les '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									termsLinkAttr,
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Conditions générales'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(' et la '),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$a,
											privacyLinkAttr('/privacy-policy'),
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Politique de confidentialité'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html$text(' et je m\'engage à les respecter.'),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						},
						chinese: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('我已阅读并接受 '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									termsLinkAttr,
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('拍卖行的条款和条件'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(' 和 '),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$a,
											privacyLinkAttr('/privacy-policy'),
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('数据隐私条款'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html$text(' 并同意遵守它们。'),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					};
				case 'CreditIsRequiredForAgentBids':
					var baseUrl = _sporto$erl$Erl$toString(_p19._0);
					var linkAttr = {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$href(
							A2(
								_elm_lang$core$Basics_ops['++'],
								baseUrl,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'/my-credit/',
									_Gizra$elm_restful$Restful_Endpoint$fromEntityUuid(_p19._1)))),
						_1: {ctor: '[]'}
					};
					return {
						english: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('In order to place Agent bids, you must have a Credit limit set. Click '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									linkAttr,
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('here'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(' to set the Credit.'),
									_1: {ctor: '[]'}
								}
							}
						},
						dutch: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Om auto-biedingen te plaatsen, moet u een Kredietlimiet hebben ingesteld. Klik  '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									linkAttr,
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('hier'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(' om het tegoed in te stellen.'),
									_1: {ctor: '[]'}
								}
							}
						},
						german: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Um Auto Gebote abgeben zu können, müssen Sie sich '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									linkAttr,
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('hier'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(' für das LiveBieten registrieren.'),
									_1: {ctor: '[]'}
								}
							}
						},
						hebrew: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('על מנת להגיש הצעות עם סוכן כחם, אתה חייב לקבל אשראי. לחץ  '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									linkAttr,
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('כאן'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(' כדי לבקש אשראי.'),
									_1: {ctor: '[]'}
								}
							}
						},
						russian: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Чтобы делать ставки через агента, вы должны иметь установленный кредитный лимит. Нажмите '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									linkAttr,
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('здесь'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(' чтобы установить кредит.'),
									_1: {ctor: '[]'}
								}
							}
						},
						french: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Pour placer des offres avec un agent, vous devez avoir une limite de crédit définie. Cliquez '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									linkAttr,
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('ici'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(' pour définir le crédit.'),
									_1: {ctor: '[]'}
								}
							}
						},
						chinese: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('要投放代理出价，您必须设定信用额度。点击 '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									linkAttr,
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('这里'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(' 来设置信用额度。'),
									_1: {ctor: '[]'}
								}
							}
						}
					};
				case 'CreditIsRequiredForMailBids':
					var baseUrl = _sporto$erl$Erl$toString(_p19._0);
					var linkAttr = {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$href(
							A2(
								_elm_lang$core$Basics_ops['++'],
								baseUrl,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'/my-credit/',
									_Gizra$elm_restful$Restful_Endpoint$fromEntityUuid(_p19._1)))),
						_1: {ctor: '[]'}
					};
					return {
						english: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('In order to place Mail bids, you must have a Credit limit set and approved. Click '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									linkAttr,
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('here'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(' to set the Credit.'),
									_1: {ctor: '[]'}
								}
							}
						},
						dutch: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Om schriftelijk bieden te plaatsen, moet u een Kredietlimiet hebben ingesteld. Klik  '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									linkAttr,
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('hier'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(' om het tegoed in te Krediet.'),
									_1: {ctor: '[]'}
								}
							}
						},
						german: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Um Auto Gebote abgeben zu können, müssen Sie sich '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									linkAttr,
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('hier'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(' für das LiveBieten registrieren.'),
									_1: {ctor: '[]'}
								}
							}
						},
						hebrew: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('על מנת להגיש הצעות אתה חייב לקבל אשראי מבית המכירות. לחץ  '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									linkAttr,
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('כאן'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(' כדי לבקש אשראי.'),
									_1: {ctor: '[]'}
								}
							}
						},
						russian: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Чтобы делать почтовые ставки, вы должны иметь установленный и одобренный кредитный лимит. Нажмите '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									linkAttr,
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('здесь'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(' чтобы установить кредит.'),
									_1: {ctor: '[]'}
								}
							}
						},
						french: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Pour placer des offres par mail, vous devez avoir une limite de crédit définie et approuvée. Cliquez '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									linkAttr,
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('ici'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(' pour définir le crédit.'),
									_1: {ctor: '[]'}
								}
							}
						},
						chinese: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('要投放信函出价，您必须设定信用额度并得到批准。点击 '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									linkAttr,
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('这里'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(' 来设置信用额度。'),
									_1: {ctor: '[]'}
								}
							}
						}
					};
				case 'CreditIsRequiredButPendingForMailBids':
					var baseUrl = _sporto$erl$Erl$toString(_p19._0);
					var linkAttr = {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$href(
							A2(
								_elm_lang$core$Basics_ops['++'],
								baseUrl,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'/my-credit/',
									_Gizra$elm_restful$Restful_Endpoint$fromEntityUuid(_p19._1)))),
						_1: {ctor: '[]'}
					};
					return {
						english: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('In order to place Mail bids, you must have a Credit limit set and approved. Your credit request is not yet approved. Click '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									linkAttr,
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('here'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(' to see or update the Credit request.'),
									_1: {ctor: '[]'}
								}
							}
						},
						dutch: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Om biedingen te kunnen plaatsen, moet u een goedgekeurd kredietlimiet hebben ingesteld. Uw kredietaanvraag is nog niet goedgekeurd. Klik '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									linkAttr,
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('hier'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(' om de kredietaanvraag te bekijken of bij te werken.'),
									_1: {ctor: '[]'}
								}
							}
						},
						german: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Um schriftliche Gebote abgeben zu können, muß ein Kreditrahmen gesetzt und genehmigt sein. Ihre Kreditanfrage ist noch nicht genehmigt. Klicken Sie '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									linkAttr,
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('hier'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(' um Ihre Anfrage zu sehen und zu verändern.'),
									_1: {ctor: '[]'}
								}
							}
						},
						hebrew: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('על מנת להגיש הצעות אתה חייב לקבל אשראי מבית המכירות. בקשתך לאשראי טרם אושרה. לחץ'),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									linkAttr,
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('כאן'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(' כדי לראות או לעדכן את בקשת האשראי שלך.'),
									_1: {ctor: '[]'}
								}
							}
						},
						russian: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Чтобы делать ставки по почте, у вас должен быть установлен и одобрен кредитный лимит. Ваш запрос на кредит еще не утвержден. Нажмите '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									linkAttr,
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('здесь'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(' чтобы посмотреть или обновить запрос на кредит.'),
									_1: {ctor: '[]'}
								}
							}
						},
						french: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Pour placer des offres par courrier, vous devez avoir une limite de crédit définie et approuvée. Votre demande de crédit n\'est pas encore approuvée. Cliquez '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									linkAttr,
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('ici'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(' pour voir ou mettre à jour la demande de crédit.'),
									_1: {ctor: '[]'}
								}
							}
						},
						chinese: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('要通过邮件投标，您必须设定并获得批准的信贷额度。您的信贷申请尚未获得批准。点击'),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									linkAttr,
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('这里'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text(' 来查看或更新信贷申请。'),
									_1: {ctor: '[]'}
								}
							}
						}
					};
				case 'EstPrice':
					var _p22 = _p19._1;
					var _p21 = _p19._0;
					return {
						english: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Est. '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('med pipeline estimated-price'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(_gizra$backoffice$Amount$showAmountWithCurrency, _p21, _p22),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						dutch: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Schatting'),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('med pipeline estimated-price'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(_gizra$backoffice$Amount$showAmountWithCurrency, _p21, _p22),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						german: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Einschätzung'),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('med pipeline estimated-price'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(_gizra$backoffice$Amount$showAmountWithCurrency, _p21, _p22),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						hebrew: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('הערכה'),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('med pipeline estimated-price'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(_gizra$backoffice$Amount$showAmountWithCurrency, _p21, _p22),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						russian: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Оценка'),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('med pipeline estimated-price'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(_gizra$backoffice$Amount$showAmountWithCurrency, _p21, _p22),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						french: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Estim.'),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('med pipeline estimated-price'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(_gizra$backoffice$Amount$showAmountWithCurrency, _p21, _p22),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						chinese: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('估计'),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('med pipeline estimated-price'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(_gizra$backoffice$Amount$showAmountWithCurrency, _p21, _p22),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					};
				case 'ForgotPasswordInstructions':
					return {
						english: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Please enter the email address for the account you wish to access.'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('An email with a one time reset link will be sent you your email.'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						dutch: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Voer het e-mailadres in van het account dat u wilt openen.'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Een e-mail met een eenmalige reset-link zal u uw e-mail sturen.'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						german: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Bitte geben Sie die eMail-Adresse Ihres Kontos ein.'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Eine eMail mit einem einmal gültigen Reset-Link wird an diese Adresse verschickt..'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						hebrew: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('אנא הכנס את כתובת האימייל של החשבון שאליו ברצונך לגשת.'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('אימייל עם קישור לאיפוס יישלח אל תיבת האימייל שלך.'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						russian: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Пожалуйста, введите адрес электронной почты для учетной записи, к которой вы хотите получить доступ.'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('На вашу электронную почту будет отправлено письмо с одноразовой ссылкой для сброса.'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						french: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Veuillez entrer l\'adresse e-mail du compte auquel vous souhaitez accéder.'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Un e-mail avec un lien de réinitialisation unique vous sera envoyé sur votre e-mail.'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						chinese: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('请输入您想访问的帐户的电子邮件地址。'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('将会向您的电子邮件发送包含一次性重置链接的邮件。'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					};
				case 'LoginInstructions':
					return {
						english: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Please use the email you have used to register with as your login name.'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('If you have forgotten your password please use the forgot password link below to reset.'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						dutch: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Gebruik het e-mailadres waarmee u zich heeft geregistreerd als uw inlognaam.'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Als je je wachtwoord bent vergeten, gebruik dan de wachtwoord vergeten link hieronder om te resetten.'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						german: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Bitte benutzen Sie die eMail-Adresse mit welcher Sie sich registriert haben als Login-Namen.'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Wenn Sie ihr Passwort vergessen haben, nutzen Sie bitte den weiter unten angezeigten Reset-Link.'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						hebrew: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('אנא השתמש בכתובת האימייל עם הזאת נרשמת כשם המשתמש שלך.'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('אם שכחת את הסיסמה שלך, אנא השתמש בקישור שכחתי סיסמה למטה כדי לאפס.'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						russian: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Пожалуйста, используйте электронную почту, которую вы использовали для регистрации, в качестве логина.'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Если вы забыли свой пароль, используйте ссылку для сброса пароля ниже.'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						french: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Veuillez utiliser l\'e-mail que vous avez utilisé pour vous inscrire comme votre nom de connexion.'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Si vous avez oublié votre mot de passe, veuillez utiliser le lien mot de passe oublié ci-dessous pour le réinitialiser.'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						chinese: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('请使用您注册时使用的电子邮件作为您的登录名。'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('如果您忘记了密码，请使用下面的忘记密码链接进行重置。'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					};
				case 'MailCurrentPriceAmount':
					var _p24 = _p19._1;
					var _p23 = _p19._0;
					return {
						english: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Current price '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('med'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(_gizra$backoffice$Amount$showAmountWithCurrency, _p23, _p24),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						dutch: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Huidig bod '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('med'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(_gizra$backoffice$Amount$showAmountWithCurrency, _p23, _p24),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						german: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Aktuelles Gebot '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('med'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(_gizra$backoffice$Amount$showAmountWithCurrency, _p23, _p24),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						hebrew: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('מחיר נוכחי '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('med'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(_gizra$backoffice$Amount$showAmountWithCurrency, _p23, _p24),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						russian: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Текущая цена '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('med'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(_gizra$backoffice$Amount$showAmountWithCurrency, _p23, _p24),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						french: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Prix actuel '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('med'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(_gizra$backoffice$Amount$showAmountWithCurrency, _p23, _p24),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						chinese: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('当前价格 '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('med'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(_gizra$backoffice$Amount$showAmountWithCurrency, _p23, _p24),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					};
				case 'RegisterInstructions':
					return {
						english: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('In order to bid in our auctions, please complete full registration.'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Fields with * are required.'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						dutch: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Om te kunnen bieden in onze veilingen, dient u de volledige registratie te voltooien.'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Velden met * zijn verplicht.'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						german: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Bitte vervollständigen Sie Ihre Anmeldung, damit Sie in unserer Auktion bieten können.'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Felder mit einem * sind Pflichtfelder.'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						hebrew: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('על מנת להגיש הצעות במכירות שלנו, אנא השלם את ההרשמה במלואה.'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('שדות עם * הם שדות חובה.'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						russian: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Для того чтобы делать ставки на наших аукционах, пожалуйста, заполните полную регистрацию.'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Поля, отмеченные * обязательны для заполнения.'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						french: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Pour enchérir lors de nos enchères, veuillez compléter l\'inscription complète.'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Les champs marqués d\'un * sont obligatoires.'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						},
						chinese: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('为了在我们的拍卖中出价，请完成全部注册。'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('带 * 的字段是必填项。'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					};
				case 'ResetPasswordSuccess':
					var baseHostUrlAsString = _sporto$erl$Erl$toString(_p19._0);
					var loginUrl = A2(_elm_lang$core$Basics_ops['++'], baseHostUrlAsString, '/login');
					return {
						english: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Your password has been reset. Please login using the link at the top right, or by clicking'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text(' '),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$a,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$href(loginUrl),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('here'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html$text('.'),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						dutch: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Uw wachtwoord is opnieuw ingesteld. U kunt nu inloggen via de link in de rechterbovenhoek, of door'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text(' '),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$a,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$href(loginUrl),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('hier'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html$text('te klikken.'),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						german: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Ihr Passwort wurde zurückgesetzt. Bitte loggen Sie sich über den Link rechts oben ein, oder klicken Sie'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text(' '),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$a,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$href(loginUrl),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('hier'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html$text('.'),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						hebrew: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('סיסמתך שונתה בהצלחה. על מנת להיכנס לחשבון לחץ על כניסה בראש העמוד או לחץ'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text(' '),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$a,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$href(loginUrl),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('כאן'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html$text('.'),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						russian: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Ваш пароль был сброшен. Пожалуйста, войдите, используя ссылку в верхнем правом углу, или нажмите'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text(' '),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$a,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$href(loginUrl),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('здесь'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html$text('.'),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						french: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Votre mot de passe a été réinitialisé. Veuillez vous connecter en utilisant le lien en haut à droite, ou en cliquant'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text(' '),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$a,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$href(loginUrl),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('ici'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html$text('.'),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						chinese: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('您的密码已重置。请使用右上角的链接登录，或点击'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text(' '),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$a,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$href(loginUrl),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('这里'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html$text('。'),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					};
				case 'Start':
					var amountHtml = A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('med pipeline start-price'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(_gizra$backoffice$Amount$showAmountWithCurrency, _p19._0, _p19._1),
							_1: {ctor: '[]'}
						});
					return {
						english: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Start '),
							_1: {
								ctor: '::',
								_0: amountHtml,
								_1: {ctor: '[]'}
							}
						},
						dutch: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Inzet '),
							_1: {
								ctor: '::',
								_0: amountHtml,
								_1: {ctor: '[]'}
							}
						},
						german: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Ausruf '),
							_1: {
								ctor: '::',
								_0: amountHtml,
								_1: {ctor: '[]'}
							}
						},
						hebrew: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('מחיר התחלתי '),
							_1: {
								ctor: '::',
								_0: amountHtml,
								_1: {ctor: '[]'}
							}
						},
						russian: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Начало '),
							_1: {
								ctor: '::',
								_0: amountHtml,
								_1: {ctor: '[]'}
							}
						},
						french: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Début '),
							_1: {
								ctor: '::',
								_0: amountHtml,
								_1: {ctor: '[]'}
							}
						},
						chinese: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('起始价 '),
							_1: {
								ctor: '::',
								_0: amountHtml,
								_1: {ctor: '[]'}
							}
						}
					};
				case 'YourCurrentAgentBidIsWithAmount':
					var amountHtml = A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('med'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(_gizra$backoffice$Amount$showAmountWithCurrency, _p19._0, _p19._1),
							_1: {ctor: '[]'}
						});
					var icon = A2(
						_elm_lang$html$Html$i,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('fa fa-black-tie'),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'});
					return {
						english: {
							ctor: '::',
							_0: icon,
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text('Your current Online Agent bid is '),
								_1: {
									ctor: '::',
									_0: amountHtml,
									_1: {ctor: '[]'}
								}
							}
						},
						dutch: {
							ctor: '::',
							_0: icon,
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text('Uw huidige auto-bod is '),
								_1: {
									ctor: '::',
									_0: amountHtml,
									_1: {ctor: '[]'}
								}
							}
						},
						german: {
							ctor: '::',
							_0: icon,
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text('Ihr aktuelles Auto Gebot beträgt'),
								_1: {
									ctor: '::',
									_0: amountHtml,
									_1: {ctor: '[]'}
								}
							}
						},
						hebrew: {
							ctor: '::',
							_0: icon,
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text('הצעת הסוכן החכם שלך היא'),
								_1: {
									ctor: '::',
									_0: amountHtml,
									_1: {ctor: '[]'}
								}
							}
						},
						russian: {
							ctor: '::',
							_0: icon,
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text('Ваш текущий ставка агента онлайн составляет '),
								_1: {
									ctor: '::',
									_0: amountHtml,
									_1: {ctor: '[]'}
								}
							}
						},
						french: {
							ctor: '::',
							_0: icon,
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text('Votre enchère actuelle de l\'agent en ligne est '),
								_1: {
									ctor: '::',
									_0: amountHtml,
									_1: {ctor: '[]'}
								}
							}
						},
						chinese: {
							ctor: '::',
							_0: icon,
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text('您当前的在线代理出价是 '),
								_1: {
									ctor: '::',
									_0: amountHtml,
									_1: {ctor: '[]'}
								}
							}
						}
					};
				default:
					var amountHtml = A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('med'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(_gizra$backoffice$Amount$showAmountWithCurrency, _p19._0, _p19._1),
							_1: {ctor: '[]'}
						});
					return {
						english: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Your current bid is '),
							_1: {
								ctor: '::',
								_0: amountHtml,
								_1: {ctor: '[]'}
							}
						},
						dutch: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Uw huidige bod is '),
							_1: {
								ctor: '::',
								_0: amountHtml,
								_1: {ctor: '[]'}
							}
						},
						german: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Ihr aktuelles Gebot beträgt'),
							_1: {
								ctor: '::',
								_0: amountHtml,
								_1: {ctor: '[]'}
							}
						},
						hebrew: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('ההצעה הנוכחית שלך היא '),
							_1: {
								ctor: '::',
								_0: amountHtml,
								_1: {ctor: '[]'}
							}
						},
						russian: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Ваша текущая ставка составляет '),
							_1: {
								ctor: '::',
								_0: amountHtml,
								_1: {ctor: '[]'}
							}
						},
						french: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('Votre enchère actuelle est '),
							_1: {
								ctor: '::',
								_0: amountHtml,
								_1: {ctor: '[]'}
							}
						},
						chinese: {
							ctor: '::',
							_0: _elm_lang$html$Html$text('您当前的出价是 '),
							_1: {
								ctor: '::',
								_0: amountHtml,
								_1: {ctor: '[]'}
							}
						}
					};
			}
		}();
		return A2(
			_elm_lang$core$List$map,
			_elm_lang$html$Html$map(_elm_lang$core$Basics$never),
			function () {
				var _p25 = language;
				switch (_p25.ctor) {
					case 'English':
						return function (_) {
							return _.english;
						}(translationSet);
					case 'Chinese':
						return function (_) {
							return _.chinese;
						}(translationSet);
					case 'Dutch':
						return function (_) {
							return _.dutch;
						}(translationSet);
					case 'German':
						return function (_) {
							return _.german;
						}(translationSet);
					case 'Hebrew':
						return function (_) {
							return _.hebrew;
						}(translationSet);
					case 'Russian':
						return function (_) {
							return _.russian;
						}(translationSet);
					default:
						return function (_) {
							return _.french;
						}(translationSet);
				}
			}());
	});
var _gizra$backoffice$Translate$translateForgotPassword = function (transId) {
	var _p26 = transId;
	switch (_p26.ctor) {
		case 'ForgotMyPassword':
			return {english: 'Forgot my password', dutch: 'Wachtwoord vergeten', german: 'Passwort vergessen', hebrew: 'שכחתי את הסיסמא', russian: 'Забыл пароль', french: 'J\'ai oublié mon mot de passe', chinese: '忘记密码'};
		case 'RedirectingToMyAccountPageMessage':
			return {english: 'Redirecting to your account page to reset your password', dutch: 'Omleiden naar uw accountpagina om uw wachtwoord opnieuw in te stellen', german: 'Weiterleitung zur Ihrer Konto-Seite um Ihr Passwort zurückzusetzen', hebrew: 'מפנים אותכם לעמוד החשבון שלי ', russian: 'Перенаправление на страницу вашего аккаунта для сброса пароля', french: 'Redirection vers votre page de compte pour réinitialiser votre mot de passe', chinese: '正在重定向到您的账户页面以重置密码'};
		case 'ResetPassword':
			return {english: 'Reset password', dutch: 'Reset wachtwoord', german: 'Passwort zurücksetzten', hebrew: 'שלח את הסיסמא שלי', russian: 'Сбросить пароль', french: 'Réinitialiser le mot de passe', chinese: '重置密码'};
		default:
			return {english: 'A password reset email will be sent to you.', dutch: 'Een e-mail voor het opnieuw instellen van uw wachtwoord wordt naar u verzonden.', german: 'Ein Passwort zurücksetzen Email wird Ihnen zugesandt.', hebrew: 'אימייל לאיפוס סיסמא ישלח אליך.', russian: 'Вам будет отправлено письмо для сброса пароля.', french: 'Un e-mail de réinitialisation du mot de passe vous sera envoyé.', chinese: '密码重置邮件将发送给您。'};
	}
};
var _gizra$backoffice$Translate$translateBiddingInfo = function (transId) {
	var _p27 = transId;
	switch (_p27.ctor) {
		case 'Actions':
			return {english: 'Actions', dutch: 'Acties', german: 'Aktionen', hebrew: 'פעולות', russian: 'Действия', french: 'Actions', chinese: '操作'};
		case 'Agent':
			return {english: 'Agent', dutch: 'Commissionair', german: 'Kommissionär', hebrew: 'סוכן', russian: 'Агент', french: 'Agent', chinese: '代理'};
		case 'AmountRestrictionLabel':
			var _p28 = _p27._0;
			switch (_p28.ctor) {
				case 'None':
					return {english: 'None', dutch: 'Geen', german: 'Keiner', hebrew: 'ללא', russian: 'Нет', french: 'Aucun', chinese: '无'};
				case 'Regular':
					return {english: 'Regular', dutch: 'Normaal', german: 'Normal', hebrew: 'רגיל', russian: 'Обычный', french: 'Régulier', chinese: '常规'};
				default:
					return {english: 'Unlimited', dutch: 'Onbegrensd', german: 'Unbegrenzt', hebrew: 'ללא הגבלה', russian: 'Без ограничений', french: 'Illimité', chinese: '无限'};
			}
		case 'BidderId':
			return {english: 'Bidder #', dutch: 'Bieder #', german: 'Bieter #', hebrew: 'מציע #', russian: 'Участник #', french: 'Enchérisseur #', chinese: '竞标者 #'};
		case 'BidderNumbers':
			return {english: 'Bidder Numbers', dutch: 'Biednummers', german: 'Bieternummern', hebrew: 'מספר מציע', russian: 'Номера участников', french: 'Numéros des enchérisseurs', chinese: '竞标者编号'};
		case 'BidderLimit':
			var _p29 = _p27._0;
			switch (_p29.ctor) {
				case 'Mail':
					var _p30 = _p29._0;
					return {
						english: A2(
							_elm_lang$core$Basics_ops['++'],
							'Maximum bid for my Written bids (#',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(_p30),
								')')),
						dutch: A2(
							_elm_lang$core$Basics_ops['++'],
							'Maximumbedrag voor mijn schriftelijke biedingen (#',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(_p30),
								')')),
						german: A2(
							_elm_lang$core$Basics_ops['++'],
							'Mein Maximalgebot für schriftliche Aufträge (#',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(_p30),
								')')),
						hebrew: A2(
							_elm_lang$core$Basics_ops['++'],
							'מקסימום עבור הצעות מראש (#',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(_p30),
								')')),
						russian: A2(
							_elm_lang$core$Basics_ops['++'],
							'Максимальная ставка для моих письменных ставок (#',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(_p30),
								')')),
						french: A2(
							_elm_lang$core$Basics_ops['++'],
							'Offre maximale pour mes offres écrites (#',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(_p30),
								')')),
						chinese: A2(
							_elm_lang$core$Basics_ops['++'],
							'我书面出价的最高出价 (#',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(_p30),
								')'))
					};
				case 'Website':
					var _p31 = _p29._0;
					return {
						english: A2(
							_elm_lang$core$Basics_ops['++'],
							'Maximum bid for my Online Live bids (#',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(_p31),
								')')),
						dutch: A2(
							_elm_lang$core$Basics_ops['++'],
							'Mijn maximumbedrag voor Online Live Bieden (#',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(_p31),
								')')),
						german: A2(
							_elm_lang$core$Basics_ops['++'],
							'Mein Maximalgebot für Online Livebieten (#',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(_p31),
								')')),
						hebrew: A2(
							_elm_lang$core$Basics_ops['++'],
							'מקסימום עבור הצעות חיות (#',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(_p31),
								')')),
						russian: A2(
							_elm_lang$core$Basics_ops['++'],
							'Максимальная ставка для моих онлайн-ставок в реальном времени (#',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(_p31),
								')')),
						french: A2(
							_elm_lang$core$Basics_ops['++'],
							'Offre maximale pour mes enchères en ligne en direct (#',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(_p31),
								')')),
						chinese: A2(
							_elm_lang$core$Basics_ops['++'],
							'我在线实时竞标的最高出价 (#',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(_p31),
								')'))
					};
				default:
					return {english: 'My maximum bid', dutch: 'Mijn maximumbedrag', german: 'Mein Maximalgebot', hebrew: 'הגבלה עצמית', russian: 'Мой максимальный бид', french: 'Mon offre maximale', chinese: '我的最高出价'};
			}
		case 'BidderLimitNotSet':
			return {english: 'Not set (unlimited)', dutch: 'Niet ingesteld (onbegrensd)', german: 'nicht gesetzt (unbegrenzt)', hebrew: 'לא נקבע (ללא הגבלה)', russian: 'Не установлено (без ограничений)', french: 'Non défini (illimité)', chinese: '未设置（无限）'};
		case 'BidderNumberType':
			var _p32 = _p27._0;
			switch (_p32.ctor) {
				case 'External':
					return {english: 'External', dutch: 'Extern', german: 'Extern', hebrew: 'חיצוני', russian: 'Внешний', french: 'Externe', chinese: '外部'};
				case 'Floor':
					return {english: 'Floor', dutch: 'Zaal', german: 'Saal', hebrew: 'חדר', russian: 'Зал', french: 'Salle', chinese: '现场'};
				case 'FloorByAgent':
					return {english: 'Floor by Agent', dutch: 'Zaal door commissionair', german: 'Saal durch Kommissionär', hebrew: 'חדר על ידי סוכן', russian: 'Зал по агенту', french: 'Salle par agent', chinese: '代理操作'};
				case 'Mail':
					return {english: 'Mail', dutch: 'Schriftelijk', german: 'Schriftlich', hebrew: 'בכתב', russian: 'Почта', french: 'Courrier', chinese: '邮件'};
				case 'Phone':
					return {english: 'Phone', dutch: 'Telefoon', german: 'Telefon', hebrew: 'טלפון', russian: 'Телефон', french: 'Téléphone', chinese: '电话'};
				default:
					return {english: 'Website', dutch: 'Website', german: 'Webseite', hebrew: 'אתר', russian: 'Вебсайт', french: 'Site web', chinese: '网站'};
			}
		case 'Credit_':
			return {english: 'Credit', dutch: 'Krediet', german: 'Kredit', hebrew: 'אשראי', russian: 'Кредит', french: 'Crédit', chinese: '信用'};
		case 'LiveCreditDescription':
			return {english: 'Determines the credit for Internet bids. This applies only to online bidders.', dutch: 'Bepaalt het krediet voor internetbiedingen. Dit geldt alleen voor online bieders.', german: 'Legt den Kreditrahmen für Internetgebote fest. Dies gilt nur für Online-Bieter.', hebrew: 'קובע את האשראי להצעות חיות. משפיע רק על מציעים באתר', russian: 'Определяет кредит для интернет-ставок. Это применяется только к онлайн-участникам торгов.', french: 'Détermine le crédit pour les enchères sur Internet. Cela ne s\'applique qu\'aux enchérisseurs en ligne.', chinese: '确定互联网出价的信用额度。这仅适用于在线竞标者。'};
		case 'MailCreditDescription':
			return {english: 'Determines the credit for auto bids. If a Bidder with € 100 credit has a mail bid on an Item with opening price of € 200 they can\'t win. Note that they are allowed however to place a Mail bid of € 400, they just cannot win it.', dutch: 'Bepaalt het krediet voor auto-biedingen. Als een bieder met € 100 krediet een bod wilt doen op een item met een inzet van € 200, dan kan hij deze nooit winnen. Hij kan desondanks wel ieder gewenst bod afgeven.', german: 'Legt den Kreditrahmen für Auto-Gebote fest. Wenn ein Bieter mit einem Limit von 100 € für Auto-Bids auf ein Los mit einem Startpreis von 200 € bietet, kann er dieses nicht bekommen. Bitte beachten Sie, dass er jedoch ein Gebot in beliebiger Höhe abgeben kann.', hebrew: 'קובע את ההגבלה להצעות אוטואטיות', russian: 'Определяет кредит для автоматических ставок. Если участник с кредитом в 100 евро делает почтовую ставку на лот с начальной ценой 200 евро, он не может выиграть. Обратите внимание, что он может сделать почтовую ставку в 400 евро, но не может выиграть.', french: 'Détermine le crédit pour les offres automatiques. Si un enchérisseur avec un crédit de 100 € fait une offre par courrier sur un article avec un prix de départ de 200 €, il ne peut pas gagner. Notez qu\'ils sont autorisés à placer une offre de 400 € par courrier, mais ils ne peuvent tout simplement pas la remporter.', chinese: '确定自动出价的信用额度。如果一个信用额度为 €100 的竞标者对开价为 €200 的物品进行邮件出价，则他们无法赢得。请注意，他们可以发出 €400 的邮件出价，但是他们不能赢得它。'};
		case 'MaxBid':
			return {english: 'Bidder limit', dutch: 'Biedlimiet', german: 'Bieterlimit', hebrew: 'הגבלה אישית', russian: 'Лимит участника', french: 'Limite de l\'enchérisseur', chinese: '竞标者限制'};
		case 'MaxBidDescription':
			return {english: 'An online bidder limit. Note that the bidder may also change their limit through their My Account page.', dutch: 'Een online biedlimiet. Houd er rekening mee dat de bieder zijn limiet ook kan wijzigen via de pagina Mijn account.', german: 'Limit des Online-Bieters. Bitte beachten Sie, dass der Bieter sein Limit auf seiner Konto-Seite ändern kann.', hebrew: 'הגבלה עצמית של המציע, שים לב שהמשתמש יכול לשנות מספר זה דרך דף האשראי שלו באתר', russian: 'Онлайн-лимит участника аукциона. Обратите внимание, что участник также может изменить свой лимит на странице своего аккаунта.', french: 'Une limite de soumission en ligne. Notez que l\'enchérisseur peut également changer sa limite via sa page Mon compte.', chinese: '在线竞标人限制。请注意，竞标者也可以通过他们的“我的账户”页面更改他们的限制。'};
		case 'Unlimited':
			return {english: 'Unlimited', dutch: 'Onbegrensd', german: 'unlimitiert', hebrew: 'ללא הגבלה', russian: 'Без ограничений', french: 'Illimité', chinese: '无限的'};
		case 'Amount':
			return {english: 'Amount', dutch: 'Bedrag', german: 'Betrag', hebrew: 'סכום', russian: 'Сумма', french: 'Montant', chinese: '数量'};
		case 'AuthoredBy':
			return {english: 'Authored by', dutch: 'Geschreven door', german: 'Genehmigt durch', hebrew: 'נערך על ידי', russian: 'Автор', french: 'Rédigé par', chinese: '由...批准'};
		case 'BidCreated':
			var _p33 = _p27._0;
			var value = A2(_gizra$backoffice$Amount$showAmountWithCurrencyAsString, _p27._1._0, _p27._1._1);
			return {
				english: A2(
					_elm_lang$core$Basics_ops['++'],
					'Bid for lot ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p33,
						A2(
							_elm_lang$core$Basics_ops['++'],
							' with amount ',
							A2(_elm_lang$core$Basics_ops['++'], value, ' was saved.')))),
				dutch: A2(
					_elm_lang$core$Basics_ops['++'],
					'Bod op kavel ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p33,
						A2(
							_elm_lang$core$Basics_ops['++'],
							' met bedrag ',
							A2(_elm_lang$core$Basics_ops['++'], value, ' is opgeslagen.')))),
				german: A2(
					_elm_lang$core$Basics_ops['++'],
					'Gebot für Los ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p33,
						A2(
							_elm_lang$core$Basics_ops['++'],
							' mit Betrag ',
							A2(_elm_lang$core$Basics_ops['++'], value, ' wurde gespeichert.')))),
				hebrew: A2(
					_elm_lang$core$Basics_ops['++'],
					'הצעה על פריט ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p33,
						A2(
							_elm_lang$core$Basics_ops['++'],
							' בסכום ',
							A2(_elm_lang$core$Basics_ops['++'], value, ' נשמרה.')))),
				russian: A2(
					_elm_lang$core$Basics_ops['++'],
					'Ставка на лот ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p33,
						A2(
							_elm_lang$core$Basics_ops['++'],
							' с суммой ',
							A2(_elm_lang$core$Basics_ops['++'], value, ' была сохранена.')))),
				french: A2(
					_elm_lang$core$Basics_ops['++'],
					'L\'offre pour le lot ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p33,
						A2(
							_elm_lang$core$Basics_ops['++'],
							' d\'un montant de ',
							A2(_elm_lang$core$Basics_ops['++'], value, ' a été enregistrée.')))),
				chinese: A2(
					_elm_lang$core$Basics_ops['++'],
					'对批次 ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p33,
						A2(
							_elm_lang$core$Basics_ops['++'],
							' 的金额 ',
							A2(_elm_lang$core$Basics_ops['++'], value, ' 的出价已保存。'))))
			};
		case 'BidderNumber':
			return {english: 'Bidder number', dutch: 'Biednummer', german: 'Bieternummer', hebrew: 'מספר מציע', russian: 'Номер участника', french: 'Numéro de l\'enchérisseur', chinese: '竞标者号码'};
		case 'Collapse':
			return {english: 'Collapse', dutch: 'Inklappen', german: 'Zusammenklappen', hebrew: 'סגור', russian: 'Свернуть', french: 'Réduire', chinese: '崩溃'};
		case 'Created':
			return {english: 'Created', dutch: 'Gemaakt', german: 'Erzeugt', hebrew: 'צור', russian: 'Создано', french: 'Créé', chinese: '已创建'};
		case 'CurrentPrice':
			var value = A3(
				_elm_community$maybe_extra$Maybe_Extra$unwrap,
				'',
				function (amount) {
					return A2(_gizra$backoffice$Amount$showAmountWithCurrencyAsString, amount, _p27._0._1);
				},
				_p27._0._0);
			return {
				english: A2(_elm_lang$core$Basics_ops['++'], 'Current price: ', value),
				dutch: A2(_elm_lang$core$Basics_ops['++'], 'Huidige prijs: ', value),
				german: A2(_elm_lang$core$Basics_ops['++'], 'aktueller Preis: ', value),
				hebrew: A2(_elm_lang$core$Basics_ops['++'], 'מחיר נוכחי: ', value),
				russian: A2(_elm_lang$core$Basics_ops['++'], 'Текущая цена: ', value),
				french: A2(_elm_lang$core$Basics_ops['++'], 'Prix actuel: ', value),
				chinese: A2(_elm_lang$core$Basics_ops['++'], '当前价格：', value)
			};
		case 'Expand':
			return {english: 'Expand', dutch: 'Uitbreiden', german: 'Erweitern', hebrew: 'פתח', russian: 'Развернуть', french: 'Étendre', chinese: '扩大'};
		case 'Extension':
			return {english: 'Extension', dutch: 'onder voorbehoud', german: 'unter Vorbehalt', hebrew: 'תחת תנאי', russian: 'Расширение', french: 'Extension', chinese: '延期'};
		case 'ItemStatus':
			var _p34 = _p27._0;
			if (_p34.ctor === 'EditableStatus') {
				var _p35 = _p34._0;
				if (_p35.ctor === 'LiveOnly') {
					return {english: 'Open (Live only)', dutch: 'Open (alleen live)', german: 'aktiv (nur Live)', hebrew: 'פתוח) חי בלבד)', russian: 'Открыто (только вживую)', french: 'Ouvert (seulement en direct)', chinese: '开放（仅限现场）'};
				} else {
					return {english: 'Open (Mail only)', dutch: 'Open (alleen schriftelijk)', german: 'aktiv (nur schriftlich)', hebrew: 'פתוח) הצעות מראש בלבד)', russian: 'Открыто (только по почте)', french: 'Ouvert (courrier uniquement)', chinese: '开放（仅限邮件）'};
				}
			} else {
				var _p36 = _p34._0;
				switch (_p36.ctor) {
					case 'ItemClosed':
						var _p37 = _p36._0;
						if (_p37.ctor === 'Sold') {
							return {english: 'Sold', dutch: 'Verkocht', german: 'Verkauft', hebrew: 'נמכר', russian: 'Продано', french: 'Vendu', chinese: '已售出'};
						} else {
							return {english: 'Unsold', dutch: 'onverkocht', german: 'nicht Verkauft', hebrew: 'לא נמכר', russian: 'Не продано', french: 'Non vendu', chinese: '未售出'};
						}
					case 'SaleNotStarted':
						return {english: 'Sale not started', dutch: 'Veiling niet gestart', german: 'Auktion noch nicht gestartet', hebrew: 'המכירה טרם החלה', russian: 'Продажа еще не началась', french: 'Vente non commencée', chinese: '销售尚未开始'};
					case 'SaleClosed':
						return {english: 'Sale closed', dutch: 'Veiling gesloten', german: 'Auktion geschlossen', hebrew: 'המכירה סגורה', russian: 'Продажа завершена', french: 'Vente terminée', chinese: '销售已结束'};
					case 'Withdrawn':
						return {english: 'Withdrawn', dutch: 'Teruggetrokken', german: 'zurückgezogen', hebrew: 'נמשך מהמכירה', russian: 'Отозвано', french: 'Retiré', chinese: '已撤回'};
					default:
						return {english: 'Item not active but already has live bids', dutch: 'kavel niet actief maar heeft al live biedingen', german: 'Artikel ist nicht aktiv, hat aber Gebote', hebrew: 'הפריט לא אקטיבי אבל יש לו כבר הצעוצ חיות', russian: 'Товар неактивен, но уже есть ставки в реальном времени', french: 'Article non actif mais a déjà des enchères en direct', chinese: '物品未激活，但已经有现场出价'};
				}
			}
		case 'GroupName':
			return {english: 'Group name', dutch: 'Groepsnaam', german: 'Gruppenname', hebrew: 'שם הקבוצה', russian: 'Название группы', french: 'Nom du groupe', chinese: '组名'};
		case 'Lot':
			var _p39 = _p27._1;
			var _p38 = _p27._0;
			return {
				english: A2(
					_elm_lang$core$Basics_ops['++'],
					'Lot: ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p38,
						A2(_elm_lang$core$Basics_ops['++'], ' - ', _p39))),
				dutch: A2(
					_elm_lang$core$Basics_ops['++'],
					'kavel: ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p38,
						A2(_elm_lang$core$Basics_ops['++'], ' - ', _p39))),
				german: A2(
					_elm_lang$core$Basics_ops['++'],
					'Los: ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p38,
						A2(_elm_lang$core$Basics_ops['++'], ' - ', _p39))),
				hebrew: A2(
					_elm_lang$core$Basics_ops['++'],
					'פריט: ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p38,
						A2(_elm_lang$core$Basics_ops['++'], ' - ', _p39))),
				russian: A2(
					_elm_lang$core$Basics_ops['++'],
					'Лот: ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p38,
						A2(_elm_lang$core$Basics_ops['++'], ' - ', _p39))),
				french: A2(
					_elm_lang$core$Basics_ops['++'],
					'Lot: ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p38,
						A2(_elm_lang$core$Basics_ops['++'], ' - ', _p39))),
				chinese: A2(
					_elm_lang$core$Basics_ops['++'],
					'批号: ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p38,
						A2(_elm_lang$core$Basics_ops['++'], ' - ', _p39)))
			};
		case 'NoGroupName':
			return {english: 'No group', dutch: 'Geen groep', german: 'keine Gruppe', hebrew: 'ללא קבוצה', russian: 'Нет группы', french: 'Pas de groupe', chinese: '无分组'};
		case 'OpeningPrice':
			var value = A2(_gizra$backoffice$Amount$showAmountWithCurrencyAsString, _p27._0._0, _p27._0._1);
			return {
				english: A2(_elm_lang$core$Basics_ops['++'], 'Opening price: ', value),
				dutch: A2(_elm_lang$core$Basics_ops['++'], 'Inzet: ', value),
				german: A2(_elm_lang$core$Basics_ops['++'], 'Startpreis: ', value),
				hebrew: A2(_elm_lang$core$Basics_ops['++'], 'מחיר פתיחה: ', value),
				russian: A2(_elm_lang$core$Basics_ops['++'], 'Начальная цена: ', value),
				french: A2(_elm_lang$core$Basics_ops['++'], 'Prix d\'ouverture: ', value),
				chinese: A2(_elm_lang$core$Basics_ops['++'], '开盘价: ', value)
			};
		case 'OpeningPriceDescription':
			return {english: 'Make sure to save the opening price, before re-knock down.', dutch: 'Zorg ervoor dat je de startprijs opslaat voordat je het kavel opnieuw afslaat.', german: 'Achten Sie darauf, den Startpreis zu speichern, bevor Sie erneut zuschlagen.', hebrew: 'שים לב לשמור את מחיר הפתיחה לפני שסוגרים פריט מחדש', russian: 'Убедитесь, что сохранили начальную цену перед повторным нокдауном.', french: 'Assurez-vous d\'enregistrer le prix d\'ouverture avant de réduire à nouveau.', chinese: '在重新击倒之前，请确保保存开盘价。'};
		case 'OpeningPriceLabel':
			return {english: 'Opening price', dutch: 'Inzet', german: 'Startpreis', hebrew: 'מחיר פתיחה', russian: 'Начальная цена', french: 'Prix d\'ouverture', chinese: '开盘价'};
		case 'ReKnockDown':
			return {english: 'Re-knock down', dutch: 'Opnieuw afslaan', german: 'erneut zuschlagen', hebrew: 'סגור פריט מחדש', russian: 'Повторно опустить', french: 'Réduire à nouveau', chinese: '重新击倒'};
		case 'ReKnockDownDescription':
			return {english: 'By re-knocking down, the Bid server will re-calculate the winning Bid. If a winning bid is found, status will be set to Sold, otherwise to Unsold. Note that the highest bid should be equal or above the Opening price.', dutch: 'Door het kavel opnieuw af te slaan, berekent de biedserver het winnende bod opnieuw. Als een winnend bod wordt gevonden, wordt de status ingesteld op Verkocht, anders op Onverkocht. Merk op dat het hoogste bod gelijk aan of hoger moet zijn dan de openingsprijs.', german: 'Durch erneutes Zuschlagen kalkuliert der Bidserver das höchste Gebot. Wenn ein zutreffendes Gebot gefunden wird, wird der Status auf \'verkauft gesetzt, sonst auf \'unverkauft\'. Bitte beachten Sie, dass das höchste Gebot höher oder gleich dem Startpreis sein sollte.', hebrew: 'בכך שסוגרים פריט מחדש השרת יחשב את הזוכה מחדש. אם יש הצעה זוכה הפריט יסגר כמכור אחרת יסגר כלא מכור. שים לב שמחיר הפתיחה חייב להיות שווה או מתחת להצעה העליונה כדי שפריט יסגר כמכור.', russian: 'Повторное снижение цены приведет к пересчету сервером Bid выигрышной ставки. Если выигрышная ставка найдена, статус будет установлен как \'Продано\', в противном случае - как \'Не продано\'. Обратите внимание, что наивысшая ставка должна быть равна или выше начальной цены.', french: 'En réduisant à nouveau, le serveur Bid recalcule l\'offre gagnante. Si une offre gagnante est trouvée, le statut sera fixé à Vendu, sinon à Non vendu. Notez que l\'offre la plus élevée doit être égale ou supérieure au prix d\'ouverture.', chinese: '通过重新击倒，Bid服务器将重新计算获胜的出价。如果找到获胜的出价，状态将设置为已售，否则为未售。请注意，最高出价应等于或高于开盘价。'};
		case 'SoldPrice':
			var value = A3(
				_elm_community$maybe_extra$Maybe_Extra$unwrap,
				'',
				function (amount) {
					return A2(_gizra$backoffice$Amount$showAmountWithCurrencyAsString, amount, _p27._0._1);
				},
				_p27._0._0);
			return {
				english: A2(_elm_lang$core$Basics_ops['++'], 'Sold price: ', value),
				dutch: A2(_elm_lang$core$Basics_ops['++'], 'Hamerprijs: ', value),
				german: A2(_elm_lang$core$Basics_ops['++'], 'Zuschlagspreis: ', value),
				hebrew: A2(_elm_lang$core$Basics_ops['++'], 'נמכר ב: ', value),
				russian: A2(_elm_lang$core$Basics_ops['++'], 'Цена продажи: ', value),
				french: A2(_elm_lang$core$Basics_ops['++'], 'Prix de vente: ', value),
				chinese: A2(_elm_lang$core$Basics_ops['++'], '售价: ', value)
			};
		case 'StartingPrice':
			var value = A2(_gizra$backoffice$Amount$showAmountWithCurrencyAsString, _p27._0._0, _p27._0._1);
			return {
				english: A2(_elm_lang$core$Basics_ops['++'], 'Starting price: ', value),
				dutch: A2(_elm_lang$core$Basics_ops['++'], 'Inzet: ', value),
				german: A2(_elm_lang$core$Basics_ops['++'], 'Startpreis: ', value),
				hebrew: A2(_elm_lang$core$Basics_ops['++'], 'מחיר התחלתי: ', value),
				russian: A2(_elm_lang$core$Basics_ops['++'], 'Стартовая цена: ', value),
				french: A2(_elm_lang$core$Basics_ops['++'], 'Prix de départ: ', value),
				chinese: A2(_elm_lang$core$Basics_ops['++'], '起始价: ', value)
			};
		case 'Status':
			return {english: 'Status', dutch: 'Status', german: 'Status', hebrew: 'סטאטוס', russian: 'Статус', french: 'Statut', chinese: '状态'};
		case 'Type':
			return {english: 'Type', dutch: 'Type', german: 'Type', hebrew: 'סוג', russian: 'Тип', french: 'Type', chinese: '类型'};
		case 'CallRequests':
			return {english: 'Call requests', dutch: 'Telefoon verzoeken', german: 'Anruf Bitte', hebrew: 'מבקשי שיחה', russian: 'Запросы на звонок', french: 'Demandes d\'appel', chinese: '呼叫请求'};
		case 'LotsRange':
			return {english: 'Lots range', dutch: 'Kavel bereik', german: 'Losbereich', hebrew: 'טווח פריטים', russian: 'Диапазон лотов', french: 'Gamme de lots', chinese: '批次范围'};
		case 'ForgotPassword_':
			return {english: 'Reset password', dutch: 'Reset wachtwoord', german: 'Passwort zurücksetzen', hebrew: 'שחזר סיסמה', russian: 'Сбросить пароль', french: 'Réinitialiser le mot de passe', chinese: '重置密码'};
		case 'ForgotPasswordDescription':
			return {english: 'Click \"Send\" in order for a Mail to be sent to the Client. The email used is the one they have registered under on the Bid server.', dutch: 'Klik op \"Verzenden\" om een e-mail naar de klant te sturen. Het gebruikte e-mailadres is het adres dat ze hebben geregistreerd op de biedserver.', german: 'Klicken Sie \"Senden\" um eine eMail an den Kunden zu senden. Es wird die eMail, mit welcher sich der Nutzer auf dem BidServer registriert hat, verwendet.', hebrew: 'לחץ על שלח כדי לשלוח אימייל ללקוח.', russian: 'Нажмите \"Отправить\", чтобы отправить письмо клиенту. Используется адрес электронной почты, указанный при регистрации на сервере ставок.', french: 'Cliquez sur \"Envoyer\" pour qu\'un mail soit envoyé au client. L\'e-mail utilisé est celui qu\'ils ont enregistré sur le serveur d\'enchères.', chinese: '点击“发送”以便将邮件发送给客户。使用的电子邮件是他们在出价服务器上注册的电子邮件。'};
		default:
			return {english: 'Reset password email sent.', dutch: 'Reset wachtwoord e-mail verzonden', german: 'Zurücksetzen-Mail versendet', hebrew: 'אימייל שחזור סיסמה נשלח', russian: 'Письмо для сброса пароля отправлено.', french: 'Email de réinitialisation du mot de passe envoyé.', chinese: '密码重置邮件已发送。'};
	}
};
var _gizra$backoffice$Translate$translateBid = function (transId) {
	var _p40 = transId;
	switch (_p40.ctor) {
		case 'AgentBid':
			return {english: 'Agent', dutch: 'Commissionair', german: 'Kommissionär', hebrew: 'סוכן', russian: 'Агент', french: 'Agent', chinese: '代理'};
		case 'AutoAgent':
			return {english: 'Auto Agent', dutch: 'Auto Bieder', german: 'Bietagent', hebrew: 'סוכן חכם', russian: 'Авто агент', french: 'Agent automatique', chinese: '自动代理'};
		case 'AutoBid':
			return {english: 'Auto Bid', dutch: 'Autobieden', german: 'automatisches Gebot', hebrew: 'ביד אוטומאטי', russian: 'Автоматическая ставка', french: 'Enchère automatique', chinese: '自动出价'};
		case 'FloorBid':
			return {english: 'Floor', dutch: 'Zaal', german: 'Saal', hebrew: 'חדר', russian: 'Зал', french: 'Salle', chinese: '现场'};
		case 'InternetBid':
			return {english: 'Internet', dutch: 'Internet', german: 'Internet', hebrew: 'אינטרנט', russian: 'Интернет', french: 'Internet', chinese: '互联网'};
		case 'MailBid':
			return {english: 'Mail', dutch: 'Schriftelijk', german: 'Schriftlich', hebrew: 'הצעה מראש', russian: 'Почта', french: 'Courrier', chinese: '邮件'};
		case 'PostSaleBid':
			return {english: 'Post Sale', dutch: 'Naverkoop', german: 'Nachverkauf', hebrew: 'לאחר מכירה', russian: 'После продажи', french: 'Après-vente', chinese: '售后'};
		case 'Accepted':
			return {english: 'Accepted', dutch: 'Geaccepteerd', german: 'Akzeptiert', hebrew: 'התקבל', russian: 'Принято', french: 'Accepté', chinese: '已接受'};
		case 'AcceptedDuplicatedAmount':
			return {english: 'Duplicated Mail bid', dutch: 'Dubbel schriftelijk bod', german: 'doppeltes Gebot (schriftlich)', hebrew: 'הצעה מראש כפולה', russian: 'Дублированное письменное предложение', french: 'Offre dupliquée par courrier', chinese: '重复的邮件出价'};
		case 'AcceptedDuplicatedAmountOwnMessage':
			var amountWithCurrency = A2(_gizra$backoffice$Amount$showAmountWithCurrencyAsString, _p40._0, _p40._1);
			return {
				english: A2(
					_elm_lang$core$Basics_ops['++'],
					'Duplicated bid of ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' has been accepted')),
				dutch: A2(
					_elm_lang$core$Basics_ops['++'],
					'Dubbele bod van ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' is geaccepteerd')),
				german: A2(
					_elm_lang$core$Basics_ops['++'],
					'Doppeltes Gebot von ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' wurde akzeptiert')),
				hebrew: A2(
					_elm_lang$core$Basics_ops['++'],
					'הצעתך בסך ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' התקבלה')),
				russian: A2(
					_elm_lang$core$Basics_ops['++'],
					'Дублированное предложение на сумму ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' было принято')),
				french: A2(
					_elm_lang$core$Basics_ops['++'],
					'L\'offre dupliquée de ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' a été acceptée')),
				chinese: A2(
					_elm_lang$core$Basics_ops['++'],
					'重复的 ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' 出价已被接受'))
			};
		case 'AcceptedOwnMessage':
			var amountWithCurrency = A2(_gizra$backoffice$Amount$showAmountWithCurrencyAsString, _p40._0, _p40._1);
			return {
				english: A2(
					_elm_lang$core$Basics_ops['++'],
					'Your bid of ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' has been accepted')),
				dutch: A2(
					_elm_lang$core$Basics_ops['++'],
					'Uw bod van ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' is geaccepteerd')),
				german: A2(
					_elm_lang$core$Basics_ops['++'],
					'Ihr Gebot von ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' wurde akzeptiert')),
				hebrew: A2(
					_elm_lang$core$Basics_ops['++'],
					'הצעתך בסך ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' התקבלה')),
				russian: A2(
					_elm_lang$core$Basics_ops['++'],
					'Ваше предложение на сумму ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' было принято')),
				french: A2(
					_elm_lang$core$Basics_ops['++'],
					'Votre offre de ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' a été acceptée')),
				chinese: A2(
					_elm_lang$core$Basics_ops['++'],
					'您的 ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' 出价已被接受'))
			};
		case 'Rejected':
			return {english: 'Rejected', dutch: 'Afgewezen', german: 'abgelehnt', hebrew: 'נדחה', russian: 'Отклонено', french: 'Rejeté', chinese: '被拒绝'};
		case 'RejectedBidderMax':
			return {english: 'Maxed out (bidder)', dutch: 'Limiet bereikt (bieder)', german: 'Limit erreicht (Max. Bieter)', hebrew: 'מעבר לאשראי (מציע)', russian: 'Достигнут лимит (заявитель)', french: 'Limite atteinte (enchérisseur)', chinese: '达到上限 (投标人)'};
		case 'RejectedBidderMaxMessage':
			var amountWithCurrency = A2(_gizra$backoffice$Amount$showAmountWithCurrencyAsString, _p40._0, _p40._1);
			return {
				english: A2(
					_elm_lang$core$Basics_ops['++'],
					'Your bid of amount ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' was rejected for exceeding your limit')),
				dutch: A2(
					_elm_lang$core$Basics_ops['++'],
					'Uw bod van ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' is afgewezen wegens overschrijding van uw limiet')),
				german: A2(
					_elm_lang$core$Basics_ops['++'],
					'Ihr Gebot von ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' wurde wegen Überschreitung Ihres Limits abgelehnt')),
				hebrew: A2(
					_elm_lang$core$Basics_ops['++'],
					'הצעתך בסך ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' נדחתה בשל חריגה מהגבול שקבעת לך')),
				russian: A2(
					_elm_lang$core$Basics_ops['++'],
					'Ваша ставка в размере ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' была отклонена из-за превышения установленного вами лимита')),
				french: A2(
					_elm_lang$core$Basics_ops['++'],
					'Votre enchère de ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' a été rejetée car elle dépasse votre limite')),
				chinese: A2(
					_elm_lang$core$Basics_ops['++'],
					'您的出价 ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' 被拒绝，因为它超过了您的限制'))
			};
		case 'RejectedCreditLimit':
			return {english: 'Maxed out (credit)', dutch: 'Limiet bereikt (krediet)', german: 'Limit erreicht (Kredit)', hebrew: 'מעבר לאשראי (בית מכירות)', russian: 'Достигнут кредитный лимит', french: 'Limite atteinte (crédit)', chinese: '达到上限 (信用)'};
		case 'RejectedCreditLimitOwnMessage':
			var amountWithCurrency = A2(_gizra$backoffice$Amount$showAmountWithCurrencyAsString, _p40._0, _p40._1);
			return {
				english: A2(
					_elm_lang$core$Basics_ops['++'],
					'Your bid of amount ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' was rejected for exceeding your credit limit')),
				dutch: A2(
					_elm_lang$core$Basics_ops['++'],
					'Uw bod van ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' is afgewezen wegens overschrijding van uw kredietlimiet')),
				german: A2(
					_elm_lang$core$Basics_ops['++'],
					'Ihr Gebot von ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' wurde wegen Überschreitung des Kreditlimits abgelehnt')),
				hebrew: A2(
					_elm_lang$core$Basics_ops['++'],
					'הצעתך בסך ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' נדחתה בשל חריגה מהאשראי שלך')),
				russian: A2(
					_elm_lang$core$Basics_ops['++'],
					'Ваша ставка в размере ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' была отклонена из-за превышения кредитного лимита')),
				french: A2(
					_elm_lang$core$Basics_ops['++'],
					'Votre enchère de ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' a été rejetée car elle dépasse votre limite de crédit')),
				chinese: A2(
					_elm_lang$core$Basics_ops['++'],
					'您的出价 ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' 被拒绝，因为它超过了您的信用额度'))
			};
		case 'RejectedMailAfterSetLastFloor':
			return {english: 'Rejected and bid set to Floor', dutch: 'Afgewezen en bod aan zaal toegekend', german: 'Abgelehnt und Gebot auf Saal gesetzt', hebrew: 'נדחה לאחר שההצעה הועברה לחדר', russian: 'Отклонено, ставка переведена на зал', french: 'Rejeté et enchère fixée au sol', chinese: '被拒绝并将出价设定为现场'};
		case 'RejectedOwnMessage':
			var amountWithCurrency = A2(_gizra$backoffice$Amount$showAmountWithCurrencyAsString, _p40._0, _p40._1);
			return {
				english: A2(
					_elm_lang$core$Basics_ops['++'],
					'Your bid of ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' has been rejected')),
				dutch: A2(
					_elm_lang$core$Basics_ops['++'],
					'Uw bod van ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' is afgewezen')),
				german: A2(
					_elm_lang$core$Basics_ops['++'],
					'Ihr Gebot von ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' wurde abgelehnt')),
				hebrew: A2(
					_elm_lang$core$Basics_ops['++'],
					'הצעתך בסך ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' נדחתה')),
				russian: A2(
					_elm_lang$core$Basics_ops['++'],
					'Ваша ставка в размере ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' была отклонена')),
				french: A2(
					_elm_lang$core$Basics_ops['++'],
					'Votre enchère de ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' a été rejetée')),
				chinese: A2(
					_elm_lang$core$Basics_ops['++'],
					'您的出价 ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' 已被拒绝'))
			};
		case 'RevokedToFloorOwnMessage':
			var value = A2(_gizra$backoffice$Amount$showAmountWithCurrencyAsString, _p40._0, _p40._1);
			return {
				english: A2(
					_elm_lang$core$Basics_ops['++'],
					'The auctioneer revoked your bid of ',
					A2(_elm_lang$core$Basics_ops['++'], value, ' for a floor bid')),
				dutch: A2(
					_elm_lang$core$Basics_ops['++'],
					'De veilingmeester heeft uw bod van ',
					A2(_elm_lang$core$Basics_ops['++'], value, ' ingetrokken en een zaalbieder voorrang gegeven')),
				german: A2(
					_elm_lang$core$Basics_ops['++'],
					'Ihr Gebot in Höhe von ',
					A2(_elm_lang$core$Basics_ops['++'], value, ' wurde abgelehnt, da ein gleich hohes Saalgebot früher einging')),
				hebrew: A2(
					_elm_lang$core$Basics_ops['++'],
					'הצעתכם בסכום ',
					A2(_elm_lang$core$Basics_ops['++'], value, ' נדחתה בעבור הצעה מהחדר')),
				russian: A2(
					_elm_lang$core$Basics_ops['++'],
					'Аукционист отменил вашу ставку в размере ',
					A2(_elm_lang$core$Basics_ops['++'], value, ' в пользу заложной ставки')),
				french: A2(
					_elm_lang$core$Basics_ops['++'],
					'Le commissaire-priseur a révoqué votre enchère de ',
					A2(_elm_lang$core$Basics_ops['++'], value, ' pour une enchère au sol')),
				chinese: A2(
					_elm_lang$core$Basics_ops['++'],
					'拍卖官撤销了您的 ',
					A2(_elm_lang$core$Basics_ops['++'], value, ' 出价，以换取现场出价'))
			};
		case 'Outbid':
			return {english: 'Outbid', dutch: 'Overboden', german: 'überboten', hebrew: 'הוצע מחיר גבוהה יותר', russian: 'Перебита', french: 'Surenchéri', chinese: '出价超过'};
		default:
			var amountWithCurrency = A2(_gizra$backoffice$Amount$showAmountWithCurrencyAsString, _p40._0, _p40._1);
			return {
				english: A2(
					_elm_lang$core$Basics_ops['++'],
					'Your bid of ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' was outbid by a book bid')),
				dutch: A2(
					_elm_lang$core$Basics_ops['++'],
					'Uw bod van ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' werd overboden door een schriftelijke bieding')),
				german: A2(
					_elm_lang$core$Basics_ops['++'],
					'Ihr Gebot von ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' wurde von einem schriftlichem Gebot überboten')),
				hebrew: A2(
					_elm_lang$core$Basics_ops['++'],
					'הצעתך בסך ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' נדחתה בעבור הצעה מראש')),
				russian: A2(
					_elm_lang$core$Basics_ops['++'],
					'Ваша ставка в размере ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' была перебита письменной ставкой')),
				french: A2(
					_elm_lang$core$Basics_ops['++'],
					'Votre enchère de ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' a été surenchérie par une enchère sur le livre')),
				chinese: A2(
					_elm_lang$core$Basics_ops['++'],
					'您的 ',
					A2(_elm_lang$core$Basics_ops['++'], amountWithCurrency, ' 出价被书面出价超过'))
			};
	}
};
var _gizra$backoffice$Translate$translateAddress = function (transId) {
	var _p41 = transId;
	switch (_p41.ctor) {
		case 'AddressLabel':
			return {english: 'Address', dutch: 'Adres', german: 'Adresse', hebrew: 'כתובת', russian: 'Адрес', chinese: '地址', french: 'Adresse'};
		case 'AddressLine1':
			return {english: 'Address 1', dutch: 'Adres 1', german: 'Adresse Zeile 1', hebrew: 'שורת כתובת 1', russian: 'Адрес 1', chinese: '地址1', french: 'Adresse 1'};
		case 'AddressLine2':
			return {english: 'Address 2', dutch: 'Adres 2', german: 'Adresse Zeile 2', hebrew: 'שורת כתובת 2', russian: 'Адрес 2', chinese: '地址2', french: 'Adresse 2'};
		case 'City':
			return {english: 'City', dutch: 'Stad', german: 'Stadt', hebrew: 'עיר', russian: 'Город', chinese: '城市', french: 'Ville'};
		case 'Country_':
			return {english: 'Country', dutch: 'Land', german: 'Land', hebrew: 'ארץ', russian: 'Страна', chinese: '国家', french: 'Pays'};
		case 'CountryName':
			return _gizra$backoffice$Translate$translateCountry(_p41._0);
		case 'PhoneNumber':
			return {english: 'Phone number', dutch: 'Telefoonnummer', german: 'Telefonnummer', hebrew: 'טלפון', russian: 'Телефонный номер', chinese: '电话号码', french: 'Numéro de téléphone'};
		case 'State':
			return {english: 'State', dutch: 'Staat', german: 'Bundesland', hebrew: 'מדינה', russian: 'Штат', chinese: '州', french: 'État'};
		default:
			return {english: 'Zip code', dutch: 'Postcode', german: 'PLZ', hebrew: 'מיקוד', russian: 'Почтовый индекс', chinese: '邮政编码', french: 'Code postal'};
	}
};
var _gizra$backoffice$Translate$translate = F2(
	function (language, trans) {
		var translationSet = function () {
			var _p42 = trans;
			switch (_p42.ctor) {
				case 'Address':
					return _gizra$backoffice$Translate$translateAddress(_p42._0);
				case 'Bid':
					return _gizra$backoffice$Translate$translateBid(_p42._0);
				case 'BiddingInfo':
					return _gizra$backoffice$Translate$translateBiddingInfo(_p42._0);
				case 'Credit':
					return _gizra$backoffice$Translate$translateCredit(_p42._0);
				case 'ForgotPassword':
					return _gizra$backoffice$Translate$translateForgotPassword(_p42._0);
				case 'General':
					return _gizra$backoffice$Translate$translateGeneral(_p42._0);
				case 'HttpError':
					return _gizra$backoffice$Translate$translateHttpError(_p42._0);
				case 'ItemPreLiveSale':
					return _gizra$backoffice$Translate$translateItemPreLiveSale(_p42._0);
				case 'Login':
					return _gizra$backoffice$Translate$translateLogin(_p42._0);
				case 'MyAccount':
					return _gizra$backoffice$Translate$translateMyAccount(_p42._0);
				case 'MyBids':
					return _gizra$backoffice$Translate$translateMyBids(_p42._0);
				case 'Register':
					return _gizra$backoffice$Translate$translateRegister(_p42._0);
				default:
					return _gizra$backoffice$Translate$translateUserBlock(_p42._0);
			}
		}();
		var translateOrFallbackEnglish = function (str) {
			return _elm_lang$core$String$isEmpty(str) ? function (_) {
				return _.english;
			}(translationSet) : str;
		};
		var _p43 = language;
		switch (_p43.ctor) {
			case 'English':
				return function (_) {
					return _.english;
				}(translationSet);
			case 'Chinese':
				return translateOrFallbackEnglish(
					function (_) {
						return _.chinese;
					}(translationSet));
			case 'Dutch':
				return translateOrFallbackEnglish(
					function (_) {
						return _.dutch;
					}(translationSet));
			case 'German':
				return translateOrFallbackEnglish(
					function (_) {
						return _.german;
					}(translationSet));
			case 'Hebrew':
				return translateOrFallbackEnglish(
					function (_) {
						return _.hebrew;
					}(translationSet));
			case 'Russian':
				return translateOrFallbackEnglish(
					function (_) {
						return _.russian;
					}(translationSet));
			default:
				return translateOrFallbackEnglish(
					function (_) {
						return _.french;
					}(translationSet));
		}
	});
var _gizra$backoffice$Translate$translateText = F2(
	function (lang, trans) {
		return _elm_lang$html$Html$text(
			A2(_gizra$backoffice$Translate$translate, lang, trans));
	});
var _gizra$backoffice$Translate$TranslationSet = F7(
	function (a, b, c, d, e, f, g) {
		return {english: a, dutch: b, german: c, hebrew: d, russian: e, chinese: f, french: g};
	});
var _gizra$backoffice$Translate$ZipCode = {ctor: 'ZipCode'};
var _gizra$backoffice$Translate$State = {ctor: 'State'};
var _gizra$backoffice$Translate$PhoneNumber = {ctor: 'PhoneNumber'};
var _gizra$backoffice$Translate$CountryName = function (a) {
	return {ctor: 'CountryName', _0: a};
};
var _gizra$backoffice$Translate$Country_ = {ctor: 'Country_'};
var _gizra$backoffice$Translate$City = {ctor: 'City'};
var _gizra$backoffice$Translate$AddressLine2 = {ctor: 'AddressLine2'};
var _gizra$backoffice$Translate$AddressLine1 = {ctor: 'AddressLine1'};
var _gizra$backoffice$Translate$AddressLabel = {ctor: 'AddressLabel'};
var _gizra$backoffice$Translate$OutbidOwnMessage = F2(
	function (a, b) {
		return {ctor: 'OutbidOwnMessage', _0: a, _1: b};
	});
var _gizra$backoffice$Translate$Outbid = {ctor: 'Outbid'};
var _gizra$backoffice$Translate$RevokedToFloorOwnMessage = F2(
	function (a, b) {
		return {ctor: 'RevokedToFloorOwnMessage', _0: a, _1: b};
	});
var _gizra$backoffice$Translate$RejectedOwnMessage = F2(
	function (a, b) {
		return {ctor: 'RejectedOwnMessage', _0: a, _1: b};
	});
var _gizra$backoffice$Translate$RejectedMailAfterSetLastFloor = {ctor: 'RejectedMailAfterSetLastFloor'};
var _gizra$backoffice$Translate$RejectedCreditLimitOwnMessage = F2(
	function (a, b) {
		return {ctor: 'RejectedCreditLimitOwnMessage', _0: a, _1: b};
	});
var _gizra$backoffice$Translate$RejectedCreditLimit = {ctor: 'RejectedCreditLimit'};
var _gizra$backoffice$Translate$RejectedBidderMaxMessage = F2(
	function (a, b) {
		return {ctor: 'RejectedBidderMaxMessage', _0: a, _1: b};
	});
var _gizra$backoffice$Translate$RejectedBidderMax = {ctor: 'RejectedBidderMax'};
var _gizra$backoffice$Translate$Rejected = {ctor: 'Rejected'};
var _gizra$backoffice$Translate$AcceptedOwnMessage = F2(
	function (a, b) {
		return {ctor: 'AcceptedOwnMessage', _0: a, _1: b};
	});
var _gizra$backoffice$Translate$AcceptedDuplicatedAmountOwnMessage = F2(
	function (a, b) {
		return {ctor: 'AcceptedDuplicatedAmountOwnMessage', _0: a, _1: b};
	});
var _gizra$backoffice$Translate$AcceptedDuplicatedAmount = {ctor: 'AcceptedDuplicatedAmount'};
var _gizra$backoffice$Translate$Accepted = {ctor: 'Accepted'};
var _gizra$backoffice$Translate$PostSaleBid = {ctor: 'PostSaleBid'};
var _gizra$backoffice$Translate$MailBid = {ctor: 'MailBid'};
var _gizra$backoffice$Translate$InternetBid = {ctor: 'InternetBid'};
var _gizra$backoffice$Translate$FloorBid = {ctor: 'FloorBid'};
var _gizra$backoffice$Translate$AutoBid = {ctor: 'AutoBid'};
var _gizra$backoffice$Translate$AutoAgent = {ctor: 'AutoAgent'};
var _gizra$backoffice$Translate$AgentBid = {ctor: 'AgentBid'};
var _gizra$backoffice$Translate$ForgotPasswordSuccess = {ctor: 'ForgotPasswordSuccess'};
var _gizra$backoffice$Translate$ForgotPasswordDescription = {ctor: 'ForgotPasswordDescription'};
var _gizra$backoffice$Translate$ForgotPassword_ = {ctor: 'ForgotPassword_'};
var _gizra$backoffice$Translate$LotsRange = {ctor: 'LotsRange'};
var _gizra$backoffice$Translate$CallRequests = {ctor: 'CallRequests'};
var _gizra$backoffice$Translate$Type = {ctor: 'Type'};
var _gizra$backoffice$Translate$Status = {ctor: 'Status'};
var _gizra$backoffice$Translate$StartingPrice = function (a) {
	return {ctor: 'StartingPrice', _0: a};
};
var _gizra$backoffice$Translate$SoldPrice = function (a) {
	return {ctor: 'SoldPrice', _0: a};
};
var _gizra$backoffice$Translate$ReKnockDownDescription = {ctor: 'ReKnockDownDescription'};
var _gizra$backoffice$Translate$ReKnockDown = {ctor: 'ReKnockDown'};
var _gizra$backoffice$Translate$OpeningPriceLabel = {ctor: 'OpeningPriceLabel'};
var _gizra$backoffice$Translate$OpeningPriceDescription = {ctor: 'OpeningPriceDescription'};
var _gizra$backoffice$Translate$OpeningPrice = function (a) {
	return {ctor: 'OpeningPrice', _0: a};
};
var _gizra$backoffice$Translate$NoGroupName = {ctor: 'NoGroupName'};
var _gizra$backoffice$Translate$Lot = F2(
	function (a, b) {
		return {ctor: 'Lot', _0: a, _1: b};
	});
var _gizra$backoffice$Translate$ItemStatus = function (a) {
	return {ctor: 'ItemStatus', _0: a};
};
var _gizra$backoffice$Translate$GroupName = {ctor: 'GroupName'};
var _gizra$backoffice$Translate$Expand = {ctor: 'Expand'};
var _gizra$backoffice$Translate$Extension = {ctor: 'Extension'};
var _gizra$backoffice$Translate$CurrentPrice = function (a) {
	return {ctor: 'CurrentPrice', _0: a};
};
var _gizra$backoffice$Translate$Created = {ctor: 'Created'};
var _gizra$backoffice$Translate$Collapse = {ctor: 'Collapse'};
var _gizra$backoffice$Translate$BidderNumber = {ctor: 'BidderNumber'};
var _gizra$backoffice$Translate$BidCreated = F2(
	function (a, b) {
		return {ctor: 'BidCreated', _0: a, _1: b};
	});
var _gizra$backoffice$Translate$AuthoredBy = {ctor: 'AuthoredBy'};
var _gizra$backoffice$Translate$Amount = {ctor: 'Amount'};
var _gizra$backoffice$Translate$Unlimited = {ctor: 'Unlimited'};
var _gizra$backoffice$Translate$MaxBidDescription = {ctor: 'MaxBidDescription'};
var _gizra$backoffice$Translate$MaxBid = {ctor: 'MaxBid'};
var _gizra$backoffice$Translate$MailCreditDescription = {ctor: 'MailCreditDescription'};
var _gizra$backoffice$Translate$LiveCreditDescription = {ctor: 'LiveCreditDescription'};
var _gizra$backoffice$Translate$Credit_ = {ctor: 'Credit_'};
var _gizra$backoffice$Translate$BidderNumberType = function (a) {
	return {ctor: 'BidderNumberType', _0: a};
};
var _gizra$backoffice$Translate$BidderLimitNotSet = {ctor: 'BidderLimitNotSet'};
var _gizra$backoffice$Translate$BidderLimit = function (a) {
	return {ctor: 'BidderLimit', _0: a};
};
var _gizra$backoffice$Translate$BidderNumbers = {ctor: 'BidderNumbers'};
var _gizra$backoffice$Translate$BidderId = {ctor: 'BidderId'};
var _gizra$backoffice$Translate$AmountRestrictionLabel = function (a) {
	return {ctor: 'AmountRestrictionLabel', _0: a};
};
var _gizra$backoffice$Translate$Agent = {ctor: 'Agent'};
var _gizra$backoffice$Translate$Actions = {ctor: 'Actions'};
var _gizra$backoffice$Translate$YourBidderLimitHasBeenUpdated = {ctor: 'YourBidderLimitHasBeenUpdated'};
var _gizra$backoffice$Translate$NumberInput = {ctor: 'NumberInput'};
var _gizra$backoffice$Translate$CurrentMaximum = F2(
	function (a, b) {
		return {ctor: 'CurrentMaximum', _0: a, _1: b};
	});
var _gizra$backoffice$Translate$CurrentCreditAndPending = F3(
	function (a, b, c) {
		return {ctor: 'CurrentCreditAndPending', _0: a, _1: b, _2: c};
	});
var _gizra$backoffice$Translate$CurrentCredit = F2(
	function (a, b) {
		return {ctor: 'CurrentCredit', _0: a, _1: b};
	});
var _gizra$backoffice$Translate$CreditUnlimited = {ctor: 'CreditUnlimited'};
var _gizra$backoffice$Translate$CreditRequestPending = {ctor: 'CreditRequestPending'};
var _gizra$backoffice$Translate$CreditRequestDescription = {ctor: 'CreditRequestDescription'};
var _gizra$backoffice$Translate$CreditRequest = {ctor: 'CreditRequest'};
var _gizra$backoffice$Translate$BidderLimitDescription = {ctor: 'BidderLimitDescription'};
var _gizra$backoffice$Translate$BidderLimitNote = {ctor: 'BidderLimitNote'};
var _gizra$backoffice$Translate$YouWillReceiveEmail = {ctor: 'YouWillReceiveEmail'};
var _gizra$backoffice$Translate$ResetPassword = {ctor: 'ResetPassword'};
var _gizra$backoffice$Translate$RedirectingToMyAccountPageMessage = {ctor: 'RedirectingToMyAccountPageMessage'};
var _gizra$backoffice$Translate$ForgotMyPassword = {ctor: 'ForgotMyPassword'};
var _gizra$backoffice$Translate$Yes = {ctor: 'Yes'};
var _gizra$backoffice$Translate$Unsold_ = {ctor: 'Unsold_'};
var _gizra$backoffice$Translate$To = {ctor: 'To'};
var _gizra$backoffice$Translate$Send = {ctor: 'Send'};
var _gizra$backoffice$Translate$Save = {ctor: 'Save'};
var _gizra$backoffice$Translate$Reset = {ctor: 'Reset'};
var _gizra$backoffice$Translate$Or = {ctor: 'Or'};
var _gizra$backoffice$Translate$Note = {ctor: 'Note'};
var _gizra$backoffice$Translate$No = {ctor: 'No'};
var _gizra$backoffice$Translate$LanguageName_ = function (a) {
	return {ctor: 'LanguageName_', _0: a};
};
var _gizra$backoffice$Translate$From = {ctor: 'From'};
var _gizra$backoffice$Translate$Email = {ctor: 'Email'};
var _gizra$backoffice$Translate$Delete = {ctor: 'Delete'};
var _gizra$backoffice$Translate$Buyers = {ctor: 'Buyers'};
var _gizra$backoffice$Translate$BidServerConnect = {ctor: 'BidServerConnect'};
var _gizra$backoffice$Translate$Bidder = {ctor: 'Bidder'};
var _gizra$backoffice$Translate$All = {ctor: 'All'};
var _gizra$backoffice$Translate$YourCurrentBidIsWithAmount = F2(
	function (a, b) {
		return {ctor: 'YourCurrentBidIsWithAmount', _0: a, _1: b};
	});
var _gizra$backoffice$Translate$YourCurrentAgentBidIsWithAmount = F2(
	function (a, b) {
		return {ctor: 'YourCurrentAgentBidIsWithAmount', _0: a, _1: b};
	});
var _gizra$backoffice$Translate$Start = F2(
	function (a, b) {
		return {ctor: 'Start', _0: a, _1: b};
	});
var _gizra$backoffice$Translate$ResetPasswordSuccess = function (a) {
	return {ctor: 'ResetPasswordSuccess', _0: a};
};
var _gizra$backoffice$Translate$RegisterInstructions = {ctor: 'RegisterInstructions'};
var _gizra$backoffice$Translate$MailCurrentPriceAmount = F2(
	function (a, b) {
		return {ctor: 'MailCurrentPriceAmount', _0: a, _1: b};
	});
var _gizra$backoffice$Translate$LoginInstructions = {ctor: 'LoginInstructions'};
var _gizra$backoffice$Translate$ForgotPasswordInstructions = {ctor: 'ForgotPasswordInstructions'};
var _gizra$backoffice$Translate$EstPrice = F2(
	function (a, b) {
		return {ctor: 'EstPrice', _0: a, _1: b};
	});
var _gizra$backoffice$Translate$CreditIsRequiredButPendingForMailBids = F2(
	function (a, b) {
		return {ctor: 'CreditIsRequiredButPendingForMailBids', _0: a, _1: b};
	});
var _gizra$backoffice$Translate$CreditIsRequiredForMailBids = F2(
	function (a, b) {
		return {ctor: 'CreditIsRequiredForMailBids', _0: a, _1: b};
	});
var _gizra$backoffice$Translate$CreditIsRequiredForAgentBids = F2(
	function (a, b) {
		return {ctor: 'CreditIsRequiredForAgentBids', _0: a, _1: b};
	});
var _gizra$backoffice$Translate$AgreedWithTerms = function (a) {
	return {ctor: 'AgreedWithTerms', _0: a};
};
var _gizra$backoffice$Translate$YourAccountIsPendingApproval = {ctor: 'YourAccountIsPendingApproval'};
var _gizra$backoffice$Translate$YouWon = F2(
	function (a, b) {
		return {ctor: 'YouWon', _0: a, _1: b};
	});
var _gizra$backoffice$Translate$YouAreTheHighestBidder = {ctor: 'YouAreTheHighestBidder'};
var _gizra$backoffice$Translate$YesDeleteIt = {ctor: 'YesDeleteIt'};
var _gizra$backoffice$Translate$SoldFor = F2(
	function (a, b) {
		return {ctor: 'SoldFor', _0: a, _1: b};
	});
var _gizra$backoffice$Translate$PromptDeleteCurrentBid = {ctor: 'PromptDeleteCurrentBid'};
var _gizra$backoffice$Translate$PlaceBid = {ctor: 'PlaceBid'};
var _gizra$backoffice$Translate$OnlineAgent = {ctor: 'OnlineAgent'};
var _gizra$backoffice$Translate$NoKeepMyBid = {ctor: 'NoKeepMyBid'};
var _gizra$backoffice$Translate$MakeAnOffer = {ctor: 'MakeAnOffer'};
var _gizra$backoffice$Translate$LotWithdrawnFromSale = {ctor: 'LotWithdrawnFromSale'};
var _gizra$backoffice$Translate$LiveAuctionOpen = {ctor: 'LiveAuctionOpen'};
var _gizra$backoffice$Translate$JoinLiveAuction = {ctor: 'JoinLiveAuction'};
var _gizra$backoffice$Translate$ItemNotActiveButAlreadyHasLiveBids_ = {ctor: 'ItemNotActiveButAlreadyHasLiveBids_'};
var _gizra$backoffice$Translate$FollowLot = {ctor: 'FollowLot'};
var _gizra$backoffice$Translate$EnterYourBid = {ctor: 'EnterYourBid'};
var _gizra$backoffice$Translate$DeleteCurrentBid = {ctor: 'DeleteCurrentBid'};
var _gizra$backoffice$Translate$ChangeBidAmount = {ctor: 'ChangeBidAmount'};
var _gizra$backoffice$Translate$SignInNow = {ctor: 'SignInNow'};
var _gizra$backoffice$Translate$SignInToYourAccount = {ctor: 'SignInToYourAccount'};
var _gizra$backoffice$Translate$ForgotYourPassword = {ctor: 'ForgotYourPassword'};
var _gizra$backoffice$Translate$YourAccountDetailsHaveBeenUpdated = {ctor: 'YourAccountDetailsHaveBeenUpdated'};
var _gizra$backoffice$Translate$UpdateMyAccount = {ctor: 'UpdateMyAccount'};
var _gizra$backoffice$Translate$EnterNewPassword = {ctor: 'EnterNewPassword'};
var _gizra$backoffice$Translate$ChangePassword = {ctor: 'ChangePassword'};
var _gizra$backoffice$Translate$LotWithId = function (a) {
	return {ctor: 'LotWithId', _0: a};
};
var _gizra$backoffice$Translate$ViewMoreLotDetails = {ctor: 'ViewMoreLotDetails'};
var _gizra$backoffice$Translate$NoBidsPlaced = {ctor: 'NoBidsPlaced'};
var _gizra$backoffice$Translate$WillBeUsedAsYourUsername = {ctor: 'WillBeUsedAsYourUsername'};
var _gizra$backoffice$Translate$YourAccountDetailsHaveBeenSaved = {ctor: 'YourAccountDetailsHaveBeenSaved'};
var _gizra$backoffice$Translate$YouMustAgreeToTheTerms = {ctor: 'YouMustAgreeToTheTerms'};
var _gizra$backoffice$Translate$SubscribeToNewsLetter = {ctor: 'SubscribeToNewsLetter'};
var _gizra$backoffice$Translate$SignUpNow = {ctor: 'SignUpNow'};
var _gizra$backoffice$Translate$SelectLanguage = {ctor: 'SelectLanguage'};
var _gizra$backoffice$Translate$SelectAState = {ctor: 'SelectAState'};
var _gizra$backoffice$Translate$RegistrationError = {ctor: 'RegistrationError'};
var _gizra$backoffice$Translate$References = {ctor: 'References'};
var _gizra$backoffice$Translate$PasswordsDontMatch = {ctor: 'PasswordsDontMatch'};
var _gizra$backoffice$Translate$Password = {ctor: 'Password'};
var _gizra$backoffice$Translate$Language_ = {ctor: 'Language_'};
var _gizra$backoffice$Translate$LastName = {ctor: 'LastName'};
var _gizra$backoffice$Translate$InvalidLanguage = {ctor: 'InvalidLanguage'};
var _gizra$backoffice$Translate$InvalidEmail = {ctor: 'InvalidEmail'};
var _gizra$backoffice$Translate$FirstName = {ctor: 'FirstName'};
var _gizra$backoffice$Translate$FieldIsRequired = {ctor: 'FieldIsRequired'};
var _gizra$backoffice$Translate$CreateAnAccount = {ctor: 'CreateAnAccount'};
var _gizra$backoffice$Translate$ConfirmPassword = {ctor: 'ConfirmPassword'};
var _gizra$backoffice$Translate$AcceptTerms = {ctor: 'AcceptTerms'};
var _gizra$backoffice$Translate$ErrorTimeout = {ctor: 'ErrorTimeout'};
var _gizra$backoffice$Translate$ErrorNetworkError = {ctor: 'ErrorNetworkError'};
var _gizra$backoffice$Translate$ErrorBadStatus = function (a) {
	return {ctor: 'ErrorBadStatus', _0: a};
};
var _gizra$backoffice$Translate$ErrorBadPayload = function (a) {
	return {ctor: 'ErrorBadPayload', _0: a};
};
var _gizra$backoffice$Translate$ErrorBadUrl = {ctor: 'ErrorBadUrl'};
var _gizra$backoffice$Translate$UnrecognizedCredentials = {ctor: 'UnrecognizedCredentials'};
var _gizra$backoffice$Translate$ToPlaceBid = {ctor: 'ToPlaceBid'};
var _gizra$backoffice$Translate$Register_ = {ctor: 'Register_'};
var _gizra$backoffice$Translate$MyCredit_ = {ctor: 'MyCredit_'};
var _gizra$backoffice$Translate$MyBids_ = {ctor: 'MyBids_'};
var _gizra$backoffice$Translate$MyAccount_ = {ctor: 'MyAccount_'};
var _gizra$backoffice$Translate$Logout = {ctor: 'Logout'};
var _gizra$backoffice$Translate$Login_ = {ctor: 'Login_'};
var _gizra$backoffice$Translate$UserBlock = function (a) {
	return {ctor: 'UserBlock', _0: a};
};
var _gizra$backoffice$Translate$Register = function (a) {
	return {ctor: 'Register', _0: a};
};
var _gizra$backoffice$Translate$MyBids = function (a) {
	return {ctor: 'MyBids', _0: a};
};
var _gizra$backoffice$Translate$MyAccount = function (a) {
	return {ctor: 'MyAccount', _0: a};
};
var _gizra$backoffice$Translate$Login = function (a) {
	return {ctor: 'Login', _0: a};
};
var _gizra$backoffice$Translate$ItemPreLiveSale = function (a) {
	return {ctor: 'ItemPreLiveSale', _0: a};
};
var _gizra$backoffice$Translate$HttpError = function (a) {
	return {ctor: 'HttpError', _0: a};
};
var _gizra$backoffice$Translate$General = function (a) {
	return {ctor: 'General', _0: a};
};
var _gizra$backoffice$Translate$ForgotPassword = function (a) {
	return {ctor: 'ForgotPassword', _0: a};
};
var _gizra$backoffice$Translate$Credit = function (a) {
	return {ctor: 'Credit', _0: a};
};
var _gizra$backoffice$Translate$BiddingInfo = function (a) {
	return {ctor: 'BiddingInfo', _0: a};
};
var _gizra$backoffice$Translate$Bid = function (a) {
	return {ctor: 'Bid', _0: a};
};
var _gizra$backoffice$Translate$Address = function (a) {
	return {ctor: 'Address', _0: a};
};

var _gizra$backoffice$Backend_User_Encoder$encodeWebsiteBidderInfo = function (dict) {
	return _elm_lang$core$Json_Encode$list(
		A2(
			_elm_lang$core$List$map,
			function (_p0) {
				var _p1 = _p0;
				return _elm_lang$core$Json_Encode$object(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'sale_uuid',
							_1: _Gizra$elm_restful$Restful_Endpoint$encodeEntityUuid(_p1._0)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'bidder_info',
								_1: _Gizra$elm_restful$Restful_Endpoint$encodeEntityId(_p1._1)
							},
							_1: {ctor: '[]'}
						}
					});
			},
			_eeue56$elm_all_dict$EveryDict$toList(dict)));
};
var _gizra$backoffice$Backend_User_Encoder$encodeUserType = function (userType) {
	return _elm_lang$core$Json_Encode$string(
		function () {
			var _p2 = userType;
			if (_p2.ctor === 'Bidder') {
				return 'bidder';
			} else {
				return 'privileged';
			}
		}());
};
var _gizra$backoffice$Backend_User_Encoder$encodeUserStatus = function (userStatus) {
	return _elm_lang$core$Json_Encode$string(
		function () {
			var _p3 = userStatus;
			if (_p3.ctor === 'Active') {
				return 'active';
			} else {
				return 'pending';
			}
		}());
};
var _gizra$backoffice$Backend_User_Encoder$encodeAddress = function (address) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'country',
				_1: _elm_lang$core$Json_Encode$string(address.country)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'thoroughfare',
					_1: _elm_lang$core$Json_Encode$string(address.addressLine1)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'premise',
						_1: A2(_elm_community$json_extra$Json_Encode_Extra$maybe, _elm_lang$core$Json_Encode$string, address.addressLine2)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'locality',
							_1: _elm_lang$core$Json_Encode$string(address.city)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'administrative_area',
								_1: A2(_elm_community$json_extra$Json_Encode_Extra$maybe, _elm_lang$core$Json_Encode$string, address.state)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'postal_code',
									_1: _elm_lang$core$Json_Encode$string(address.zipCode)
								},
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		});
};
var _gizra$backoffice$Backend_User_Encoder$encodeUser = function (user) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'label',
				_1: _elm_lang$core$Json_Encode$string(user.name)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'first_name',
					_1: _elm_lang$core$Json_Encode$string(user.firstName)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'last_name',
						_1: _elm_lang$core$Json_Encode$string(user.lastName)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'mail',
							_1: _elm_lang$core$Json_Encode$string(user.email)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'phone',
								_1: _elm_lang$core$Json_Encode$string(user.phone)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'address',
									_1: A2(_elm_community$json_extra$Json_Encode_Extra$maybe, _gizra$backoffice$Backend_User_Encoder$encodeAddress, user.address)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'language',
										_1: _elm_lang$core$Json_Encode$string(
											_gizra$backoffice$Translate$languageToCode(user.language))
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'id',
											_1: _Gizra$elm_restful$Restful_Endpoint$encodeEntityId(user.id)
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'site',
												_1: _Gizra$elm_restful$Restful_Endpoint$encodeEntityUuid(user.siteUuid)
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: 'uuid',
													_1: _Gizra$elm_restful$Restful_Endpoint$encodeEntityUuid(user.uuid)
												},
												_1: {
													ctor: '::',
													_0: {
														ctor: '_Tuple2',
														_0: 'status',
														_1: _gizra$backoffice$Backend_User_Encoder$encodeUserStatus(user.status)
													},
													_1: {
														ctor: '::',
														_0: {
															ctor: '_Tuple2',
															_0: 'user_type',
															_1: _gizra$backoffice$Backend_User_Encoder$encodeUserType(user.userType)
														},
														_1: {
															ctor: '::',
															_0: {
																ctor: '_Tuple2',
																_0: 'website_bidder_info',
																_1: _gizra$backoffice$Backend_User_Encoder$encodeWebsiteBidderInfo(user.websiteBidderInfo)
															},
															_1: {
																ctor: '::',
																_0: {
																	ctor: '_Tuple2',
																	_0: 'references',
																	_1: A2(_elm_community$json_extra$Json_Encode_Extra$maybe, _elm_lang$core$Json_Encode$string, user.references)
																},
																_1: {
																	ctor: '::',
																	_0: {
																		ctor: '_Tuple2',
																		_0: 'subscribe_to_newsletter',
																		_1: _elm_lang$core$Json_Encode$bool(user.subscribeToNewsLetter)
																	},
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		});
};

var _gizra$backoffice$App_Encoder$encodeAnonymousUserAndData = F2(
	function (maybeSaleUuid, login) {
		var data = A3(
			_elm_community$maybe_extra$Maybe_Extra$unwrap,
			{ctor: '[]'},
			function (saleUuid) {
				return {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'data',
						_1: A2(_gizra$backoffice$Backend_Encoder$encodeAnonymousModelBackend, saleUuid, login.data)
					},
					_1: {ctor: '[]'}
				};
			},
			maybeSaleUuid);
		return _elm_lang$core$Json_Encode$object(data);
	});
var _gizra$backoffice$App_Encoder$encodeAuthenticatedUserAndData = F2(
	function (maybeSaleUuid, login) {
		var data = A3(
			_elm_community$maybe_extra$Maybe_Extra$unwrap,
			{ctor: '[]'},
			function (saleUuid) {
				return {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'data',
						_1: A2(_gizra$backoffice$Backend_Encoder$encodeModelBackend, saleUuid, login.data)
					},
					_1: {ctor: '[]'}
				};
			},
			maybeSaleUuid);
		return _elm_lang$core$Json_Encode$object(
			A2(
				_elm_lang$core$List$append,
				data,
				{
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'accessToken',
						_1: _elm_lang$core$Json_Encode$string(login.credentials.accessToken)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'user',
							_1: _gizra$backoffice$Backend_User_Encoder$encodeUser(login.credentials.user)
						},
						_1: {ctor: '[]'}
					}
				}));
	});

var _gizra$backoffice$Error_Model$Error = F3(
	function (a, b, c) {
		return {module_: a, location: b, error: c};
	});
var _gizra$backoffice$Error_Model$PusherError = F2(
	function (a, b) {
		return {code: a, message: b};
	});
var _gizra$backoffice$Error_Model$Pusher = function (a) {
	return {ctor: 'Pusher', _0: a};
};
var _gizra$backoffice$Error_Model$Plain = function (a) {
	return {ctor: 'Plain', _0: a};
};
var _gizra$backoffice$Error_Model$Http = function (a) {
	return {ctor: 'Http', _0: a};
};

var _gizra$backoffice$Pages_ForgotPassword_Model$emptyModel = {email: ''};
var _gizra$backoffice$Pages_ForgotPassword_Model$Model = function (a) {
	return {email: a};
};
var _gizra$backoffice$Pages_ForgotPassword_Model$SetEmail = function (a) {
	return {ctor: 'SetEmail', _0: a};
};
var _gizra$backoffice$Pages_ForgotPassword_Model$Save = {ctor: 'Save'};

var _gizra$backoffice$Pages_ItemPreLiveSale_Model$emptyBidIncrements = {
	up: {ctor: '[]'},
	down: {ctor: '[]'},
	downDelta: _elm_lang$core$Maybe$Nothing
};
var _gizra$backoffice$Pages_ItemPreLiveSale_Model$emptyModel = {bidIncrements: _eeue56$elm_all_dict$EveryDict$empty, widgetType: _eeue56$elm_all_dict$EveryDict$empty};
var _gizra$backoffice$Pages_ItemPreLiveSale_Model$Model = F2(
	function (a, b) {
		return {bidIncrements: a, widgetType: b};
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_Model$BidIncrements = F3(
	function (a, b, c) {
		return {up: a, down: b, downDelta: c};
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_Model$Notice = {ctor: 'Notice'};
var _gizra$backoffice$Pages_ItemPreLiveSale_Model$Error = {ctor: 'Error'};
var _gizra$backoffice$Pages_ItemPreLiveSale_Model$Success = {ctor: 'Success'};
var _gizra$backoffice$Pages_ItemPreLiveSale_Model$PlaceBidForm = {ctor: 'PlaceBidForm'};
var _gizra$backoffice$Pages_ItemPreLiveSale_Model$LinksToPlaceBid = {ctor: 'LinksToPlaceBid'};
var _gizra$backoffice$Pages_ItemPreLiveSale_Model$LinkToDeleteCurrentBid = {ctor: 'LinkToDeleteCurrentBid'};
var _gizra$backoffice$Pages_ItemPreLiveSale_Model$SetWidgetType = F4(
	function (a, b, c, d) {
		return {ctor: 'SetWidgetType', _0: a, _1: b, _2: c, _3: d};
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_Model$SetFavorite = F3(
	function (a, b, c) {
		return {ctor: 'SetFavorite', _0: a, _1: b, _2: c};
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_Model$SetAmount = F4(
	function (a, b, c, d) {
		return {ctor: 'SetAmount', _0: a, _1: b, _2: c, _3: d};
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_Model$PlaceBid = F4(
	function (a, b, c, d) {
		return {ctor: 'PlaceBid', _0: a, _1: b, _2: c, _3: d};
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_Model$DeleteCurrentBid = F3(
	function (a, b, c) {
		return {ctor: 'DeleteCurrentBid', _0: a, _1: b, _2: c};
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_Model$BidAmountDecrement = F4(
	function (a, b, c, d) {
		return {ctor: 'BidAmountDecrement', _0: a, _1: b, _2: c, _3: d};
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_Model$BidAmountIncrement = F4(
	function (a, b, c, d) {
		return {ctor: 'BidAmountIncrement', _0: a, _1: b, _2: c, _3: d};
	});

var _gizra$backoffice$Pages_Login_Model$emptyModel = {name: '', pass: '', passwordVisible: false};
var _gizra$backoffice$Pages_Login_Model$Model = F3(
	function (a, b, c) {
		return {name: a, pass: b, passwordVisible: c};
	});
var _gizra$backoffice$Pages_Login_Model$TryLogin = {ctor: 'TryLogin'};
var _gizra$backoffice$Pages_Login_Model$TogglePasswordVisibility = {ctor: 'TogglePasswordVisibility'};
var _gizra$backoffice$Pages_Login_Model$SetPassword = function (a) {
	return {ctor: 'SetPassword', _0: a};
};
var _gizra$backoffice$Pages_Login_Model$SetName = function (a) {
	return {ctor: 'SetName', _0: a};
};

var _gizra$backoffice$Utils_UserForms$stateOptions = F2(
	function (language, country) {
		return {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: '',
				_1: A2(
					_gizra$backoffice$Translate$translate,
					language,
					_gizra$backoffice$Translate$Register(_gizra$backoffice$Translate$SelectAState))
			},
			_1: A3(
				_elm_community$maybe_extra$Maybe_Extra$unwrap,
				{ctor: '[]'},
				_gizra$backoffice$Country$regions,
				country)
		};
	});
var _gizra$backoffice$Utils_UserForms$countries = function (language) {
	var countrySorted = A2(
		_elm_lang$core$List$map,
		function (country) {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Basics$toString(country),
				_1: A2(
					_gizra$backoffice$Translate$translate,
					language,
					_gizra$backoffice$Translate$Address(
						_gizra$backoffice$Translate$CountryName(country)))
			};
		},
		A2(
			_elm_lang$core$List$sortWith,
			F2(
				function (a, b) {
					return A2(
						_elm_lang$core$Basics$compare,
						A2(
							_gizra$backoffice$Translate$translate,
							language,
							_gizra$backoffice$Translate$Address(
								_gizra$backoffice$Translate$CountryName(a))),
						A2(
							_gizra$backoffice$Translate$translate,
							language,
							_gizra$backoffice$Translate$Address(
								_gizra$backoffice$Translate$CountryName(b))));
				}),
			_gizra$backoffice$Country$allCountries));
	return {
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: '', _1: ''},
		_1: countrySorted
	};
};
var _gizra$backoffice$Utils_UserForms$requiredBool = function (isRequired) {
	var _p0 = isRequired;
	if (_p0.ctor === 'Required') {
		return true;
	} else {
		return false;
	}
};
var _gizra$backoffice$Utils_UserForms$requiredAttr = function (_p1) {
	return _elm_lang$html$Html_Attributes$required(
		_gizra$backoffice$Utils_UserForms$requiredBool(_p1));
};
var _gizra$backoffice$Utils_UserForms$getFieldAsBool = function (_p2) {
	return _etaque$elm_form$Form$getFieldAsBool(
		_elm_lang$core$Basics$toString(_p2));
};
var _gizra$backoffice$Utils_UserForms$getFieldAsString = function (_p3) {
	return _etaque$elm_form$Form$getFieldAsString(
		_elm_lang$core$Basics$toString(_p3));
};
var _gizra$backoffice$Utils_UserForms$emailInput = A3(_etaque$elm_form$Form_Input$baseInput, 'email', _etaque$elm_form$Form_Field$String, _etaque$elm_form$Form$Text);
var _gizra$backoffice$Utils_UserForms$phoneInput = A3(_etaque$elm_form$Form_Input$baseInput, 'tel', _etaque$elm_form$Form_Field$String, _etaque$elm_form$Form$Text);
var _gizra$backoffice$Utils_UserForms$fieldError = F2(
	function (language, fieldState) {
		var viewError = function (errorMessage) {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('error-message'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(_gizra$backoffice$Translate$translateText, language, errorMessage),
					_1: {ctor: '[]'}
				});
		};
		var _p4 = {ctor: '_Tuple2', _0: fieldState.liveError, _1: fieldState.error};
		_v1_4:
		do {
			if (_p4.ctor === '_Tuple2') {
				if (_p4._0.ctor === 'Just') {
					switch (_p4._0._0.ctor) {
						case 'InvalidString':
							return viewError(
								_gizra$backoffice$Translate$Register(_gizra$backoffice$Translate$FieldIsRequired));
						case 'InvalidEmail':
							return viewError(
								_gizra$backoffice$Translate$Register(_gizra$backoffice$Translate$InvalidEmail));
						case 'CustomError':
							return viewError(_p4._0._0._0);
						default:
							break _v1_4;
					}
				} else {
					if ((((_p4._1.ctor === 'Just') && (_p4._1._0.ctor === 'CustomError')) && (_p4._1._0._0.ctor === 'Register')) && (_p4._1._0._0._0.ctor === 'PasswordsDontMatch')) {
						return viewError(
							_gizra$backoffice$Translate$Register(_gizra$backoffice$Translate$PasswordsDontMatch));
					} else {
						break _v1_4;
					}
				}
			} else {
				break _v1_4;
			}
		} while(false);
		return _Gizra$elm_essentials$Gizra_Html$emptyNode;
	});
var _gizra$backoffice$Utils_UserForms$fieldInput = F7(
	function (inputTag, isRequired, isDisabled, htmlClasses, fieldId, fieldState, msg) {
		var textAreaAttributes = function () {
			var _p5 = fieldId;
			switch (_p5.ctor) {
				case 'References':
					return {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$name('reference'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$cols(60),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$rows(5),
								_1: {ctor: '[]'}
							}
						}
					};
				case 'Password':
					return {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$autocomplete(false),
						_1: {ctor: '[]'}
					};
				case 'NewPassword':
					return {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$autocomplete(false),
						_1: {ctor: '[]'}
					};
				case 'ConfirmPassword':
					return {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$autocomplete(false),
						_1: {ctor: '[]'}
					};
				default:
					return {ctor: '[]'};
			}
		}();
		var validityClass = _elm_community$maybe_extra$Maybe_Extra$isJust(fieldState.liveError) ? 'invalid' : 'valid';
		return A2(
			_elm_lang$html$Html$map,
			msg,
			A2(
				inputTag,
				fieldState,
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class(
							A2(
								_elm_lang$core$Basics_ops['++'],
								validityClass,
								A2(_elm_lang$core$Basics_ops['++'], ' ', htmlClasses))),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$classList(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'disabled', _1: isDisabled},
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _gizra$backoffice$Utils_UserForms$requiredAttr(isRequired),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$id(
										_elm_lang$core$Basics$toString(fieldId)),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					textAreaAttributes)));
	});
var _gizra$backoffice$Utils_UserForms$viewAgreeToTermsAndConditions = F8(
	function (baseUrl, language, form, msg, htmlWrapperClass, isDisabled, isRequired, fieldId) {
		var termsAndConditionsRequirement = A2(
			_elm_lang$html$Html$span,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('form-required'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('* '),
				_1: {ctor: '[]'}
			});
		var termsAndConditionsMessage = A2(
			_gizra$backoffice$Translate$translateHtml,
			language,
			_gizra$backoffice$Translate$AgreedWithTerms(baseUrl));
		var fieldState = A2(_gizra$backoffice$Utils_UserForms$getFieldAsBool, fieldId, form);
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(htmlWrapperClass),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('control-label'),
						_1: {ctor: '[]'}
					},
					A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: A7(_gizra$backoffice$Utils_UserForms$fieldInput, _etaque$elm_form$Form_Input$checkboxInput, isRequired, isDisabled, 'form-checkbox required', fieldId, fieldState, msg),
							_1: {
								ctor: '::',
								_0: termsAndConditionsRequirement,
								_1: {ctor: '[]'}
							}
						},
						A2(
							_elm_lang$core$Basics_ops['++'],
							termsAndConditionsMessage,
							{
								ctor: '::',
								_0: A2(_gizra$backoffice$Utils_UserForms$fieldError, language, fieldState),
								_1: {ctor: '[]'}
							}))),
				_1: {ctor: '[]'}
			});
	});
var _gizra$backoffice$Utils_UserForms$field = F2(
	function (fieldId, validation) {
		return A2(
			_etaque$elm_form$Form_Validate$field,
			_elm_lang$core$Basics$toString(fieldId),
			validation);
	});
var _gizra$backoffice$Utils_UserForms$translateField = F2(
	function (language, fieldId) {
		return A2(
			_gizra$backoffice$Translate$translate,
			language,
			function () {
				var _p6 = fieldId;
				switch (_p6.ctor) {
					case 'FirstName':
						return _gizra$backoffice$Translate$Register(_gizra$backoffice$Translate$FirstName);
					case 'LastName':
						return _gizra$backoffice$Translate$Register(_gizra$backoffice$Translate$LastName);
					case 'Email':
						return _gizra$backoffice$Translate$General(_gizra$backoffice$Translate$Email);
					case 'Password':
						return _gizra$backoffice$Translate$Register(_gizra$backoffice$Translate$Password);
					case 'NewPassword':
						return _gizra$backoffice$Translate$MyAccount(_gizra$backoffice$Translate$EnterNewPassword);
					case 'ConfirmPassword':
						return _gizra$backoffice$Translate$Register(_gizra$backoffice$Translate$ConfirmPassword);
					case 'PhoneNumber':
						return _gizra$backoffice$Translate$Address(_gizra$backoffice$Translate$PhoneNumber);
					case 'AddressLine1':
						return _gizra$backoffice$Translate$Address(_gizra$backoffice$Translate$AddressLine1);
					case 'AddressLine2':
						return _gizra$backoffice$Translate$Address(_gizra$backoffice$Translate$AddressLine2);
					case 'Country':
						return _gizra$backoffice$Translate$Address(_gizra$backoffice$Translate$Country_);
					case 'City':
						return _gizra$backoffice$Translate$Address(_gizra$backoffice$Translate$City);
					case 'State':
						return _gizra$backoffice$Translate$Address(_gizra$backoffice$Translate$State);
					case 'ZipCode':
						return _gizra$backoffice$Translate$Address(_gizra$backoffice$Translate$ZipCode);
					case 'References':
						return _gizra$backoffice$Translate$Register(_gizra$backoffice$Translate$References);
					case 'AcceptTerms':
						return _gizra$backoffice$Translate$Register(_gizra$backoffice$Translate$AcceptTerms);
					case 'SubscribeToNewsLetter':
						return _gizra$backoffice$Translate$Register(_gizra$backoffice$Translate$SubscribeToNewsLetter);
					default:
						return _gizra$backoffice$Translate$Register(_gizra$backoffice$Translate$Language_);
				}
			}());
	});
var _gizra$backoffice$Utils_UserForms$initialFieldsForDebug = {
	ctor: '::',
	_0: {
		ctor: '_Tuple2',
		_0: 'FirstName',
		_1: _etaque$elm_form$Form_Field$string('Foo')
	},
	_1: {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'LastName',
			_1: _etaque$elm_form$Form_Field$string('Bar')
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'Email',
				_1: _etaque$elm_form$Form_Field$string('foo@example.com')
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'PhoneNumber',
					_1: _etaque$elm_form$Form_Field$string('054444444')
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'AddressLine1',
						_1: _etaque$elm_form$Form_Field$string('Brener')
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'Country',
							_1: _etaque$elm_form$Form_Field$string('IL')
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'City',
								_1: _etaque$elm_form$Form_Field$string('TLV')
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'ZipCode',
									_1: _etaque$elm_form$Form_Field$string('0333')
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'SubscribeToNewsLetter',
										_1: _etaque$elm_form$Form_Field$bool(true)
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'Language',
											_1: _etaque$elm_form$Form_Field$string('en')
										},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _gizra$backoffice$Utils_UserForms$NotRequired = {ctor: 'NotRequired'};
var _gizra$backoffice$Utils_UserForms$Required = {ctor: 'Required'};
var _gizra$backoffice$Utils_UserForms$Language_ = {ctor: 'Language_'};
var _gizra$backoffice$Utils_UserForms$validateLanguage = A2(
	_etaque$elm_form$Form_Validate$andThen,
	function (str) {
		var _p7 = str;
		switch (_p7) {
			case 'en':
				return _etaque$elm_form$Form_Validate$succeed(_gizra$backoffice$App_Types$English);
			case 'de':
				return _etaque$elm_form$Form_Validate$succeed(_gizra$backoffice$App_Types$German);
			case 'fr':
				return _etaque$elm_form$Form_Validate$succeed(_gizra$backoffice$App_Types$French);
			case 'he':
				return _etaque$elm_form$Form_Validate$succeed(_gizra$backoffice$App_Types$Hebrew);
			case 'nl':
				return _etaque$elm_form$Form_Validate$succeed(_gizra$backoffice$App_Types$Dutch);
			case 'ru':
				return _etaque$elm_form$Form_Validate$succeed(_gizra$backoffice$App_Types$Russian);
			case 'zh-hans':
				return _etaque$elm_form$Form_Validate$succeed(_gizra$backoffice$App_Types$Chinese);
			default:
				return _etaque$elm_form$Form_Validate$fail(
					_etaque$elm_form$Form_Validate$customError(
						_gizra$backoffice$Translate$Register(_gizra$backoffice$Translate$InvalidLanguage)));
		}
	},
	A2(_gizra$backoffice$Utils_UserForms$field, _gizra$backoffice$Utils_UserForms$Language_, _etaque$elm_form$Form_Validate$string));
var _gizra$backoffice$Utils_UserForms$SubscribeToNewsLetter = {ctor: 'SubscribeToNewsLetter'};
var _gizra$backoffice$Utils_UserForms$AcceptTerms = {ctor: 'AcceptTerms'};
var _gizra$backoffice$Utils_UserForms$References = {ctor: 'References'};
var _gizra$backoffice$Utils_UserForms$ZipCode = {ctor: 'ZipCode'};
var _gizra$backoffice$Utils_UserForms$State = {ctor: 'State'};
var _gizra$backoffice$Utils_UserForms$City = {ctor: 'City'};
var _gizra$backoffice$Utils_UserForms$Country = {ctor: 'Country'};
var _gizra$backoffice$Utils_UserForms$AddressLine2 = {ctor: 'AddressLine2'};
var _gizra$backoffice$Utils_UserForms$AddressLine1 = {ctor: 'AddressLine1'};
var _gizra$backoffice$Utils_UserForms$validateAddress = A7(
	_etaque$elm_form$Form_Validate$map6,
	_gizra$backoffice$Backend_User_Model$Address,
	A2(_gizra$backoffice$Utils_UserForms$field, _gizra$backoffice$Utils_UserForms$Country, _etaque$elm_form$Form_Validate$string),
	A2(_gizra$backoffice$Utils_UserForms$field, _gizra$backoffice$Utils_UserForms$AddressLine1, _etaque$elm_form$Form_Validate$string),
	A2(
		_gizra$backoffice$Utils_UserForms$field,
		_gizra$backoffice$Utils_UserForms$AddressLine2,
		_etaque$elm_form$Form_Validate$maybe(_etaque$elm_form$Form_Validate$string)),
	A2(_gizra$backoffice$Utils_UserForms$field, _gizra$backoffice$Utils_UserForms$City, _etaque$elm_form$Form_Validate$string),
	A2(
		_gizra$backoffice$Utils_UserForms$field,
		_gizra$backoffice$Utils_UserForms$State,
		_etaque$elm_form$Form_Validate$maybe(_etaque$elm_form$Form_Validate$string)),
	A2(_gizra$backoffice$Utils_UserForms$field, _gizra$backoffice$Utils_UserForms$ZipCode, _etaque$elm_form$Form_Validate$string));
var _gizra$backoffice$Utils_UserForms$PhoneNumber = {ctor: 'PhoneNumber'};
var _gizra$backoffice$Utils_UserForms$ConfirmPassword = {ctor: 'ConfirmPassword'};
var _gizra$backoffice$Utils_UserForms$NewPassword = {ctor: 'NewPassword'};
var _gizra$backoffice$Utils_UserForms$Password = {ctor: 'Password'};
var _gizra$backoffice$Utils_UserForms$validateMatchingPasswords = function () {
	var validate = function (password) {
		return A2(
			_gizra$backoffice$Utils_UserForms$field,
			_gizra$backoffice$Utils_UserForms$ConfirmPassword,
			A2(
				_etaque$elm_form$Form_Validate$andThen,
				function (confirmation) {
					return _elm_lang$core$Native_Utils.eq(password, confirmation) ? _etaque$elm_form$Form_Validate$succeed(
						{ctor: '_Tuple0'}) : _etaque$elm_form$Form_Validate$fail(
						_etaque$elm_form$Form_Validate$customError(
							_gizra$backoffice$Translate$Register(_gizra$backoffice$Translate$PasswordsDontMatch)));
				},
				_etaque$elm_form$Form_Validate$string));
	};
	return _etaque$elm_form$Form_Validate$oneOf(
		{
			ctor: '::',
			_0: A2(
				_etaque$elm_form$Form_Validate$andThen,
				validate,
				A2(_gizra$backoffice$Utils_UserForms$field, _gizra$backoffice$Utils_UserForms$Password, _etaque$elm_form$Form_Validate$string)),
			_1: {
				ctor: '::',
				_0: A2(_etaque$elm_form$Form_Validate$andThen, validate, _etaque$elm_form$Form_Validate$emptyString),
				_1: {ctor: '[]'}
			}
		});
}();
var _gizra$backoffice$Utils_UserForms$Email = {ctor: 'Email'};
var _gizra$backoffice$Utils_UserForms$fieldLabel = F4(
	function (language, isRequired, fieldId, className) {
		var emailUsernameMessage = A2(
			_elm_lang$html$Html$span,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('explanation'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(' '),
				_1: {
					ctor: '::',
					_0: A2(
						_gizra$backoffice$Translate$translateText,
						language,
						_gizra$backoffice$Translate$Register(_gizra$backoffice$Translate$WillBeUsedAsYourUsername)),
					_1: {ctor: '[]'}
				}
			});
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$for(
					_elm_lang$core$Basics$toString(fieldId)),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class(className),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					A2(_gizra$backoffice$Utils_UserForms$translateField, language, fieldId)),
				_1: {
					ctor: '::',
					_0: A2(
						_Gizra$elm_essentials$Gizra_Html$showIf,
						_gizra$backoffice$Utils_UserForms$requiredBool(isRequired),
						A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$title(
									A2(
										_gizra$backoffice$Translate$translate,
										language,
										_gizra$backoffice$Translate$Register(_gizra$backoffice$Translate$FieldIsRequired))),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('form-required'),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(' *'),
								_1: {ctor: '[]'}
							})),
					_1: {
						ctor: '::',
						_0: A2(
							_Gizra$elm_essentials$Gizra_Html$showIf,
							_elm_lang$core$Native_Utils.eq(fieldId, _gizra$backoffice$Utils_UserForms$Email),
							emailUsernameMessage),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _gizra$backoffice$Utils_UserForms$viewField = function (language) {
	return function (form) {
		return function (msg) {
			return function (getter) {
				return function (inputTag) {
					return function (htmlWrapperClass) {
						return function (htmlLabelClass) {
							return function (isDisabled) {
								return function (isRequired) {
									return function (fieldId) {
										var fieldState = A2(getter, fieldId, form);
										return _elm_lang$core$Native_Utils.eq(fieldId, _gizra$backoffice$Utils_UserForms$SubscribeToNewsLetter) ? A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class(htmlWrapperClass),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('control-label'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: A7(_gizra$backoffice$Utils_UserForms$fieldInput, inputTag, isRequired, isDisabled, 'form-checkbox required', fieldId, fieldState, msg),
														_1: {
															ctor: '::',
															_0: A2(
																_gizra$backoffice$Translate$translateText,
																language,
																_gizra$backoffice$Translate$Register(_gizra$backoffice$Translate$SubscribeToNewsLetter)),
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											}) : A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class(htmlWrapperClass),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A4(_gizra$backoffice$Utils_UserForms$fieldLabel, language, isRequired, fieldId, htmlLabelClass),
												_1: {
													ctor: '::',
													_0: A7(_gizra$backoffice$Utils_UserForms$fieldInput, inputTag, isRequired, isDisabled, 'text-full form-control form-text required', fieldId, fieldState, msg),
													_1: {
														ctor: '::',
														_0: A2(_gizra$backoffice$Utils_UserForms$fieldError, language, fieldState),
														_1: {ctor: '[]'}
													}
												}
											});
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _gizra$backoffice$Utils_UserForms$textField = F3(
	function (language, form, msg) {
		return A5(_gizra$backoffice$Utils_UserForms$viewField, language, form, msg, _gizra$backoffice$Utils_UserForms$getFieldAsString, _etaque$elm_form$Form_Input$textInput);
	});
var _gizra$backoffice$Utils_UserForms$emailField = F3(
	function (language, form, msg) {
		return A5(_gizra$backoffice$Utils_UserForms$viewField, language, form, msg, _gizra$backoffice$Utils_UserForms$getFieldAsString, _gizra$backoffice$Utils_UserForms$emailInput);
	});
var _gizra$backoffice$Utils_UserForms$passwordField = F3(
	function (language, form, msg) {
		return A5(_gizra$backoffice$Utils_UserForms$viewField, language, form, msg, _gizra$backoffice$Utils_UserForms$getFieldAsString, _etaque$elm_form$Form_Input$passwordInput);
	});
var _gizra$backoffice$Utils_UserForms$phoneField = F3(
	function (language, form, msg) {
		return A5(_gizra$backoffice$Utils_UserForms$viewField, language, form, msg, _gizra$backoffice$Utils_UserForms$getFieldAsString, _gizra$backoffice$Utils_UserForms$phoneInput);
	});
var _gizra$backoffice$Utils_UserForms$textAreaField = F3(
	function (language, form, msg) {
		return A5(_gizra$backoffice$Utils_UserForms$viewField, language, form, msg, _gizra$backoffice$Utils_UserForms$getFieldAsString, _etaque$elm_form$Form_Input$textArea);
	});
var _gizra$backoffice$Utils_UserForms$checkboxField = F3(
	function (language, form, msg) {
		return A5(_gizra$backoffice$Utils_UserForms$viewField, language, form, msg, _gizra$backoffice$Utils_UserForms$getFieldAsBool, _etaque$elm_form$Form_Input$checkboxInput);
	});
var _gizra$backoffice$Utils_UserForms$selectField = F4(
	function (language, form, msg, options) {
		return A5(
			_gizra$backoffice$Utils_UserForms$viewField,
			language,
			form,
			msg,
			_gizra$backoffice$Utils_UserForms$getFieldAsString,
			_etaque$elm_form$Form_Input$selectInput(options));
	});
var _gizra$backoffice$Utils_UserForms$addressField = F3(
	function (language, form, msg) {
		var selectedCountry = function (_) {
			return _.value;
		}(
			A2(
				_etaque$elm_form$Form$getFieldAsString,
				_elm_lang$core$Basics$toString(_gizra$backoffice$Utils_UserForms$Country),
				form));
		var states = A2(_gizra$backoffice$Utils_UserForms$stateOptions, language, selectedCountry);
		return A2(
			_elm_lang$html$Html$fieldset,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$label,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('control-label'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_gizra$backoffice$Translate$translateText,
							language,
							_gizra$backoffice$Translate$Address(_gizra$backoffice$Translate$AddressLabel)),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html$text(' *'),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('form-group'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A9(
								_gizra$backoffice$Utils_UserForms$selectField,
								language,
								form,
								msg,
								_gizra$backoffice$Utils_UserForms$countries(language),
								'input-group',
								'input-group-addon',
								false,
								_gizra$backoffice$Utils_UserForms$Required,
								_gizra$backoffice$Utils_UserForms$Country),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('form-group'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A8(_gizra$backoffice$Utils_UserForms$textField, language, form, msg, 'input-group', 'input-group-addon', false, _gizra$backoffice$Utils_UserForms$Required, _gizra$backoffice$Utils_UserForms$AddressLine1),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('form-group'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A8(_gizra$backoffice$Utils_UserForms$textField, language, form, msg, 'input-group', 'input-group-addon', false, _gizra$backoffice$Utils_UserForms$NotRequired, _gizra$backoffice$Utils_UserForms$AddressLine2),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('form-group'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A8(_gizra$backoffice$Utils_UserForms$textField, language, form, msg, 'input-group', 'input-group-addon', false, _gizra$backoffice$Utils_UserForms$Required, _gizra$backoffice$Utils_UserForms$City),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('form-group'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A9(
												_gizra$backoffice$Utils_UserForms$selectField,
												language,
												form,
												msg,
												states,
												'input-group',
												'input-group-addon',
												_elm_lang$core$Native_Utils.cmp(
													_elm_lang$core$List$length(states),
													1) < 1,
												_gizra$backoffice$Utils_UserForms$NotRequired,
												_gizra$backoffice$Utils_UserForms$State),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('form-group'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A8(_gizra$backoffice$Utils_UserForms$textField, language, form, msg, 'input-group', 'input-group-addon', false, _gizra$backoffice$Utils_UserForms$Required, _gizra$backoffice$Utils_UserForms$ZipCode),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			});
	});
var _gizra$backoffice$Utils_UserForms$languageField = F5(
	function (language, webData, form, msg, isRegisterPage) {
		var selectHtml = function () {
			var _p8 = _krisajenkins$remotedata$RemoteData$toMaybe(webData);
			if (_p8.ctor === 'Just') {
				var languageOptions = A2(
					_elm_lang$core$List$map,
					function (language_) {
						return {
							ctor: '_Tuple2',
							_0: _gizra$backoffice$Translate$languageToCode(language_),
							_1: A2(
								_gizra$backoffice$Translate$translate,
								language,
								_gizra$backoffice$Translate$General(
									_gizra$backoffice$Translate$LanguageName_(language_)))
						};
					},
					A2(
						_elm_lang$core$List$sortWith,
						F2(
							function (a, b) {
								return A2(
									_elm_lang$core$Basics$compare,
									A2(
										_gizra$backoffice$Translate$translate,
										language,
										_gizra$backoffice$Translate$General(
											_gizra$backoffice$Translate$LanguageName_(a))),
									A2(
										_gizra$backoffice$Translate$translate,
										language,
										_gizra$backoffice$Translate$General(
											_gizra$backoffice$Translate$LanguageName_(b))));
							}),
						_p8._0._1.languages));
				var emptyOption = {
					ctor: '_Tuple2',
					_0: '',
					_1: A2(
						_gizra$backoffice$Translate$translate,
						language,
						_gizra$backoffice$Translate$Register(_gizra$backoffice$Translate$SelectLanguage))
				};
				var selectOptions = isRegisterPage ? {ctor: '::', _0: emptyOption, _1: languageOptions} : languageOptions;
				return A9(_gizra$backoffice$Utils_UserForms$selectField, language, form, msg, selectOptions, 'input-group', 'input-group-addon', false, _gizra$backoffice$Utils_UserForms$Required, _gizra$backoffice$Utils_UserForms$Language_);
			} else {
				return A9(
					_gizra$backoffice$Utils_UserForms$selectField,
					language,
					form,
					msg,
					{ctor: '[]'},
					'input-group',
					'input-group-addon',
					false,
					_gizra$backoffice$Utils_UserForms$Required,
					_gizra$backoffice$Utils_UserForms$Language_);
			}
		}();
		return A2(
			_elm_lang$html$Html$fieldset,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('form-group'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: selectHtml,
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _gizra$backoffice$Utils_UserForms$LastName = {ctor: 'LastName'};
var _gizra$backoffice$Utils_UserForms$FirstName = {ctor: 'FirstName'};

var _gizra$backoffice$Pages_MyAccount_Validate$myAccountForm = F9(
	function (firstName, lastName, email, password, phoneNumber, address, language, references, subscribeToNewsLetter) {
		return A9(_gizra$backoffice$Backend_MyAccount_Model$MyAccount, firstName, lastName, email, password, phoneNumber, address, language, references, subscribeToNewsLetter);
	});
var _gizra$backoffice$Pages_MyAccount_Validate$validateMaybeMatchingPasswords = function (maybePassword) {
	return A2(
		_gizra$backoffice$Utils_UserForms$field,
		_gizra$backoffice$Utils_UserForms$ConfirmPassword,
		A2(
			_etaque$elm_form$Form_Validate$andThen,
			function (maybeConfirmation) {
				var _p0 = {ctor: '_Tuple2', _0: maybePassword, _1: maybeConfirmation};
				_v0_2:
				do {
					if (_p0.ctor === '_Tuple2') {
						if (_p0._0.ctor === 'Just') {
							if (_p0._1.ctor === 'Just') {
								var _p1 = _p0._0._0;
								return _elm_lang$core$Native_Utils.eq(_p1, _p0._1._0) ? _etaque$elm_form$Form_Validate$maybe(
									_etaque$elm_form$Form_Validate$succeed(_p1)) : _etaque$elm_form$Form_Validate$fail(
									_etaque$elm_form$Form_Validate$customError(
										_gizra$backoffice$Translate$Register(_gizra$backoffice$Translate$PasswordsDontMatch)));
							} else {
								break _v0_2;
							}
						} else {
							if (_p0._1.ctor === 'Nothing') {
								return _etaque$elm_form$Form_Validate$succeed(_elm_lang$core$Maybe$Nothing);
							} else {
								break _v0_2;
							}
						}
					} else {
						break _v0_2;
					}
				} while(false);
				return _etaque$elm_form$Form_Validate$fail(
					_etaque$elm_form$Form_Validate$customError(
						_gizra$backoffice$Translate$Register(_gizra$backoffice$Translate$PasswordsDontMatch)));
			},
			_etaque$elm_form$Form_Validate$maybe(_etaque$elm_form$Form_Validate$string)));
};
var _gizra$backoffice$Pages_MyAccount_Validate$validateMyAccountForm = A2(
	_etaque$elm_form$Form_Validate$andMap,
	A2(_gizra$backoffice$Utils_UserForms$field, _gizra$backoffice$Utils_UserForms$SubscribeToNewsLetter, _etaque$elm_form$Form_Validate$bool),
	A2(
		_etaque$elm_form$Form_Validate$andMap,
		A2(
			_gizra$backoffice$Utils_UserForms$field,
			_gizra$backoffice$Utils_UserForms$References,
			_etaque$elm_form$Form_Validate$maybe(_etaque$elm_form$Form_Validate$string)),
		A2(
			_etaque$elm_form$Form_Validate$andMap,
			_gizra$backoffice$Utils_UserForms$validateLanguage,
			A2(
				_etaque$elm_form$Form_Validate$andMap,
				_gizra$backoffice$Utils_UserForms$validateAddress,
				A2(
					_etaque$elm_form$Form_Validate$andMap,
					A2(_gizra$backoffice$Utils_UserForms$field, _gizra$backoffice$Utils_UserForms$PhoneNumber, _etaque$elm_form$Form_Validate$string),
					A2(
						_etaque$elm_form$Form_Validate$andMap,
						A2(
							_etaque$elm_form$Form_Validate$andThen,
							_gizra$backoffice$Pages_MyAccount_Validate$validateMaybeMatchingPasswords,
							A2(
								_gizra$backoffice$Utils_UserForms$field,
								_gizra$backoffice$Utils_UserForms$NewPassword,
								_etaque$elm_form$Form_Validate$maybe(_etaque$elm_form$Form_Validate$string))),
						A2(
							_etaque$elm_form$Form_Validate$andMap,
							A2(_gizra$backoffice$Utils_UserForms$field, _gizra$backoffice$Utils_UserForms$Email, _etaque$elm_form$Form_Validate$email),
							A2(
								_etaque$elm_form$Form_Validate$andMap,
								A2(_gizra$backoffice$Utils_UserForms$field, _gizra$backoffice$Utils_UserForms$LastName, _etaque$elm_form$Form_Validate$string),
								A2(
									_etaque$elm_form$Form_Validate$andMap,
									A2(_gizra$backoffice$Utils_UserForms$field, _gizra$backoffice$Utils_UserForms$FirstName, _etaque$elm_form$Form_Validate$string),
									_etaque$elm_form$Form_Validate$succeed(_gizra$backoffice$Pages_MyAccount_Validate$myAccountForm))))))))));

var _gizra$backoffice$Pages_MyAccount_Model$emptyModel = {
	form: A2(
		_etaque$elm_form$Form$initial,
		{ctor: '[]'},
		_gizra$backoffice$Pages_MyAccount_Validate$validateMyAccountForm)
};
var _gizra$backoffice$Pages_MyAccount_Model$Model = function (a) {
	return {form: a};
};
var _gizra$backoffice$Pages_MyAccount_Model$Save = {ctor: 'Save'};
var _gizra$backoffice$Pages_MyAccount_Model$MsgForm = function (a) {
	return {ctor: 'MsgForm', _0: a};
};
var _gizra$backoffice$Pages_MyAccount_Model$InitialFields = {ctor: 'InitialFields'};

var _gizra$backoffice$Pages_MyCredit_Model$SetSelectedAmountRestriction = F3(
	function (a, b, c) {
		return {ctor: 'SetSelectedAmountRestriction', _0: a, _1: b, _2: c};
	});
var _gizra$backoffice$Pages_MyCredit_Model$SetAmountRestrictionInput = F3(
	function (a, b, c) {
		return {ctor: 'SetAmountRestrictionInput', _0: a, _1: b, _2: c};
	});
var _gizra$backoffice$Pages_MyCredit_Model$SaveBidderInfo = F2(
	function (a, b) {
		return {ctor: 'SaveBidderInfo', _0: a, _1: b};
	});
var _gizra$backoffice$Pages_MyCredit_Model$CreditRequestSetAmount = F2(
	function (a, b) {
		return {ctor: 'CreditRequestSetAmount', _0: a, _1: b};
	});
var _gizra$backoffice$Pages_MyCredit_Model$CreditRequestSave = F2(
	function (a, b) {
		return {ctor: 'CreditRequestSave', _0: a, _1: b};
	});

var _gizra$backoffice$Pages_Register_Validate$registrationForm = function (firstName) {
	return function (lastName) {
		return function (email) {
			return function (password) {
				return function (_p1) {
					return function (phoneNumber) {
						return function (address) {
							return function (language) {
								return function (references) {
									return function (subscribeToNewsLetter) {
										return function (_p0) {
											return A9(_gizra$backoffice$Backend_Register_Model$Registration, firstName, lastName, email, password, phoneNumber, address, language, references, subscribeToNewsLetter);
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _gizra$backoffice$Pages_Register_Validate$validateDidAgree = function (checked) {
	return checked ? _etaque$elm_form$Form_Validate$succeed(
		{ctor: '_Tuple0'}) : _etaque$elm_form$Form_Validate$fail(
		_etaque$elm_form$Form_Validate$customError(
			_gizra$backoffice$Translate$Register(_gizra$backoffice$Translate$YouMustAgreeToTheTerms)));
};
var _gizra$backoffice$Pages_Register_Validate$validateRegistrationForm = A2(
	_etaque$elm_form$Form_Validate$andMap,
	A2(
		_gizra$backoffice$Utils_UserForms$field,
		_gizra$backoffice$Utils_UserForms$AcceptTerms,
		A2(_etaque$elm_form$Form_Validate$andThen, _gizra$backoffice$Pages_Register_Validate$validateDidAgree, _etaque$elm_form$Form_Validate$bool)),
	A2(
		_etaque$elm_form$Form_Validate$andMap,
		A2(_gizra$backoffice$Utils_UserForms$field, _gizra$backoffice$Utils_UserForms$SubscribeToNewsLetter, _etaque$elm_form$Form_Validate$bool),
		A2(
			_etaque$elm_form$Form_Validate$andMap,
			A2(
				_gizra$backoffice$Utils_UserForms$field,
				_gizra$backoffice$Utils_UserForms$References,
				_etaque$elm_form$Form_Validate$maybe(_etaque$elm_form$Form_Validate$string)),
			A2(
				_etaque$elm_form$Form_Validate$andMap,
				_gizra$backoffice$Utils_UserForms$validateLanguage,
				A2(
					_etaque$elm_form$Form_Validate$andMap,
					_gizra$backoffice$Utils_UserForms$validateAddress,
					A2(
						_etaque$elm_form$Form_Validate$andMap,
						A2(_gizra$backoffice$Utils_UserForms$field, _gizra$backoffice$Utils_UserForms$PhoneNumber, _etaque$elm_form$Form_Validate$string),
						A2(
							_etaque$elm_form$Form_Validate$andMap,
							_gizra$backoffice$Utils_UserForms$validateMatchingPasswords,
							A2(
								_etaque$elm_form$Form_Validate$andMap,
								A2(_gizra$backoffice$Utils_UserForms$field, _gizra$backoffice$Utils_UserForms$Password, _etaque$elm_form$Form_Validate$string),
								A2(
									_etaque$elm_form$Form_Validate$andMap,
									A2(_gizra$backoffice$Utils_UserForms$field, _gizra$backoffice$Utils_UserForms$Email, _etaque$elm_form$Form_Validate$email),
									A2(
										_etaque$elm_form$Form_Validate$andMap,
										A2(_gizra$backoffice$Utils_UserForms$field, _gizra$backoffice$Utils_UserForms$LastName, _etaque$elm_form$Form_Validate$string),
										A2(
											_etaque$elm_form$Form_Validate$andMap,
											A2(_gizra$backoffice$Utils_UserForms$field, _gizra$backoffice$Utils_UserForms$FirstName, _etaque$elm_form$Form_Validate$string),
											_etaque$elm_form$Form_Validate$succeed(_gizra$backoffice$Pages_Register_Validate$registrationForm))))))))))));

var _gizra$backoffice$Pages_Register_Model$emptyModel = {
	form: A2(
		_etaque$elm_form$Form$initial,
		{ctor: '[]'},
		_gizra$backoffice$Pages_Register_Validate$validateRegistrationForm),
	recaptchaToken: _elm_lang$core$Maybe$Nothing
};
var _gizra$backoffice$Pages_Register_Model$Model = F2(
	function (a, b) {
		return {form: a, recaptchaToken: b};
	});
var _gizra$backoffice$Pages_Register_Model$SetRecaptchaToken = function (a) {
	return {ctor: 'SetRecaptchaToken', _0: a};
};
var _gizra$backoffice$Pages_Register_Model$Save = {ctor: 'Save'};
var _gizra$backoffice$Pages_Register_Model$MsgForm = function (a) {
	return {ctor: 'MsgForm', _0: a};
};

var _gizra$backoffice$Pages_ResetPassword_Model$SetData = function (a) {
	return {ctor: 'SetData', _0: a};
};

var _gizra$backoffice$Pages_UserBlock_Model$emptyModel = {isDropdownExpanded: false};
var _gizra$backoffice$Pages_UserBlock_Model$Model = function (a) {
	return {isDropdownExpanded: a};
};
var _gizra$backoffice$Pages_UserBlock_Model$Logout = {ctor: 'Logout'};
var _gizra$backoffice$Pages_UserBlock_Model$SetDropdownState = function (a) {
	return {ctor: 'SetDropdownState', _0: a};
};
var _gizra$backoffice$Pages_UserBlock_Model$ItemBlock = {ctor: 'ItemBlock'};
var _gizra$backoffice$Pages_UserBlock_Model$Header = {ctor: 'Header'};

var _gizra$backoffice$Pusher_Model$eventNames = {
	ctor: '::',
	_0: 'bidder_info__update',
	_1: {
		ctor: '::',
		_0: 'item__update',
		_1: {
			ctor: '::',
			_0: 'sale__update',
			_1: {ctor: '[]'}
		}
	}
};
var _gizra$backoffice$Pusher_Model$PusherConfig = F3(
	function (a, b, c) {
		return {authEndpoint: a, channelNames: b, eventNames: c};
	});
var _gizra$backoffice$Pusher_Model$PusherError = F2(
	function (a, b) {
		return {code: a, message: b};
	});
var _gizra$backoffice$Pusher_Model$NoOp = {ctor: 'NoOp'};
var _gizra$backoffice$Pusher_Model$ItemUpdate = F3(
	function (a, b, c) {
		return {ctor: 'ItemUpdate', _0: a, _1: b, _2: c};
	});
var _gizra$backoffice$Pusher_Model$ChannelPrivate = {ctor: 'ChannelPrivate'};
var _gizra$backoffice$Pusher_Model$ChannelPublic = {ctor: 'ChannelPublic'};
var _gizra$backoffice$Pusher_Model$Logout = {ctor: 'Logout'};
var _gizra$backoffice$Pusher_Model$Login = function (a) {
	return {ctor: 'Login', _0: a};
};
var _gizra$backoffice$Pusher_Model$HandlePusherEvent = function (a) {
	return {ctor: 'HandlePusherEvent', _0: a};
};
var _gizra$backoffice$Pusher_Model$HandleError = function (a) {
	return {ctor: 'HandleError', _0: a};
};

var _gizra$backoffice$WidgetManager_Model$emptyModel = {widgetIds: _Gizra$elm_all_set$EverySet$empty};
var _gizra$backoffice$WidgetManager_Model$Model = function (a) {
	return {widgetIds: a};
};
var _gizra$backoffice$WidgetManager_Model$UpdateWidgetsOnItemsChange = {ctor: 'UpdateWidgetsOnItemsChange'};
var _gizra$backoffice$WidgetManager_Model$SetWidgetIds = function (a) {
	return {ctor: 'SetWidgetIds', _0: a};
};
var _gizra$backoffice$WidgetManager_Model$SendUserAndDataToOtherWidgets = {ctor: 'SendUserAndDataToOtherWidgets'};
var _gizra$backoffice$WidgetManager_Model$Pusher = {ctor: 'Pusher'};
var _gizra$backoffice$WidgetManager_Model$Restful = {ctor: 'Restful'};
var _gizra$backoffice$WidgetManager_Model$Other = {ctor: 'Other'};
var _gizra$backoffice$WidgetManager_Model$Register = {ctor: 'Register'};
var _gizra$backoffice$WidgetManager_Model$MyCredit = {ctor: 'MyCredit'};
var _gizra$backoffice$WidgetManager_Model$MyBids = {ctor: 'MyBids'};
var _gizra$backoffice$WidgetManager_Model$MyAccount = {ctor: 'MyAccount'};
var _gizra$backoffice$WidgetManager_Model$ItemPreLiveSale = {ctor: 'ItemPreLiveSale'};

var _gizra$backoffice$App_Model$emptyModel = {
	backendUrl: '',
	baseHostUrl: _sporto$erl$Erl$new,
	hostUrl: _sporto$erl$Erl$new,
	circuitBidUrl: '',
	errors: {ctor: '[]'},
	currency: _gizra$backoffice$Currency_Model$USD,
	language: _gizra$backoffice$App_Types$Hebrew,
	siteShortName: '',
	activePage: _gizra$backoffice$App_Types$NotFound,
	currentDate: _elm_lang$core$Date$fromTime(0),
	pageForgotPassword: _gizra$backoffice$Pages_ForgotPassword_Model$emptyModel,
	pageItemPreLiveSale: _gizra$backoffice$Pages_ItemPreLiveSale_Model$emptyModel,
	pageLogin: _gizra$backoffice$Pages_Login_Model$emptyModel,
	pageMyAccount: _gizra$backoffice$Pages_MyAccount_Model$emptyModel,
	pageRegister: _gizra$backoffice$Pages_Register_Model$emptyModel,
	pageUserBlock: _gizra$backoffice$Pages_UserBlock_Model$emptyModel,
	widgetManager: _gizra$backoffice$WidgetManager_Model$emptyModel,
	userAndData: _Gizra$elm_restful$Restful_Login$loggedOut(_gizra$backoffice$Backend_Model$emptyAnonymousModelBackend)
};
var _gizra$backoffice$App_Model$Flags = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return {accessToken: a, backendUrl: b, hostUrl: c, baseHostUrl: d, circuitBidUrl: e, currency: f, language: g, page: h, siteShortName: i, saleUuid: j, itemUuid: k, bidServerAuthStatusRequiredByBo: l};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _gizra$backoffice$App_Model$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return function (q) {
																	return function (r) {
																		return {backendUrl: a, baseHostUrl: b, hostUrl: c, circuitBidUrl: d, errors: e, currency: f, language: g, siteShortName: h, activePage: i, currentDate: j, pageForgotPassword: k, pageItemPreLiveSale: l, pageLogin: m, pageMyAccount: n, pageRegister: o, pageUserBlock: p, widgetManager: q, userAndData: r};
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _gizra$backoffice$App_Model$TryOneTimeLogin = F3(
	function (a, b, c) {
		return {ctor: 'TryOneTimeLogin', _0: a, _1: b, _2: c};
	});
var _gizra$backoffice$App_Model$TryLogin = F2(
	function (a, b) {
		return {ctor: 'TryLogin', _0: a, _1: b};
	});
var _gizra$backoffice$App_Model$SetUser = function (a) {
	return {ctor: 'SetUser', _0: a};
};
var _gizra$backoffice$App_Model$SetCurrentDate = function (a) {
	return {ctor: 'SetCurrentDate', _0: a};
};
var _gizra$backoffice$App_Model$SetModelBackendItems = function (a) {
	return {ctor: 'SetModelBackendItems', _0: a};
};
var _gizra$backoffice$App_Model$SetActivePage = function (a) {
	return {ctor: 'SetActivePage', _0: a};
};
var _gizra$backoffice$App_Model$Reload = {ctor: 'Reload'};
var _gizra$backoffice$App_Model$MsgWidgetManager = function (a) {
	return {ctor: 'MsgWidgetManager', _0: a};
};
var _gizra$backoffice$App_Model$MsgPusher = function (a) {
	return {ctor: 'MsgPusher', _0: a};
};
var _gizra$backoffice$App_Model$MsgPagesUserBlock = function (a) {
	return {ctor: 'MsgPagesUserBlock', _0: a};
};
var _gizra$backoffice$App_Model$MsgPagesResetPassword = function (a) {
	return {ctor: 'MsgPagesResetPassword', _0: a};
};
var _gizra$backoffice$App_Model$MsgPagesRegister = function (a) {
	return {ctor: 'MsgPagesRegister', _0: a};
};
var _gizra$backoffice$App_Model$MsgPagesMyCredit = function (a) {
	return {ctor: 'MsgPagesMyCredit', _0: a};
};
var _gizra$backoffice$App_Model$MsgPagesMyAccount = function (a) {
	return {ctor: 'MsgPagesMyAccount', _0: a};
};
var _gizra$backoffice$App_Model$MsgPagesLogin = function (a) {
	return {ctor: 'MsgPagesLogin', _0: a};
};
var _gizra$backoffice$App_Model$MsgPagesItemPreLiveSale = function (a) {
	return {ctor: 'MsgPagesItemPreLiveSale', _0: a};
};
var _gizra$backoffice$App_Model$MsgPagesForgotPassword = function (a) {
	return {ctor: 'MsgPagesForgotPassword', _0: a};
};
var _gizra$backoffice$App_Model$MsgLogin = function (a) {
	return {ctor: 'MsgLogin', _0: a};
};
var _gizra$backoffice$App_Model$MsgBackend = function (a) {
	return {ctor: 'MsgBackend', _0: a};
};
var _gizra$backoffice$App_Model$Logout = {ctor: 'Logout'};
var _gizra$backoffice$App_Model$GetAuthenticatedUserAndData = function (a) {
	return {ctor: 'GetAuthenticatedUserAndData', _0: a};
};
var _gizra$backoffice$App_Model$GetAnonymousUserAndData = function (a) {
	return {ctor: 'GetAnonymousUserAndData', _0: a};
};

var _gizra$backoffice$Pages_ItemPreLiveSale_Fetch$fetch = F4(
	function (language, siteShortName, modelBackend, model) {
		return {ctor: '[]'};
	});

var _gizra$backoffice$Pages_MyAccount_Fetch$fetch = F4(
	function (language, siteShortName, modelBackend, model) {
		var siteFetch = {
			ctor: '::',
			_0: A2(
				_Gizra$elm_essentials$Gizra_WebData$whenNotAsked,
				_gizra$backoffice$Backend_Model$MsgSite(
					_gizra$backoffice$Backend_Site_Model$Fetch(
						_Gizra$elm_restful$Restful_Endpoint$toEntityUuid(siteShortName))),
				modelBackend.site),
			_1: {ctor: '[]'}
		};
		return A2(_elm_lang$core$List$filterMap, _elm_lang$core$Basics$identity, siteFetch);
	});

var _gizra$backoffice$Pages_Register_Fetch$fetch = F4(
	function (language, siteShortName, modelBackend, model) {
		var siteFetch = {
			ctor: '::',
			_0: A2(
				_Gizra$elm_essentials$Gizra_WebData$whenNotAsked,
				_gizra$backoffice$Backend_Model$MsgSite(
					_gizra$backoffice$Backend_Site_Model$Fetch(
						_Gizra$elm_restful$Restful_Endpoint$toEntityUuid(siteShortName))),
				modelBackend.site),
			_1: {ctor: '[]'}
		};
		return A2(_elm_lang$core$List$filterMap, _elm_lang$core$Basics$identity, siteFetch);
	});

var _gizra$backoffice$Utils_WebData$whenNotAsked = F2(
	function (msg, data) {
		var _p0 = data;
		if (_p0.ctor === 'NotAsked') {
			return _elm_lang$core$Maybe$Just(msg);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _gizra$backoffice$Utils_WebData$getError = function (remoteData) {
	var _p1 = remoteData;
	if (_p1.ctor === 'Failure') {
		return _elm_lang$core$Maybe$Just(_p1._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _gizra$backoffice$Utils_WebData$sendWithHandler = F3(
	function (decoder, tagger, builder) {
		return A2(
			_lukewestby$elm_http_builder$HttpBuilder$send,
			tagger,
			A2(
				_lukewestby$elm_http_builder$HttpBuilder$withExpect,
				_elm_lang$http$Http$expectJson(decoder),
				builder));
	});
var _gizra$backoffice$Utils_WebData$whenSuccess = F3(
	function (remoteData, $default, func) {
		var _p2 = remoteData;
		if (_p2.ctor === 'Success') {
			return func(_p2._0);
		} else {
			return $default;
		}
	});
var _gizra$backoffice$Utils_WebData$decodeTitle = A2(_elm_lang$core$Json_Decode$field, 'title', _elm_lang$core$Json_Decode$string);
var _gizra$backoffice$Utils_WebData$errorString = F2(
	function (language, error) {
		var _p3 = error;
		switch (_p3.ctor) {
			case 'BadUrl':
				return A2(
					_gizra$backoffice$Translate$translate,
					language,
					_gizra$backoffice$Translate$HttpError(_gizra$backoffice$Translate$ErrorBadUrl));
			case 'BadPayload':
				return A2(
					_gizra$backoffice$Translate$translate,
					language,
					_gizra$backoffice$Translate$HttpError(
						_gizra$backoffice$Translate$ErrorBadPayload(_p3._0)));
			case 'NetworkError':
				return A2(
					_gizra$backoffice$Translate$translate,
					language,
					_gizra$backoffice$Translate$HttpError(_gizra$backoffice$Translate$ErrorNetworkError));
			case 'Timeout':
				return A2(
					_gizra$backoffice$Translate$translate,
					language,
					_gizra$backoffice$Translate$HttpError(_gizra$backoffice$Translate$ErrorTimeout));
			default:
				var _p5 = _p3._0;
				return A2(
					_gizra$backoffice$Translate$translate,
					language,
					_gizra$backoffice$Translate$HttpError(
						_gizra$backoffice$Translate$ErrorBadStatus(
							function () {
								var _p4 = A2(_elm_lang$core$Json_Decode$decodeString, _gizra$backoffice$Utils_WebData$decodeTitle, _p5.body);
								if (_p4.ctor === 'Ok') {
									return _p4._0;
								} else {
									return _p5.status.message;
								}
							}())));
		}
	});
var _gizra$backoffice$Utils_WebData$viewError = F2(
	function (language, error) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('alert alert-danger popups error'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					A2(_gizra$backoffice$Utils_WebData$errorString, language, error)),
				_1: {ctor: '[]'}
			});
	});
var _gizra$backoffice$Utils_WebData$editableWebDataViewMaybeError = F2(
	function (language, editable) {
		var _p6 = _Gizra$elm_editable_webdata$Editable_WebData$toWebData(editable);
		if (_p6.ctor === 'Failure') {
			return A2(_gizra$backoffice$Utils_WebData$viewError, language, _p6._0);
		} else {
			return _Gizra$elm_essentials$Gizra_Html$emptyNode;
		}
	});

var _gizra$backoffice$Error_Utils$pusherError = F3(
	function (module_, location, error) {
		return _elm_lang$core$Maybe$Just(
			A3(
				_gizra$backoffice$Error_Model$Error,
				module_,
				location,
				_gizra$backoffice$Error_Model$Pusher(error)));
	});
var _gizra$backoffice$Error_Utils$plainError = F3(
	function (module_, location, error) {
		return _elm_lang$core$Maybe$Just(
			A3(
				_gizra$backoffice$Error_Model$Error,
				module_,
				location,
				_gizra$backoffice$Error_Model$Plain(error)));
	});
var _gizra$backoffice$Error_Utils$httpError = F3(
	function (module_, location, error) {
		return _elm_lang$core$Maybe$Just(
			A3(
				_gizra$backoffice$Error_Model$Error,
				module_,
				location,
				_gizra$backoffice$Error_Model$Http(error)));
	});
var _gizra$backoffice$Error_Utils$noError = _elm_lang$core$Maybe$Nothing;
var _gizra$backoffice$Error_Utils$maybeHttpError = F3(
	function (webdata, module_, location) {
		var _p0 = webdata;
		if (_p0.ctor === 'Failure') {
			return A3(_gizra$backoffice$Error_Utils$httpError, module_, location, _p0._0);
		} else {
			return _gizra$backoffice$Error_Utils$noError;
		}
	});
var _gizra$backoffice$Error_Utils$debugLog = function (error) {
	var id = A2(
		_elm_lang$core$Basics_ops['++'],
		error.module_,
		A2(_elm_lang$core$Basics_ops['++'], '.', error.location));
	var message = function () {
		var _p1 = error.error;
		switch (_p1.ctor) {
			case 'Http':
				return A2(_gizra$backoffice$Utils_WebData$errorString, _gizra$backoffice$App_Types$English, _p1._0);
			case 'Plain':
				return _p1._0;
			default:
				var messageStr = A3(
					_elm_community$maybe_extra$Maybe_Extra$unwrap,
					'',
					function (msg) {
						return A2(_elm_lang$core$Basics_ops['++'], ': ', msg);
					},
					_p1._0.message);
				var codeStr = A3(_elm_community$maybe_extra$Maybe_Extra$unwrap, '[unknown code]', _elm_lang$core$Basics$toString, _p1._0.code);
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'Pusher error ',
					A2(_elm_lang$core$Basics_ops['++'], codeStr, messageStr));
		}
	}();
	return A2(_elm_lang$core$Debug$log, id, message);
};

var _gizra$backoffice$App_Utils$getRecaptchaId = 'g-recaptcha';
var _gizra$backoffice$App_Utils$getSaleUuidFromActivePage = function (page) {
	var _p0 = page;
	switch (_p0.ctor) {
		case 'ItemPreLiveSale':
			return _p0._0;
		case 'MyBids':
			return _p0._0;
		case 'MyCredit':
			return _p0._0;
		case 'WidgetManager':
			return _p0._0;
		case 'UserBlock':
			return _p0._0;
		default:
			return _elm_lang$core$Maybe$Nothing;
	}
};
var _gizra$backoffice$App_Utils$getPageFromString = F3(
	function (page, maybeSaleUuid, maybeItemUuid) {
		var itemUuid = A2(_elm_lang$core$Maybe$map, _Gizra$elm_restful$Restful_Endpoint$toEntityUuid, maybeItemUuid);
		var saleUuid = A2(_elm_lang$core$Maybe$map, _Gizra$elm_restful$Restful_Endpoint$toEntityUuid, maybeSaleUuid);
		var _p1 = page;
		switch (_p1) {
			case 'item_pre_live_sale':
				return A2(_gizra$backoffice$App_Types$ItemPreLiveSale, saleUuid, itemUuid);
			case 'forgot_password':
				return _gizra$backoffice$App_Types$ForgotPassword;
			case 'login':
				return _gizra$backoffice$App_Types$LoginPage;
			case 'my_account':
				return _gizra$backoffice$App_Types$MyAccount;
			case 'my_bids':
				return _gizra$backoffice$App_Types$MyBids(saleUuid);
			case 'my_credit':
				return _gizra$backoffice$App_Types$MyCredit(saleUuid);
			case 'register':
				return _gizra$backoffice$App_Types$Register;
			case 'reset_password':
				return _gizra$backoffice$App_Types$ResetPassword(_elm_lang$core$Maybe$Nothing);
			case 'widget_manager':
				return _gizra$backoffice$App_Types$WidgetManager(saleUuid);
			case 'user_block':
				return _gizra$backoffice$App_Types$UserBlock(saleUuid);
			default:
				return _gizra$backoffice$App_Types$NotFound;
		}
	});
var _gizra$backoffice$App_Utils$handleErrors = F2(
	function (maybeError, model) {
		var errors = A3(
			_elm_community$maybe_extra$Maybe_Extra$unwrap,
			model.errors,
			function (error) {
				var _p2 = _gizra$backoffice$Error_Utils$debugLog(error);
				return {ctor: '::', _0: error, _1: model.errors};
			},
			maybeError);
		return _elm_lang$core$Native_Utils.update(
			model,
			{errors: errors});
	});
var _gizra$backoffice$App_Utils$updateSubModel = F6(
	function (subMsg, subModel, updateFunc, modelUpdateFunc, msg, model) {
		var _p3 = A2(updateFunc, subMsg, subModel);
		var val = _p3._0;
		var subCmds = _p3._1;
		var maybeError = _p3._2;
		var appMsgs = _p3._3;
		var appCmds = _elm_lang$core$List$isEmpty(appMsgs) ? _elm_lang$core$Platform_Cmd$none : _elm_lang$core$Platform_Cmd$batch(
			A2(
				_elm_lang$core$List$map,
				function (msg) {
					return A2(
						_elm_lang$core$Task$perform,
						_elm_lang$core$Basics$identity,
						_elm_lang$core$Task$succeed(msg));
				},
				appMsgs));
		var modelUpdatedWithError = A2(_gizra$backoffice$App_Utils$handleErrors, maybeError, model);
		return {
			ctor: '_Tuple2',
			_0: A2(modelUpdateFunc, val, modelUpdatedWithError),
			_1: _elm_lang$core$Platform_Cmd$batch(
				{
					ctor: '::',
					_0: A2(_elm_lang$core$Platform_Cmd$map, msg, subCmds),
					_1: {
						ctor: '::',
						_0: appCmds,
						_1: {ctor: '[]'}
					}
				})
		};
	});
var _gizra$backoffice$App_Utils$updateSubModelWithNoModel = F4(
	function (subMsg, updateFunc, msg, model) {
		var _p4 = updateFunc(subMsg);
		var subCmds = _p4._0;
		var maybeError = _p4._1;
		var appMsgs = _p4._2;
		var appCmds = _elm_lang$core$List$isEmpty(appMsgs) ? _elm_lang$core$Platform_Cmd$none : _elm_lang$core$Platform_Cmd$batch(
			A2(
				_elm_lang$core$List$map,
				function (msg) {
					return A2(
						_elm_lang$core$Task$perform,
						_elm_lang$core$Basics$identity,
						_elm_lang$core$Task$succeed(msg));
				},
				appMsgs));
		var modelUpdatedWithError = A2(_gizra$backoffice$App_Utils$handleErrors, maybeError, model);
		return {
			ctor: '_Tuple2',
			_0: modelUpdatedWithError,
			_1: _elm_lang$core$Platform_Cmd$batch(
				{
					ctor: '::',
					_0: A2(_elm_lang$core$Platform_Cmd$map, msg, subCmds),
					_1: {
						ctor: '::',
						_0: appCmds,
						_1: {ctor: '[]'}
					}
				})
		};
	});

var _gizra$backoffice$Backend_StaticItem_Utils$getStaticUrl = F5(
	function (language, baseUrl, saleRevision, sessionDelta, sessionIndex) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			baseUrl,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'/',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(saleRevision),
					A2(
						_elm_lang$core$Basics_ops['++'],
						'/session',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(sessionDelta),
							A2(
								_elm_lang$core$Basics_ops['++'],
								'-batch',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(sessionIndex),
									A2(
										_elm_lang$core$Basics_ops['++'],
										'-',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_gizra$backoffice$Translate$languageToCode(language),
											'.json')))))))));
	});
var _gizra$backoffice$Backend_StaticItem_Utils$getSessionStaticUrls = F3(
	function (language, sale, _p0) {
		var _p1 = _p0;
		var _p2 = _p1._1;
		return A2(
			_elm_lang$core$List$map,
			function (sessionIndex) {
				return {
					ctor: '_Tuple2',
					_0: {ctor: '_Tuple2', _0: _p1._0, _1: sessionIndex},
					_1: A5(_gizra$backoffice$Backend_StaticItem_Utils$getStaticUrl, language, sale.baseUrl, sale.revision, _p2.delta, sessionIndex)
				};
			},
			A2(_elm_lang$core$List$range, 0, _p2.batchCount - 1));
	});
var _gizra$backoffice$Backend_StaticItem_Utils$getStaticUrls = F2(
	function (language, sale) {
		return A3(
			_Gizra$elm_dictlist$EveryDictList$foldl,
			F3(
				function (sessionId, session, accum) {
					return A2(
						_elm_lang$core$List$append,
						accum,
						A3(
							_gizra$backoffice$Backend_StaticItem_Utils$getSessionStaticUrls,
							language,
							sale,
							{ctor: '_Tuple2', _0: sessionId, _1: session}));
				}),
			{ctor: '[]'},
			sale.sessions);
	});

var _gizra$backoffice$WidgetManager_Utils$getItemUuids = function (model) {
	return A3(
		_Gizra$elm_all_set$EverySet$foldl,
		F2(
			function (_p0, accum) {
				var _p1 = _p0;
				var _p2 = _p1._0;
				if (_p2.ctor === 'ItemPreLiveSale') {
					return {
						ctor: '::',
						_0: _Gizra$elm_restful$Restful_Endpoint$toEntityUuid(_p1._1),
						_1: accum
					};
				} else {
					return accum;
				}
			}),
		{ctor: '[]'},
		model.widgetIds);
};
var _gizra$backoffice$WidgetManager_Utils$getUuidsExcludingPages = F2(
	function (excluded, model) {
		return A3(
			_Gizra$elm_all_set$EverySet$foldl,
			F2(
				function (_p3, accum) {
					var _p4 = _p3;
					return A2(_elm_lang$core$List$member, _p4._0, excluded) ? accum : {ctor: '::', _0: _p4._1, _1: accum};
				}),
			{ctor: '[]'},
			model.widgetIds);
	});
var _gizra$backoffice$WidgetManager_Utils$getUuids = function (model) {
	return A3(
		_Gizra$elm_all_set$EverySet$foldl,
		F2(
			function (_p5, accum) {
				var _p6 = _p5;
				return {ctor: '::', _0: _p6._1, _1: accum};
			}),
		{ctor: '[]'},
		model.widgetIds);
};
var _gizra$backoffice$WidgetManager_Utils$isMyCreditPage = function (model) {
	return A3(
		_Gizra$elm_all_set$EverySet$foldl,
		F2(
			function (_p7, accum) {
				var _p8 = _p7;
				return accum ? accum : _elm_lang$core$Native_Utils.eq(_p8._0, _gizra$backoffice$WidgetManager_Model$MyCredit);
			}),
		false,
		model.widgetIds);
};
var _gizra$backoffice$WidgetManager_Utils$isMyBidsPage = function (model) {
	return A3(
		_Gizra$elm_all_set$EverySet$foldl,
		F2(
			function (_p9, accum) {
				var _p10 = _p9;
				return accum ? accum : _elm_lang$core$Native_Utils.eq(_p10._0, _gizra$backoffice$WidgetManager_Model$MyBids);
			}),
		false,
		model.widgetIds);
};
var _gizra$backoffice$WidgetManager_Utils$isItemPreLiveSalePage = function (model) {
	return A3(
		_Gizra$elm_all_set$EverySet$foldl,
		F2(
			function (_p11, accum) {
				var _p12 = _p11;
				if (accum) {
					return accum;
				} else {
					var _p13 = _p12._0;
					if (_p13.ctor === 'ItemPreLiveSale') {
						return true;
					} else {
						return false;
					}
				}
			}),
		false,
		model.widgetIds);
};

var _gizra$backoffice$WidgetManager_Fetch$fetchSaleAndItems = F4(
	function (saleUuid, siteShortName, modelBackend, model) {
		var itemUuids = _gizra$backoffice$WidgetManager_Utils$getItemUuids(model);
		var itemsPager = _elm_lang$core$List$isEmpty(itemUuids) ? {ctor: '[]'} : A2(
			_gizra$backoffice$PaginatedData$fetchAll,
			{ctor: '_Tuple2', _0: saleUuid, _1: modelBackend.items},
			function (pageNumber) {
				return _gizra$backoffice$Backend_Model$MsgItem(
					A3(_gizra$backoffice$Backend_Item_Model$FetchItemsByItemUuid, saleUuid, itemUuids, pageNumber));
			});
		var sale = A2(
			_elm_lang$core$Maybe$withDefault,
			_krisajenkins$remotedata$RemoteData$NotAsked,
			A2(_eeue56$elm_all_dict$EveryDict$get, saleUuid, modelBackend.sales));
		var saleFetch = {
			ctor: '::',
			_0: A2(
				_Gizra$elm_essentials$Gizra_WebData$whenNotAsked,
				_gizra$backoffice$Backend_Model$MsgSale(
					_gizra$backoffice$Backend_Sale_Model$Fetch(saleUuid)),
				sale),
			_1: {ctor: '[]'}
		};
		var siteFetch = {
			ctor: '::',
			_0: A2(
				_Gizra$elm_essentials$Gizra_WebData$whenNotAsked,
				_gizra$backoffice$Backend_Model$MsgSite(
					_gizra$backoffice$Backend_Site_Model$Fetch(
						_Gizra$elm_restful$Restful_Endpoint$toEntityUuid(siteShortName))),
				modelBackend.site),
			_1: {ctor: '[]'}
		};
		return A2(
			_elm_lang$core$Basics_ops['++'],
			siteFetch,
			A2(_elm_lang$core$Basics_ops['++'], saleFetch, itemsPager));
	});
var _gizra$backoffice$WidgetManager_Fetch$fetchAnonymous = F4(
	function (language, _p0, modelBackend, model) {
		var _p1 = _p0;
		return A2(
			_elm_lang$core$List$filterMap,
			_elm_lang$core$Basics$identity,
			A4(_gizra$backoffice$WidgetManager_Fetch$fetchSaleAndItems, _p1._1, _p1._0, modelBackend, model));
	});
var _gizra$backoffice$WidgetManager_Fetch$fetch = F4(
	function (language, _p2, modelBackend, model) {
		var _p3 = _p2;
		var _p8 = _p3._1;
		var saleAndItems = A4(_gizra$backoffice$WidgetManager_Fetch$fetchSaleAndItems, _p8, _p3._0, modelBackend, model);
		var creditRequests = (_gizra$backoffice$WidgetManager_Utils$isMyCreditPage(model) || _gizra$backoffice$WidgetManager_Utils$isItemPreLiveSalePage(model)) ? {
			ctor: '::',
			_0: A2(
				_Gizra$elm_essentials$Gizra_WebData$whenNotAsked,
				_gizra$backoffice$Backend_Model$MsgCreditRequest(
					_gizra$backoffice$Backend_CreditRequest_Model$Fetch(_p8)),
				modelBackend.creditRequests),
			_1: {ctor: '[]'}
		} : {ctor: '[]'};
		var itemsWithMyBids = _gizra$backoffice$WidgetManager_Utils$isMyBidsPage(model) ? A2(
			_gizra$backoffice$PaginatedData$fetchAll,
			{ctor: '_Tuple2', _0: _p8, _1: modelBackend.items},
			function (pageNumber) {
				return _gizra$backoffice$Backend_Model$MsgItem(
					A2(_gizra$backoffice$Backend_Item_Model$FetchItemsWithMyBids, _p8, pageNumber));
			}) : {ctor: '[]'};
		var bidderInfo = A2(
			_gizra$backoffice$PaginatedData$fetchAll,
			{ctor: '_Tuple2', _0: _p8, _1: modelBackend.bidderInfo},
			function (pageNumber) {
				return _gizra$backoffice$Backend_Model$MsgBidderInfo(
					A2(_gizra$backoffice$Backend_BidderInfo_Model$Fetch, _p8, pageNumber));
			});
		var sale = A2(
			_elm_lang$core$Maybe$withDefault,
			_krisajenkins$remotedata$RemoteData$NotAsked,
			A2(_eeue56$elm_all_dict$EveryDict$get, _p8, modelBackend.sales));
		var staticItems = _gizra$backoffice$WidgetManager_Utils$isMyBidsPage(model) ? A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '[]'},
			A2(
				_elm_lang$core$Maybe$andThen,
				function (sale) {
					return _elm_lang$core$Maybe$Just(
						A2(
							_elm_lang$core$List$map,
							function (_p4) {
								var _p5 = _p4;
								return _elm_lang$core$Maybe$Just(
									_gizra$backoffice$Backend_Model$MsgStaticItem(
										A2(_gizra$backoffice$Backend_StaticItem_Model$Fetch, _p5._0, _p5._1)));
							},
							A2(
								_elm_lang$core$List$filter,
								function (_p6) {
									var _p7 = _p6;
									return _krisajenkins$remotedata$RemoteData$isNotAsked(
										A2(
											_elm_lang$core$Maybe$withDefault,
											_krisajenkins$remotedata$RemoteData$NotAsked,
											A2(_eeue56$elm_all_dict$EveryDict$get, _p7._0, modelBackend.staticItems.pager)));
								},
								A2(_gizra$backoffice$Backend_StaticItem_Utils$getStaticUrls, language, sale))));
				},
				_krisajenkins$remotedata$RemoteData$toMaybe(sale))) : {ctor: '[]'};
		return A2(
			_elm_lang$core$List$filterMap,
			_elm_lang$core$Basics$identity,
			A2(
				_elm_lang$core$List$append,
				staticItems,
				A2(
					_elm_lang$core$List$append,
					creditRequests,
					A2(
						_elm_lang$core$List$append,
						bidderInfo,
						A2(_elm_lang$core$List$append, itemsWithMyBids, saleAndItems)))));
	});

var _gizra$backoffice$App_Fetch$fetch = function (model) {
	var _p0 = {ctor: '_Tuple2', _0: model.activePage, _1: model.userAndData};
	_v0_5:
	do {
		if (_p0.ctor === '_Tuple2') {
			if (_p0._1.ctor === 'Authenticated') {
				switch (_p0._0.ctor) {
					case 'MyAccount':
						return A2(
							_elm_lang$core$List$map,
							function (subMsg) {
								return _gizra$backoffice$App_Model$MsgBackend(subMsg);
							},
							A4(_gizra$backoffice$Pages_MyAccount_Fetch$fetch, model.language, model.siteShortName, _p0._1._0.data, model.widgetManager));
					case 'ItemPreLiveSale':
						return A2(
							_elm_lang$core$List$map,
							function (subMsg) {
								return _gizra$backoffice$App_Model$MsgBackend(subMsg);
							},
							A4(_gizra$backoffice$Pages_ItemPreLiveSale_Fetch$fetch, model.language, model.siteShortName, _p0._1._0.data, model.widgetManager));
					case 'WidgetManager':
						if (_p0._0._0.ctor === 'Just') {
							return A2(
								_elm_lang$core$List$map,
								function (subMsg) {
									return _gizra$backoffice$App_Model$MsgBackend(subMsg);
								},
								A4(
									_gizra$backoffice$WidgetManager_Fetch$fetch,
									model.language,
									{ctor: '_Tuple2', _0: model.siteShortName, _1: _p0._0._0._0},
									_p0._1._0.data,
									model.widgetManager));
						} else {
							break _v0_5;
						}
					default:
						break _v0_5;
				}
			} else {
				switch (_p0._0.ctor) {
					case 'Register':
						return A2(
							_elm_lang$core$List$map,
							function (subMsg) {
								return _gizra$backoffice$App_Model$MsgBackend(subMsg);
							},
							A4(_gizra$backoffice$Pages_Register_Fetch$fetch, model.language, model.siteShortName, _p0._1._0.data, model.widgetManager));
					case 'WidgetManager':
						if (_p0._0._0.ctor === 'Just') {
							return A2(
								_elm_lang$core$List$map,
								function (subMsg) {
									return _gizra$backoffice$App_Model$MsgBackend(subMsg);
								},
								A4(
									_gizra$backoffice$WidgetManager_Fetch$fetchAnonymous,
									model.language,
									{ctor: '_Tuple2', _0: model.siteShortName, _1: _p0._0._0._0},
									_p0._1._0.data,
									model.widgetManager));
						} else {
							break _v0_5;
						}
					default:
						break _v0_5;
				}
			}
		} else {
			break _v0_5;
		}
	} while(false);
	return {ctor: '[]'};
};

var _gizra$backoffice$Backend_BidServerAuthStatusRequiredByBo_Encoder$encodeBidServerAuthStatusRequiredByBo = function (login) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'uuid',
				_1: _Gizra$elm_restful$Restful_Endpoint$encodeEntityUuid(login.credentials.user.uuid)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'access_token',
					_1: _elm_lang$core$Json_Encode$string(login.credentials.accessToken)
				},
				_1: {ctor: '[]'}
			}
		});
};

var _gizra$backoffice$Backend_BidServerAuthStatusRequiredByBo_Endpoint$customBackend = A2(
	_Gizra$elm_restful$Restful_Endpoint$withCountDecoder,
	_elm_lang$core$Json_Decode$succeed(0),
	A3(
		_Gizra$elm_restful$Restful_Endpoint$withItems,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Basics$always(
			_elm_lang$core$Json_Decode$succeed(
				{ctor: '[]'})),
		_Gizra$elm_restful$Restful_Endpoint$backend));
var _gizra$backoffice$Backend_BidServerAuthStatusRequiredByBo_Endpoint$endpoint = function () {
	var unitDecoder = _elm_lang$core$Json_Decode$succeed(
		{ctor: '_Tuple0'});
	return A2(
		_Gizra$elm_restful$Restful_Endpoint$withCreatedEncoder,
		_gizra$backoffice$Backend_BidServerAuthStatusRequiredByBo_Encoder$encodeBidServerAuthStatusRequiredByBo,
		A2(
			_Gizra$elm_restful$Restful_Endpoint$withValueEncoder,
			_elm_lang$core$Basics$always(
				_elm_lang$core$Json_Encode$object(
					{ctor: '[]'})),
			A4(_Gizra$elm_restful$Restful_Endpoint$endpoint, 'api/bid-server-auth-session', unitDecoder, unitDecoder, _gizra$backoffice$Backend_BidServerAuthStatusRequiredByBo_Endpoint$customBackend)));
}();

var _gizra$backoffice$Backend_Utils$fetchAnon = F8(
	function (backendUrl, key, endpoint, params, tagger, dict, modelFunc, model) {
		var ops = _Gizra$elm_restful$Restful_Endpoint$applyBackendUrl(backendUrl);
		var existingFetched = A2(
			_elm_lang$core$Maybe$withDefault,
			_krisajenkins$remotedata$RemoteData$Loading,
			A2(_eeue56$elm_all_dict$EveryDict$get, key, dict));
		var updatedFetched = A3(_eeue56$elm_all_dict$EveryDict$insert, key, existingFetched, dict);
		return {
			ctor: '_Tuple4',
			_0: A2(modelFunc, model, updatedFetched),
			_1: A2(
				_Gizra$elm_restful$Restful_Endpoint$toCmd,
				function (_p0) {
					return tagger(
						A2(
							_elm_lang$core$Result$map,
							function (query) {
								return {ctor: '_Tuple2', _0: query.items, _1: query.count};
							},
							_p0));
				},
				A2(ops.select, endpoint, params)),
			_2: _gizra$backoffice$Error_Utils$noError,
			_3: {ctor: '[]'}
		};
	});
var _gizra$backoffice$Backend_Utils$fetch = F8(
	function (login, key, endpoint, params, tagger, dict, modelFunc, model) {
		var ops = A2(
			_Gizra$elm_restful$Restful_Endpoint$applyAccessToken,
			login.credentials.accessToken,
			_Gizra$elm_restful$Restful_Endpoint$applyBackendUrl(login.credentials.backendUrl));
		var existingFetched = A2(
			_elm_lang$core$Maybe$withDefault,
			_krisajenkins$remotedata$RemoteData$Loading,
			A2(_eeue56$elm_all_dict$EveryDict$get, key, dict));
		var updatedFetched = A3(_eeue56$elm_all_dict$EveryDict$insert, key, existingFetched, dict);
		return {
			ctor: '_Tuple4',
			_0: A2(modelFunc, model, updatedFetched),
			_1: A2(
				_Gizra$elm_restful$Restful_Endpoint$toCmd,
				function (_p1) {
					return tagger(
						A2(
							_elm_lang$core$Result$map,
							function (query) {
								return {ctor: '_Tuple2', _0: query.items, _1: query.count};
							},
							_p1));
				},
				A2(ops.select, endpoint, params)),
			_2: _gizra$backoffice$Error_Utils$noError,
			_3: {ctor: '[]'}
		};
	});
var _gizra$backoffice$Backend_Utils$updateAnonymousSubModel = F5(
	function (subMsg, updateFunc, msg, model, userAndData) {
		var _p2 = A2(updateFunc, subMsg, model);
		var modelUpdated = _p2._0;
		var subCmds = _p2._1;
		var maybeError = _p2._2;
		var appMsgs = _p2._3;
		return {
			ctor: '_Tuple4',
			_0: A2(
				_Gizra$elm_restful$Restful_Login$mapAnonymousData,
				_elm_lang$core$Basics$always(modelUpdated),
				userAndData),
			_1: A2(_elm_lang$core$Platform_Cmd$map, msg, subCmds),
			_2: maybeError,
			_3: appMsgs
		};
	});
var _gizra$backoffice$Backend_Utils$updateSubModel = F5(
	function (subMsg, updateFunc, msg, model, userAndData) {
		var _p3 = A2(updateFunc, subMsg, model);
		var modelUpdated = _p3._0;
		var subCmds = _p3._1;
		var maybeError = _p3._2;
		var appMsgs = _p3._3;
		return {
			ctor: '_Tuple4',
			_0: A2(
				_Gizra$elm_restful$Restful_Login$mapAuthenticatedData,
				_elm_lang$core$Basics$always(modelUpdated),
				userAndData),
			_1: A2(_elm_lang$core$Platform_Cmd$map, msg, subCmds),
			_2: maybeError,
			_3: appMsgs
		};
	});

var _gizra$backoffice$Backend_BidServerAuthStatusRequiredByBo_Update$update = F4(
	function (baseHostUrl, login, msg, model) {
		var ops = _Gizra$elm_restful$Restful_Endpoint$applyBackendUrl(baseHostUrl);
		var noChange = {
			ctor: '_Tuple4',
			_0: model,
			_1: _elm_lang$core$Platform_Cmd$none,
			_2: _gizra$backoffice$Error_Utils$noError,
			_3: {ctor: '[]'}
		};
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'HandleLogout':
				var _p1 = _p0._0;
				var appMsgs = _krisajenkins$remotedata$RemoteData$isSuccess(_p1) ? {
					ctor: '::',
					_0: _gizra$backoffice$App_Model$Logout,
					_1: {ctor: '[]'}
				} : {ctor: '[]'};
				return {
					ctor: '_Tuple4',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							bidServerAuthStatusRequiredByBo: _gizra$backoffice$Backend_BidServerAuthStatusRequiredByBo_Model$LogingOut(_p1)
						}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: A3(_gizra$backoffice$Error_Utils$maybeHttpError, _p1, 'Backend.BidServerAuthStatusRequiredByBo.Update', 'HandleLogout'),
					_3: appMsgs
				};
			case 'HandleSave':
				var _p2 = _p0._0;
				var appMsgs = _krisajenkins$remotedata$RemoteData$isSuccess(_p2) ? {
					ctor: '::',
					_0: _gizra$backoffice$App_Model$Reload,
					_1: {ctor: '[]'}
				} : {ctor: '[]'};
				return {
					ctor: '_Tuple4',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							bidServerAuthStatusRequiredByBo: _gizra$backoffice$Backend_BidServerAuthStatusRequiredByBo_Model$Required(_p2)
						}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: A3(_gizra$backoffice$Error_Utils$maybeHttpError, _p2, 'Backend.BidServerAuthStatusRequiredByBo.Update', 'HandleSave'),
					_3: appMsgs
				};
			case 'Logout':
				var _p3 = model.bidServerAuthStatusRequiredByBo;
				if ((_p3.ctor === 'LogingOut') && (_p3._0.ctor === 'Loading')) {
					return noChange;
				} else {
					var cmd = A2(
						_Gizra$elm_restful$Restful_Endpoint$toCmd,
						function (_p4) {
							return _gizra$backoffice$Backend_BidServerAuthStatusRequiredByBo_Model$HandleLogout(
								A2(
									_krisajenkins$remotedata$RemoteData$map,
									_elm_lang$core$Basics$always(
										{ctor: '_Tuple0'}),
									_krisajenkins$remotedata$RemoteData$fromResult(_p4)));
						},
						A2(
							ops.select,
							_gizra$backoffice$Backend_BidServerAuthStatusRequiredByBo_Endpoint$endpoint,
							{ctor: '_Tuple0'}));
					return {
						ctor: '_Tuple4',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								bidServerAuthStatusRequiredByBo: _gizra$backoffice$Backend_BidServerAuthStatusRequiredByBo_Model$LogingOut(_krisajenkins$remotedata$RemoteData$Loading)
							}),
						_1: cmd,
						_2: _gizra$backoffice$Error_Utils$noError,
						_3: {ctor: '[]'}
					};
				}
			default:
				var cmd = A2(
					_Gizra$elm_restful$Restful_Endpoint$toCmd,
					function (_p5) {
						return _gizra$backoffice$Backend_BidServerAuthStatusRequiredByBo_Model$HandleSave(
							A2(
								_krisajenkins$remotedata$RemoteData$map,
								_elm_lang$core$Basics$always(
									{ctor: '_Tuple0'}),
								_krisajenkins$remotedata$RemoteData$fromResult(_p5)));
					},
					A2(ops.post, _gizra$backoffice$Backend_BidServerAuthStatusRequiredByBo_Endpoint$endpoint, login));
				return {
					ctor: '_Tuple4',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							bidServerAuthStatusRequiredByBo: _gizra$backoffice$Backend_BidServerAuthStatusRequiredByBo_Model$Required(_krisajenkins$remotedata$RemoteData$Loading)
						}),
					_1: cmd,
					_2: _gizra$backoffice$Error_Utils$noError,
					_3: {ctor: '[]'}
				};
		}
	});

var _gizra$backoffice$Backend_BidderInfo_Endpoint$endpoint = A2(
	_Gizra$elm_restful$Restful_Endpoint$withParamsEncoder,
	_gizra$backoffice$Backend_BidderInfo_Encoder$encodeBidderInfoParams,
	A2(
		_Gizra$elm_restful$Restful_Endpoint$withValueEncoder,
		_gizra$backoffice$Backend_BidderInfo_Encoder$encodeBidderInfo,
		A2(_Gizra$elm_restful$Restful_Endpoint$drupalEndpoint, 'api/bidder_ids', _gizra$backoffice$Backend_BidderInfo_Decoder$decodeBidderInfo)));

var _gizra$backoffice$Backend_BidderInfo_Utils$isCreditUnlimited = F2(
	function (amountRestrictionType, bidderInfo) {
		var _p0 = A2(_eeue56$elm_all_dict$EveryDict$get, amountRestrictionType, bidderInfo.amountRestrictions);
		if ((_p0.ctor === 'Just') && (_p0._0.ctor === 'Unlimited')) {
			return true;
		} else {
			return false;
		}
	});
var _gizra$backoffice$Backend_BidderInfo_Utils$getNumber = function (entity) {
	var _p1 = entity.bidderNumber;
	switch (_p1.ctor) {
		case 'External':
			return _p1._0;
		case 'Floor':
			return _p1._0;
		case 'FloorByAgent':
			return _p1._0;
		case 'Mail':
			return _p1._0;
		case 'Phone':
			return _p1._0;
		default:
			return _p1._0;
	}
};
var _gizra$backoffice$Backend_BidderInfo_Utils$isMail = function (entity) {
	var _p2 = entity.bidderNumber;
	if (_p2.ctor === 'Mail') {
		return true;
	} else {
		return false;
	}
};
var _gizra$backoffice$Backend_BidderInfo_Utils$isWebsite = function (entity) {
	var _p3 = entity.bidderNumber;
	if (_p3.ctor === 'Website') {
		return true;
	} else {
		return false;
	}
};
var _gizra$backoffice$Backend_BidderInfo_Utils$isPhone = function (entity) {
	var _p4 = entity.bidderNumber;
	if (_p4.ctor === 'Phone') {
		return true;
	} else {
		return false;
	}
};
var _gizra$backoffice$Backend_BidderInfo_Utils$isFloorByAgent = function (entity) {
	var _p5 = entity.bidderNumber;
	if (_p5.ctor === 'FloorByAgent') {
		return true;
	} else {
		return false;
	}
};
var _gizra$backoffice$Backend_BidderInfo_Utils$getMailAndWebsiteBidderInfoEditables = F2(
	function (login, saleUuid) {
		return A2(
			_elm_lang$core$List$sortWith,
			F2(
				function (_p7, _p6) {
					var _p8 = _p7;
					var _p9 = _p6;
					var getVal = function (editable) {
						return _gizra$backoffice$Backend_BidderInfo_Utils$getNumber(
							_stoeffel$editable$Editable$value(
								_Gizra$elm_editable_webdata$Editable_WebData$toEditable(editable)));
					};
					return A2(
						_elm_lang$core$Basics$compare,
						getVal(_p8._1),
						getVal(_p9._1));
				}),
			A2(
				_elm_lang$core$List$filter,
				function (_p10) {
					var _p11 = _p10;
					var entity = _stoeffel$editable$Editable$value(
						_Gizra$elm_editable_webdata$Editable_WebData$toEditable(_p11._1));
					return _gizra$backoffice$Backend_BidderInfo_Utils$isWebsite(entity) || _gizra$backoffice$Backend_BidderInfo_Utils$isMail(entity);
				},
				_Gizra$elm_dictlist$EveryDictList$toList(
					A2(_gizra$backoffice$PaginatedData$getAll, saleUuid, login.data.bidderInfo))));
	});
var _gizra$backoffice$Backend_BidderInfo_Utils$getBidderInfoEditable = F3(
	function (login, saleUuid, bidderInfoId) {
		return A3(_gizra$backoffice$PaginatedData$get, saleUuid, bidderInfoId, login.data.bidderInfo);
	});
var _gizra$backoffice$Backend_BidderInfo_Utils$getBidderInfo = F3(
	function (login, saleUuid, bidderInfoId) {
		return A2(
			_elm_lang$core$Maybe$andThen,
			function (editable) {
				return _elm_lang$core$Maybe$Just(
					_stoeffel$editable$Editable$value(
						_Gizra$elm_editable_webdata$Editable_WebData$toEditable(editable)));
			},
			A3(_gizra$backoffice$Backend_BidderInfo_Utils$getBidderInfoEditable, login, saleUuid, bidderInfoId));
	});
var _gizra$backoffice$Backend_BidderInfo_Utils$getWebsiteBidderInfo = F2(
	function (login, saleUuid) {
		return A2(
			_elm_lang$core$Maybe$andThen,
			function (bidderInfoId) {
				return A3(_gizra$backoffice$Backend_BidderInfo_Utils$getBidderInfo, login, saleUuid, bidderInfoId);
			},
			A2(_eeue56$elm_all_dict$EveryDict$get, saleUuid, login.credentials.user.websiteBidderInfo));
	});
var _gizra$backoffice$Backend_BidderInfo_Utils$getByBidderNumber = F3(
	function (login, saleUuid, bidderNumber) {
		return A2(
			_elm_lang$core$Maybe$andThen,
			function (bidderInfoId) {
				return A3(_gizra$backoffice$Backend_BidderInfo_Utils$getBidderInfo, login, saleUuid, bidderInfoId);
			},
			A2(_elm_lang$core$Dict$get, bidderNumber, login.data.bidderInfoByBidderNumber));
	});
var _gizra$backoffice$Backend_BidderInfo_Utils$insertBidderInfoByBidderNumber = F2(
	function (identifier, dict) {
		var existingData = A2(
			_elm_lang$core$Maybe$withDefault,
			_krisajenkins$remotedata$RemoteData$NotAsked,
			A2(_eeue56$elm_all_dict$EveryDict$get, identifier, dict));
		var existingDataAndPager = A2(
			_elm_lang$core$Maybe$withDefault,
			_gizra$backoffice$PaginatedData$emptyPaginatedData,
			_krisajenkins$remotedata$RemoteData$toMaybe(existingData));
		return A3(
			_Gizra$elm_dictlist$EveryDictList$foldl,
			F3(
				function (entityId, editable, accum) {
					var entity = _stoeffel$editable$Editable$value(
						_Gizra$elm_editable_webdata$Editable_WebData$toEditable(editable));
					var number = _gizra$backoffice$Backend_BidderInfo_Utils$getNumber(entity);
					return A3(_elm_lang$core$Dict$insert, number, entityId, accum);
				}),
			_elm_lang$core$Dict$empty,
			existingDataAndPager.data);
	});

var _gizra$backoffice$Backend_BidderInfo_Update$update = F3(
	function (login, msg, model) {
		var ops = A2(
			_Gizra$elm_restful$Restful_Endpoint$applyAccessToken,
			login.credentials.accessToken,
			_Gizra$elm_restful$Restful_Endpoint$applyBackendUrl(login.credentials.backendUrl));
		var noChange = {
			ctor: '_Tuple4',
			_0: model,
			_1: _elm_lang$core$Platform_Cmd$none,
			_2: _gizra$backoffice$Error_Utils$noError,
			_3: {ctor: '[]'}
		};
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'Fetch':
				var _p3 = _p0._1;
				var _p2 = _p0._0;
				var params = {saleUuid: _p2, userUuid: login.credentials.user.uuid};
				return A8(
					_gizra$backoffice$Backend_Utils$fetch,
					login,
					_p2,
					_gizra$backoffice$Backend_BidderInfo_Endpoint$endpoint,
					params,
					function (_p1) {
						return A3(
							_gizra$backoffice$Backend_BidderInfo_Model$HandleFetch,
							_p2,
							_p3,
							A2(
								_krisajenkins$remotedata$RemoteData$map,
								_elm_lang$core$Tuple$mapFirst(_Gizra$elm_dictlist$EveryDictList$fromList),
								_krisajenkins$remotedata$RemoteData$fromResult(_p1)));
					},
					model.bidderInfo,
					F2(
						function (model, dict) {
							return _elm_lang$core$Native_Utils.update(
								model,
								{
									bidderInfo: A3(_gizra$backoffice$PaginatedData$setPageAsLoading, _p2, _p3, dict)
								});
						}),
					model);
			case 'HandleFetch':
				var _p10 = _p0._2;
				var _p9 = _p0._0;
				var appMsgs = {
					ctor: '::',
					_0: _gizra$backoffice$App_Model$MsgWidgetManager(_gizra$backoffice$WidgetManager_Model$SendUserAndDataToOtherWidgets),
					_1: {ctor: '[]'}
				};
				var updated = A8(
					_gizra$backoffice$PaginatedData$insertMultiple,
					_p9,
					_p0._1,
					_p10,
					_Gizra$elm_restful$Restful_Endpoint$toEntityId,
					function (_p4) {
						var _p5 = _p4;
						return _elm_lang$core$Maybe$Just(_p5._0);
					},
					F3(
						function (itemId, item, accum) {
							return A3(
								_Gizra$elm_dictlist$EveryDictList$insert,
								itemId,
								_Gizra$elm_editable_webdata$Editable_WebData$create(item),
								accum);
						}),
					F3(
						function (itemId, item, _p6) {
							var _p7 = _p6;
							var _p8 = _p7._0;
							return {
								ctor: '_Tuple2',
								_0: _p8,
								_1: A4(
									_Gizra$elm_dictlist$EveryDictList$insertAfter,
									_p8,
									itemId,
									_Gizra$elm_editable_webdata$Editable_WebData$create(item),
									_p7._1)
							};
						}),
					model.bidderInfo);
				var bidderInfoByBidderNumber = A2(_gizra$backoffice$Backend_BidderInfo_Utils$insertBidderInfoByBidderNumber, _p9, updated);
				return {
					ctor: '_Tuple4',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{bidderInfo: updated, bidderInfoByBidderNumber: bidderInfoByBidderNumber}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: A3(_gizra$backoffice$Error_Utils$maybeHttpError, _p10, 'Backend.BidderInfo.Update', 'HandleFetch'),
					_3: appMsgs
				};
			case 'HandleSave':
				var _p14 = _p0._2;
				var _p13 = _p0._0;
				var _p12 = _p0._1;
				var updated = function () {
					var _p11 = _p14;
					switch (_p11.ctor) {
						case 'Success':
							return A4(
								_gizra$backoffice$PaginatedData$update,
								_p13,
								_p12,
								_elm_lang$core$Basics$always(
									A2(
										_Gizra$elm_editable_webdata$Editable_WebData$state,
										_krisajenkins$remotedata$RemoteData$Success(
											{ctor: '_Tuple0'}),
										_Gizra$elm_editable_webdata$Editable_WebData$create(_p11._0))),
								model.bidderInfo);
						case 'Failure':
							return A4(
								_gizra$backoffice$PaginatedData$update,
								_p13,
								_p12,
								function (editable) {
									return A2(
										_Gizra$elm_editable_webdata$Editable_WebData$state,
										_krisajenkins$remotedata$RemoteData$Failure(_p11._0),
										editable);
								},
								model.bidderInfo);
						default:
							return model.bidderInfo;
					}
				}();
				return {
					ctor: '_Tuple4',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{bidderInfo: updated}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: A3(_gizra$backoffice$Error_Utils$maybeHttpError, _p14, 'Backend.BidderInfo.Update', 'HandleSave'),
					_3: {ctor: '[]'}
				};
			case 'Save':
				var _p17 = _p0._0;
				var _p16 = _p0._1;
				return A3(
					_elm_community$maybe_extra$Maybe_Extra$unwrap,
					noChange,
					function (editable) {
						var updated = A4(
							_gizra$backoffice$PaginatedData$update,
							_p17,
							_p16,
							function (editable) {
								return A2(_Gizra$elm_editable_webdata$Editable_WebData$state, _krisajenkins$remotedata$RemoteData$Loading, editable);
							},
							model.bidderInfo);
						var entity = _stoeffel$editable$Editable$value(
							_Gizra$elm_editable_webdata$Editable_WebData$toEditable(editable));
						var cmd = A2(
							_Gizra$elm_restful$Restful_Endpoint$toCmd,
							function (_p15) {
								return A3(
									_gizra$backoffice$Backend_BidderInfo_Model$HandleSave,
									_p17,
									_p16,
									_krisajenkins$remotedata$RemoteData$fromResult(_p15));
							},
							A3(ops.patchFull, _gizra$backoffice$Backend_BidderInfo_Endpoint$endpoint, _p16, entity));
						return {
							ctor: '_Tuple4',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{bidderInfo: updated}),
							_1: cmd,
							_2: _gizra$backoffice$Error_Utils$noError,
							_3: {ctor: '[]'}
						};
					},
					A3(_gizra$backoffice$Backend_BidderInfo_Utils$getBidderInfoEditable, login, _p17, _p16));
			case 'SetSelectedAmountRestriction':
				var updated = A4(
					_gizra$backoffice$PaginatedData$update,
					_p0._0,
					_p0._1,
					function (editable) {
						return A2(
							_Gizra$elm_editable_webdata$Editable_WebData$map,
							function (_p18) {
								return A2(
									_stoeffel$editable$Editable$map,
									function (val) {
										return _elm_lang$core$Native_Utils.update(
											val,
											{
												amountRestrictions: A3(_eeue56$elm_all_dict$EveryDict$insert, _gizra$backoffice$Backend_BidderInfo_Model$MaxBid, _p0._2, val.amountRestrictions)
											});
									},
									_stoeffel$editable$Editable$edit(_p18));
							},
							editable);
					},
					model.bidderInfo);
				return {
					ctor: '_Tuple4',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{bidderInfo: updated}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _gizra$backoffice$Error_Utils$noError,
					_3: {ctor: '[]'}
				};
			default:
				var _p22 = _p0._0;
				var _p21 = _p0._1._0;
				var _p20 = _p0._1._1;
				var existing = A3(_gizra$backoffice$PaginatedData$get, _p22, _p21, model.bidderInfo);
				var modelUpdated = function () {
					var _p19 = existing;
					if (_p19.ctor === 'Nothing') {
						var updated = A3(
							_gizra$backoffice$PaginatedData$insertDirectlyFromClient,
							_p22,
							{
								ctor: '_Tuple2',
								_0: _p21,
								_1: _Gizra$elm_editable_webdata$Editable_WebData$create(_p20)
							},
							model.bidderInfo);
						var bidderInfoByBidderNumber = A2(_gizra$backoffice$Backend_BidderInfo_Utils$insertBidderInfoByBidderNumber, _p22, updated);
						return _elm_lang$core$Native_Utils.update(
							model,
							{bidderInfo: updated, bidderInfoByBidderNumber: bidderInfoByBidderNumber});
					} else {
						var updated = A4(
							_gizra$backoffice$PaginatedData$update,
							_p22,
							_p21,
							_elm_lang$core$Basics$always(
								_Gizra$elm_editable_webdata$Editable_WebData$create(_p20)),
							model.bidderInfo);
						return _elm_lang$core$Native_Utils.update(
							model,
							{bidderInfo: updated});
					}
				}();
				return {
					ctor: '_Tuple4',
					_0: modelUpdated,
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _gizra$backoffice$Error_Utils$noError,
					_3: {ctor: '[]'}
				};
		}
	});

var _gizra$backoffice$Backend_CreditRequest_Endpoint$endpoint = A2(
	_Gizra$elm_restful$Restful_Endpoint$withParamsEncoder,
	_gizra$backoffice$Backend_CreditRequest_Encoder$encodeCreditRequestParams,
	A2(
		_Gizra$elm_restful$Restful_Endpoint$withCreatedEncoder,
		_gizra$backoffice$Backend_CreditRequest_Encoder$encodeCreateInfo,
		A2(
			_Gizra$elm_restful$Restful_Endpoint$withValueEncoder,
			_gizra$backoffice$Backend_CreditRequest_Encoder$encodeCreditRequest,
			A2(_Gizra$elm_restful$Restful_Endpoint$drupalEndpoint, 'api/credit_requests', _gizra$backoffice$Backend_CreditRequest_Decoder$decodeCreditRequest))));

var _gizra$backoffice$Backend_CreditRequest_Utils$get = F2(
	function (storageKey, webData) {
		return A2(
			_elm_lang$core$Maybe$andThen,
			function (dict) {
				return A2(_eeue56$elm_all_dict$EveryDict$get, storageKey, dict);
			},
			_krisajenkins$remotedata$RemoteData$toMaybe(webData));
	});
var _gizra$backoffice$Backend_CreditRequest_Utils$isPending = function (editable) {
	var value = _stoeffel$editable$Editable$value(
		_Gizra$elm_editable_webdata$Editable_WebData$toEditable(editable));
	return _elm_lang$core$Native_Utils.eq(value.status, _gizra$backoffice$Backend_CreditRequest_Model$Pending);
};
var _gizra$backoffice$Backend_CreditRequest_Utils$getPendingOrNew = F2(
	function (userUuid, dict) {
		var maybeNew = A2(
			_elm_lang$core$Maybe$andThen,
			function (val) {
				return _elm_lang$core$Maybe$Just(
					{ctor: '_Tuple2', _0: _Gizra$elm_storage_key$StorageKey$New, _1: val});
			},
			A2(_eeue56$elm_all_dict$EveryDict$get, _Gizra$elm_storage_key$StorageKey$New, dict));
		var maybeExisting = A3(
			_eeue56$elm_all_dict$EveryDict$foldl,
			F3(
				function (storageKey, editable, accum) {
					return _elm_community$maybe_extra$Maybe_Extra$isJust(accum) ? accum : (_gizra$backoffice$Backend_CreditRequest_Utils$isPending(editable) ? _elm_lang$core$Maybe$Just(
						{ctor: '_Tuple2', _0: storageKey, _1: editable}) : accum);
				}),
			_elm_lang$core$Maybe$Nothing,
			dict);
		return A2(
			_elm_lang$core$Maybe$withDefault,
			{
				ctor: '_Tuple2',
				_0: _Gizra$elm_storage_key$StorageKey$New,
				_1: _Gizra$elm_editable_webdata$Editable_WebData$create(
					_gizra$backoffice$Backend_CreditRequest_Model$emptyCreditRequest(userUuid))
			},
			A2(_elm_community$maybe_extra$Maybe_Extra$or, maybeExisting, maybeNew));
	});
var _gizra$backoffice$Backend_CreditRequest_Utils$update = F3(
	function (storageKey, func, dict) {
		return A2(
			_krisajenkins$remotedata$RemoteData$map,
			function (dict) {
				var _p0 = A2(_eeue56$elm_all_dict$EveryDict$get, storageKey, dict);
				if (_p0.ctor === 'Nothing') {
					return dict;
				} else {
					return A3(
						_eeue56$elm_all_dict$EveryDict$insert,
						storageKey,
						func(_p0._0),
						dict);
				}
			},
			dict);
	});
var _gizra$backoffice$Backend_CreditRequest_Utils$insert = F3(
	function (userUuid, webData, dict) {
		var _p1 = webData;
		_v1_2:
		do {
			switch (_p1.ctor) {
				case 'Success':
					if (_p1._0.ctor === '_Tuple2') {
						var existingItems = A2(
							_elm_lang$core$Maybe$withDefault,
							_eeue56$elm_all_dict$EveryDict$empty,
							_krisajenkins$remotedata$RemoteData$toMaybe(dict));
						var existingItemsUpdated = A3(
							_eeue56$elm_all_dict$EveryDict$foldl,
							_eeue56$elm_all_dict$EveryDict$insert,
							A2(
								_eeue56$elm_all_dict$EveryDict$singleton,
								_Gizra$elm_storage_key$StorageKey$Existing(_p1._0._0),
								_Gizra$elm_editable_webdata$Editable_WebData$create(_p1._0._1)),
							existingItems);
						var itemsFinal = A2(_eeue56$elm_all_dict$EveryDict$member, _Gizra$elm_storage_key$StorageKey$New, existingItemsUpdated) ? existingItemsUpdated : A3(
							_eeue56$elm_all_dict$EveryDict$insert,
							_Gizra$elm_storage_key$StorageKey$New,
							_Gizra$elm_editable_webdata$Editable_WebData$create(
								_gizra$backoffice$Backend_CreditRequest_Model$emptyCreditRequest(userUuid)),
							existingItemsUpdated);
						return _krisajenkins$remotedata$RemoteData$Success(itemsFinal);
					} else {
						break _v1_2;
					}
				case 'Failure':
					return _krisajenkins$remotedata$RemoteData$Failure(_p1._0);
				default:
					break _v1_2;
			}
		} while(false);
		return dict;
	});
var _gizra$backoffice$Backend_CreditRequest_Utils$insertMultiple = F3(
	function (userUuid, webData, dict) {
		var _p2 = webData;
		_v2_2:
		do {
			switch (_p2.ctor) {
				case 'Success':
					if (_p2._0.ctor === '_Tuple2') {
						var _p3 = _p2._0._0;
						return _eeue56$elm_all_dict$EveryDict$isEmpty(_p3) ? _krisajenkins$remotedata$RemoteData$Success(_eeue56$elm_all_dict$EveryDict$empty) : A3(
							_eeue56$elm_all_dict$EveryDict$foldl,
							F3(
								function (key, value, accum) {
									return A3(
										_gizra$backoffice$Backend_CreditRequest_Utils$insert,
										userUuid,
										_krisajenkins$remotedata$RemoteData$Success(
											{ctor: '_Tuple2', _0: key, _1: value}),
										accum);
								}),
							dict,
							_p3);
					} else {
						break _v2_2;
					}
				case 'Failure':
					return _krisajenkins$remotedata$RemoteData$Failure(_p2._0);
				default:
					break _v2_2;
			}
		} while(false);
		return dict;
	});

var _gizra$backoffice$Backend_CreditRequest_Update$update = F3(
	function (login, msg, model) {
		var userUuid = login.credentials.user.uuid;
		var ops = A2(
			_Gizra$elm_restful$Restful_Endpoint$applyAccessToken,
			login.credentials.accessToken,
			_Gizra$elm_restful$Restful_Endpoint$applyBackendUrl(login.credentials.backendUrl));
		var noChange = {
			ctor: '_Tuple4',
			_0: model,
			_1: _elm_lang$core$Platform_Cmd$none,
			_2: _gizra$backoffice$Error_Utils$noError,
			_3: {ctor: '[]'}
		};
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'Fetch':
				var params = {saleUuid: _p0._0, userUuid: login.credentials.user.uuid};
				var cmd = A2(
					_Gizra$elm_restful$Restful_Endpoint$toCmd,
					function (_p1) {
						return _gizra$backoffice$Backend_CreditRequest_Model$HandleFetch(
							A2(
								_krisajenkins$remotedata$RemoteData$map,
								function (result) {
									return {
										ctor: '_Tuple2',
										_0: _eeue56$elm_all_dict$EveryDict$fromList(result.items),
										_1: result.count
									};
								},
								_krisajenkins$remotedata$RemoteData$fromResult(_p1)));
					},
					A2(ops.select, _gizra$backoffice$Backend_CreditRequest_Endpoint$endpoint, params));
				return {
					ctor: '_Tuple4',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{creditRequests: _krisajenkins$remotedata$RemoteData$Loading}),
					_1: cmd,
					_2: _gizra$backoffice$Error_Utils$noError,
					_3: {ctor: '[]'}
				};
			case 'HandleCreate':
				var _p2 = _p0._0;
				return {
					ctor: '_Tuple4',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							creditRequests: A3(_gizra$backoffice$Backend_CreditRequest_Utils$insert, userUuid, _p2, model.creditRequests)
						}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: A3(_gizra$backoffice$Error_Utils$maybeHttpError, _p2, 'Backend.CreditRequest.Update', 'HandleCreate'),
					_3: {ctor: '[]'}
				};
			case 'HandleFetch':
				var _p3 = _p0._0;
				var appMsgs = {
					ctor: '::',
					_0: _gizra$backoffice$App_Model$MsgWidgetManager(_gizra$backoffice$WidgetManager_Model$SendUserAndDataToOtherWidgets),
					_1: {ctor: '[]'}
				};
				return {
					ctor: '_Tuple4',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							creditRequests: A3(_gizra$backoffice$Backend_CreditRequest_Utils$insertMultiple, userUuid, _p3, model.creditRequests)
						}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: A3(_gizra$backoffice$Error_Utils$maybeHttpError, _p3, 'Backend.CreditRequest.Update', 'HandleFetch'),
					_3: appMsgs
				};
			case 'HandleUpdate':
				var _p6 = _p0._1;
				var _p5 = _p0._0;
				var updated = function () {
					var _p4 = _p6;
					switch (_p4.ctor) {
						case 'Success':
							return A3(
								_gizra$backoffice$Backend_CreditRequest_Utils$update,
								_p5,
								_elm_lang$core$Basics$always(
									_Gizra$elm_editable_webdata$Editable_WebData$create(_p4._0)),
								model.creditRequests);
						case 'Failure':
							return A3(
								_gizra$backoffice$Backend_CreditRequest_Utils$update,
								_p5,
								function (editable) {
									return A2(
										_Gizra$elm_editable_webdata$Editable_WebData$state,
										_krisajenkins$remotedata$RemoteData$Failure(_p4._0),
										editable);
								},
								model.creditRequests);
						default:
							return model.creditRequests;
					}
				}();
				return {
					ctor: '_Tuple4',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{creditRequests: updated}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: A3(_gizra$backoffice$Error_Utils$maybeHttpError, _p6, 'Backend.CreditRequest.Update', 'HandleUpdate'),
					_3: {ctor: '[]'}
				};
			case 'Save':
				var _p11 = _p0._1;
				return A3(
					_elm_community$maybe_extra$Maybe_Extra$unwrap,
					noChange,
					function (editable) {
						var value = _stoeffel$editable$Editable$value(
							_Gizra$elm_editable_webdata$Editable_WebData$toEditable(editable));
						var _p7 = value.credit;
						if (_p7.ctor === 'Regular') {
							var cmd = function () {
								var _p8 = _p11;
								if (_p8.ctor === 'New') {
									var createInfo = {saleUuid: _p0._0, userUuid: userUuid, amount: _p7._0};
									return A2(
										_Gizra$elm_restful$Restful_Endpoint$toCmd,
										function (_p9) {
											return _gizra$backoffice$Backend_CreditRequest_Model$HandleCreate(
												_krisajenkins$remotedata$RemoteData$fromResult(_p9));
										},
										A2(ops.post, _gizra$backoffice$Backend_CreditRequest_Endpoint$endpoint, createInfo));
								} else {
									return A2(
										_Gizra$elm_restful$Restful_Endpoint$toCmd,
										function (_p10) {
											return A2(
												_gizra$backoffice$Backend_CreditRequest_Model$HandleUpdate,
												_p11,
												_krisajenkins$remotedata$RemoteData$fromResult(_p10));
										},
										A3(ops.patchFull, _gizra$backoffice$Backend_CreditRequest_Endpoint$endpoint, _p8._0, value));
								}
							}();
							var updated = A3(
								_gizra$backoffice$Backend_CreditRequest_Utils$update,
								_p11,
								function (oldEditable) {
									return A2(_Gizra$elm_editable_webdata$Editable_WebData$state, _krisajenkins$remotedata$RemoteData$Loading, oldEditable);
								},
								model.creditRequests);
							return {
								ctor: '_Tuple4',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{creditRequests: updated}),
								_1: cmd,
								_2: _gizra$backoffice$Error_Utils$noError,
								_3: {ctor: '[]'}
							};
						} else {
							return noChange;
						}
					},
					A2(_gizra$backoffice$Backend_CreditRequest_Utils$get, _p11, model.creditRequests));
			default:
				var updated = A3(
					_gizra$backoffice$Backend_CreditRequest_Utils$update,
					_p0._0,
					function (editable) {
						return A2(
							_Gizra$elm_editable_webdata$Editable_WebData$map,
							function (_p12) {
								return A2(
									_stoeffel$editable$Editable$map,
									function (old) {
										return _elm_lang$core$Native_Utils.update(
											old,
											{
												credit: _gizra$backoffice$Amount$Regular(
													_gizra$backoffice$Amount$Amount(_p0._1))
											});
									},
									_stoeffel$editable$Editable$edit(_p12));
							},
							editable);
					},
					model.creditRequests);
				return {
					ctor: '_Tuple4',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{creditRequests: updated}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _gizra$backoffice$Error_Utils$noError,
					_3: {ctor: '[]'}
				};
		}
	});

var _gizra$backoffice$Backend_ForgotPassword_Encoder$encodeForgotPassword = function (forgotPassword) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'language',
				_1: _elm_lang$core$Json_Encode$string(forgotPassword.language)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'mail',
					_1: _elm_lang$core$Json_Encode$string(forgotPassword.email)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'site',
						_1: _elm_lang$core$Json_Encode$string(forgotPassword.site)
					},
					_1: {ctor: '[]'}
				}
			}
		});
};

var _gizra$backoffice$Backend_ForgotPassword_Endpoint$endpoint = A2(
	_Gizra$elm_restful$Restful_Endpoint$withCreatedEncoder,
	_gizra$backoffice$Backend_ForgotPassword_Encoder$encodeForgotPassword,
	A2(
		_Gizra$elm_restful$Restful_Endpoint$withValueEncoder,
		_elm_lang$core$Basics$always(
			_elm_lang$core$Json_Encode$object(
				{ctor: '[]'})),
		A4(
			_Gizra$elm_restful$Restful_Endpoint$endpoint,
			'api/user_password',
			_elm_lang$core$Json_Decode$succeed(
				{ctor: '_Tuple0'}),
			_elm_lang$core$Json_Decode$succeed(
				{ctor: '_Tuple0'}),
			_Gizra$elm_restful$Restful_Endpoint$backend)));

var _gizra$backoffice$Backend_ForgotPassword_Update$update = F4(
	function (language, _p0, msg, model) {
		var _p1 = _p0;
		var ops = _Gizra$elm_restful$Restful_Endpoint$applyBackendUrl(_p1._0);
		var noChange = {
			ctor: '_Tuple4',
			_0: model,
			_1: _elm_lang$core$Platform_Cmd$none,
			_2: _gizra$backoffice$Error_Utils$noError,
			_3: {ctor: '[]'}
		};
		var _p2 = msg;
		if (_p2.ctor === 'Save') {
			var createInfo = {
				email: _p2._0,
				language: _gizra$backoffice$Translate$languageToCode(language),
				site: _p1._1
			};
			var cmd = A2(
				_Gizra$elm_restful$Restful_Endpoint$toCmd,
				function (_p3) {
					return _gizra$backoffice$Backend_ForgotPassword_Model$HandleSave(
						_krisajenkins$remotedata$RemoteData$fromResult(_p3));
				},
				A2(ops.post, _gizra$backoffice$Backend_ForgotPassword_Endpoint$endpoint, createInfo));
			return {
				ctor: '_Tuple4',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{forgotPassword: _krisajenkins$remotedata$RemoteData$Loading}),
				_1: cmd,
				_2: _gizra$backoffice$Error_Utils$noError,
				_3: {ctor: '[]'}
			};
		} else {
			var _p5 = _p2._0;
			var _p4 = _p5;
			switch (_p4.ctor) {
				case 'Success':
					return {
						ctor: '_Tuple4',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								forgotPassword: _krisajenkins$remotedata$RemoteData$Success(
									{ctor: '_Tuple0'})
							}),
						_1: _elm_lang$core$Platform_Cmd$none,
						_2: _gizra$backoffice$Error_Utils$noError,
						_3: {ctor: '[]'}
					};
				case 'Failure':
					return {
						ctor: '_Tuple4',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								forgotPassword: _krisajenkins$remotedata$RemoteData$Failure(_p4._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none,
						_2: A3(_gizra$backoffice$Error_Utils$maybeHttpError, _p5, 'Backend.ForgotPassword.Update', 'HandleSave'),
						_3: {ctor: '[]'}
					};
				default:
					return noChange;
			}
		}
	});

var _gizra$backoffice$Backend_Bid_Endpoint$endpoint = A2(
	_Gizra$elm_restful$Restful_Endpoint$withCreatedEncoder,
	_gizra$backoffice$Backend_Bid_Encoder$encodeCreateInfo,
	A2(
		_Gizra$elm_restful$Restful_Endpoint$withValueEncoder,
		_elm_lang$core$Basics$always(
			_elm_lang$core$Json_Encode$object(
				{ctor: '[]'})),
		A2(_Gizra$elm_restful$Restful_Endpoint$drupalEndpoint, 'api/bids', _gizra$backoffice$Backend_Bid_Decoder$decodeBid)));

var _gizra$backoffice$Backend_User_Utils$getWebsiteBidderInfoEditable = F2(
	function (login, saleUuid) {
		return A2(
			_elm_lang$core$Maybe$andThen,
			function (bidderInfoId) {
				return A2(
					_elm_lang$core$Maybe$andThen,
					function (editable) {
						return _elm_lang$core$Maybe$Just(
							{ctor: '_Tuple2', _0: bidderInfoId, _1: editable});
					},
					A3(_gizra$backoffice$PaginatedData$get, saleUuid, bidderInfoId, login.data.bidderInfo));
			},
			A2(_eeue56$elm_all_dict$EveryDict$get, saleUuid, login.credentials.user.websiteBidderInfo));
	});
var _gizra$backoffice$Backend_User_Utils$getWebsiteBidderInfo = F2(
	function (login, saleUuid) {
		return A2(
			_elm_lang$core$Maybe$andThen,
			function (_p0) {
				var _p1 = _p0;
				return _elm_lang$core$Maybe$Just(
					_stoeffel$editable$Editable$value(
						_Gizra$elm_editable_webdata$Editable_WebData$toEditable(_p1._1)));
			},
			A2(_gizra$backoffice$Backend_User_Utils$getWebsiteBidderInfoEditable, login, saleUuid));
	});
var _gizra$backoffice$Backend_User_Utils$isActive = function (login) {
	return _elm_lang$core$Native_Utils.eq(login.credentials.user.status, _gizra$backoffice$Backend_User_Model$Active);
};
var _gizra$backoffice$Backend_User_Utils$isPrivileged = function (login) {
	return _elm_lang$core$Native_Utils.eq(login.credentials.user.userType, _gizra$backoffice$Backend_User_Model$Privileged);
};

var _gizra$backoffice$Backend_Bid_Utils$mergeBidDict = F2(
	function (bidDict, newBidDict) {
		return A6(
			_Gizra$elm_dictlist$EveryDictList$merge,
			F3(
				function (key, bid, accum) {
					return A3(_Gizra$elm_dictlist$EveryDictList$insert, key, bid, accum);
				}),
			F4(
				function (key, _p0, bid, accum) {
					return A3(_Gizra$elm_dictlist$EveryDictList$insert, key, bid, accum);
				}),
			F3(
				function (key, bid, accum) {
					return A3(_Gizra$elm_dictlist$EveryDictList$insert, key, bid, accum);
				}),
			bidDict,
			newBidDict,
			_Gizra$elm_dictlist$EveryDictList$empty);
	});
var _gizra$backoffice$Backend_Bid_Utils$isNewerThan = F2(
	function (x, y) {
		var yTime = _elm_lang$core$Date$toTime(y);
		var xTime = _elm_lang$core$Date$toTime(x);
		return _elm_lang$core$Native_Utils.cmp(yTime, xTime) > 0;
	});
var _gizra$backoffice$Backend_Bid_Utils$getMailBidFromBookBid = F2(
	function (bid, item) {
		var _p1 = bid.bidType;
		if (_p1.ctor === 'Book') {
			return A2(_Gizra$elm_dictlist$EveryDictList$get, _p1._0, item.bookBids);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _gizra$backoffice$Backend_Bid_Utils$isInternetBid = function (bid) {
	return _elm_lang$core$Native_Utils.eq(bid.bidType, _gizra$backoffice$Backend_Bid_Model$Internet);
};
var _gizra$backoffice$Backend_Bid_Utils$isMailBid = function (bid) {
	return _elm_lang$core$Native_Utils.eq(bid.bidType, _gizra$backoffice$Backend_Bid_Model$Mail);
};
var _gizra$backoffice$Backend_Bid_Utils$isAgentBid = function (bid) {
	return _elm_lang$core$Native_Utils.eq(bid.bidType, _gizra$backoffice$Backend_Bid_Model$Agent);
};
var _gizra$backoffice$Backend_Bid_Utils$isLiveBid = function (bid) {
	return (!_gizra$backoffice$Backend_Bid_Utils$isAgentBid(bid)) && (!_gizra$backoffice$Backend_Bid_Utils$isMailBid(bid));
};
var _gizra$backoffice$Backend_Bid_Utils$isBookBid = function (bid) {
	var _p2 = bid.bidType;
	if (_p2.ctor === 'Book') {
		return true;
	} else {
		return false;
	}
};
var _gizra$backoffice$Backend_Bid_Utils$isFloorBid = function (bid) {
	return _elm_lang$core$Native_Utils.eq(bid.bidType, _gizra$backoffice$Backend_Bid_Model$Floor);
};
var _gizra$backoffice$Backend_Bid_Utils$hasBids = function (bids) {
	return A2(
		_Gizra$elm_dictlist$EveryDictList$any,
		F2(
			function (_p3, bid) {
				return _elm_lang$core$Native_Utils.eq(bid.deletedStatus, _gizra$backoffice$Backend_Bid_Model$NotDeleted);
			}),
		bids);
};
var _gizra$backoffice$Backend_Bid_Utils$isDeleted = function (bid) {
	var _p4 = bid.deletedStatus;
	switch (_p4.ctor) {
		case 'NotDeleted':
			return false;
		case 'DeleteInProcess':
			return false;
		default:
			return true;
	}
};
var _gizra$backoffice$Backend_Bid_Utils$isOutbid = function (bid) {
	var _p5 = bid.status;
	if (_p5.ctor === 'Outbid') {
		return true;
	} else {
		return false;
	}
};
var _gizra$backoffice$Backend_Bid_Utils$isRejectedCreditLimit = function (bid) {
	var _p6 = bid.status;
	if (_p6.ctor === 'RejectedCreditLimit') {
		return true;
	} else {
		return false;
	}
};
var _gizra$backoffice$Backend_Bid_Utils$isRejectedBidderMax = function (bid) {
	var _p7 = bid.status;
	if (_p7.ctor === 'RejectedBidderMax') {
		return true;
	} else {
		return false;
	}
};
var _gizra$backoffice$Backend_Bid_Utils$isReachedCreditLimit = function (bid) {
	return _gizra$backoffice$Backend_Bid_Utils$isRejectedBidderMax(bid) || _gizra$backoffice$Backend_Bid_Utils$isRejectedCreditLimit(bid);
};
var _gizra$backoffice$Backend_Bid_Utils$isAcceptedDuplicatedAmount = function (bid) {
	var _p8 = bid.status;
	if (_p8.ctor === 'AcceptedDuplicatedAmount') {
		return true;
	} else {
		return false;
	}
};
var _gizra$backoffice$Backend_Bid_Utils$isAccepted = function (bid) {
	var _p9 = bid.status;
	if (_p9.ctor === 'Accepted') {
		return true;
	} else {
		return false;
	}
};
var _gizra$backoffice$Backend_Bid_Utils$isValidOrAmountDuplicated = function (bid) {
	return (_gizra$backoffice$Backend_Bid_Utils$isAccepted(bid) || _gizra$backoffice$Backend_Bid_Utils$isAcceptedDuplicatedAmount(bid)) && (!_gizra$backoffice$Backend_Bid_Utils$isDeleted(bid));
};
var _gizra$backoffice$Backend_Bid_Utils$isValid = function (bid) {
	return _gizra$backoffice$Backend_Bid_Utils$isAccepted(bid) && (!_gizra$backoffice$Backend_Bid_Utils$isDeleted(bid));
};
var _gizra$backoffice$Backend_Bid_Utils$getValidBids = function (bids) {
	return A2(
		_Gizra$elm_dictlist$EveryDictList$filter,
		F2(
			function (_p10, bid) {
				return _gizra$backoffice$Backend_Bid_Utils$isValid(bid);
			}),
		bids);
};
var _gizra$backoffice$Backend_Bid_Utils$getHighestBidWithKey = A2(
	_Gizra$elm_dictlist$EveryDictList$foldl,
	F3(
		function (key, bid, acc) {
			return _gizra$backoffice$Backend_Bid_Utils$isValid(bid) ? _elm_lang$core$Maybe$Just(
				function () {
					var _p11 = acc;
					if (_p11.ctor === 'Just') {
						var _p12 = _p11._0._1;
						return A3(
							_gizra$backoffice$Amount$compare,
							F2(
								function (x, y) {
									return _elm_lang$core$Native_Utils.cmp(x, y) > 0;
								}),
							bid.amount,
							_p12.amount) ? {ctor: '_Tuple2', _0: key, _1: bid} : {ctor: '_Tuple2', _0: _p11._0._0, _1: _p12};
					} else {
						return {ctor: '_Tuple2', _0: key, _1: bid};
					}
				}()) : acc;
		}),
	_elm_lang$core$Maybe$Nothing);
var _gizra$backoffice$Backend_Bid_Utils$getHighestBid = function (_p13) {
	return A2(
		_elm_lang$core$Maybe$map,
		_elm_lang$core$Tuple$second,
		_gizra$backoffice$Backend_Bid_Utils$getHighestBidWithKey(_p13));
};
var _gizra$backoffice$Backend_Bid_Utils$getHighestLiveBid = function (item) {
	return _gizra$backoffice$Backend_Bid_Utils$getHighestBid(
		_gizra$backoffice$Backend_Bid_Utils$getValidBids(item.bids));
};
var _gizra$backoffice$Backend_Bid_Utils$getHighestMailBid = function (item) {
	return _gizra$backoffice$Backend_Bid_Utils$getHighestBid(
		_gizra$backoffice$Backend_Bid_Utils$getValidBids(item.bookBids));
};
var _gizra$backoffice$Backend_Bid_Utils$getBidderNumber = function (bid) {
	var _p14 = bid.status;
	switch (_p14.ctor) {
		case 'Accepted':
			return _p14._0;
		case 'AcceptedDuplicatedAmount':
			return _p14._0;
		case 'Rejected':
			return _p14._0;
		case 'RejectedBellowMinimum':
			return _p14._0;
		case 'RejectedBidderMax':
			return _p14._0;
		case 'RejectedCreditLimit':
			return _p14._0;
		case 'RejectedMailAfterSetLastFloor':
			return _p14._0;
		default:
			return _p14._0;
	}
};
var _gizra$backoffice$Backend_Bid_Utils$isOwnBid = F3(
	function (login, saleUuid, bid) {
		var _p15 = _gizra$backoffice$Backend_Bid_Utils$getBidderNumber(bid);
		if (_p15.ctor === 'Just') {
			var _p16 = _p15._0;
			if (_gizra$backoffice$Backend_User_Utils$isPrivileged(login)) {
				var ownBidderNumber = A2(
					_elm_lang$core$Maybe$withDefault,
					0,
					A2(
						_elm_lang$core$Maybe$andThen,
						function (bidderInfo) {
							return _elm_lang$core$Maybe$Just(
								_gizra$backoffice$Backend_BidderInfo_Utils$getNumber(bidderInfo));
						},
						A2(_gizra$backoffice$Backend_User_Utils$getWebsiteBidderInfo, login, saleUuid)));
				return _elm_lang$core$Native_Utils.eq(_p16, ownBidderNumber);
			} else {
				return A2(_elm_lang$core$Dict$member, _p16, login.data.bidderInfoByBidderNumber);
			}
		} else {
			return false;
		}
	});
var _gizra$backoffice$Backend_Bid_Utils$getOwnHighestBidWithKey = F3(
	function (login, saleUuid, bids) {
		return _gizra$backoffice$Backend_Bid_Utils$getHighestBidWithKey(
			A2(
				_Gizra$elm_dictlist$EveryDictList$filter,
				F2(
					function (_p17, bid) {
						return _gizra$backoffice$Backend_Bid_Utils$isValid(bid) && A3(_gizra$backoffice$Backend_Bid_Utils$isOwnBid, login, saleUuid, bid);
					}),
				bids));
	});
var _gizra$backoffice$Backend_Bid_Utils$getOwnHighestMailBidWithKey = F3(
	function (login, saleUuid, item) {
		return A3(_gizra$backoffice$Backend_Bid_Utils$getOwnHighestBidWithKey, login, saleUuid, item.bookBids);
	});
var _gizra$backoffice$Backend_Bid_Utils$getOwnHighestAgentBidWithKey = F3(
	function (login, saleUuid, item) {
		return A3(_gizra$backoffice$Backend_Bid_Utils$getOwnHighestBidWithKey, login, saleUuid, item.agentBids);
	});
var _gizra$backoffice$Backend_Bid_Utils$isOwnValidBid = F3(
	function (login, saleUuid, bid) {
		return _gizra$backoffice$Backend_Bid_Utils$isValid(bid) && A3(_gizra$backoffice$Backend_Bid_Utils$isOwnBid, login, saleUuid, bid);
	});
var _gizra$backoffice$Backend_Bid_Utils$getOwnValidBids = F3(
	function (login, saleUuid, bids) {
		return A2(
			_Gizra$elm_dictlist$EveryDictList$filter,
			F2(
				function (_p18, bid) {
					return A3(_gizra$backoffice$Backend_Bid_Utils$isOwnValidBid, login, saleUuid, bid);
				}),
			bids);
	});
var _gizra$backoffice$Backend_Bid_Utils$getOwnHighestLiveBid = F3(
	function (login, saleUuid, item) {
		return _gizra$backoffice$Backend_Bid_Utils$getHighestBid(
			A3(_gizra$backoffice$Backend_Bid_Utils$getOwnValidBids, login, saleUuid, item.bids));
	});
var _gizra$backoffice$Backend_Bid_Utils$getOwnHighestMailBid = F3(
	function (login, saleUuid, item) {
		return _gizra$backoffice$Backend_Bid_Utils$getHighestBid(
			A3(_gizra$backoffice$Backend_Bid_Utils$getOwnValidBids, login, saleUuid, item.bookBids));
	});
var _gizra$backoffice$Backend_Bid_Utils$getOwnHighestMailOrLiveBid = F3(
	function (login, saleUuid, item) {
		var _p19 = {
			ctor: '_Tuple2',
			_0: A3(_gizra$backoffice$Backend_Bid_Utils$getOwnHighestLiveBid, login, saleUuid, item),
			_1: A3(_gizra$backoffice$Backend_Bid_Utils$getOwnHighestMailBid, login, saleUuid, item)
		};
		_v11_3:
		do {
			if (_p19.ctor === '_Tuple2') {
				if (_p19._0.ctor === 'Just') {
					if (_p19._1.ctor === 'Just') {
						var _p21 = _p19._1._0;
						var _p20 = _p19._0._0;
						return A3(
							_gizra$backoffice$Amount$compareInfix,
							_p21.amount,
							F2(
								function (x, y) {
									return _elm_lang$core$Native_Utils.cmp(x, y) > 0;
								}),
							_p20.amount) ? _elm_lang$core$Maybe$Just(_p21) : _elm_lang$core$Maybe$Just(_p20);
					} else {
						return _elm_lang$core$Maybe$Just(_p19._0._0);
					}
				} else {
					if (_p19._1.ctor === 'Just') {
						return _elm_lang$core$Maybe$Just(_p19._1._0);
					} else {
						break _v11_3;
					}
				}
			} else {
				break _v11_3;
			}
		} while(false);
		return _elm_lang$core$Maybe$Nothing;
	});
var _gizra$backoffice$Backend_Bid_Utils$getOwnHighestAgentBid = F3(
	function (login, saleUuid, item) {
		return _gizra$backoffice$Backend_Bid_Utils$getHighestBid(
			A3(_gizra$backoffice$Backend_Bid_Utils$getOwnValidBids, login, saleUuid, item.agentBids));
	});
var _gizra$backoffice$Backend_Bid_Utils$isOwnValidOrAmountDuplicatedBid = F3(
	function (login, saleUuid, bid) {
		return _gizra$backoffice$Backend_Bid_Utils$isValidOrAmountDuplicated(bid) && A3(_gizra$backoffice$Backend_Bid_Utils$isOwnBid, login, saleUuid, bid);
	});
var _gizra$backoffice$Backend_Bid_Utils$getOwnValidOrAmountDuplicatedBids = F3(
	function (login, saleUuid, bids) {
		return A2(
			_Gizra$elm_dictlist$EveryDictList$filter,
			F2(
				function (_p22, bid) {
					return A3(_gizra$backoffice$Backend_Bid_Utils$isOwnValidOrAmountDuplicatedBid, login, saleUuid, bid);
				}),
			bids);
	});
var _gizra$backoffice$Backend_Bid_Utils$getBidStatusAsString = F2(
	function (language, _p23) {
		var _p24 = _p23;
		var _p25 = _p24.status;
		switch (_p25.ctor) {
			case 'Accepted':
				return A2(
					_gizra$backoffice$Translate$translate,
					language,
					_gizra$backoffice$Translate$Bid(_gizra$backoffice$Translate$Accepted));
			case 'AcceptedDuplicatedAmount':
				return A2(
					_gizra$backoffice$Translate$translate,
					language,
					_gizra$backoffice$Translate$Bid(_gizra$backoffice$Translate$AcceptedDuplicatedAmount));
			case 'Rejected':
				return A2(
					_gizra$backoffice$Translate$translate,
					language,
					_gizra$backoffice$Translate$Bid(_gizra$backoffice$Translate$Rejected));
			case 'RejectedBellowMinimum':
				return A2(
					_gizra$backoffice$Translate$translate,
					language,
					_gizra$backoffice$Translate$Bid(_gizra$backoffice$Translate$Rejected));
			case 'RejectedBidderMax':
				return A2(
					_gizra$backoffice$Translate$translate,
					language,
					_gizra$backoffice$Translate$Bid(_gizra$backoffice$Translate$RejectedBidderMax));
			case 'RejectedCreditLimit':
				return A2(
					_gizra$backoffice$Translate$translate,
					language,
					_gizra$backoffice$Translate$Bid(_gizra$backoffice$Translate$RejectedCreditLimit));
			case 'RejectedMailAfterSetLastFloor':
				return A2(
					_gizra$backoffice$Translate$translate,
					language,
					_gizra$backoffice$Translate$Bid(_gizra$backoffice$Translate$RejectedMailAfterSetLastFloor));
			default:
				return A2(
					_gizra$backoffice$Translate$translate,
					language,
					_gizra$backoffice$Translate$Bid(_gizra$backoffice$Translate$Outbid));
		}
	});
var _gizra$backoffice$Backend_Bid_Utils$getBidTypeAsString = F2(
	function (language, _p26) {
		var _p27 = _p26;
		var _p28 = _p27.bidType;
		switch (_p28.ctor) {
			case 'Agent':
				return A2(
					_gizra$backoffice$Translate$translate,
					language,
					_gizra$backoffice$Translate$Bid(_gizra$backoffice$Translate$AgentBid));
			case 'AutoAgent':
				return A2(
					_gizra$backoffice$Translate$translate,
					language,
					_gizra$backoffice$Translate$Bid(_gizra$backoffice$Translate$AutoAgent));
			case 'Book':
				return A2(
					_gizra$backoffice$Translate$translate,
					language,
					_gizra$backoffice$Translate$Bid(_gizra$backoffice$Translate$AutoBid));
			case 'Floor':
				return A2(
					_gizra$backoffice$Translate$translate,
					language,
					_gizra$backoffice$Translate$Bid(_gizra$backoffice$Translate$FloorBid));
			case 'Internet':
				return A2(
					_gizra$backoffice$Translate$translate,
					language,
					_gizra$backoffice$Translate$Bid(_gizra$backoffice$Translate$InternetBid));
			case 'Mail':
				return A2(
					_gizra$backoffice$Translate$translate,
					language,
					_gizra$backoffice$Translate$Bid(_gizra$backoffice$Translate$MailBid));
			default:
				return A2(
					_gizra$backoffice$Translate$translate,
					language,
					_gizra$backoffice$Translate$Bid(_gizra$backoffice$Translate$PostSaleBid));
		}
	});

var _gizra$backoffice$Backend_Item_Endpoint$itemsEndpoint = A2(
	_Gizra$elm_restful$Restful_Endpoint$withParamsEncoder,
	_gizra$backoffice$Backend_Item_Encoder$encodeItemsParams,
	A2(
		_Gizra$elm_restful$Restful_Endpoint$withCreatedEncoder,
		_elm_lang$core$Basics$always(
			_elm_lang$core$Json_Encode$object(
				{ctor: '[]'})),
		A2(
			_Gizra$elm_restful$Restful_Endpoint$withValueEncoder,
			_elm_lang$core$Basics$always(
				_elm_lang$core$Json_Encode$object(
					{ctor: '[]'})),
			A2(_Gizra$elm_restful$Restful_Endpoint$drupalEndpoint, 'api/items', _gizra$backoffice$Backend_Item_Decoder$decodeItem))));

var _gizra$backoffice$Backend_Item_Utils$creatableBidTypeToBidType = function (creatableBidType) {
	var _p0 = creatableBidType;
	if (_p0.ctor === 'Agent') {
		return _gizra$backoffice$Backend_Bid_Model$Agent;
	} else {
		return _gizra$backoffice$Backend_Bid_Model$Mail;
	}
};
var _gizra$backoffice$Backend_Item_Utils$isRegular = function (bidStep) {
	return _elm_lang$core$Native_Utils.eq(bidStep.type_, _gizra$backoffice$Backend_Item_Model$Regular);
};
var _gizra$backoffice$Backend_Item_Utils$getBidStepDown = F2(
	function (bidSteps, bidAmount) {
		return A3(
			_mgold$elm_nonempty_list$List_Nonempty$foldl,
			F2(
				function (bidStep, accum) {
					return (A3(
						_gizra$backoffice$Amount$compareInfix,
						bidStep.from,
						F2(
							function (x, y) {
								return _elm_lang$core$Native_Utils.eq(x, y);
							}),
						bidAmount) && (!_gizra$backoffice$Backend_Item_Utils$isRegular(bidStep))) ? bidStep.amount : ((A3(
						_gizra$backoffice$Amount$compareInfix,
						bidStep.from,
						F2(
							function (x, y) {
								return _elm_lang$core$Native_Utils.cmp(x, y) < 0;
							}),
						bidAmount) && _gizra$backoffice$Backend_Item_Utils$isRegular(bidStep)) ? bidStep.amount : accum);
				}),
			_gizra$backoffice$Amount$zero,
			bidSteps);
	});
var _gizra$backoffice$Backend_Item_Utils$getBidStepUp = F2(
	function (bidSteps, bidAmount) {
		return A3(
			_mgold$elm_nonempty_list$List_Nonempty$foldl,
			F2(
				function (bidStep, accum) {
					return (A3(
						_gizra$backoffice$Amount$compareInfix,
						bidStep.from,
						F2(
							function (x, y) {
								return _elm_lang$core$Native_Utils.eq(x, y);
							}),
						bidAmount) && (!_gizra$backoffice$Backend_Item_Utils$isRegular(bidStep))) ? bidStep.amount : ((A3(
						_gizra$backoffice$Amount$compareInfix,
						bidStep.from,
						F2(
							function (x, y) {
								return _elm_lang$core$Native_Utils.cmp(x, y) < 1;
							}),
						bidAmount) && _gizra$backoffice$Backend_Item_Utils$isRegular(bidStep)) ? bidStep.amount : accum);
				}),
			_gizra$backoffice$Amount$zero,
			bidSteps);
	});
var _gizra$backoffice$Backend_Item_Utils$withPrice = F2(
	function (func, price) {
		var _p1 = price;
		if (_p1.ctor === 'Current') {
			return func(_p1._0);
		} else {
			return func(_p1._0);
		}
	});
var _gizra$backoffice$Backend_Item_Utils$getNextPriceAmount = function (item) {
	var _p2 = item.nextPrice;
	if (_p2.ctor === 'Just') {
		return _p2._0;
	} else {
		return _gizra$backoffice$Amount$zero;
	}
};
var _gizra$backoffice$Backend_Item_Utils$getAmountFromPrice = function (price) {
	var _p3 = price;
	if (_p3.ctor === 'Opening') {
		return _p3._0;
	} else {
		return _p3._0;
	}
};
var _gizra$backoffice$Backend_Item_Utils$hasLiveBids = function (item) {
	return _elm_community$maybe_extra$Maybe_Extra$isJust(
		_gizra$backoffice$Backend_Bid_Utils$getHighestBid(item.bids));
};
var _gizra$backoffice$Backend_Item_Utils$getEditableItemStatus = function (status) {
	var _p4 = status;
	if (_p4.ctor === 'EditableStatus') {
		return _elm_lang$core$Maybe$Just(_p4._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _gizra$backoffice$Backend_Item_Utils$isItemNotActiveButAlreadyHasLiveBids = function (status) {
	return _elm_lang$core$Native_Utils.eq(
		status,
		_gizra$backoffice$Backend_Item_Model$ReadOnlyStatus(_gizra$backoffice$Backend_Item_Model$ItemNotActiveButAlreadyHasLiveBids));
};
var _gizra$backoffice$Backend_Item_Utils$isLiveAllowed = function (status) {
	return _elm_lang$core$Native_Utils.eq(
		status,
		_gizra$backoffice$Backend_Item_Model$EditableStatus(_gizra$backoffice$Backend_Item_Model$LiveOnly));
};
var _gizra$backoffice$Backend_Item_Utils$isUnsoldPostSaleAllow = function (status) {
	var _p5 = status;
	if ((((_p5.ctor === 'ReadOnlyStatus') && (_p5._0.ctor === 'ItemClosed')) && (_p5._0._0.ctor === 'Unsold')) && (_p5._0._0._0.ctor === 'PostSaleAllow')) {
		return true;
	} else {
		return false;
	}
};
var _gizra$backoffice$Backend_Item_Utils$isMailAllowed = function (status) {
	return _elm_lang$core$Native_Utils.eq(
		status,
		_gizra$backoffice$Backend_Item_Model$EditableStatus(_gizra$backoffice$Backend_Item_Model$MailOnly)) || _gizra$backoffice$Backend_Item_Utils$isUnsoldPostSaleAllow(status);
};
var _gizra$backoffice$Backend_Item_Utils$isUnsold = function (status) {
	var _p6 = status;
	if (((_p6.ctor === 'ReadOnlyStatus') && (_p6._0.ctor === 'ItemClosed')) && (_p6._0._0.ctor === 'Unsold')) {
		return true;
	} else {
		return false;
	}
};
var _gizra$backoffice$Backend_Item_Utils$isSold = function (status) {
	return _elm_lang$core$Native_Utils.eq(
		status,
		_gizra$backoffice$Backend_Item_Model$ReadOnlyStatus(
			_gizra$backoffice$Backend_Item_Model$ItemClosed(_gizra$backoffice$Backend_Item_Model$Sold)));
};
var _gizra$backoffice$Backend_Item_Utils$isWithdrawn = function (status) {
	return _elm_lang$core$Native_Utils.eq(
		status,
		_gizra$backoffice$Backend_Item_Model$ReadOnlyStatus(_gizra$backoffice$Backend_Item_Model$Withdrawn));
};
var _gizra$backoffice$Backend_Item_Utils$isAvailable = function (status) {
	var _p7 = status;
	if (_p7.ctor === 'EditableStatus') {
		return true;
	} else {
		return false;
	}
};
var _gizra$backoffice$Backend_Item_Utils$isClosed = function (status) {
	var _p8 = status;
	if (_p8.ctor === 'ReadOnlyStatus') {
		var _p9 = _p8._0;
		if (_p9.ctor === 'ItemClosed') {
			return true;
		} else {
			return false;
		}
	} else {
		return false;
	}
};
var _gizra$backoffice$Backend_Item_Utils$getWinningBid = function (item) {
	return A3(
		_elm_community$maybe_extra$Maybe_Extra$unwrap,
		_elm_lang$core$Maybe$Nothing,
		function (winningBid) {
			var maybeMailBid = A2(_Gizra$elm_dictlist$EveryDictList$get, winningBid, item.bookBids);
			var maybeLiveBid = A2(_Gizra$elm_dictlist$EveryDictList$get, winningBid, item.bids);
			return A2(_elm_community$maybe_extra$Maybe_Extra$or, maybeLiveBid, maybeMailBid);
		},
		item.winningBid);
};
var _gizra$backoffice$Backend_Item_Utils$hasWinningBid = function (item) {
	return _elm_community$maybe_extra$Maybe_Extra$isJust(item.winningBid);
};
var _gizra$backoffice$Backend_Item_Utils$getPrice = function (item) {
	return _gizra$backoffice$Backend_Item_Utils$hasWinningBid(item) ? _gizra$backoffice$Backend_Item_Model$Current(
		A2(_elm_lang$core$Maybe$withDefault, item.openingPrice, item.currentPrice)) : _gizra$backoffice$Backend_Item_Model$Opening(item.openingPrice);
};
var _gizra$backoffice$Backend_Item_Utils$isWinningUser = F3(
	function (login, saleUuid, item) {
		return A3(
			_elm_community$maybe_extra$Maybe_Extra$unwrap,
			false,
			function (bidId) {
				var hasOwnBid = function (bidDict) {
					var _p10 = A2(_Gizra$elm_dictlist$EveryDictList$get, bidId, bidDict);
					if (_p10.ctor === 'Nothing') {
						return false;
					} else {
						return A3(_gizra$backoffice$Backend_Bid_Utils$isOwnBid, login, saleUuid, _p10._0);
					}
				};
				return hasOwnBid(item.bids) || hasOwnBid(item.bookBids);
			},
			item.winningBid);
	});

var _gizra$backoffice$Backend_Item_Update$handleFetchItems = F5(
	function (saleUuid, pageNumber, webData, model, callingFuncName) {
		var appMsgs = _krisajenkins$remotedata$RemoteData$isSuccess(webData) ? {
			ctor: '::',
			_0: _gizra$backoffice$App_Model$MsgWidgetManager(_gizra$backoffice$WidgetManager_Model$SendUserAndDataToOtherWidgets),
			_1: {ctor: '[]'}
		} : {ctor: '[]'};
		var updated = A8(
			_gizra$backoffice$PaginatedData$insertMultiple,
			saleUuid,
			pageNumber,
			webData,
			function (_p0) {
				return _Gizra$elm_restful$Restful_Endpoint$toEntityUuid(
					_elm_lang$core$Basics$toString(_p0));
			},
			function (_p1) {
				var _p2 = _p1;
				return _elm_lang$core$Maybe$Just(_p2._1.uuid);
			},
			F3(
				function (itemId, item, accum) {
					return A3(_Gizra$elm_dictlist$EveryDictList$insert, item.uuid, item, accum);
				}),
			F3(
				function (itemId, item, _p3) {
					var _p4 = _p3;
					var _p5 = _p4._0;
					return {
						ctor: '_Tuple2',
						_0: _p5,
						_1: A4(_Gizra$elm_dictlist$EveryDictList$insertAfter, _p5, item.uuid, item, _p4._1)
					};
				}),
			model.items);
		return {
			ctor: '_Tuple4',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{items: updated}),
			_1: _elm_lang$core$Platform_Cmd$none,
			_2: A3(
				_gizra$backoffice$Error_Utils$maybeHttpError,
				webData,
				A2(_elm_lang$core$Basics_ops['++'], 'Backend.Item.Update', callingFuncName),
				'HandleFetchItems'),
			_3: appMsgs
		};
	});
var _gizra$backoffice$Backend_Item_Update$fetchItemsByItemUuid = F5(
	function (saleUuid, itemUuids, pageNumber, model, fetchFunc) {
		var itemsParams = {
			saleUuid: saleUuid,
			page: pageNumber,
			filters: _elm_lang$core$Native_Utils.update(
				_gizra$backoffice$Backend_Item_Model$emptyItemFilters,
				{itemUuids: itemUuids})
		};
		return A7(
			fetchFunc,
			saleUuid,
			_gizra$backoffice$Backend_Item_Endpoint$itemsEndpoint,
			itemsParams,
			function (_p6) {
				return A3(
					_gizra$backoffice$Backend_Item_Model$HandleFetchItems,
					saleUuid,
					pageNumber,
					A2(
						_krisajenkins$remotedata$RemoteData$map,
						_elm_lang$core$Tuple$mapFirst(_Gizra$elm_dictlist$EveryDictList$fromList),
						_krisajenkins$remotedata$RemoteData$fromResult(_p6)));
			},
			model.items,
			F2(
				function (model, dict) {
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							items: A3(_gizra$backoffice$PaginatedData$setPageAsLoading, saleUuid, pageNumber, dict)
						});
				}),
			model);
	});
var _gizra$backoffice$Backend_Item_Update$updateAnon = F4(
	function (backendUrl, login, msg, model) {
		var noChange = {
			ctor: '_Tuple4',
			_0: model,
			_1: _elm_lang$core$Platform_Cmd$none,
			_2: _gizra$backoffice$Error_Utils$noError,
			_3: {ctor: '[]'}
		};
		var _p7 = msg;
		switch (_p7.ctor) {
			case 'FetchItemsByItemUuid':
				return A5(
					_gizra$backoffice$Backend_Item_Update$fetchItemsByItemUuid,
					_p7._0,
					_p7._1,
					_p7._2,
					model,
					_gizra$backoffice$Backend_Utils$fetchAnon(backendUrl));
			case 'HandleFetchItems':
				return A5(_gizra$backoffice$Backend_Item_Update$handleFetchItems, _p7._0, _p7._1, _p7._2, model, 'updateAnon');
			default:
				return noChange;
		}
	});
var _gizra$backoffice$Backend_Item_Update$update = F3(
	function (login, msg, model) {
		var ops = A2(
			_Gizra$elm_restful$Restful_Endpoint$applyAccessToken,
			login.credentials.accessToken,
			_Gizra$elm_restful$Restful_Endpoint$applyBackendUrl(login.credentials.backendUrl));
		var noChange = {
			ctor: '_Tuple4',
			_0: model,
			_1: _elm_lang$core$Platform_Cmd$none,
			_2: _gizra$backoffice$Error_Utils$noError,
			_3: {ctor: '[]'}
		};
		var _p8 = msg;
		switch (_p8.ctor) {
			case 'DeleteCurrentBid':
				var _p17 = _p8._0;
				var _p16 = _p8._1;
				var _p15 = _p8._2;
				return A3(
					_elm_community$maybe_extra$Maybe_Extra$unwrap,
					noChange,
					function (item) {
						return A3(
							_elm_community$maybe_extra$Maybe_Extra$unwrap,
							noChange,
							function (_p9) {
								var _p10 = _p9;
								var _p13 = _p10._0;
								var cmd = A2(
									_Gizra$elm_restful$Restful_Endpoint$toCmd,
									function (_p11) {
										return A5(
											_gizra$backoffice$Backend_Item_Model$HandleDeletedBid,
											_p17,
											_p16,
											_p13,
											_p15,
											_krisajenkins$remotedata$RemoteData$fromResult(_p11));
									},
									A2(ops.$delete, _gizra$backoffice$Backend_Bid_Endpoint$endpoint, _p13));
								var itemsUpdated = A4(
									_gizra$backoffice$PaginatedData$update,
									_p17,
									_p16,
									function (item) {
										var updatedBid = _elm_lang$core$Native_Utils.update(
											_p10._1,
											{deletedStatus: _gizra$backoffice$Backend_Bid_Model$DeleteInProcess});
										var _p12 = _p15;
										if (_p12.ctor === 'Agent') {
											return _elm_lang$core$Native_Utils.update(
												item,
												{
													agentBids: A3(_Gizra$elm_dictlist$EveryDictList$insert, _p13, updatedBid, item.agentBids)
												});
										} else {
											return _elm_lang$core$Native_Utils.update(
												item,
												{
													bookBids: A3(_Gizra$elm_dictlist$EveryDictList$insert, _p13, updatedBid, item.bookBids)
												});
										}
									},
									model.items);
								return {
									ctor: '_Tuple4',
									_0: _elm_lang$core$Native_Utils.update(
										model,
										{items: itemsUpdated}),
									_1: cmd,
									_2: _gizra$backoffice$Error_Utils$noError,
									_3: {ctor: '[]'}
								};
							},
							function () {
								var _p14 = _p15;
								if (_p14.ctor === 'Agent') {
									return A3(_gizra$backoffice$Backend_Bid_Utils$getOwnHighestAgentBidWithKey, login, _p17, item);
								} else {
									return A3(_gizra$backoffice$Backend_Bid_Utils$getOwnHighestMailBidWithKey, login, _p17, item);
								}
							}());
					},
					A3(_gizra$backoffice$PaginatedData$get, _p17, _p16, model.items));
			case 'FetchItemsByItemUuid':
				return A5(
					_gizra$backoffice$Backend_Item_Update$fetchItemsByItemUuid,
					_p8._0,
					_p8._1,
					_p8._2,
					model,
					_gizra$backoffice$Backend_Utils$fetch(login));
			case 'FetchItemsWithMyBids':
				var _p20 = _p8._0;
				var _p19 = _p8._1;
				var itemsParams = {
					saleUuid: _p20,
					page: _p19,
					filters: _elm_lang$core$Native_Utils.update(
						_gizra$backoffice$Backend_Item_Model$emptyItemFilters,
						{onlyWithMyBids: true})
				};
				return A8(
					_gizra$backoffice$Backend_Utils$fetch,
					login,
					_p20,
					_gizra$backoffice$Backend_Item_Endpoint$itemsEndpoint,
					itemsParams,
					function (_p18) {
						return A3(
							_gizra$backoffice$Backend_Item_Model$HandleFetchItems,
							_p20,
							_p19,
							A2(
								_krisajenkins$remotedata$RemoteData$map,
								_elm_lang$core$Tuple$mapFirst(_Gizra$elm_dictlist$EveryDictList$fromList),
								_krisajenkins$remotedata$RemoteData$fromResult(_p18)));
					},
					model.items,
					F2(
						function (model, dict) {
							return _elm_lang$core$Native_Utils.update(
								model,
								{
									items: A3(_gizra$backoffice$PaginatedData$setPageAsLoading, _p20, _p19, dict)
								});
						}),
					model);
			case 'HandleDeletedBid':
				switch (_p8._4.ctor) {
					case 'Success':
						var _p26 = _p8._0;
						var _p25 = _p8._1;
						var _p24 = _p8._3;
						var _p23 = _p8._2;
						return A3(
							_elm_community$maybe_extra$Maybe_Extra$unwrap,
							noChange,
							function (item) {
								return A3(
									_elm_community$maybe_extra$Maybe_Extra$unwrap,
									noChange,
									function (bid) {
										var itemsUpdated = A4(
											_gizra$backoffice$PaginatedData$update,
											_p26,
											_p25,
											function (item) {
												var updatedBid = _elm_lang$core$Native_Utils.update(
													bid,
													{
														deletedStatus: _gizra$backoffice$Backend_Bid_Model$Deleted(
															_elm_lang$core$Maybe$Just(login.credentials.user.id))
													});
												var _p21 = _p24;
												if (_p21.ctor === 'Agent') {
													return _elm_lang$core$Native_Utils.update(
														item,
														{
															agentBids: A3(_Gizra$elm_dictlist$EveryDictList$insert, _p23, updatedBid, item.agentBids)
														});
												} else {
													return _elm_lang$core$Native_Utils.update(
														item,
														{
															bookBids: A3(_Gizra$elm_dictlist$EveryDictList$insert, _p23, updatedBid, item.bookBids)
														});
												}
											},
											model.items);
										return {
											ctor: '_Tuple4',
											_0: _elm_lang$core$Native_Utils.update(
												model,
												{items: itemsUpdated}),
											_1: _elm_lang$core$Platform_Cmd$none,
											_2: _gizra$backoffice$Error_Utils$noError,
											_3: {ctor: '[]'}
										};
									},
									function () {
										var _p22 = _p24;
										if (_p22.ctor === 'Agent') {
											return A2(_Gizra$elm_dictlist$EveryDictList$get, _p23, item.agentBids);
										} else {
											return A2(_Gizra$elm_dictlist$EveryDictList$get, _p23, item.bookBids);
										}
									}());
							},
							A3(_gizra$backoffice$PaginatedData$get, _p26, _p25, model.items));
					case 'Failure':
						var _p33 = _p8._0;
						var _p32 = _p8._1;
						var _p31 = _p8._4._0;
						var _p30 = _p8._3;
						var _p29 = _p8._2;
						var noChangeWithError = {
							ctor: '_Tuple4',
							_0: model,
							_1: _elm_lang$core$Platform_Cmd$none,
							_2: A3(_gizra$backoffice$Error_Utils$httpError, 'Backend.Item.Update', 'HandleDeletedBid', _p31),
							_3: {ctor: '[]'}
						};
						return A3(
							_elm_community$maybe_extra$Maybe_Extra$unwrap,
							noChangeWithError,
							function (item) {
								return A3(
									_elm_community$maybe_extra$Maybe_Extra$unwrap,
									noChangeWithError,
									function (bid) {
										var itemsUpdated = A4(
											_gizra$backoffice$PaginatedData$update,
											_p33,
											_p32,
											function (item) {
												var updatedBid = _elm_lang$core$Native_Utils.update(
													bid,
													{deletedStatus: _gizra$backoffice$Backend_Bid_Model$NotDeleted});
												var _p27 = _p30;
												if (_p27.ctor === 'Agent') {
													return _elm_lang$core$Native_Utils.update(
														item,
														{
															agentBids: A3(_Gizra$elm_dictlist$EveryDictList$insert, _p29, updatedBid, item.agentBids)
														});
												} else {
													return _elm_lang$core$Native_Utils.update(
														item,
														{
															bookBids: A3(_Gizra$elm_dictlist$EveryDictList$insert, _p29, updatedBid, item.bookBids)
														});
												}
											},
											model.items);
										return {
											ctor: '_Tuple4',
											_0: _elm_lang$core$Native_Utils.update(
												model,
												{items: itemsUpdated}),
											_1: _elm_lang$core$Platform_Cmd$none,
											_2: A3(_gizra$backoffice$Error_Utils$httpError, 'Backend.Item.Update', 'HandleDeletedBid', _p31),
											_3: {ctor: '[]'}
										};
									},
									function () {
										var _p28 = _p30;
										if (_p28.ctor === 'Agent') {
											return A2(_Gizra$elm_dictlist$EveryDictList$get, _p29, item.agentBids);
										} else {
											return A2(_Gizra$elm_dictlist$EveryDictList$get, _p29, item.bookBids);
										}
									}());
							},
							A3(_gizra$backoffice$PaginatedData$get, _p33, _p32, model.items));
					default:
						return noChange;
				}
			case 'HandleFetchItem':
				var _p34 = _p8._2;
				var keepPreviousNewBids = F2(
					function (newItem, previousItem) {
						return _elm_lang$core$Native_Utils.update(
							newItem,
							{newBids: previousItem.newBids});
					});
				var updated = A3(
					_elm_community$maybe_extra$Maybe_Extra$unwrap,
					model.items,
					function (item) {
						return A4(
							_gizra$backoffice$PaginatedData$update,
							_p8._0,
							_p8._1,
							keepPreviousNewBids(item),
							model.items);
					},
					_krisajenkins$remotedata$RemoteData$toMaybe(_p34));
				return {
					ctor: '_Tuple4',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{items: updated}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: A3(_gizra$backoffice$Error_Utils$maybeHttpError, _p34, 'Backend.Item.Update', 'HandleFetchItem'),
					_3: {ctor: '[]'}
				};
			case 'HandleFetchItems':
				return A5(_gizra$backoffice$Backend_Item_Update$handleFetchItems, _p8._0, _p8._1, _p8._2, model, 'update');
			case 'HandlePlaceBid':
				var _p44 = _p8._3;
				var _p43 = _p8._0;
				var _p42 = _p8._1;
				var _p41 = _p8._2;
				return A3(
					_elm_community$maybe_extra$Maybe_Extra$unwrap,
					noChange,
					function (item) {
						return A3(
							_elm_community$maybe_extra$Maybe_Extra$unwrap,
							noChange,
							function (editable) {
								var _p35 = function () {
									var _p36 = _p44;
									if ((_p36.ctor === 'Success') && (_p36._0.ctor === '_Tuple2')) {
										var _p39 = _p36._0._0;
										var _p38 = _p36._0._1;
										var _p37 = _p41;
										if (_p37.ctor === 'Agent') {
											return {
												ctor: '_Tuple2',
												_0: A2(_Gizra$elm_dictlist$EveryDictList$singleton, _p39, _p38),
												_1: item.bookBids
											};
										} else {
											return {
												ctor: '_Tuple2',
												_0: item.agentBids,
												_1: A2(_Gizra$elm_dictlist$EveryDictList$singleton, _p39, _p38)
											};
										}
									} else {
										return {ctor: '_Tuple2', _0: item.agentBids, _1: item.bookBids};
									}
								}();
								var agentBids = _p35._0;
								var bookBids = _p35._1;
								var newStatus = function () {
									var _p40 = _p44;
									switch (_p40.ctor) {
										case 'Success':
											return _krisajenkins$remotedata$RemoteData$Success(_p40._0._0);
										case 'Failure':
											return _krisajenkins$remotedata$RemoteData$Failure(_p40._0);
										case 'Loading':
											return _krisajenkins$remotedata$RemoteData$Loading;
										default:
											return _krisajenkins$remotedata$RemoteData$NotAsked;
									}
								}();
								var editableUpdated = A2(_Gizra$elm_editable_webdata$Editable_WebData$state, newStatus, editable);
								var newBids = A3(_eeue56$elm_all_dict$EveryDict$insert, _p41, editableUpdated, item.newBids);
								var itemsUpdated = A4(
									_gizra$backoffice$PaginatedData$update,
									_p43,
									_p42,
									function (item) {
										return _elm_lang$core$Native_Utils.update(
											item,
											{bookBids: bookBids, agentBids: agentBids, newBids: newBids});
									},
									model.items);
								return {
									ctor: '_Tuple4',
									_0: _elm_lang$core$Native_Utils.update(
										model,
										{items: itemsUpdated}),
									_1: _elm_lang$core$Platform_Cmd$none,
									_2: _gizra$backoffice$Error_Utils$noError,
									_3: {ctor: '[]'}
								};
							},
							A2(_eeue56$elm_all_dict$EveryDict$get, _p41, item.newBids));
					},
					A3(_gizra$backoffice$PaginatedData$get, _p43, _p42, model.items));
			case 'PlaceBid':
				var _p48 = _p8._0;
				var _p47 = _p8._1;
				var _p46 = _p8._2;
				return A3(
					_elm_community$maybe_extra$Maybe_Extra$unwrap,
					noChange,
					function (item) {
						return A3(
							_elm_community$maybe_extra$Maybe_Extra$unwrap,
							noChange,
							function (editable) {
								var amount = _stoeffel$editable$Editable$value(
									_Gizra$elm_editable_webdata$Editable_WebData$toEditable(editable));
								var createInfo = {
									saleUuid: _p48,
									itemUuid: _p47,
									type_: _gizra$backoffice$Backend_Item_Utils$creatableBidTypeToBidType(_p46),
									amount: amount
								};
								var cmd = A2(
									_Gizra$elm_restful$Restful_Endpoint$toCmd,
									function (_p45) {
										return A4(
											_gizra$backoffice$Backend_Item_Model$HandlePlaceBid,
											_p48,
											_p47,
											_p46,
											_krisajenkins$remotedata$RemoteData$fromResult(_p45));
									},
									A2(ops.post, _gizra$backoffice$Backend_Bid_Endpoint$endpoint, createInfo));
								var editableUpdated = A2(_Gizra$elm_editable_webdata$Editable_WebData$state, _krisajenkins$remotedata$RemoteData$Loading, editable);
								var newBids = A3(_eeue56$elm_all_dict$EveryDict$insert, _p46, editableUpdated, item.newBids);
								var itemsUpdated = A4(
									_gizra$backoffice$PaginatedData$update,
									_p48,
									_p47,
									function (item) {
										return _elm_lang$core$Native_Utils.update(
											item,
											{newBids: newBids});
									},
									model.items);
								return {
									ctor: '_Tuple4',
									_0: _elm_lang$core$Native_Utils.update(
										model,
										{items: itemsUpdated}),
									_1: cmd,
									_2: _gizra$backoffice$Error_Utils$noError,
									_3: {ctor: '[]'}
								};
							},
							A2(_eeue56$elm_all_dict$EveryDict$get, _p46, item.newBids));
					},
					A3(_gizra$backoffice$PaginatedData$get, _p48, _p47, model.items));
			case 'SetAmount':
				var _p53 = _p8._0;
				var _p52 = _p8._1;
				var _p51 = _p8._2;
				var _p50 = _p8._3;
				return A3(
					_elm_community$maybe_extra$Maybe_Extra$unwrap,
					noChange,
					function (item) {
						var editable = _p8._4 ? _Gizra$elm_editable_webdata$Editable_WebData$create(_p50) : A2(
							_elm_lang$core$Maybe$withDefault,
							_Gizra$elm_editable_webdata$Editable_WebData$create(_gizra$backoffice$Amount$zero),
							A2(_eeue56$elm_all_dict$EveryDict$get, _p51, item.newBids));
						var editableUpdated = A2(
							_Gizra$elm_editable_webdata$Editable_WebData$map,
							function (_p49) {
								return A2(
									_stoeffel$editable$Editable$map,
									_elm_lang$core$Basics$always(_p50),
									_stoeffel$editable$Editable$edit(_p49));
							},
							editable);
						var newBids = A3(_eeue56$elm_all_dict$EveryDict$insert, _p51, editableUpdated, item.newBids);
						var itemsUpdated = A4(
							_gizra$backoffice$PaginatedData$update,
							_p53,
							_p52,
							function (item) {
								return _elm_lang$core$Native_Utils.update(
									item,
									{newBids: newBids});
							},
							model.items);
						return {
							ctor: '_Tuple4',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{items: itemsUpdated}),
							_1: _elm_lang$core$Platform_Cmd$none,
							_2: _gizra$backoffice$Error_Utils$noError,
							_3: {ctor: '[]'}
						};
					},
					A3(_gizra$backoffice$PaginatedData$get, _p53, _p52, model.items));
			default:
				var _p56 = _p8._0;
				var _p55 = _p8._1;
				return A3(
					_elm_community$maybe_extra$Maybe_Extra$unwrap,
					noChange,
					function (item) {
						var cmd = A2(
							_Gizra$elm_restful$Restful_Endpoint$toCmd,
							function (_p54) {
								return A3(
									_gizra$backoffice$Backend_Item_Model$HandleFetchItem,
									_p56,
									_p55,
									_krisajenkins$remotedata$RemoteData$fromResult(_p54));
							},
							A3(
								ops.patchAny,
								_gizra$backoffice$Backend_Item_Endpoint$itemsEndpoint,
								item.id,
								_gizra$backoffice$Backend_Item_Encoder$encodeSetFavorite(_p8._2)));
						var itemsUpdated = A4(
							_gizra$backoffice$PaginatedData$update,
							_p56,
							_p55,
							function (item) {
								return _elm_lang$core$Native_Utils.update(
									item,
									{favorite: _krisajenkins$remotedata$RemoteData$Loading});
							},
							model.items);
						return {
							ctor: '_Tuple4',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{items: itemsUpdated}),
							_1: cmd,
							_2: _gizra$backoffice$Error_Utils$noError,
							_3: {ctor: '[]'}
						};
					},
					A3(_gizra$backoffice$PaginatedData$get, _p56, _p55, model.items));
		}
	});

var _gizra$backoffice$Backend_MyAccount_Encoder$encodeMyAccount = function (form) {
	var password = A3(
		_elm_community$maybe_extra$Maybe_Extra$unwrap,
		{ctor: '[]'},
		function (password) {
			return {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'pass',
					_1: _elm_lang$core$Json_Encode$string(password)
				},
				_1: {ctor: '[]'}
			};
		},
		form.password);
	return _elm_lang$core$Json_Encode$object(
		A2(
			_elm_lang$core$List$append,
			password,
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'first_name',
					_1: _elm_lang$core$Json_Encode$string(form.firstName)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'last_name',
						_1: _elm_lang$core$Json_Encode$string(form.lastName)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'mail',
							_1: _elm_lang$core$Json_Encode$string(form.email)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'phone',
								_1: _elm_lang$core$Json_Encode$string(form.phone)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'address',
									_1: _gizra$backoffice$Backend_User_Encoder$encodeAddress(form.address)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'language',
										_1: _elm_lang$core$Json_Encode$string(
											_gizra$backoffice$Translate$languageToCode(form.language))
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'references',
											_1: A2(_elm_community$json_extra$Json_Encode_Extra$maybe, _elm_lang$core$Json_Encode$string, form.references)
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'subscribe_to_newsletter',
												_1: _elm_lang$core$Json_Encode$bool(form.subscribeToNewsLetter)
											},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			}));
};

var _gizra$backoffice$Backend_MyAccount_Endpoint$endpoint = A2(
	_Gizra$elm_restful$Restful_Endpoint$withKeyEncoder,
	_elm_lang$core$Basics$always(''),
	A2(
		_Gizra$elm_restful$Restful_Endpoint$withValueEncoder,
		_gizra$backoffice$Backend_User_Encoder$encodeUser,
		A4(
			_Gizra$elm_restful$Restful_Endpoint$endpoint,
			'api/me',
			_Gizra$elm_restful$Restful_Endpoint$decodeEntityId,
			A2(_elm_lang$core$Json_Decode$field, '0', _gizra$backoffice$Backend_User_Decoder$decodeUser),
			_Gizra$elm_restful$Restful_Endpoint$backend)));

var _gizra$backoffice$Backend_MyAccount_Update$update = F3(
	function (login, msg, model) {
		var ops = A2(
			_Gizra$elm_restful$Restful_Endpoint$applyAccessToken,
			login.credentials.accessToken,
			_Gizra$elm_restful$Restful_Endpoint$applyBackendUrl(login.credentials.backendUrl));
		var noChange = {
			ctor: '_Tuple4',
			_0: model,
			_1: _elm_lang$core$Platform_Cmd$none,
			_2: _gizra$backoffice$Error_Utils$noError,
			_3: {ctor: '[]'}
		};
		var _p0 = msg;
		if (_p0.ctor === 'Save') {
			var cmd = A2(
				_Gizra$elm_restful$Restful_Endpoint$toCmd,
				function (_p1) {
					return _gizra$backoffice$Backend_MyAccount_Model$HandleSave(
						_krisajenkins$remotedata$RemoteData$fromResult(_p1));
				},
				A3(
					ops.patchAny,
					_gizra$backoffice$Backend_MyAccount_Endpoint$endpoint,
					login.credentials.user.id,
					_gizra$backoffice$Backend_MyAccount_Encoder$encodeMyAccount(_p0._0)));
			return {
				ctor: '_Tuple4',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{myAccount: _krisajenkins$remotedata$RemoteData$Loading}),
				_1: cmd,
				_2: _gizra$backoffice$Error_Utils$noError,
				_3: {ctor: '[]'}
			};
		} else {
			var _p3 = _p0._0;
			var _p2 = _p3;
			switch (_p2.ctor) {
				case 'Success':
					return {
						ctor: '_Tuple4',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								myAccount: _krisajenkins$remotedata$RemoteData$Success(
									{ctor: '_Tuple0'})
							}),
						_1: _elm_lang$core$Platform_Cmd$none,
						_2: _gizra$backoffice$Error_Utils$noError,
						_3: {ctor: '[]'}
					};
				case 'Failure':
					return {
						ctor: '_Tuple4',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								myAccount: _krisajenkins$remotedata$RemoteData$Failure(_p2._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none,
						_2: A3(_gizra$backoffice$Error_Utils$maybeHttpError, _p3, 'Backend.MyAccount.Update', 'HandleSave'),
						_3: {ctor: '[]'}
					};
				default:
					return noChange;
			}
		}
	});

var _gizra$backoffice$Backend_Register_Decoder$decodeRegisterResult = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'user',
	_gizra$backoffice$Backend_User_Decoder$decodeUser,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'access_token',
		_elm_lang$core$Json_Decode$string,
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}))));

var _gizra$backoffice$Backend_Register_Encoder$encodeRegistrationForm = function (_p0) {
	var _p1 = _p0;
	var _p2 = _p1._1;
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'site',
				_1: _elm_lang$core$Json_Encode$string(_p1._0)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'first_name',
					_1: _elm_lang$core$Json_Encode$string(_p2.firstName)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'last_name',
						_1: _elm_lang$core$Json_Encode$string(_p2.lastName)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'mail',
							_1: _elm_lang$core$Json_Encode$string(_p2.email)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'pass',
								_1: _elm_lang$core$Json_Encode$string(_p2.password)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'phone',
									_1: _elm_lang$core$Json_Encode$string(_p2.phoneNumber)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'address',
										_1: _gizra$backoffice$Backend_User_Encoder$encodeAddress(_p2.address)
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'language',
											_1: _elm_lang$core$Json_Encode$string(
												_gizra$backoffice$Translate$languageToCode(_p2.language))
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'references',
												_1: A2(_elm_community$json_extra$Json_Encode_Extra$maybe, _elm_lang$core$Json_Encode$string, _p2.references)
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: 'recaptcha_token',
													_1: _elm_lang$core$Json_Encode$string(_p1._3)
												},
												_1: {
													ctor: '::',
													_0: {
														ctor: '_Tuple2',
														_0: 'subscribe_to_newsletter',
														_1: _elm_lang$core$Json_Encode$bool(_p2.subscribeToNewsLetter)
													},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		});
};

var _gizra$backoffice$Backend_Register_Endpoint$endpoint = A2(
	_Gizra$elm_restful$Restful_Endpoint$withCreatedEncoder,
	_gizra$backoffice$Backend_Register_Encoder$encodeRegistrationForm,
	A2(
		_Gizra$elm_restful$Restful_Endpoint$withValueEncoder,
		_elm_lang$core$Basics$always(
			_elm_lang$core$Json_Encode$object(
				{ctor: '[]'})),
		A4(
			_Gizra$elm_restful$Restful_Endpoint$endpoint,
			'api/user_registration',
			_elm_lang$core$Json_Decode$succeed(
				{ctor: '_Tuple0'}),
			_gizra$backoffice$Backend_Register_Decoder$decodeRegisterResult,
			_Gizra$elm_restful$Restful_Endpoint$drupalBackend)));

var _gizra$backoffice$Backend_Register_Update$update = F4(
	function (language, _p0, msg, model) {
		var _p1 = _p0;
		var ops = _Gizra$elm_restful$Restful_Endpoint$applyBackendUrl(_p1._0);
		var noChange = {
			ctor: '_Tuple4',
			_0: model,
			_1: _elm_lang$core$Platform_Cmd$none,
			_2: _gizra$backoffice$Error_Utils$noError,
			_3: {ctor: '[]'}
		};
		var _p2 = msg;
		if (_p2.ctor === 'Save') {
			var createInfo = {ctor: '_Tuple4', _0: _p1._1, _1: _p2._0, _2: language, _3: _p2._1};
			var cmd = A2(
				_Gizra$elm_restful$Restful_Endpoint$toCmd,
				function (_p3) {
					return _gizra$backoffice$Backend_Register_Model$HandleSave(
						_krisajenkins$remotedata$RemoteData$fromResult(_p3));
				},
				A2(ops.post, _gizra$backoffice$Backend_Register_Endpoint$endpoint, createInfo));
			return {
				ctor: '_Tuple4',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{register: _krisajenkins$remotedata$RemoteData$Loading}),
				_1: cmd,
				_2: _gizra$backoffice$Error_Utils$noError,
				_3: {ctor: '[]'}
			};
		} else {
			var _p5 = _p2._0;
			var _p4 = _p5;
			_v2_2:
			do {
				switch (_p4.ctor) {
					case 'Success':
						if ((_p4._0.ctor === '_Tuple2') && (_p4._0._1.ctor === '_Tuple2')) {
							return {
								ctor: '_Tuple4',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{
										register: _krisajenkins$remotedata$RemoteData$Success(
											{ctor: '_Tuple0'})
									}),
								_1: _elm_lang$core$Platform_Cmd$none,
								_2: _gizra$backoffice$Error_Utils$noError,
								_3: {
									ctor: '::',
									_0: _gizra$backoffice$App_Model$SetUser(
										{ctor: '_Tuple2', _0: _p4._0._1._0, _1: _p4._0._1._1}),
									_1: {ctor: '[]'}
								}
							};
						} else {
							break _v2_2;
						}
					case 'Failure':
						return {
							ctor: '_Tuple4',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									register: _krisajenkins$remotedata$RemoteData$Failure(_p4._0)
								}),
							_1: _elm_lang$core$Platform_Cmd$none,
							_2: A3(_gizra$backoffice$Error_Utils$maybeHttpError, _p5, 'Backend.Register.Update', 'HandleSave'),
							_3: {ctor: '[]'}
						};
					default:
						break _v2_2;
				}
			} while(false);
			return noChange;
		}
	});

var _gizra$backoffice$Backend_Sale_Endpoint$endpoint = A2(
	_Gizra$elm_restful$Restful_Endpoint$withParamsEncoder,
	_gizra$backoffice$Backend_Sale_Encoder$encodeSaleParams,
	A2(_Gizra$elm_restful$Restful_Endpoint$drupalEndpoint, 'api/sales', _gizra$backoffice$Backend_Sale_Decoder$decodeSale));

var _gizra$backoffice$Backend_Sale_Update$handleFetch = F4(
	function (saleUuid, webData, model, callingFuncName) {
		var appMsgs = {
			ctor: '::',
			_0: _gizra$backoffice$App_Model$MsgWidgetManager(_gizra$backoffice$WidgetManager_Model$SendUserAndDataToOtherWidgets),
			_1: {ctor: '[]'}
		};
		var salesUpdated = function () {
			var _p0 = webData;
			_v0_2:
			do {
				switch (_p0.ctor) {
					case 'Success':
						if (_p0._0.ctor === '_Tuple2') {
							return A3(
								_Gizra$elm_dictlist$EveryDictList$foldl,
								F3(
									function (saleId, sale, accum) {
										return A3(
											_eeue56$elm_all_dict$EveryDict$insert,
											saleUuid,
											_krisajenkins$remotedata$RemoteData$Success(sale),
											accum);
									}),
								model.sales,
								_p0._0._0);
						} else {
							break _v0_2;
						}
					case 'Failure':
						return A3(
							_eeue56$elm_all_dict$EveryDict$insert,
							saleUuid,
							_krisajenkins$remotedata$RemoteData$Failure(_p0._0),
							model.sales);
					default:
						break _v0_2;
				}
			} while(false);
			return model.sales;
		}();
		return {
			ctor: '_Tuple4',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{sales: salesUpdated}),
			_1: _elm_lang$core$Platform_Cmd$none,
			_2: A3(
				_gizra$backoffice$Error_Utils$maybeHttpError,
				webData,
				A2(_elm_lang$core$Basics_ops['++'], 'Backend.Sale.Update.', callingFuncName),
				'HandleFetch'),
			_3: appMsgs
		};
	});
var _gizra$backoffice$Backend_Sale_Update$fetch = F3(
	function (saleUuid, model, fetchFunc) {
		var saleParams = {saleUuid: saleUuid};
		return A7(
			fetchFunc,
			saleUuid,
			_gizra$backoffice$Backend_Sale_Endpoint$endpoint,
			saleParams,
			function (_p1) {
				return A2(
					_gizra$backoffice$Backend_Sale_Model$HandleFetch,
					saleUuid,
					A2(
						_krisajenkins$remotedata$RemoteData$map,
						_elm_lang$core$Tuple$mapFirst(_Gizra$elm_dictlist$EveryDictList$fromList),
						_krisajenkins$remotedata$RemoteData$fromResult(_p1)));
			},
			model.sales,
			F2(
				function (model, _p2) {
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							sales: A3(_eeue56$elm_all_dict$EveryDict$insert, saleUuid, _krisajenkins$remotedata$RemoteData$Loading, model.sales)
						});
				}),
			model);
	});
var _gizra$backoffice$Backend_Sale_Update$updateAnon = F4(
	function (backendUrl, login, msg, model) {
		var _p3 = msg;
		if (_p3.ctor === 'Fetch') {
			return A3(
				_gizra$backoffice$Backend_Sale_Update$fetch,
				_p3._0,
				model,
				_gizra$backoffice$Backend_Utils$fetchAnon(backendUrl));
		} else {
			return A4(_gizra$backoffice$Backend_Sale_Update$handleFetch, _p3._0, _p3._1, model, 'updateAnon');
		}
	});
var _gizra$backoffice$Backend_Sale_Update$update = F3(
	function (login, msg, model) {
		var _p4 = msg;
		if (_p4.ctor === 'Fetch') {
			return A3(
				_gizra$backoffice$Backend_Sale_Update$fetch,
				_p4._0,
				model,
				_gizra$backoffice$Backend_Utils$fetch(login));
		} else {
			return A4(_gizra$backoffice$Backend_Sale_Update$handleFetch, _p4._0, _p4._1, model, 'update');
		}
	});

var _gizra$backoffice$Backend_Site_Endpoint$endpoint = A2(
	_Gizra$elm_restful$Restful_Endpoint$withParamsEncoder,
	_gizra$backoffice$Backend_Site_Encoder$encodeSiteParams,
	A2(_Gizra$elm_restful$Restful_Endpoint$drupalEndpoint, 'api/sites', _gizra$backoffice$Backend_Site_Decoder$decodeSite));

var _gizra$backoffice$Backend_Site_Update$handleFetch = F2(
	function (webData, model) {
		var noChange = {
			ctor: '_Tuple2',
			_0: model,
			_1: {ctor: '[]'}
		};
		var _p0 = webData;
		switch (_p0.ctor) {
			case 'Success':
				var _p1 = _elm_lang$core$List$head(_p0._0);
				if (_p1.ctor === 'Just') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								site: _krisajenkins$remotedata$RemoteData$Success(_p1._0)
							}),
						_1: {
							ctor: '::',
							_0: _gizra$backoffice$App_Model$MsgWidgetManager(_gizra$backoffice$WidgetManager_Model$SendUserAndDataToOtherWidgets),
							_1: {ctor: '[]'}
						}
					};
				} else {
					return noChange;
				}
			case 'Failure':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							site: _krisajenkins$remotedata$RemoteData$Failure(_p0._0)
						}),
					_1: {ctor: '[]'}
				};
			default:
				return noChange;
		}
	});
var _gizra$backoffice$Backend_Site_Update$getCmd = F2(
	function (backendUrl, siteUuid) {
		var tagger = function (_p2) {
			return _gizra$backoffice$Backend_Site_Model$HandleFetch(
				_krisajenkins$remotedata$RemoteData$fromResult(
					A2(
						_elm_lang$core$Result$map,
						function (query) {
							return query.items;
						},
						_p2)));
		};
		var params = {name: siteUuid};
		return A2(
			_Gizra$elm_restful$Restful_Endpoint$toCmd,
			tagger,
			A3(_Gizra$elm_restful$Restful_Endpoint$select, backendUrl, _gizra$backoffice$Backend_Site_Endpoint$endpoint, params));
	});
var _gizra$backoffice$Backend_Site_Update$updateAnon = F3(
	function (backendUrl, msg, model) {
		var noChange = {
			ctor: '_Tuple4',
			_0: model,
			_1: _elm_lang$core$Platform_Cmd$none,
			_2: _gizra$backoffice$Error_Utils$noError,
			_3: {ctor: '[]'}
		};
		var _p3 = msg;
		if (_p3.ctor === 'Fetch') {
			return {
				ctor: '_Tuple4',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{site: _krisajenkins$remotedata$RemoteData$Loading}),
				_1: A2(_gizra$backoffice$Backend_Site_Update$getCmd, backendUrl, _p3._0),
				_2: _gizra$backoffice$Error_Utils$noError,
				_3: {ctor: '[]'}
			};
		} else {
			var _p5 = _p3._0;
			var _p4 = A2(_gizra$backoffice$Backend_Site_Update$handleFetch, _p5, model);
			var modelUpdated = _p4._0;
			var appMsgs = _p4._1;
			return {
				ctor: '_Tuple4',
				_0: modelUpdated,
				_1: _elm_lang$core$Platform_Cmd$none,
				_2: A3(_gizra$backoffice$Error_Utils$maybeHttpError, _p5, 'Backend.Site.Update.updateAnon', 'HandleFetch'),
				_3: appMsgs
			};
		}
	});
var _gizra$backoffice$Backend_Site_Update$update = F3(
	function (backendUrl, msg, model) {
		var noChange = {
			ctor: '_Tuple4',
			_0: model,
			_1: _elm_lang$core$Platform_Cmd$none,
			_2: _gizra$backoffice$Error_Utils$noError,
			_3: {ctor: '[]'}
		};
		var _p6 = msg;
		if (_p6.ctor === 'Fetch') {
			return {
				ctor: '_Tuple4',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{site: _krisajenkins$remotedata$RemoteData$Loading}),
				_1: A2(_gizra$backoffice$Backend_Site_Update$getCmd, backendUrl, _p6._0),
				_2: _gizra$backoffice$Error_Utils$noError,
				_3: {ctor: '[]'}
			};
		} else {
			var _p8 = _p6._0;
			var _p7 = A2(_gizra$backoffice$Backend_Site_Update$handleFetch, _p8, model);
			var modelUpdated = _p7._0;
			var appMsgs = _p7._1;
			return {
				ctor: '_Tuple4',
				_0: modelUpdated,
				_1: _elm_lang$core$Platform_Cmd$none,
				_2: A3(_gizra$backoffice$Error_Utils$maybeHttpError, _p8, 'Backend.Site.Update.update', 'HandleFetch'),
				_3: appMsgs
			};
		}
	});

var _gizra$backoffice$Backend_StaticItem_Endpoint$customBackend = A3(
	_Gizra$elm_restful$Restful_Endpoint$withItems,
	_elm_lang$core$Basics$identity,
	function (_p0) {
		return A2(
			_elm_lang$core$Json_Decode$field,
			'items',
			_elm_lang$core$Json_Decode$list(_p0));
	},
	_Gizra$elm_restful$Restful_Endpoint$backend);
var _gizra$backoffice$Backend_StaticItem_Endpoint$endpoint = A4(
	_Gizra$elm_restful$Restful_Endpoint$endpoint,
	'',
	A2(_elm_lang$core$Json_Decode$field, 'uuid', _Gizra$elm_restful$Restful_Endpoint$decodeEntityUuid),
	_gizra$backoffice$Backend_StaticItem_Decoder$decodeStaticItem,
	_gizra$backoffice$Backend_StaticItem_Endpoint$customBackend);

var _gizra$backoffice$Backend_StaticItem_Update$update = F3(
	function (login, msg, model) {
		var noChange = {
			ctor: '_Tuple4',
			_0: model,
			_1: _elm_lang$core$Platform_Cmd$none,
			_2: _gizra$backoffice$Error_Utils$noError,
			_3: {ctor: '[]'}
		};
		var _p0 = msg;
		if (_p0.ctor === 'Fetch') {
			var _p3 = _p0._0;
			var tagger = function (_p1) {
				return A2(
					_gizra$backoffice$Backend_StaticItem_Model$HandleFetch,
					_p3,
					A2(
						_krisajenkins$remotedata$RemoteData$map,
						_elm_lang$core$Tuple$mapFirst(_eeue56$elm_all_dict$EveryDict$fromList),
						_krisajenkins$remotedata$RemoteData$fromResult(_p1)));
			};
			var cmd = A2(
				_Gizra$elm_restful$Restful_Endpoint$toCmd,
				function (_p2) {
					return tagger(
						A2(
							_elm_lang$core$Result$map,
							function (query) {
								return {ctor: '_Tuple2', _0: query.items, _1: query.count};
							},
							_p2));
				},
				A3(
					_Gizra$elm_restful$Restful_Endpoint$select,
					_p0._1,
					_gizra$backoffice$Backend_StaticItem_Endpoint$endpoint,
					{ctor: '_Tuple0'}));
			var staticItems = model.staticItems;
			var pagerUpdated = A3(_eeue56$elm_all_dict$EveryDict$insert, _p3, _krisajenkins$remotedata$RemoteData$Loading, model.staticItems.pager);
			var staticItemsUpdated = _elm_lang$core$Native_Utils.update(
				staticItems,
				{pager: pagerUpdated});
			return {
				ctor: '_Tuple4',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{staticItems: staticItemsUpdated}),
				_1: cmd,
				_2: _gizra$backoffice$Error_Utils$noError,
				_3: {ctor: '[]'}
			};
		} else {
			var _p6 = _p0._1;
			var _p5 = _p0._0;
			var _p4 = _p6;
			_v1_2:
			do {
				switch (_p4.ctor) {
					case 'Success':
						if (_p4._0.ctor === '_Tuple2') {
							var appMsgs = {
								ctor: '::',
								_0: _gizra$backoffice$App_Model$MsgWidgetManager(_gizra$backoffice$WidgetManager_Model$SendUserAndDataToOtherWidgets),
								_1: {ctor: '[]'}
							};
							var staticItems = model.staticItems;
							var pagerUpdated = A3(
								_eeue56$elm_all_dict$EveryDict$insert,
								_p5,
								_krisajenkins$remotedata$RemoteData$Success(
									{ctor: '_Tuple0'}),
								model.staticItems.pager);
							var staticItemsUpdated = _elm_lang$core$Native_Utils.update(
								staticItems,
								{
									data: A3(_eeue56$elm_all_dict$EveryDict$foldl, _eeue56$elm_all_dict$EveryDict$insert, model.staticItems.data, _p4._0._0),
									pager: pagerUpdated
								});
							return {
								ctor: '_Tuple4',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{staticItems: staticItemsUpdated}),
								_1: _elm_lang$core$Platform_Cmd$none,
								_2: _gizra$backoffice$Error_Utils$noError,
								_3: appMsgs
							};
						} else {
							break _v1_2;
						}
					case 'Failure':
						var staticItems = model.staticItems;
						var pagerUpdated = A3(
							_eeue56$elm_all_dict$EveryDict$insert,
							_p5,
							_krisajenkins$remotedata$RemoteData$Failure(_p4._0),
							model.staticItems.pager);
						var staticItemsUpdated = _elm_lang$core$Native_Utils.update(
							staticItems,
							{pager: pagerUpdated});
						return {
							ctor: '_Tuple4',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{staticItems: staticItemsUpdated}),
							_1: _elm_lang$core$Platform_Cmd$none,
							_2: A3(
								_gizra$backoffice$Error_Utils$maybeHttpError,
								_p6,
								'Backend.StaticItem.Update',
								A2(
									_elm_lang$core$Basics_ops['++'],
									'HandleFetch ',
									_elm_lang$core$Basics$toString(_p5))),
							_3: {ctor: '[]'}
						};
					default:
						break _v1_2;
				}
			} while(false);
			return noChange;
		}
	});

var _gizra$backoffice$Backend_Update$updateBackend = F4(
	function (language, _p0, userAndData, msg) {
		var _p1 = _p0;
		var _p8 = _p1._2;
		var _p7 = _p1._1;
		var noChange = {
			ctor: '_Tuple4',
			_0: userAndData,
			_1: _elm_lang$core$Platform_Cmd$none,
			_2: _gizra$backoffice$Error_Utils$noError,
			_3: {ctor: '[]'}
		};
		var _p2 = userAndData;
		if (_p2.ctor === 'Authenticated') {
			var _p4 = _p2._0;
			var _p3 = msg;
			switch (_p3.ctor) {
				case 'MsgBidderInfo':
					return A5(
						_gizra$backoffice$Backend_Utils$updateSubModel,
						_p3._0,
						F2(
							function (subMsg, model) {
								return A3(_gizra$backoffice$Backend_BidderInfo_Update$update, _p4, subMsg, model);
							}),
						function (subCmds) {
							return _gizra$backoffice$Backend_Model$MsgBidderInfo(subCmds);
						},
						_p4.data,
						userAndData);
				case 'MsgBidServerAuthStatusRequiredByBo':
					return A5(
						_gizra$backoffice$Backend_Utils$updateSubModel,
						_p3._0,
						F2(
							function (subMsg, model) {
								return A4(_gizra$backoffice$Backend_BidServerAuthStatusRequiredByBo_Update$update, _p1._0, _p4, subMsg, model);
							}),
						function (subCmds) {
							return _gizra$backoffice$Backend_Model$MsgBidServerAuthStatusRequiredByBo(subCmds);
						},
						_p4.data,
						userAndData);
				case 'MsgItem':
					return A5(
						_gizra$backoffice$Backend_Utils$updateSubModel,
						_p3._0,
						F2(
							function (subMsg, model) {
								return A3(_gizra$backoffice$Backend_Item_Update$update, _p4, subMsg, model);
							}),
						function (subCmds) {
							return _gizra$backoffice$Backend_Model$MsgItem(subCmds);
						},
						_p4.data,
						userAndData);
				case 'MsgMyAccount':
					return A5(
						_gizra$backoffice$Backend_Utils$updateSubModel,
						_p3._0,
						F2(
							function (subMsg, model) {
								return A3(_gizra$backoffice$Backend_MyAccount_Update$update, _p4, subMsg, model);
							}),
						function (subCmds) {
							return _gizra$backoffice$Backend_Model$MsgMyAccount(subCmds);
						},
						_p4.data,
						userAndData);
				case 'MsgCreditRequest':
					return A5(
						_gizra$backoffice$Backend_Utils$updateSubModel,
						_p3._0,
						F2(
							function (subMsg, model) {
								return A3(_gizra$backoffice$Backend_CreditRequest_Update$update, _p4, subMsg, model);
							}),
						function (subCmds) {
							return _gizra$backoffice$Backend_Model$MsgCreditRequest(subCmds);
						},
						_p4.data,
						userAndData);
				case 'MsgSale':
					return A5(
						_gizra$backoffice$Backend_Utils$updateSubModel,
						_p3._0,
						F2(
							function (subMsg, model) {
								return A3(_gizra$backoffice$Backend_Sale_Update$update, _p4, subMsg, model);
							}),
						function (subCmds) {
							return _gizra$backoffice$Backend_Model$MsgSale(subCmds);
						},
						_p4.data,
						userAndData);
				case 'MsgSite':
					return A5(
						_gizra$backoffice$Backend_Utils$updateSubModel,
						_p3._0,
						F2(
							function (subMsg, model) {
								return A3(_gizra$backoffice$Backend_Site_Update$update, _p7, subMsg, model);
							}),
						function (subCmds) {
							return _gizra$backoffice$Backend_Model$MsgSite(subCmds);
						},
						_p4.data,
						userAndData);
				case 'MsgStaticItem':
					return A5(
						_gizra$backoffice$Backend_Utils$updateSubModel,
						_p3._0,
						F2(
							function (subMsg, model) {
								return A3(_gizra$backoffice$Backend_StaticItem_Update$update, _p4, subMsg, model);
							}),
						function (subCmds) {
							return _gizra$backoffice$Backend_Model$MsgStaticItem(subCmds);
						},
						_p4.data,
						userAndData);
				default:
					return noChange;
			}
		} else {
			var _p6 = _p2._0;
			var _p5 = msg;
			switch (_p5.ctor) {
				case 'MsgForgotPassword':
					return A5(
						_gizra$backoffice$Backend_Utils$updateAnonymousSubModel,
						_p5._0,
						F2(
							function (subMsg, model) {
								return A4(
									_gizra$backoffice$Backend_ForgotPassword_Update$update,
									language,
									{ctor: '_Tuple2', _0: _p7, _1: _p8},
									subMsg,
									model);
							}),
						function (subCmds) {
							return _gizra$backoffice$Backend_Model$MsgForgotPassword(subCmds);
						},
						_p6.data,
						userAndData);
				case 'MsgItem':
					return A5(
						_gizra$backoffice$Backend_Utils$updateAnonymousSubModel,
						_p5._0,
						F2(
							function (subMsg, model) {
								return A4(_gizra$backoffice$Backend_Item_Update$updateAnon, _p7, _p6, subMsg, model);
							}),
						function (subCmds) {
							return _gizra$backoffice$Backend_Model$MsgItem(subCmds);
						},
						_p6.data,
						userAndData);
				case 'MsgRegister':
					return A5(
						_gizra$backoffice$Backend_Utils$updateAnonymousSubModel,
						_p5._0,
						F2(
							function (subMsg, model) {
								return A4(
									_gizra$backoffice$Backend_Register_Update$update,
									language,
									{ctor: '_Tuple2', _0: _p7, _1: _p8},
									subMsg,
									model);
							}),
						function (subCmds) {
							return _gizra$backoffice$Backend_Model$MsgRegister(subCmds);
						},
						_p6.data,
						userAndData);
				case 'MsgSale':
					return A5(
						_gizra$backoffice$Backend_Utils$updateAnonymousSubModel,
						_p5._0,
						F2(
							function (subMsg, model) {
								return A4(_gizra$backoffice$Backend_Sale_Update$updateAnon, _p7, _p6, subMsg, model);
							}),
						function (subCmds) {
							return _gizra$backoffice$Backend_Model$MsgSale(subCmds);
						},
						_p6.data,
						userAndData);
				case 'MsgSite':
					return A5(
						_gizra$backoffice$Backend_Utils$updateAnonymousSubModel,
						_p5._0,
						F2(
							function (subMsg, model) {
								return A3(_gizra$backoffice$Backend_Site_Update$updateAnon, _p7, subMsg, model);
							}),
						function (subCmds) {
							return _gizra$backoffice$Backend_Model$MsgSite(subCmds);
						},
						_p6.data,
						userAndData);
				default:
					return noChange;
			}
		}
	});

var _gizra$backoffice$Pages_ForgotPassword_Update$update = F2(
	function (msg, model) {
		var _p0 = msg;
		if (_p0.ctor === 'Save') {
			var appMSgs = _elm_lang$core$String$isEmpty(model.email) ? {ctor: '[]'} : {
				ctor: '::',
				_0: _gizra$backoffice$App_Model$MsgBackend(
					_gizra$backoffice$Backend_Model$MsgForgotPassword(
						_gizra$backoffice$Backend_ForgotPassword_Model$Save(model.email))),
				_1: {ctor: '[]'}
			};
			return {ctor: '_Tuple4', _0: model, _1: _elm_lang$core$Platform_Cmd$none, _2: _gizra$backoffice$Error_Utils$noError, _3: appMSgs};
		} else {
			return {
				ctor: '_Tuple4',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{email: _p0._0}),
				_1: _elm_lang$core$Platform_Cmd$none,
				_2: _gizra$backoffice$Error_Utils$noError,
				_3: {ctor: '[]'}
			};
		}
	});

var _gizra$backoffice$Utils_EditableWebData$getOriginalValue = function (editable) {
	return _stoeffel$editable$Editable$value(
		_stoeffel$editable$Editable$cancel(
			_Gizra$elm_editable_webdata$Editable_WebData$toEditable(editable)));
};
var _gizra$backoffice$Utils_EditableWebData$getValue = function (editable) {
	return _stoeffel$editable$Editable$value(
		_Gizra$elm_editable_webdata$Editable_WebData$toEditable(editable));
};

var _gizra$backoffice$Pages_ItemPreLiveSale_Utils$hasPendingCreditRequest = F2(
	function (login, saleUuid) {
		var _p0 = login.data.creditRequests;
		if (_p0.ctor === 'Success') {
			return A3(
				_eeue56$elm_all_dict$EveryDict$foldl,
				F3(
					function (_p1, editable, accum) {
						if (accum) {
							return accum;
						} else {
							if (_gizra$backoffice$Backend_CreditRequest_Utils$isPending(editable)) {
								var entity = _gizra$backoffice$Utils_EditableWebData$getValue(editable);
								var _p2 = entity.credit;
								if (_p2.ctor === 'None') {
									return false;
								} else {
									return true;
								}
							} else {
								return accum;
							}
						}
					}),
				false,
				_p0._0);
		} else {
			return false;
		}
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_Utils$hasLiveCredit = F2(
	function (login, saleUuid) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			false,
			A2(
				_elm_lang$core$Maybe$map,
				function (bidderInfo) {
					var liveCredit = A2(
						_elm_lang$core$Maybe$withDefault,
						_gizra$backoffice$Amount$None,
						A2(_eeue56$elm_all_dict$EveryDict$get, _gizra$backoffice$Backend_BidderInfo_Model$LiveCredit, bidderInfo.amountRestrictions));
					var _p3 = liveCredit;
					if (_p3.ctor === 'None') {
						return false;
					} else {
						return true;
					}
				},
				A2(_gizra$backoffice$Backend_BidderInfo_Utils$getWebsiteBidderInfo, login, saleUuid)));
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_Utils$hasLiveCreditOrPendingCreditRequest = F2(
	function (login, saleUuid) {
		return A2(_gizra$backoffice$Pages_ItemPreLiveSale_Utils$hasLiveCredit, login, saleUuid) || A2(_gizra$backoffice$Pages_ItemPreLiveSale_Utils$hasPendingCreditRequest, login, saleUuid);
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_Utils$getWidgetType = F3(
	function (item, creatableBidType, model) {
		var widgetType = A2(
			_elm_lang$core$Maybe$withDefault,
			_gizra$backoffice$Pages_ItemPreLiveSale_Model$LinksToPlaceBid,
			A2(_eeue56$elm_all_dict$EveryDict$get, creatableBidType, model.widgetType));
		var _p4 = widgetType;
		switch (_p4.ctor) {
			case 'LinkToDeleteCurrentBid':
				return _gizra$backoffice$Pages_ItemPreLiveSale_Model$LinkToDeleteCurrentBid;
			case 'LinksToPlaceBid':
				return _gizra$backoffice$Pages_ItemPreLiveSale_Model$LinksToPlaceBid;
			default:
				return A3(
					_elm_community$maybe_extra$Maybe_Extra$unwrap,
					_gizra$backoffice$Pages_ItemPreLiveSale_Model$PlaceBidForm,
					function (editable) {
						var isSuccess = _krisajenkins$remotedata$RemoteData$isSuccess(
							_Gizra$elm_editable_webdata$Editable_WebData$toWebData(editable));
						return isSuccess ? _gizra$backoffice$Pages_ItemPreLiveSale_Model$LinksToPlaceBid : _gizra$backoffice$Pages_ItemPreLiveSale_Model$PlaceBidForm;
					},
					A2(_eeue56$elm_all_dict$EveryDict$get, creatableBidType, item.newBids));
		}
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_Utils$getNextBidAmountAndIncrement = F5(
	function (login, saleUuid, item, creatableBidType, model) {
		var maybeOwnHighestAgentBid = A2(
			_elm_lang$core$Maybe$map,
			function (_) {
				return _.amount;
			},
			A3(_gizra$backoffice$Backend_Bid_Utils$getOwnHighestAgentBid, login, saleUuid, item));
		var bidIncrements = A2(
			_elm_lang$core$Maybe$withDefault,
			_gizra$backoffice$Pages_ItemPreLiveSale_Model$emptyBidIncrements,
			A2(_eeue56$elm_all_dict$EveryDict$get, creatableBidType, model.bidIncrements));
		var startAmount = function () {
			var _p5 = creatableBidType;
			if (_p5.ctor === 'Agent') {
				var _p6 = bidIncrements.downDelta;
				if (_p6.ctor === 'Nothing') {
					return A2(_elm_lang$core$Maybe$withDefault, item.startingPrice, maybeOwnHighestAgentBid);
				} else {
					return A2(
						_elm_lang$core$Maybe$withDefault,
						_gizra$backoffice$Amount$zero,
						A2(_elm_community$list_extra$List_Extra$getAt, _p6._0, bidIncrements.down));
				}
			} else {
				return A3(_gizra$backoffice$Backend_Item_Utils$isWinningUser, login, saleUuid, item) ? A2(
					_elm_lang$core$Maybe$withDefault,
					item.startingPrice,
					A2(
						_elm_community$maybe_extra$Maybe_Extra$orElse,
						item.currentPrice,
						A2(
							_elm_lang$core$Maybe$map,
							function (_) {
								return _.amount;
							},
							A3(_gizra$backoffice$Backend_Bid_Utils$getOwnHighestMailBid, login, saleUuid, item)))) : A2(_elm_lang$core$Maybe$withDefault, item.startingPrice, item.nextPrice);
			}
		}();
		var nextAmount = A2(
			_gizra$backoffice$Amount$add,
			A3(_elm_lang$core$List$foldr, _gizra$backoffice$Amount$add, _gizra$backoffice$Amount$zero, bidIncrements.up),
			A2(
				_gizra$backoffice$Amount$subtract,
				startAmount,
				A3(_elm_lang$core$List$foldr, _gizra$backoffice$Amount$add, _gizra$backoffice$Amount$zero, bidIncrements.down)));
		var _p7 = {
			ctor: '_Tuple2',
			_0: A2(_gizra$backoffice$Backend_Item_Utils$getBidStepUp, item.bidSteps, nextAmount),
			_1: A2(_gizra$backoffice$Backend_Item_Utils$getBidStepDown, item.bidSteps, nextAmount)
		};
		var nextBidIncrement = _p7._0;
		var nextBidDecrement = _p7._1;
		var _p8 = function () {
			var _p9 = function () {
				var _p10 = creatableBidType;
				if (_p10.ctor === 'Agent') {
					return (_elm_community$maybe_extra$Maybe_Extra$isJust(maybeOwnHighestAgentBid) && _elm_community$maybe_extra$Maybe_Extra$isNothing(bidIncrements.downDelta)) ? {
						ctor: '_Tuple2',
						_0: A2(_gizra$backoffice$Amount$add, nextAmount, nextBidIncrement),
						_1: A2(_gizra$backoffice$Amount$subtract, nextAmount, nextBidIncrement)
					} : {ctor: '_Tuple2', _0: nextAmount, _1: nextAmount};
				} else {
					return A3(_gizra$backoffice$Backend_Item_Utils$isWinningUser, login, saleUuid, item) ? {
						ctor: '_Tuple2',
						_0: A2(_gizra$backoffice$Amount$add, nextAmount, nextBidIncrement),
						_1: A2(_gizra$backoffice$Amount$subtract, nextAmount, nextBidIncrement)
					} : {ctor: '_Tuple2', _0: nextAmount, _1: nextAmount};
				}
			}();
			var calculatedInc = _p9._0;
			var calculatedDec = _p9._1;
			return A3(
				_gizra$backoffice$Amount$compareInfix,
				calculatedDec,
				F2(
					function (x, y) {
						return _elm_lang$core$Native_Utils.cmp(x, y) > 0;
					}),
				item.startingPrice) ? {ctor: '_Tuple2', _0: calculatedInc, _1: calculatedDec} : {ctor: '_Tuple2', _0: calculatedInc, _1: item.startingPrice};
		}();
		var finalAmountIncrement = _p8._0;
		var finalAmountDecrement = _p8._1;
		return {
			ctor: '_Tuple2',
			_0: {ctor: '_Tuple2', _0: finalAmountIncrement, _1: nextBidIncrement},
			_1: {ctor: '_Tuple2', _0: finalAmountDecrement, _1: nextBidDecrement}
		};
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_Utils$getNextBidAmount = F5(
	function (login, saleUuid, itemUuid, creatableBidType, model) {
		return A2(
			_elm_lang$core$Maybe$andThen,
			function (sale) {
				return A2(
					_elm_lang$core$Maybe$andThen,
					function (item) {
						var _p11 = {ctor: '_Tuple2', _0: creatableBidType, _1: sale.mailAuctionType};
						if (((_p11.ctor === '_Tuple2') && (_p11._0.ctor === 'Mail')) && (_p11._1.ctor === 'Obscured')) {
							return A2(
								_elm_lang$core$Maybe$map,
								function (_) {
									return _.amount;
								},
								A3(_gizra$backoffice$Backend_Bid_Utils$getOwnHighestMailBid, login, saleUuid, item));
						} else {
							return _elm_lang$core$Maybe$Just(
								_elm_lang$core$Tuple$first(
									_elm_lang$core$Tuple$first(
										A5(_gizra$backoffice$Pages_ItemPreLiveSale_Utils$getNextBidAmountAndIncrement, login, saleUuid, item, creatableBidType, model))));
						}
					},
					A3(_gizra$backoffice$PaginatedData$get, saleUuid, itemUuid, login.data.items));
			},
			A2(
				_elm_lang$core$Maybe$andThen,
				_krisajenkins$remotedata$RemoteData$toMaybe,
				A2(_eeue56$elm_all_dict$EveryDict$get, saleUuid, login.data.sales)));
	});

var _gizra$backoffice$Pages_ItemPreLiveSale_Update$update = F3(
	function (login, msg, model) {
		var recursiveUpdateWithAppMsgs = F2(
			function (msg, addAppMsgs) {
				var _p0 = A3(_gizra$backoffice$Pages_ItemPreLiveSale_Update$update, login, msg, model);
				var updatedModel = _p0._0;
				var cmd = _p0._1;
				var err = _p0._2;
				var appMsgs = _p0._3;
				return {
					ctor: '_Tuple4',
					_0: updatedModel,
					_1: cmd,
					_2: err,
					_3: A2(_elm_lang$core$Basics_ops['++'], appMsgs, addAppMsgs)
				};
			});
		var noChange = {
			ctor: '_Tuple4',
			_0: model,
			_1: _elm_lang$core$Platform_Cmd$none,
			_2: _gizra$backoffice$Error_Utils$noError,
			_3: {ctor: '[]'}
		};
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'BidAmountDecrement':
				var _p8 = _p1._0;
				var _p7 = _p1._1;
				var _p6 = _p1._2;
				var bidIncrements = A2(
					_elm_lang$core$Maybe$withDefault,
					_gizra$backoffice$Pages_ItemPreLiveSale_Model$emptyBidIncrements,
					A2(_eeue56$elm_all_dict$EveryDict$get, _p6, model.bidIncrements));
				var _p2 = function () {
					var _p3 = bidIncrements.up;
					if (_p3.ctor === '[]') {
						return {
							ctor: '_Tuple2',
							_0: {ctor: '[]'},
							_1: {ctor: '::', _0: _p1._3, _1: bidIncrements.down}
						};
					} else {
						return {
							ctor: '_Tuple2',
							_0: _p3._1,
							_1: {ctor: '[]'}
						};
					}
				}();
				var upList = _p2._0;
				var downList = _p2._1;
				var bidIncrementsUpdated = function () {
					var _p4 = _p6;
					if (_p4.ctor === 'Agent') {
						var _p5 = bidIncrements.downDelta;
						if (_p5.ctor === 'Nothing') {
							return _elm_lang$core$Native_Utils.update(
								bidIncrements,
								{up: upList, down: downList});
						} else {
							return _elm_lang$core$Native_Utils.update(
								bidIncrements,
								{
									downDelta: _elm_lang$core$Maybe$Just(_p5._0 + 1)
								});
						}
					} else {
						return _elm_lang$core$Native_Utils.update(
							bidIncrements,
							{up: upList});
					}
				}();
				var modelUpdated = _elm_lang$core$Native_Utils.update(
					model,
					{
						bidIncrements: A3(_eeue56$elm_all_dict$EveryDict$insert, _p6, bidIncrementsUpdated, model.bidIncrements)
					});
				var maybeNextBidAmount = A5(_gizra$backoffice$Pages_ItemPreLiveSale_Utils$getNextBidAmount, login, _p8, _p7, _p6, modelUpdated);
				var appMsgs = A3(
					_elm_community$maybe_extra$Maybe_Extra$unwrap,
					{ctor: '[]'},
					function (nextBidAmount) {
						return {
							ctor: '::',
							_0: _gizra$backoffice$App_Model$MsgBackend(
								_gizra$backoffice$Backend_Model$MsgItem(
									A5(_gizra$backoffice$Backend_Item_Model$SetAmount, _p8, _p7, _p6, nextBidAmount, false))),
							_1: {ctor: '[]'}
						};
					},
					maybeNextBidAmount);
				return {ctor: '_Tuple4', _0: modelUpdated, _1: _elm_lang$core$Platform_Cmd$none, _2: _gizra$backoffice$Error_Utils$noError, _3: appMsgs};
			case 'BidAmountIncrement':
				var _p17 = _p1._0;
				var _p16 = _p1._1;
				var _p15 = _p1._2;
				var _p14 = _p1._3;
				var bidIncrements = A2(
					_elm_lang$core$Maybe$withDefault,
					_gizra$backoffice$Pages_ItemPreLiveSale_Model$emptyBidIncrements,
					A2(_eeue56$elm_all_dict$EveryDict$get, _p15, model.bidIncrements));
				var _p9 = function () {
					var _p10 = bidIncrements.down;
					if (_p10.ctor === '[]') {
						return {
							ctor: '_Tuple2',
							_0: {ctor: '::', _0: _p14, _1: bidIncrements.up},
							_1: {ctor: '[]'}
						};
					} else {
						return {
							ctor: '_Tuple2',
							_0: {ctor: '[]'},
							_1: _p10._1
						};
					}
				}();
				var upList = _p9._0;
				var downList = _p9._1;
				var bidIncrementsUpdated = function () {
					var _p11 = _p15;
					if (_p11.ctor === 'Agent') {
						var _p12 = bidIncrements.downDelta;
						if (_p12.ctor === 'Nothing') {
							return _elm_lang$core$Native_Utils.update(
								bidIncrements,
								{up: upList, down: downList});
						} else {
							var _p13 = _p12._0;
							return (_elm_lang$core$Native_Utils.cmp(_p13, 0) > 0) ? ((_elm_lang$core$Native_Utils.cmp(_p13 - 1, 0) > -1) ? _elm_lang$core$Native_Utils.update(
								bidIncrements,
								{
									downDelta: _elm_lang$core$Maybe$Just(_p13 - 1)
								}) : _elm_lang$core$Native_Utils.update(
								bidIncrements,
								{downDelta: _elm_lang$core$Maybe$Nothing})) : _elm_lang$core$Native_Utils.update(
								bidIncrements,
								{up: upList, downDelta: _elm_lang$core$Maybe$Nothing});
						}
					} else {
						return _elm_lang$core$Native_Utils.update(
							bidIncrements,
							{
								up: {ctor: '::', _0: _p14, _1: bidIncrements.up}
							});
					}
				}();
				var modelUpdated = _elm_lang$core$Native_Utils.update(
					model,
					{
						bidIncrements: A3(_eeue56$elm_all_dict$EveryDict$insert, _p15, bidIncrementsUpdated, model.bidIncrements)
					});
				var maybeNextBidAmount = A5(_gizra$backoffice$Pages_ItemPreLiveSale_Utils$getNextBidAmount, login, _p17, _p16, _p15, modelUpdated);
				var appMsgs = A3(
					_elm_community$maybe_extra$Maybe_Extra$unwrap,
					{ctor: '[]'},
					function (nextBidAmount) {
						return {
							ctor: '::',
							_0: _gizra$backoffice$App_Model$MsgBackend(
								_gizra$backoffice$Backend_Model$MsgItem(
									A5(_gizra$backoffice$Backend_Item_Model$SetAmount, _p17, _p16, _p15, nextBidAmount, false))),
							_1: {ctor: '[]'}
						};
					},
					maybeNextBidAmount);
				return {ctor: '_Tuple4', _0: modelUpdated, _1: _elm_lang$core$Platform_Cmd$none, _2: _gizra$backoffice$Error_Utils$noError, _3: appMsgs};
			case 'DeleteCurrentBid':
				var _p20 = _p1._0;
				var _p19 = _p1._1._0;
				var _p18 = _p1._2;
				return A2(
					recursiveUpdateWithAppMsgs,
					A4(_gizra$backoffice$Pages_ItemPreLiveSale_Model$SetWidgetType, _p20, _p19, _p18, _gizra$backoffice$Pages_ItemPreLiveSale_Model$LinksToPlaceBid),
					{
						ctor: '::',
						_0: _gizra$backoffice$App_Model$MsgBackend(
							_gizra$backoffice$Backend_Model$MsgItem(
								A3(_gizra$backoffice$Backend_Item_Model$DeleteCurrentBid, _p20, _p19, _p18))),
						_1: {ctor: '[]'}
					});
			case 'PlaceBid':
				var _p26 = _p1._0;
				var _p25 = _p1._1;
				var _p24 = _p1._2;
				var _p23 = _p1._3;
				var createBidMsg = {
					ctor: '::',
					_0: _gizra$backoffice$App_Model$MsgBackend(
						_gizra$backoffice$Backend_Model$MsgItem(
							A3(_gizra$backoffice$Backend_Item_Model$PlaceBid, _p26, _p25, _p23))),
					_1: {ctor: '[]'}
				};
				var appMsgs = function () {
					var _p21 = _p23;
					if (_p21.ctor === 'Agent') {
						var submittedBid = A2(_eeue56$elm_all_dict$EveryDict$get, _p23, _p24.newBids);
						var maybeOwnHighestAgentBid = A2(
							_elm_lang$core$Maybe$map,
							function (_) {
								return _.amount;
							},
							A3(_gizra$backoffice$Backend_Bid_Utils$getOwnHighestAgentBid, login, _p26, _p24));
						var _p22 = submittedBid;
						if (_p22.ctor === 'Just') {
							return _elm_lang$core$Native_Utils.eq(
								_elm_lang$core$Maybe$Just(
									_stoeffel$editable$Editable$value(
										_Gizra$elm_editable_webdata$Editable_WebData$toEditable(_p22._0))),
								maybeOwnHighestAgentBid) ? {
								ctor: '::',
								_0: _gizra$backoffice$App_Model$MsgPagesItemPreLiveSale(
									A4(_gizra$backoffice$Pages_ItemPreLiveSale_Model$SetWidgetType, _p26, _p25, _gizra$backoffice$Backend_Item_Model$Agent, _gizra$backoffice$Pages_ItemPreLiveSale_Model$LinksToPlaceBid)),
								_1: {ctor: '[]'}
							} : createBidMsg;
						} else {
							return createBidMsg;
						}
					} else {
						return createBidMsg;
					}
				}();
				return {
					ctor: '_Tuple4',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{bidIncrements: _eeue56$elm_all_dict$EveryDict$empty}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _gizra$backoffice$Error_Utils$noError,
					_3: appMsgs
				};
			case 'SetAmount':
				var _p30 = _p1._3;
				var _p29 = _p1._0;
				var _p28 = _p1._1;
				var _p27 = _p1._2;
				return _elm_lang$core$String$isEmpty(_p30) ? {
					ctor: '_Tuple4',
					_0: model,
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _gizra$backoffice$Error_Utils$noError,
					_3: {
						ctor: '::',
						_0: _gizra$backoffice$App_Model$MsgBackend(
							_gizra$backoffice$Backend_Model$MsgItem(
								A5(
									_gizra$backoffice$Backend_Item_Model$SetAmount,
									_p29,
									_p28,
									_p27,
									_gizra$backoffice$Amount$Amount(0),
									false))),
						_1: {ctor: '[]'}
					}
				} : A3(
					_elm_community$maybe_extra$Maybe_Extra$unwrap,
					noChange,
					function (val) {
						return {
							ctor: '_Tuple4',
							_0: model,
							_1: _elm_lang$core$Platform_Cmd$none,
							_2: _gizra$backoffice$Error_Utils$noError,
							_3: {
								ctor: '::',
								_0: _gizra$backoffice$App_Model$MsgBackend(
									_gizra$backoffice$Backend_Model$MsgItem(
										A5(
											_gizra$backoffice$Backend_Item_Model$SetAmount,
											_p29,
											_p28,
											_p27,
											_gizra$backoffice$Amount$Amount(val),
											false))),
								_1: {ctor: '[]'}
							}
						};
					},
					_elm_lang$core$Result$toMaybe(
						_elm_lang$core$String$toInt(_p30)));
			case 'SetFavorite':
				return {
					ctor: '_Tuple4',
					_0: model,
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _gizra$backoffice$Error_Utils$noError,
					_3: {
						ctor: '::',
						_0: _gizra$backoffice$App_Model$MsgBackend(
							_gizra$backoffice$Backend_Model$MsgItem(
								A3(_gizra$backoffice$Backend_Item_Model$SetFavorite, _p1._0, _p1._1, _p1._2))),
						_1: {ctor: '[]'}
					}
				};
			default:
				var _p35 = _p1._3;
				var _p34 = _p1._0;
				var _p33 = _p1._1;
				var _p32 = _p1._2;
				var appMsgs = function () {
					var _p31 = _p35;
					switch (_p31.ctor) {
						case 'LinkToDeleteCurrentBid':
							return {ctor: '[]'};
						case 'LinksToPlaceBid':
							return {ctor: '[]'};
						default:
							return A3(
								_elm_community$maybe_extra$Maybe_Extra$unwrap,
								{
									ctor: '::',
									_0: _gizra$backoffice$App_Model$MsgBackend(
										_gizra$backoffice$Backend_Model$MsgItem(
											A5(_gizra$backoffice$Backend_Item_Model$SetAmount, _p34, _p33, _p32, _gizra$backoffice$Amount$zero, true))),
									_1: {ctor: '[]'}
								},
								function (nextAmount) {
									return {
										ctor: '::',
										_0: _gizra$backoffice$App_Model$MsgBackend(
											_gizra$backoffice$Backend_Model$MsgItem(
												A5(_gizra$backoffice$Backend_Item_Model$SetAmount, _p34, _p33, _p32, nextAmount, true))),
										_1: {ctor: '[]'}
									};
								},
								A5(_gizra$backoffice$Pages_ItemPreLiveSale_Utils$getNextBidAmount, login, _p34, _p33, _p32, model));
					}
				}();
				return {
					ctor: '_Tuple4',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							widgetType: A3(_eeue56$elm_all_dict$EveryDict$insert, _p32, _p35, model.widgetType),
							bidIncrements: _eeue56$elm_all_dict$EveryDict$empty
						}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _gizra$backoffice$Error_Utils$noError,
					_3: appMsgs
				};
		}
	});

var _gizra$backoffice$Pages_Login_Update$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'SetName':
				return {
					ctor: '_Tuple4',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{name: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _gizra$backoffice$Error_Utils$noError,
					_3: {ctor: '[]'}
				};
			case 'SetPassword':
				return {
					ctor: '_Tuple4',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{pass: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _gizra$backoffice$Error_Utils$noError,
					_3: {ctor: '[]'}
				};
			case 'TogglePasswordVisibility':
				return {
					ctor: '_Tuple4',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{passwordVisible: !model.passwordVisible}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _gizra$backoffice$Error_Utils$noError,
					_3: {ctor: '[]'}
				};
			default:
				return {
					ctor: '_Tuple4',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{pass: ''}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _gizra$backoffice$Error_Utils$noError,
					_3: {
						ctor: '::',
						_0: A2(_gizra$backoffice$App_Model$TryLogin, model.name, model.pass),
						_1: {ctor: '[]'}
					}
				};
		}
	});

var _gizra$backoffice$Pages_MyAccount_Utils$initialForm = function (user) {
	var fields = A2(
		_elm_lang$core$List$map,
		function (_p0) {
			var _p1 = _p0;
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Basics$toString(_p1._0),
				_1: _p1._1
			};
		},
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: _gizra$backoffice$Utils_UserForms$FirstName,
				_1: _etaque$elm_form$Form_Field$string(user.firstName)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: _gizra$backoffice$Utils_UserForms$LastName,
					_1: _etaque$elm_form$Form_Field$string(user.lastName)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: _gizra$backoffice$Utils_UserForms$Email,
						_1: _etaque$elm_form$Form_Field$string(user.email)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: _gizra$backoffice$Utils_UserForms$PhoneNumber,
							_1: _etaque$elm_form$Form_Field$string(user.phone)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: _gizra$backoffice$Utils_UserForms$Language_,
								_1: _etaque$elm_form$Form_Field$string(
									_gizra$backoffice$Translate$languageToCode(user.language))
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: _gizra$backoffice$Utils_UserForms$Country,
									_1: A3(
										_elm_community$maybe_extra$Maybe_Extra$unwrap,
										_etaque$elm_form$Form_Field$value(_etaque$elm_form$Form_Field$EmptyField),
										_etaque$elm_form$Form_Field$string,
										A2(
											_elm_lang$core$Maybe$map,
											function (_) {
												return _.country;
											},
											user.address))
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: _gizra$backoffice$Utils_UserForms$AddressLine1,
										_1: A3(
											_elm_community$maybe_extra$Maybe_Extra$unwrap,
											_etaque$elm_form$Form_Field$value(_etaque$elm_form$Form_Field$EmptyField),
											_etaque$elm_form$Form_Field$string,
											A2(
												_elm_lang$core$Maybe$map,
												function (_) {
													return _.addressLine1;
												},
												user.address))
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: _gizra$backoffice$Utils_UserForms$AddressLine2,
											_1: A3(
												_elm_community$maybe_extra$Maybe_Extra$unwrap,
												_etaque$elm_form$Form_Field$value(_etaque$elm_form$Form_Field$EmptyField),
												_etaque$elm_form$Form_Field$string,
												A2(
													_elm_lang$core$Maybe$andThen,
													function (_) {
														return _.addressLine2;
													},
													user.address))
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: _gizra$backoffice$Utils_UserForms$City,
												_1: A3(
													_elm_community$maybe_extra$Maybe_Extra$unwrap,
													_etaque$elm_form$Form_Field$value(_etaque$elm_form$Form_Field$EmptyField),
													_etaque$elm_form$Form_Field$string,
													A2(
														_elm_lang$core$Maybe$map,
														function (_) {
															return _.city;
														},
														user.address))
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: _gizra$backoffice$Utils_UserForms$References,
													_1: A3(
														_elm_community$maybe_extra$Maybe_Extra$unwrap,
														_etaque$elm_form$Form_Field$value(_etaque$elm_form$Form_Field$EmptyField),
														_etaque$elm_form$Form_Field$string,
														user.references)
												},
												_1: {
													ctor: '::',
													_0: {
														ctor: '_Tuple2',
														_0: _gizra$backoffice$Utils_UserForms$State,
														_1: A3(
															_elm_community$maybe_extra$Maybe_Extra$unwrap,
															_etaque$elm_form$Form_Field$value(_etaque$elm_form$Form_Field$EmptyField),
															_etaque$elm_form$Form_Field$string,
															A2(
																_elm_lang$core$Maybe$andThen,
																function (_) {
																	return _.state;
																},
																user.address))
													},
													_1: {
														ctor: '::',
														_0: {
															ctor: '_Tuple2',
															_0: _gizra$backoffice$Utils_UserForms$ZipCode,
															_1: A3(
																_elm_community$maybe_extra$Maybe_Extra$unwrap,
																_etaque$elm_form$Form_Field$value(_etaque$elm_form$Form_Field$EmptyField),
																_etaque$elm_form$Form_Field$string,
																A2(
																	_elm_lang$core$Maybe$map,
																	function (_) {
																		return _.zipCode;
																	},
																	user.address))
														},
														_1: {
															ctor: '::',
															_0: {
																ctor: '_Tuple2',
																_0: _gizra$backoffice$Utils_UserForms$SubscribeToNewsLetter,
																_1: _etaque$elm_form$Form_Field$bool(user.subscribeToNewsLetter)
															},
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		});
	return A2(_etaque$elm_form$Form$initial, fields, _gizra$backoffice$Pages_MyAccount_Validate$validateMyAccountForm);
};

var _gizra$backoffice$Pages_MyAccount_Update$update = F3(
	function (login, msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'InitialFields':
				return {
					ctor: '_Tuple4',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							form: _gizra$backoffice$Pages_MyAccount_Utils$initialForm(login.credentials.user)
						}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _gizra$backoffice$Error_Utils$noError,
					_3: {ctor: '[]'}
				};
			case 'MsgForm':
				return {
					ctor: '_Tuple4',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							form: A3(_etaque$elm_form$Form$update, _gizra$backoffice$Pages_MyAccount_Validate$validateMyAccountForm, _p0._0, model.form)
						}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _gizra$backoffice$Error_Utils$noError,
					_3: {ctor: '[]'}
				};
			default:
				var appMsgs = A3(
					_elm_community$maybe_extra$Maybe_Extra$unwrap,
					{ctor: '[]'},
					function (data) {
						return {
							ctor: '::',
							_0: _gizra$backoffice$App_Model$MsgBackend(
								_gizra$backoffice$Backend_Model$MsgMyAccount(
									_gizra$backoffice$Backend_MyAccount_Model$Save(data))),
							_1: {ctor: '[]'}
						};
					},
					_etaque$elm_form$Form$getOutput(model.form));
				return {ctor: '_Tuple4', _0: model, _1: _elm_lang$core$Platform_Cmd$none, _2: _gizra$backoffice$Error_Utils$noError, _3: appMsgs};
		}
	});

var _gizra$backoffice$Utils_Number$maximalInt = 2147483647;

var _gizra$backoffice$Pages_MyCredit_Update$update = F3(
	function (login, saleUuid, msg) {
		var noChange = {
			ctor: '_Tuple3',
			_0: _elm_lang$core$Platform_Cmd$none,
			_1: _gizra$backoffice$Error_Utils$noError,
			_2: {ctor: '[]'}
		};
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'CreditRequestSave':
				return {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Platform_Cmd$none,
					_1: _gizra$backoffice$Error_Utils$noError,
					_2: {
						ctor: '::',
						_0: _gizra$backoffice$App_Model$MsgBackend(
							_gizra$backoffice$Backend_Model$MsgCreditRequest(
								A2(_gizra$backoffice$Backend_CreditRequest_Model$Save, _p0._0, _p0._1))),
						_1: {ctor: '[]'}
					}
				};
			case 'CreditRequestSetAmount':
				return A3(
					_elm_community$maybe_extra$Maybe_Extra$unwrap,
					noChange,
					function (val) {
						return ((_elm_lang$core$Native_Utils.cmp(val, 0) > 0) && (_elm_lang$core$Native_Utils.cmp(val, _gizra$backoffice$Utils_Number$maximalInt) < 1)) ? {
							ctor: '_Tuple3',
							_0: _elm_lang$core$Platform_Cmd$none,
							_1: _gizra$backoffice$Error_Utils$noError,
							_2: {
								ctor: '::',
								_0: _gizra$backoffice$App_Model$MsgBackend(
									_gizra$backoffice$Backend_Model$MsgCreditRequest(
										A2(_gizra$backoffice$Backend_CreditRequest_Model$SetAmount, _p0._0, val))),
								_1: {ctor: '[]'}
							}
						} : noChange;
					},
					_elm_lang$core$Result$toMaybe(
						_elm_lang$core$String$toInt(_p0._1)));
			case 'SaveBidderInfo':
				return {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Platform_Cmd$none,
					_1: _gizra$backoffice$Error_Utils$noError,
					_2: {
						ctor: '::',
						_0: _gizra$backoffice$App_Model$MsgBackend(
							_gizra$backoffice$Backend_Model$MsgBidderInfo(
								A2(_gizra$backoffice$Backend_BidderInfo_Model$Save, _p0._0, _p0._1))),
						_1: {ctor: '[]'}
					}
				};
			case 'SetAmountRestrictionInput':
				var _p1 = _p0._0;
				return A3(
					_elm_community$maybe_extra$Maybe_Extra$unwrap,
					noChange,
					function (val) {
						return ((_elm_lang$core$Native_Utils.cmp(val, 0) > 0) && (_elm_lang$core$Native_Utils.cmp(val, _gizra$backoffice$Utils_Number$maximalInt) < 1)) ? A3(
							_gizra$backoffice$Pages_MyCredit_Update$update,
							login,
							_p1,
							A3(
								_gizra$backoffice$Pages_MyCredit_Model$SetSelectedAmountRestriction,
								_p1,
								_p0._1,
								_gizra$backoffice$Amount$Regular(
									_gizra$backoffice$Amount$Amount(val)))) : noChange;
					},
					_elm_lang$core$Result$toMaybe(
						_elm_lang$core$String$toInt(_p0._2)));
			default:
				return {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Platform_Cmd$none,
					_1: _gizra$backoffice$Error_Utils$noError,
					_2: {
						ctor: '::',
						_0: _gizra$backoffice$App_Model$MsgBackend(
							_gizra$backoffice$Backend_Model$MsgBidderInfo(
								A3(_gizra$backoffice$Backend_BidderInfo_Model$SetSelectedAmountRestriction, _p0._0, _p0._1, _p0._2))),
						_1: {ctor: '[]'}
					}
				};
		}
	});

var _gizra$backoffice$Pages_Register_Update$update = F2(
	function (msg, model) {
		var noChange = {
			ctor: '_Tuple4',
			_0: model,
			_1: _elm_lang$core$Platform_Cmd$none,
			_2: _gizra$backoffice$Error_Utils$noError,
			_3: {ctor: '[]'}
		};
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'MsgForm':
				return {
					ctor: '_Tuple4',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							form: A3(_etaque$elm_form$Form$update, _gizra$backoffice$Pages_Register_Validate$validateRegistrationForm, _p0._0, model.form)
						}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _gizra$backoffice$Error_Utils$noError,
					_3: {ctor: '[]'}
				};
			case 'Save':
				var appMsgs = function () {
					var _p1 = model.recaptchaToken;
					if (_p1.ctor === 'Just') {
						return A3(
							_elm_community$maybe_extra$Maybe_Extra$unwrap,
							{ctor: '[]'},
							function (form) {
								return {
									ctor: '::',
									_0: _gizra$backoffice$App_Model$MsgBackend(
										_gizra$backoffice$Backend_Model$MsgRegister(
											A2(_gizra$backoffice$Backend_Register_Model$Save, form, _p1._0))),
									_1: {ctor: '[]'}
								};
							},
							_etaque$elm_form$Form$getOutput(model.form));
					} else {
						return {ctor: '[]'};
					}
				}();
				return {ctor: '_Tuple4', _0: model, _1: _elm_lang$core$Platform_Cmd$none, _2: _gizra$backoffice$Error_Utils$noError, _3: appMsgs};
			default:
				return {
					ctor: '_Tuple4',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{recaptchaToken: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _gizra$backoffice$Error_Utils$noError,
					_3: {ctor: '[]'}
				};
		}
	});
var _gizra$backoffice$Pages_Register_Update$setRecaptchaToken = _elm_lang$core$Native_Platform.incomingPort(
	'setRecaptchaToken',
	_elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string),
				_1: {ctor: '[]'}
			}
		}));
var _gizra$backoffice$Pages_Register_Update$subscriptions = _gizra$backoffice$Pages_Register_Update$setRecaptchaToken(_gizra$backoffice$Pages_Register_Model$SetRecaptchaToken);

var _gizra$backoffice$Backend_ResetPassword_Decoder$decodeResetPassword = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'hash',
	_elm_lang$core$Json_Decode$string,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'timestamp',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'userId',
			_Gizra$elm_restful$Restful_Endpoint$decodeEntityId,
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_gizra$backoffice$Backend_ResetPassword_Model$ResetPassword))));

var _gizra$backoffice$Pages_ResetPassword_Update$update = F3(
	function (maybeData, msg, _p0) {
		var _p1 = msg;
		var _p2 = A2(_elm_lang$core$Json_Decode$decodeValue, _gizra$backoffice$Backend_ResetPassword_Decoder$decodeResetPassword, _p1._0);
		if (_p2.ctor === 'Ok') {
			var _p3 = _p2._0;
			return {
				ctor: '_Tuple4',
				_0: {ctor: '_Tuple0'},
				_1: _elm_lang$core$Platform_Cmd$none,
				_2: _gizra$backoffice$Error_Utils$noError,
				_3: {
					ctor: '::',
					_0: _gizra$backoffice$App_Model$SetActivePage(
						_gizra$backoffice$App_Types$ResetPassword(
							_elm_lang$core$Maybe$Just(_p3))),
					_1: {
						ctor: '::',
						_0: A3(_gizra$backoffice$App_Model$TryOneTimeLogin, _p3.userId, _p3.timestamp, _p3.hash),
						_1: {ctor: '[]'}
					}
				}
			};
		} else {
			return {
				ctor: '_Tuple4',
				_0: {ctor: '_Tuple0'},
				_1: _elm_lang$core$Platform_Cmd$none,
				_2: A3(_gizra$backoffice$Error_Utils$plainError, 'Pages.ResetPassword.Update', 'SetData', _p2._0),
				_3: {ctor: '[]'}
			};
		}
	});
var _gizra$backoffice$Pages_ResetPassword_Update$getResetPasswordData = _elm_lang$core$Native_Platform.incomingPort('getResetPasswordData', _elm_lang$core$Json_Decode$value);
var _gizra$backoffice$Pages_ResetPassword_Update$subscriptions = _gizra$backoffice$Pages_ResetPassword_Update$getResetPasswordData(_gizra$backoffice$Pages_ResetPassword_Model$SetData);

var _gizra$backoffice$Pages_UserBlock_Update$update = F2(
	function (msg, model) {
		var _p0 = msg;
		if (_p0.ctor === 'SetDropdownState') {
			return {
				ctor: '_Tuple4',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{isDropdownExpanded: _p0._0}),
				_1: _elm_lang$core$Platform_Cmd$none,
				_2: _gizra$backoffice$Error_Utils$noError,
				_3: {ctor: '[]'}
			};
		} else {
			return {
				ctor: '_Tuple4',
				_0: model,
				_1: _elm_lang$core$Platform_Cmd$none,
				_2: _gizra$backoffice$Error_Utils$noError,
				_3: {
					ctor: '::',
					_0: _gizra$backoffice$App_Model$Logout,
					_1: {ctor: '[]'}
				}
			};
		}
	});

var _gizra$backoffice$Pusher_Decoder$decodeChannelType = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (channelType) {
		var _p0 = channelType;
		switch (_p0) {
			case 'public':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Pusher_Model$ChannelPublic);
			case 'private':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Pusher_Model$ChannelPrivate);
			default:
				return _elm_lang$core$Json_Decode$fail(
					A2(_elm_lang$core$Basics_ops['++'], channelType, ' is not a recognized ChannelType.'));
		}
	},
	_elm_lang$core$Json_Decode$string);
var _gizra$backoffice$Pusher_Decoder$decodePusherEvent = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (eventType) {
		var _p1 = eventType;
		switch (_p1) {
			case 'bidder_info__update':
				return _elm_lang$core$Json_Decode$succeed(_gizra$backoffice$Pusher_Model$NoOp);
			case 'item__update':
				return A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'data',
					_gizra$backoffice$Backend_Item_Decoder$decodeItem,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$requiredAt,
						{
							ctor: '::',
							_0: 'data',
							_1: {
								ctor: '::',
								_0: 'uuid',
								_1: {ctor: '[]'}
							}
						},
						_Gizra$elm_restful$Restful_Endpoint$decodeEntityUuid,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$requiredAt,
							{
								ctor: '::',
								_0: 'data',
								_1: {
									ctor: '::',
									_0: 'channel_type',
									_1: {ctor: '[]'}
								}
							},
							_gizra$backoffice$Pusher_Decoder$decodeChannelType,
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_gizra$backoffice$Pusher_Model$ItemUpdate))));
			default:
				return _elm_lang$core$Json_Decode$fail(
					A2(_elm_lang$core$Basics_ops['++'], eventType, ' is not a recognized \'type\' for PusherEventData.'));
		}
	},
	A2(_elm_lang$core$Json_Decode$field, 'eventType', _elm_lang$core$Json_Decode$string));

var _gizra$backoffice$Pusher_Utils$getChannelNames = F2(
	function (login, saleUuid) {
		return {
			ctor: '::',
			_0: A2(
				_elm_lang$core$Basics_ops['++'],
				'sale-',
				_Gizra$elm_restful$Restful_Endpoint$fromEntityUuid(saleUuid)),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$core$Basics_ops['++'],
					'private-user-',
					_Gizra$elm_restful$Restful_Endpoint$fromEntityUuid(login.credentials.user.uuid)),
				_1: {ctor: '[]'}
			}
		};
	});

var _gizra$backoffice$Pusher_Update$pusherLogin = _elm_lang$core$Native_Platform.outgoingPort(
	'pusherLogin',
	function (v) {
		return {
			authEndpoint: v.authEndpoint,
			channelNames: _elm_lang$core$Native_List.toArray(v.channelNames).map(
				function (v) {
					return v;
				}),
			eventNames: _elm_lang$core$Native_List.toArray(v.eventNames).map(
				function (v) {
					return v;
				})
		};
	});
var _gizra$backoffice$Pusher_Update$pusherLogout = _elm_lang$core$Native_Platform.outgoingPort(
	'pusherLogout',
	function (v) {
		return null;
	});
var _gizra$backoffice$Pusher_Update$update = F4(
	function (backendUrl, login, saleUuid, msg) {
		var noChange = {
			ctor: '_Tuple3',
			_0: _elm_lang$core$Platform_Cmd$none,
			_1: _gizra$backoffice$Error_Utils$noError,
			_2: {ctor: '[]'}
		};
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'HandleError':
				return {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Platform_Cmd$none,
					_1: A3(_gizra$backoffice$Error_Utils$pusherError, 'Pusher.Update', 'HandleError', _p0._0),
					_2: {ctor: '[]'}
				};
			case 'HandlePusherEvent':
				var _p1 = A2(_elm_lang$core$Json_Decode$decodeValue, _gizra$backoffice$Pusher_Decoder$decodePusherEvent, _p0._0);
				if (_p1.ctor === 'Ok') {
					var _p2 = _p1._0;
					if (_p2.ctor === 'ItemUpdate') {
						var _p4 = _p2._2;
						var itemUpdatedFunc = function () {
							var _p3 = _p2._0;
							if (_p3.ctor === 'ChannelPublic') {
								return function (oldItem) {
									return _elm_lang$core$Native_Utils.update(
										_p4,
										{
											bids: A3(_Gizra$elm_dictlist$EveryDictList$foldl, _Gizra$elm_dictlist$EveryDictList$insert, oldItem.bids, _p4.bids),
											bookBids: A3(_Gizra$elm_dictlist$EveryDictList$foldl, _Gizra$elm_dictlist$EveryDictList$insert, oldItem.bookBids, _p4.bookBids),
											agentBids: A3(_Gizra$elm_dictlist$EveryDictList$foldl, _Gizra$elm_dictlist$EveryDictList$insert, oldItem.agentBids, _p4.agentBids)
										});
								};
							} else {
								return _elm_lang$core$Basics$always(_p4);
							}
						}();
						var modelBacknd = login.data;
						var itemsUpdated = A4(_gizra$backoffice$PaginatedData$update, saleUuid, _p2._1, itemUpdatedFunc, modelBacknd.items);
						var appMsgs = {
							ctor: '::',
							_0: _gizra$backoffice$App_Model$SetModelBackendItems(itemsUpdated),
							_1: {ctor: '[]'}
						};
						return {ctor: '_Tuple3', _0: _elm_lang$core$Platform_Cmd$none, _1: _gizra$backoffice$Error_Utils$noError, _2: appMsgs};
					} else {
						return {
							ctor: '_Tuple3',
							_0: _elm_lang$core$Platform_Cmd$none,
							_1: _gizra$backoffice$Error_Utils$noError,
							_2: {ctor: '[]'}
						};
					}
				} else {
					return {
						ctor: '_Tuple3',
						_0: _elm_lang$core$Platform_Cmd$none,
						_1: A3(_gizra$backoffice$Error_Utils$plainError, 'Pusher.Update', 'HandlePusherEvent', _p1._0),
						_2: {ctor: '[]'}
					};
				}
			case 'Login':
				var pusherConfig = {
					authEndpoint: A2(
						_elm_lang$core$Basics_ops['++'],
						backendUrl,
						A2(_elm_lang$core$Basics_ops['++'], '/api/pusher_auth?access_token=', login.credentials.accessToken)),
					channelNames: A2(_gizra$backoffice$Pusher_Utils$getChannelNames, login, _p0._0),
					eventNames: _gizra$backoffice$Pusher_Model$eventNames
				};
				return {
					ctor: '_Tuple3',
					_0: _gizra$backoffice$Pusher_Update$pusherLogin(pusherConfig),
					_1: _gizra$backoffice$Error_Utils$noError,
					_2: {ctor: '[]'}
				};
			default:
				return {
					ctor: '_Tuple3',
					_0: _gizra$backoffice$Pusher_Update$pusherLogout(
						{ctor: '_Tuple0'}),
					_1: _gizra$backoffice$Error_Utils$noError,
					_2: {ctor: '[]'}
				};
		}
	});
var _gizra$backoffice$Pusher_Update$pusherErrors = _elm_lang$core$Native_Platform.incomingPort(
	'pusherErrors',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (code) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (message) {
					return _elm_lang$core$Json_Decode$succeed(
						{code: code, message: message});
				},
				A2(
					_elm_lang$core$Json_Decode$field,
					'message',
					_elm_lang$core$Json_Decode$oneOf(
						{
							ctor: '::',
							_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
							_1: {
								ctor: '::',
								_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string),
								_1: {ctor: '[]'}
							}
						})));
		},
		A2(
			_elm_lang$core$Json_Decode$field,
			'code',
			_elm_lang$core$Json_Decode$oneOf(
				{
					ctor: '::',
					_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$int),
						_1: {ctor: '[]'}
					}
				}))));
var _gizra$backoffice$Pusher_Update$pusherState = _elm_lang$core$Native_Platform.incomingPort('pusherState', _elm_lang$core$Json_Decode$string);
var _gizra$backoffice$Pusher_Update$pusherIncomingEvents = _elm_lang$core$Native_Platform.incomingPort('pusherIncomingEvents', _elm_lang$core$Json_Decode$value);
var _gizra$backoffice$Pusher_Update$subscriptions = _elm_lang$core$Platform_Sub$batch(
	{
		ctor: '::',
		_0: _gizra$backoffice$Pusher_Update$pusherIncomingEvents(_gizra$backoffice$Pusher_Model$HandlePusherEvent),
		_1: {
			ctor: '::',
			_0: _gizra$backoffice$Pusher_Update$pusherErrors(_gizra$backoffice$Pusher_Model$HandleError),
			_1: {ctor: '[]'}
		}
	});

var _gizra$backoffice$WidgetManager_Decoder$decodePageName = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (page) {
		var pageName = function () {
			var _p0 = page;
			switch (_p0) {
				case 'item_pre_live_sale':
					return _gizra$backoffice$WidgetManager_Model$ItemPreLiveSale;
				case 'my_account':
					return _gizra$backoffice$WidgetManager_Model$MyAccount;
				case 'my_bids':
					return _gizra$backoffice$WidgetManager_Model$MyBids;
				case 'my_credit':
					return _gizra$backoffice$WidgetManager_Model$MyCredit;
				case 'register':
					return _gizra$backoffice$WidgetManager_Model$Register;
				default:
					return _gizra$backoffice$WidgetManager_Model$Other;
			}
		}();
		return _elm_lang$core$Json_Decode$succeed(pageName);
	},
	_elm_lang$core$Json_Decode$string);
var _gizra$backoffice$WidgetManager_Decoder$decodeWidgetId = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'id',
	_elm_lang$core$Json_Decode$string,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'page',
		_gizra$backoffice$WidgetManager_Decoder$decodePageName,
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}))));
var _gizra$backoffice$WidgetManager_Decoder$decodeWidgetIds = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (list) {
		return _elm_lang$core$Json_Decode$succeed(
			_Gizra$elm_all_set$EverySet$fromList(list));
	},
	_elm_lang$core$Json_Decode$list(_gizra$backoffice$WidgetManager_Decoder$decodeWidgetId));

var _gizra$backoffice$WidgetManager_Update$sendUserAndData = _elm_lang$core$Native_Platform.outgoingPort(
	'sendUserAndData',
	function (v) {
		return [
			v._0,
			_elm_lang$core$Native_List.toArray(v._1).map(
			function (v) {
				return v;
			})
		];
	});
var _gizra$backoffice$WidgetManager_Update$update = F4(
	function (userAndData, maybeSaleUuid, msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'SendUserAndDataToOtherWidgets':
				var encodedVal = function () {
					var _p1 = userAndData;
					if (_p1.ctor === 'Authenticated') {
						return A2(_gizra$backoffice$App_Encoder$encodeAuthenticatedUserAndData, maybeSaleUuid, _p1._0);
					} else {
						return A2(_gizra$backoffice$App_Encoder$encodeAnonymousUserAndData, maybeSaleUuid, _p1._0);
					}
				}();
				return {
					ctor: '_Tuple4',
					_0: model,
					_1: _gizra$backoffice$WidgetManager_Update$sendUserAndData(
						{
							ctor: '_Tuple2',
							_0: A2(_elm_lang$core$Json_Encode$encode, 0, encodedVal),
							_1: _gizra$backoffice$WidgetManager_Utils$getUuids(model)
						}),
					_2: _gizra$backoffice$Error_Utils$noError,
					_3: {ctor: '[]'}
				};
			case 'SetWidgetIds':
				var _p2 = A2(_elm_lang$core$Json_Decode$decodeValue, _gizra$backoffice$WidgetManager_Decoder$decodeWidgetIds, _p0._0);
				if (_p2.ctor === 'Ok') {
					return {
						ctor: '_Tuple4',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{widgetIds: _p2._0}),
						_1: _elm_lang$core$Platform_Cmd$none,
						_2: _gizra$backoffice$Error_Utils$noError,
						_3: {ctor: '[]'}
					};
				} else {
					return {
						ctor: '_Tuple4',
						_0: model,
						_1: _elm_lang$core$Platform_Cmd$none,
						_2: A3(_gizra$backoffice$Error_Utils$plainError, 'WidgetManager.Update', 'SetWidgetIds', _p2._0),
						_3: {ctor: '[]'}
					};
				}
			default:
				var encodedVal = function () {
					var _p3 = userAndData;
					if (_p3.ctor === 'Authenticated') {
						return A2(_gizra$backoffice$App_Encoder$encodeAuthenticatedUserAndData, maybeSaleUuid, _p3._0);
					} else {
						return A2(_gizra$backoffice$App_Encoder$encodeAnonymousUserAndData, maybeSaleUuid, _p3._0);
					}
				}();
				return {
					ctor: '_Tuple4',
					_0: model,
					_1: _gizra$backoffice$WidgetManager_Update$sendUserAndData(
						{
							ctor: '_Tuple2',
							_0: A2(_elm_lang$core$Json_Encode$encode, 0, encodedVal),
							_1: A2(
								_gizra$backoffice$WidgetManager_Utils$getUuidsExcludingPages,
								{
									ctor: '::',
									_0: _gizra$backoffice$WidgetManager_Model$MyCredit,
									_1: {ctor: '[]'}
								},
								model)
						}),
					_2: _gizra$backoffice$Error_Utils$noError,
					_3: {ctor: '[]'}
				};
		}
	});
var _gizra$backoffice$WidgetManager_Update$widgetIds = _elm_lang$core$Native_Platform.incomingPort('widgetIds', _elm_lang$core$Json_Decode$value);
var _gizra$backoffice$WidgetManager_Update$subscriptions = _gizra$backoffice$WidgetManager_Update$widgetIds(_gizra$backoffice$WidgetManager_Model$SetWidgetIds);

var _gizra$backoffice$App_Update$cacheCredentials = _elm_lang$core$Native_Platform.outgoingPort(
	'cacheCredentials',
	function (v) {
		return [v._0, v._1];
	});
var _gizra$backoffice$App_Update$loginConfig = function (config) {
	return _elm_lang$core$Native_Utils.update(
		config,
		{logoutPath: _elm_lang$core$Maybe$Nothing});
}(
	_Gizra$elm_restful$Restful_Login$drupalConfig(
		{
			decodeUser: _elm_lang$core$Json_Decode$oneOf(
				{
					ctor: '::',
					_0: _Gizra$elm_restful$Restful_Endpoint$decodeSingleDrupalEntity(_gizra$backoffice$Backend_User_Decoder$decodeUser),
					_1: {
						ctor: '::',
						_0: _gizra$backoffice$Backend_User_Decoder$decodeUser,
						_1: {ctor: '[]'}
					}
				}),
			encodeUser: _elm_lang$core$Maybe$Nothing,
			initialAuthenticatedData: F2(
				function (_p1, _p0) {
					return _gizra$backoffice$Backend_Model$emptyModelBackend;
				}),
			initialAnonymousData: _gizra$backoffice$Backend_Model$emptyAnonymousModelBackend,
			cacheCredentials: _elm_lang$core$Basics$curry(_gizra$backoffice$App_Update$cacheCredentials),
			tag: _gizra$backoffice$App_Model$MsgLogin
		}));
var _gizra$backoffice$App_Update$update = F2(
	function (msg, model) {
		update:
		while (true) {
			var redirectOnLoggedInCmd = function () {
				var baseHostUrlAsString = _sporto$erl$Erl$toString(model.baseHostUrl);
				var redirectUrl = A2(
					_elm_lang$core$Maybe$withDefault,
					baseHostUrlAsString,
					_elm_lang$core$List$head(
						A2(_sporto$erl$Erl_Query$getValuesForKey, 'redirect', model.hostUrl.query)));
				return _elm_lang$navigation$Navigation$load(redirectUrl);
			}();
			var redirectOnLoggedIn = {ctor: '_Tuple2', _0: model, _1: redirectOnLoggedInCmd};
			var maybeSaleUuid = _gizra$backoffice$App_Utils$getSaleUuidFromActivePage(model.activePage);
			var noChange = {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			var _p2 = msg;
			switch (_p2.ctor) {
				case 'GetAnonymousUserAndData':
					var _p3 = A2(
						_elm_lang$core$Json_Decode$decodeValue,
						_gizra$backoffice$App_Decoder$decodeAnonymousUserAndData(maybeSaleUuid),
						_p2._0);
					if (_p3.ctor === 'Ok') {
						var _p4 = _p3._0;
						var userAndData = A2(
							_Gizra$elm_restful$Restful_Login$mapAnonymousData,
							function (oldData) {
								return _elm_lang$core$Native_Utils.update(
									oldData,
									{items: _p4.items, sales: _p4.sales});
							},
							model.userAndData);
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{userAndData: userAndData}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {
							ctor: '_Tuple2',
							_0: A2(
								_gizra$backoffice$App_Utils$handleErrors,
								A3(_gizra$backoffice$Error_Utils$plainError, 'App.Update', 'GetAnonymousUserAndData', _p3._0),
								model),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				case 'GetAuthenticatedUserAndData':
					var _p5 = A2(
						_elm_lang$core$Json_Decode$decodeValue,
						_gizra$backoffice$App_Decoder$decodeAuthenticatedUserAndData(maybeSaleUuid),
						_p2._0);
					if (_p5.ctor === 'Ok') {
						var _p12 = _p5._0._1;
						var _p11 = _p5._0._2;
						var _p6 = model.activePage;
						switch (_p6.ctor) {
							case 'ForgotPassword':
								return redirectOnLoggedIn;
							case 'LoginPage':
								return redirectOnLoggedIn;
							case 'Register':
								return redirectOnLoggedIn;
							case 'ResetPassword':
								return redirectOnLoggedIn;
							default:
								var _p7 = function () {
									var _p8 = {ctor: '_Tuple2', _0: maybeSaleUuid, _1: model.userAndData};
									if (((_p8.ctor === '_Tuple2') && (_p8._0.ctor === 'Just')) && (_p8._1.ctor === 'Authenticated')) {
										var _p9 = _p8._0._0;
										return {
											ctor: '_Tuple2',
											_0: A3(
												_Gizra$elm_dictlist$EveryDictList$foldl,
												F3(
													function (itemUuid, item, accum) {
														return A3(
															_elm_community$maybe_extra$Maybe_Extra$unwrap,
															accum,
															function (oldItem) {
																return A4(
																	_gizra$backoffice$PaginatedData$update,
																	_p9,
																	itemUuid,
																	_elm_lang$core$Basics$always(
																		_elm_lang$core$Native_Utils.update(
																			item,
																			{newBids: oldItem.newBids})),
																	accum);
															},
															A3(_gizra$backoffice$PaginatedData$get, _p9, itemUuid, _p8._1._0.data.items));
													}),
												_p11.items,
												A2(_gizra$backoffice$PaginatedData$getAll, _p9, _p11.items)),
											_1: A2(
												_krisajenkins$remotedata$RemoteData$map,
												function (dict) {
													return A3(
														_eeue56$elm_all_dict$EveryDict$insert,
														_Gizra$elm_storage_key$StorageKey$New,
														_Gizra$elm_editable_webdata$Editable_WebData$create(
															_gizra$backoffice$Backend_CreditRequest_Model$emptyCreditRequest(_p12.uuid)),
														dict);
												},
												_p11.creditRequests)
										};
									} else {
										return {ctor: '_Tuple2', _0: _p11.items, _1: _p11.creditRequests};
									}
								}();
								var itemsUpdated = _p7._0;
								var creditRequestsUpdated = _p7._1;
								var dataUpdated = _elm_lang$core$Native_Utils.update(
									_p11,
									{items: itemsUpdated, creditRequests: creditRequestsUpdated});
								var credentials = {accessToken: _p5._0._0, backendUrl: model.backendUrl, user: _p12};
								var userAndData = _Gizra$elm_restful$Restful_Login$Authenticated(
									{credentials: credentials, logout: _krisajenkins$remotedata$RemoteData$NotAsked, relogin: _elm_lang$core$Maybe$Nothing, data: dataUpdated});
								var modelUpdated = _elm_lang$core$Native_Utils.update(
									model,
									{userAndData: userAndData});
								var modelUpdatedPageMyAccount = function () {
									var _p10 = model.activePage;
									if (_p10.ctor === 'MyAccount') {
										return _Gizra$elm_restful$Restful_Login$isAnonymousUser(model.userAndData) ? _elm_lang$core$Tuple$first(
											A2(
												_gizra$backoffice$App_Update$update,
												_gizra$backoffice$App_Model$MsgPagesMyAccount(_gizra$backoffice$Pages_MyAccount_Model$InitialFields),
												modelUpdated)) : modelUpdated;
									} else {
										return modelUpdated;
									}
								}();
								return {ctor: '_Tuple2', _0: modelUpdatedPageMyAccount, _1: _elm_lang$core$Platform_Cmd$none};
						}
					} else {
						return {
							ctor: '_Tuple2',
							_0: A2(
								_gizra$backoffice$App_Utils$handleErrors,
								A3(_gizra$backoffice$Error_Utils$plainError, 'App.Update', 'GetAuthenticatedUserAndData', _p5._0),
								model),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				case 'Logout':
					var boLogout = A2(
						_gizra$backoffice$App_Update$update,
						_gizra$backoffice$App_Model$MsgBackend(
							_gizra$backoffice$Backend_Model$MsgBidServerAuthStatusRequiredByBo(_gizra$backoffice$Backend_BidServerAuthStatusRequiredByBo_Model$Logout)),
						model);
					var _p13 = function () {
						var _p14 = model.userAndData;
						if (_p14.ctor === 'Authenticated') {
							var _p15 = _p14._0.data.bidServerAuthStatusRequiredByBo;
							if (_p15.ctor === 'LogingOut') {
								var _p16 = _p15._0;
								if (_p16.ctor === 'Success') {
									return A2(
										_gizra$backoffice$App_Update$update,
										_gizra$backoffice$App_Model$MsgLogin(_Gizra$elm_restful$Restful_Login$logout),
										model);
								} else {
									return boLogout;
								}
							} else {
								return boLogout;
							}
						} else {
							return noChange;
						}
					}();
					var modelUpdated = _p13._0;
					var cmd = _p13._1;
					return {ctor: '_Tuple2', _0: modelUpdated, _1: cmd};
				case 'MsgBackend':
					var baseHostUrlAsString = _sporto$erl$Erl$toString(model.baseHostUrl);
					return A6(
						_gizra$backoffice$App_Utils$updateSubModel,
						_p2._0,
						model.userAndData,
						F2(
							function (subMsg, _p17) {
								return A4(
									_gizra$backoffice$Backend_Update$updateBackend,
									model.language,
									{ctor: '_Tuple3', _0: baseHostUrlAsString, _1: model.backendUrl, _2: model.siteShortName},
									model.userAndData,
									subMsg);
							}),
						F2(
							function (subModel, model) {
								return _elm_lang$core$Native_Utils.update(
									model,
									{userAndData: subModel});
							}),
						function (subCmds) {
							return _gizra$backoffice$App_Model$MsgBackend(subCmds);
						},
						model);
				case 'MsgLogin':
					var _p18 = A3(_Gizra$elm_restful$Restful_Login$update, _gizra$backoffice$App_Update$loginConfig, _p2._0, model.userAndData);
					var subModel = _p18._0;
					var cmd = _p18._1;
					var loggedIn = _p18._2;
					var subModelUpdated = function () {
						var _p19 = {ctor: '_Tuple2', _0: model.userAndData, _1: subModel};
						if (((_p19.ctor === '_Tuple2') && (_p19._0.ctor === 'Anonymous')) && (_p19._1.ctor === 'Authenticated')) {
							return _p19._0._0.data.bidServerAuthStatusRequiredByBo ? A2(
								_Gizra$elm_restful$Restful_Login$mapAuthenticatedData,
								function (modelBackend) {
									return _elm_lang$core$Native_Utils.update(
										modelBackend,
										{
											bidServerAuthStatusRequiredByBo: _gizra$backoffice$Backend_BidServerAuthStatusRequiredByBo_Model$Required(_krisajenkins$remotedata$RemoteData$NotAsked)
										});
								},
								subModel) : subModel;
						} else {
							return subModel;
						}
					}();
					var modelUserAndData = _elm_lang$core$Native_Utils.update(
						model,
						{userAndData: subModelUpdated});
					var _p20 = function () {
						var _p21 = {ctor: '_Tuple2', _0: subModelUpdated, _1: model.activePage};
						if (((_p21.ctor === '_Tuple2') && (_p21._0.ctor === 'Authenticated')) && (_p21._1.ctor === 'WidgetManager')) {
							return _elm_lang$core$Native_Utils.eq(
								_p21._0._0.data.bidServerAuthStatusRequiredByBo,
								_gizra$backoffice$Backend_BidServerAuthStatusRequiredByBo_Model$Required(_krisajenkins$remotedata$RemoteData$NotAsked)) ? A2(
								_gizra$backoffice$App_Update$update,
								_gizra$backoffice$App_Model$MsgBackend(
									_gizra$backoffice$Backend_Model$MsgBidServerAuthStatusRequiredByBo(_gizra$backoffice$Backend_BidServerAuthStatusRequiredByBo_Model$Save)),
								modelUserAndData) : {ctor: '_Tuple2', _0: modelUserAndData, _1: _elm_lang$core$Platform_Cmd$none};
						} else {
							return {ctor: '_Tuple2', _0: modelUserAndData, _1: _elm_lang$core$Platform_Cmd$none};
						}
					}();
					var modelUpdated = _p20._0;
					var boLoginCmd = _p20._1;
					var _p22 = function () {
						var _p23 = model.activePage;
						if (_p23.ctor === 'WidgetManager') {
							return A2(
								_gizra$backoffice$App_Update$update,
								_gizra$backoffice$App_Model$MsgWidgetManager(_gizra$backoffice$WidgetManager_Model$SendUserAndDataToOtherWidgets),
								modelUpdated);
						} else {
							return {ctor: '_Tuple2', _0: modelUpdated, _1: _elm_lang$core$Platform_Cmd$none};
						}
					}();
					var widgetManagerModel = _p22._0;
					var widgetManagerCmd = _p22._1;
					var reloadCmd = function () {
						if (_Gizra$elm_restful$Restful_Login$isAuthenticatedUser(subModelUpdated)) {
							var _p24 = model.activePage;
							switch (_p24.ctor) {
								case 'LoginPage':
									return redirectOnLoggedInCmd;
								case 'Register':
									return redirectOnLoggedInCmd;
								case 'ResetPassword':
									var baseHostUrlAsString = _sporto$erl$Erl$toString(model.baseHostUrl);
									return _elm_lang$navigation$Navigation$load(
										A2(_elm_lang$core$Basics_ops['++'], baseHostUrlAsString, '/my-account'));
								default:
									return _elm_lang$core$Platform_Cmd$none;
							}
						} else {
							if (_elm_lang$core$Native_Utils.eq(
								loggedIn,
								_elm_lang$core$Maybe$Just(_Gizra$elm_restful$Restful_Login$LoggedOut))) {
								return _elm_lang$navigation$Navigation$reload;
							} else {
								return _elm_lang$core$Platform_Cmd$none;
							}
						}
					}();
					var _p25 = function () {
						var _p26 = {ctor: '_Tuple2', _0: maybeSaleUuid, _1: loggedIn};
						if ((((_p26.ctor === '_Tuple2') && (_p26._0.ctor === 'Just')) && (_p26._1.ctor === 'Just')) && (_p26._1._0.ctor === 'LoggedIn')) {
							return A2(
								_gizra$backoffice$App_Update$update,
								_gizra$backoffice$App_Model$MsgPusher(
									_gizra$backoffice$Pusher_Model$Login(_p26._0._0)),
								widgetManagerModel);
						} else {
							return {ctor: '_Tuple2', _0: widgetManagerModel, _1: widgetManagerCmd};
						}
					}();
					var pusherModel = _p25._0;
					var pusherCmd = _p25._1;
					return {
						ctor: '_Tuple2',
						_0: pusherModel,
						_1: _elm_lang$core$Platform_Cmd$batch(
							{
								ctor: '::',
								_0: cmd,
								_1: {
									ctor: '::',
									_0: widgetManagerCmd,
									_1: {
										ctor: '::',
										_0: pusherCmd,
										_1: {
											ctor: '::',
											_0: boLoginCmd,
											_1: {
												ctor: '::',
												_0: reloadCmd,
												_1: {ctor: '[]'}
											}
										}
									}
								}
							})
					};
				case 'MsgPagesForgotPassword':
					var _p27 = model.userAndData;
					if (_p27.ctor === 'Authenticated') {
						return noChange;
					} else {
						return A6(
							_gizra$backoffice$App_Utils$updateSubModel,
							_p2._0,
							model.pageForgotPassword,
							F2(
								function (subMsg, subModel) {
									return A2(_gizra$backoffice$Pages_ForgotPassword_Update$update, subMsg, subModel);
								}),
							F2(
								function (subModel, model) {
									return _elm_lang$core$Native_Utils.update(
										model,
										{pageForgotPassword: subModel});
								}),
							function (subCmds) {
								return _gizra$backoffice$App_Model$MsgPagesForgotPassword(subCmds);
							},
							model);
					}
				case 'MsgPagesItemPreLiveSale':
					var _p28 = model.userAndData;
					if (_p28.ctor === 'Authenticated') {
						return A6(
							_gizra$backoffice$App_Utils$updateSubModel,
							_p2._0,
							model.pageItemPreLiveSale,
							F2(
								function (subMsg, subModel) {
									return A3(_gizra$backoffice$Pages_ItemPreLiveSale_Update$update, _p28._0, subMsg, subModel);
								}),
							F2(
								function (subModel, model) {
									return _elm_lang$core$Native_Utils.update(
										model,
										{pageItemPreLiveSale: subModel});
								}),
							function (subCmds) {
								return _gizra$backoffice$App_Model$MsgPagesItemPreLiveSale(subCmds);
							},
							model);
					} else {
						return noChange;
					}
				case 'MsgPagesLogin':
					var _p29 = model.userAndData;
					if (_p29.ctor === 'Authenticated') {
						return noChange;
					} else {
						return A6(
							_gizra$backoffice$App_Utils$updateSubModel,
							_p2._0,
							model.pageLogin,
							F2(
								function (subMsg, subModel) {
									return A2(_gizra$backoffice$Pages_Login_Update$update, subMsg, subModel);
								}),
							F2(
								function (subModel, model) {
									return _elm_lang$core$Native_Utils.update(
										model,
										{pageLogin: subModel});
								}),
							function (subCmds) {
								return _gizra$backoffice$App_Model$MsgPagesLogin(subCmds);
							},
							model);
					}
				case 'MsgPagesMyAccount':
					var _p30 = model.userAndData;
					if (_p30.ctor === 'Authenticated') {
						return A6(
							_gizra$backoffice$App_Utils$updateSubModel,
							_p2._0,
							model.pageMyAccount,
							F2(
								function (subMsg, subModel) {
									return A3(_gizra$backoffice$Pages_MyAccount_Update$update, _p30._0, subMsg, subModel);
								}),
							F2(
								function (subModel, model) {
									return _elm_lang$core$Native_Utils.update(
										model,
										{pageMyAccount: subModel});
								}),
							function (subCmds) {
								return _gizra$backoffice$App_Model$MsgPagesMyAccount(subCmds);
							},
							model);
					} else {
						return noChange;
					}
				case 'MsgPagesMyCredit':
					var _p31 = {ctor: '_Tuple2', _0: maybeSaleUuid, _1: model.userAndData};
					if (((_p31.ctor === '_Tuple2') && (_p31._0.ctor === 'Just')) && (_p31._1.ctor === 'Authenticated')) {
						return A4(
							_gizra$backoffice$App_Utils$updateSubModelWithNoModel,
							_p2._0,
							function (subMsg) {
								return A3(_gizra$backoffice$Pages_MyCredit_Update$update, _p31._1._0, _p31._0._0, subMsg);
							},
							function (subCmds) {
								return _gizra$backoffice$App_Model$MsgPagesMyCredit(subCmds);
							},
							model);
					} else {
						return noChange;
					}
				case 'MsgPagesRegister':
					var _p32 = model.userAndData;
					if (_p32.ctor === 'Authenticated') {
						return noChange;
					} else {
						return A6(
							_gizra$backoffice$App_Utils$updateSubModel,
							_p2._0,
							model.pageRegister,
							F2(
								function (subMsg, subModel) {
									return A2(_gizra$backoffice$Pages_Register_Update$update, subMsg, subModel);
								}),
							F2(
								function (subModel, model) {
									return _elm_lang$core$Native_Utils.update(
										model,
										{pageRegister: subModel});
								}),
							function (subCmds) {
								return _gizra$backoffice$App_Model$MsgPagesRegister(subCmds);
							},
							model);
					}
				case 'MsgPagesResetPassword':
					var _p33 = model.userAndData;
					if (_p33.ctor === 'Authenticated') {
						return noChange;
					} else {
						var _p34 = model.activePage;
						if (_p34.ctor === 'ResetPassword') {
							return A6(
								_gizra$backoffice$App_Utils$updateSubModel,
								_p2._0,
								{ctor: '_Tuple0'},
								F2(
									function (subMsg, subModel) {
										return A3(_gizra$backoffice$Pages_ResetPassword_Update$update, _p34._0, subMsg, subModel);
									}),
								F2(
									function (subModel, model) {
										return model;
									}),
								function (subCmds) {
									return _gizra$backoffice$App_Model$MsgPagesResetPassword(subCmds);
								},
								model);
						} else {
							return noChange;
						}
					}
				case 'MsgPagesUserBlock':
					return A6(
						_gizra$backoffice$App_Utils$updateSubModel,
						_p2._0,
						model.pageUserBlock,
						F2(
							function (subMsg, subModel) {
								return A2(_gizra$backoffice$Pages_UserBlock_Update$update, subMsg, subModel);
							}),
						F2(
							function (subModel, model) {
								return _elm_lang$core$Native_Utils.update(
									model,
									{pageUserBlock: subModel});
							}),
						function (subCmds) {
							return _gizra$backoffice$App_Model$MsgPagesUserBlock(subCmds);
						},
						model);
				case 'MsgPusher':
					var _p35 = {ctor: '_Tuple2', _0: maybeSaleUuid, _1: model.userAndData};
					if (((_p35.ctor === '_Tuple2') && (_p35._0.ctor === 'Just')) && (_p35._1.ctor === 'Authenticated')) {
						return A4(
							_gizra$backoffice$App_Utils$updateSubModelWithNoModel,
							_p2._0,
							function (subMsg) {
								return A4(_gizra$backoffice$Pusher_Update$update, model.backendUrl, _p35._1._0, _p35._0._0, subMsg);
							},
							function (subCmds) {
								return _gizra$backoffice$App_Model$MsgPusher(subCmds);
							},
							model);
					} else {
						return noChange;
					}
				case 'MsgWidgetManager':
					var maybeSaleUuid = function () {
						var _p36 = model.activePage;
						if (_p36.ctor === 'WidgetManager') {
							return _p36._0;
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					}();
					return A6(
						_gizra$backoffice$App_Utils$updateSubModel,
						_p2._0,
						model.widgetManager,
						F2(
							function (subMsg, subModel) {
								return A4(_gizra$backoffice$WidgetManager_Update$update, model.userAndData, maybeSaleUuid, subMsg, subModel);
							}),
						F2(
							function (subModel, model) {
								return _elm_lang$core$Native_Utils.update(
									model,
									{widgetManager: subModel});
							}),
						function (subCmds) {
							return _gizra$backoffice$App_Model$MsgWidgetManager(subCmds);
						},
						model);
				case 'Reload':
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$navigation$Navigation$reload};
				case 'SetActivePage':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{activePage: _p2._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'SetModelBackendItems':
					var userAndDataUpdated = A2(
						_Gizra$elm_restful$Restful_Login$mapAuthenticatedData,
						function (modelBackend) {
							return _elm_lang$core$Native_Utils.update(
								modelBackend,
								{items: _p2._0});
						},
						model.userAndData);
					var _v24 = _gizra$backoffice$App_Model$MsgWidgetManager(_gizra$backoffice$WidgetManager_Model$UpdateWidgetsOnItemsChange),
						_v25 = _elm_lang$core$Native_Utils.update(
						model,
						{userAndData: userAndDataUpdated});
					msg = _v24;
					model = _v25;
					continue update;
				case 'SetCurrentDate':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{currentDate: _p2._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'SetUser':
					var credentials = {accessToken: _p2._0._0, backendUrl: model.backendUrl, user: _p2._0._1};
					var userAndData = _Gizra$elm_restful$Restful_Login$Authenticated(
						{credentials: credentials, logout: _krisajenkins$remotedata$RemoteData$NotAsked, relogin: _elm_lang$core$Maybe$Nothing, data: _gizra$backoffice$Backend_Model$emptyModelBackend});
					var _p37 = A2(
						_gizra$backoffice$App_Update$update,
						_gizra$backoffice$App_Model$MsgLogin(
							_Gizra$elm_restful$Restful_Login$recordLogin(credentials)),
						_elm_lang$core$Native_Utils.update(
							model,
							{userAndData: userAndData}));
					var modelUpdated = _p37._0;
					var cacheCredentialsCmd = _p37._1;
					return {ctor: '_Tuple2', _0: modelUpdated, _1: cacheCredentialsCmd};
				case 'TryLogin':
					var params = {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'site', _1: model.siteShortName},
						_1: {ctor: '[]'}
					};
					var _v26 = _gizra$backoffice$App_Model$MsgLogin(
						A4(_Gizra$elm_restful$Restful_Login$tryLogin, model.backendUrl, params, _p2._0, _p2._1)),
						_v27 = model;
					msg = _v26;
					model = _v27;
					continue update;
				default:
					var oneTimeLoginParams = {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'timestamp', _1: _p2._1},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'hash', _1: _p2._2},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'uid',
									_1: function (_p38) {
										return _elm_lang$core$Basics$toString(
											_Gizra$elm_restful$Restful_Endpoint$fromEntityId(_p38));
									}(_p2._0)
								},
								_1: {ctor: '[]'}
							}
						}
					};
					var _v28 = _gizra$backoffice$App_Model$MsgLogin(
						A2(_Gizra$elm_restful$Restful_Login$tryOneTimeLogin, model.backendUrl, oneTimeLoginParams)),
						_v29 = model;
					msg = _v28;
					model = _v29;
					continue update;
			}
		}
	});
var _gizra$backoffice$App_Update$initRecaptcha = _elm_lang$core$Native_Platform.outgoingPort(
	'initRecaptcha',
	function (v) {
		return v;
	});
var _gizra$backoffice$App_Update$init = function (flags) {
	var pagesWithRecaptcha = {
		ctor: '::',
		_0: _gizra$backoffice$App_Types$Register,
		_1: {ctor: '[]'}
	};
	var baseHostUrl = _sporto$erl$Erl$parse(flags.baseHostUrl);
	var hostUrl = _sporto$erl$Erl$parse(flags.hostUrl);
	var page = A3(_gizra$backoffice$App_Utils$getPageFromString, flags.page, flags.saleUuid, flags.itemUuid);
	var _p39 = function () {
		var _p40 = page;
		if (_p40.ctor === 'WidgetManager') {
			return A3(_Gizra$elm_restful$Restful_Login$checkCachedCredentials, _gizra$backoffice$App_Update$loginConfig, flags.backendUrl, flags.accessToken);
		} else {
			return {
				ctor: '_Tuple2',
				_0: _Gizra$elm_restful$Restful_Login$loggedOut(_gizra$backoffice$Backend_Model$emptyAnonymousModelBackend),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		}
	}();
	var userAndData = _p39._0;
	var loginCmd = _p39._1;
	var userAndDataUpdated = flags.bidServerAuthStatusRequiredByBo ? A2(
		_Gizra$elm_restful$Restful_Login$mapAnonymousData,
		function (modelBackend) {
			return _elm_lang$core$Native_Utils.update(
				modelBackend,
				{bidServerAuthStatusRequiredByBo: true});
		},
		userAndData) : userAndData;
	var recaptchaInitiateCmd = A2(_elm_lang$core$List$member, page, pagesWithRecaptcha) ? _gizra$backoffice$App_Update$initRecaptcha(_gizra$backoffice$App_Utils$getRecaptchaId) : _elm_lang$core$Platform_Cmd$none;
	var currency = function () {
		var _p41 = flags.currency;
		switch (_p41) {
			case 'chf':
				return _gizra$backoffice$Currency_Model$CHF;
			case 'eur':
				return _gizra$backoffice$Currency_Model$EUR;
			case 'gdp':
				return _gizra$backoffice$Currency_Model$GBP;
			case 'hkd':
				return _gizra$backoffice$Currency_Model$HKD;
			case 'hrn':
				return _gizra$backoffice$Currency_Model$HRN;
			case 'ils':
				return _gizra$backoffice$Currency_Model$ILS;
			case 'usd':
				return _gizra$backoffice$Currency_Model$USD;
			default:
				return _gizra$backoffice$Currency_Model$USD;
		}
	}();
	var language = function () {
		var _p42 = flags.language;
		switch (_p42) {
			case 'de':
				return _gizra$backoffice$App_Types$German;
			case 'en':
				return _gizra$backoffice$App_Types$English;
			case 'he':
				return _gizra$backoffice$App_Types$Hebrew;
			case 'fr':
				return _gizra$backoffice$App_Types$French;
			case 'nl':
				return _gizra$backoffice$App_Types$Dutch;
			case 'ru':
				return _gizra$backoffice$App_Types$Russian;
			case 'zh-hans':
				return _gizra$backoffice$App_Types$Chinese;
			default:
				return _gizra$backoffice$App_Types$English;
		}
	}();
	var modelUpdated = _elm_lang$core$Native_Utils.update(
		_gizra$backoffice$App_Model$emptyModel,
		{currency: currency, language: language, activePage: page, siteShortName: flags.siteShortName, backendUrl: flags.backendUrl, hostUrl: hostUrl, baseHostUrl: baseHostUrl, circuitBidUrl: flags.circuitBidUrl, userAndData: userAndDataUpdated});
	var cmds = _elm_lang$core$Platform_Cmd$batch(
		A2(
			_elm_lang$core$List$append,
			{
				ctor: '::',
				_0: A2(_elm_lang$core$Task$perform, _gizra$backoffice$App_Model$SetCurrentDate, _elm_lang$core$Date$now),
				_1: {
					ctor: '::',
					_0: loginCmd,
					_1: {
						ctor: '::',
						_0: recaptchaInitiateCmd,
						_1: {ctor: '[]'}
					}
				}
			},
			A2(
				_elm_lang$core$List$map,
				function (msg) {
					return A2(
						_elm_lang$core$Task$perform,
						_elm_lang$core$Basics$identity,
						_elm_lang$core$Task$succeed(msg));
				},
				_gizra$backoffice$App_Fetch$fetch(modelUpdated))));
	return {ctor: '_Tuple2', _0: modelUpdated, _1: cmds};
};
var _gizra$backoffice$App_Update$getAuthenticatedUserAndData = _elm_lang$core$Native_Platform.incomingPort('getAuthenticatedUserAndData', _elm_lang$core$Json_Decode$value);
var _gizra$backoffice$App_Update$getAnonymousUserAndData = _elm_lang$core$Native_Platform.incomingPort('getAnonymousUserAndData', _elm_lang$core$Json_Decode$value);
var _gizra$backoffice$App_Update$subscriptions = function (_p43) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _gizra$backoffice$App_Update$getAuthenticatedUserAndData(_gizra$backoffice$App_Model$GetAuthenticatedUserAndData),
			_1: {
				ctor: '::',
				_0: _gizra$backoffice$App_Update$getAnonymousUserAndData(_gizra$backoffice$App_Model$GetAnonymousUserAndData),
				_1: {
					ctor: '::',
					_0: A2(_elm_lang$core$Platform_Sub$map, _gizra$backoffice$App_Model$MsgWidgetManager, _gizra$backoffice$WidgetManager_Update$subscriptions),
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$core$Platform_Sub$map, _gizra$backoffice$App_Model$MsgPagesRegister, _gizra$backoffice$Pages_Register_Update$subscriptions),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$core$Platform_Sub$map, _gizra$backoffice$App_Model$MsgPagesResetPassword, _gizra$backoffice$Pages_ResetPassword_Update$subscriptions),
							_1: {
								ctor: '::',
								_0: A2(_elm_lang$core$Platform_Sub$map, _gizra$backoffice$App_Model$MsgPusher, _gizra$backoffice$Pusher_Update$subscriptions),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		});
};

var _gizra$backoffice$Error_View$viewError = F2(
	function (language, error) {
		var prefix = _elm_lang$html$Html$text(
			A2(
				_elm_lang$core$Basics_ops['++'],
				error.module_,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'.',
					A2(_elm_lang$core$Basics_ops['++'], error.location, ': '))));
		var _p0 = error.error;
		switch (_p0.ctor) {
			case 'Http':
				return A2(
					_elm_lang$html$Html$li,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: prefix,
						_1: {
							ctor: '::',
							_0: A2(_gizra$backoffice$Utils_WebData$viewError, language, _p0._0),
							_1: {ctor: '[]'}
						}
					});
			case 'Plain':
				return A2(
					_elm_lang$html$Html$li,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: prefix,
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html$text(_p0._0),
							_1: {ctor: '[]'}
						}
					});
			default:
				var codeStr = A3(_elm_community$maybe_extra$Maybe_Extra$unwrap, '[unknown code]', _elm_lang$core$Basics$toString, _p0._0.code);
				return A2(
					_elm_lang$html$Html$li,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: prefix,
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								A2(
									_elm_lang$core$Basics_ops['++'],
									'Pusher error ',
									A2(_elm_lang$core$Basics_ops['++'], codeStr, ':'))),
							_1: {
								ctor: '::',
								_0: _Gizra$elm_essentials$Gizra_Html$showMaybe(
									A2(_elm_lang$core$Maybe$map, _elm_lang$html$Html$text, _p0._0.message)),
								_1: {ctor: '[]'}
							}
						}
					});
		}
	});
var _gizra$backoffice$Error_View$view = F2(
	function (language, errors) {
		return _elm_lang$core$List$isEmpty(errors) ? _Gizra$elm_essentials$Gizra_Html$emptyNode : A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('alert debug-errors'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$ul,
					{ctor: '[]'},
					A2(
						_elm_lang$core$List$map,
						_gizra$backoffice$Error_View$viewError(language),
						errors)),
				_1: {ctor: '[]'}
			});
	});

var _gizra$backoffice$Utils_Html$emptyNode = _elm_lang$html$Html$text('');
var _gizra$backoffice$Utils_Html$spinnerLarge = A2(
	_elm_lang$html$Html$i,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('fa fa-spinner fa-spin fa-3x'),
		_1: {ctor: '[]'}
	},
	{ctor: '[]'});
var _gizra$backoffice$Utils_Html$spinner = A2(
	_elm_lang$html$Html$i,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('fa fa-spinner fa-spin'),
		_1: {ctor: '[]'}
	},
	{ctor: '[]'});
var _gizra$backoffice$Utils_Html$textOrSpinner = F3(
	function (isLoading, language, transId) {
		return isLoading ? _gizra$backoffice$Utils_Html$spinner : A2(_gizra$backoffice$Translate$translateText, language, transId);
	});

var _gizra$backoffice$Pages_ForgotPassword_View$view = F3(
	function (language, login, model) {
		var isLoading = _krisajenkins$remotedata$RemoteData$isLoading(login.data.forgotPassword);
		var isDisabled = isLoading || (_elm_lang$core$String$isEmpty(model.email) || _krisajenkins$remotedata$RemoteData$isSuccess(login.data.forgotPassword));
		var formAttr = isDisabled ? {ctor: '[]'} : {
			ctor: '::',
			_0: _elm_lang$html$Html_Events$onSubmit(_gizra$backoffice$Pages_ForgotPassword_Model$Save),
			_1: {ctor: '[]'}
		};
		var formStatus = function () {
			var _p0 = login.data.forgotPassword;
			_v0_2:
			do {
				switch (_p0.ctor) {
					case 'Success':
						if (_p0._0.ctor === '_Tuple0') {
							return A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('alert alert-success'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_gizra$backoffice$Translate$translateText,
										language,
										_gizra$backoffice$Translate$ForgotPassword(_gizra$backoffice$Translate$YouWillReceiveEmail)),
									_1: {ctor: '[]'}
								});
						} else {
							break _v0_2;
						}
					case 'Failure':
						return A2(_gizra$backoffice$Utils_WebData$viewError, language, _p0._0);
					default:
						break _v0_2;
				}
			} while(false);
			return _Gizra$elm_essentials$Gizra_Html$emptyNode;
		}();
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('forgot-password'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$form,
					A2(
						_elm_lang$core$List$append,
						formAttr,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$action('javascript:void(0);'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('user-pages'),
								_1: {ctor: '[]'}
							}
						}),
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h1,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_gizra$backoffice$Translate$translateText,
									language,
									_gizra$backoffice$Translate$ForgotPassword(_gizra$backoffice$Translate$ForgotMyPassword)),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('instructions'),
									_1: {ctor: '[]'}
								},
								A2(_gizra$backoffice$Translate$translateHtml, language, _gizra$backoffice$Translate$ForgotPasswordInstructions)),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('field-type-text'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$label,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('control-label'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_gizra$backoffice$Translate$translateText,
													language,
													_gizra$backoffice$Translate$General(_gizra$backoffice$Translate$Email)),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$input,
												{
													ctor: '::',
													_0: A2(_elm_lang$html$Html_Attributes$attribute, 'maxlength', '60'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('form-control form-text required'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$name('username'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Events$onInput(_gizra$backoffice$Pages_ForgotPassword_Model$SetEmail),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$pattern('\\S+'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$required(true),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$value(model.email),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$type_('email'),
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}
														}
													}
												},
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$button,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$classList(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'btn form-submit', _1: true},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'loading', _1: isLoading},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'disabled', _1: isDisabled},
																	_1: {ctor: '[]'}
																}
															}
														}),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$disabled(isDisabled),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: A3(
														_gizra$backoffice$Utils_Html$textOrSpinner,
														isLoading,
														language,
														_gizra$backoffice$Translate$ForgotPassword(_gizra$backoffice$Translate$ResetPassword)),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: formStatus,
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			});
	});

var _gizra$backoffice$Currency_Utils$currencySymbol = function (currency) {
	var _p0 = currency;
	switch (_p0.ctor) {
		case 'CHF':
			return 'CHF';
		case 'EUR':
			return '€';
		case 'GBP':
			return '£';
		case 'HKD':
			return 'HK$';
		case 'HRN':
			return '₴';
		case 'ILS':
			return '₪';
		default:
			return '$';
	}
};

var _gizra$backoffice$Pages_ItemPreLiveSale_View$viewNewBidStatusMessage = F3(
	function (language, currency, _p0) {
		var _p1 = _p0;
		var _p2 = function () {
			var _p3 = _p1.status;
			switch (_p3.ctor) {
				case 'Accepted':
					return {ctor: '_Tuple2', _0: _gizra$backoffice$Translate$AcceptedOwnMessage, _1: _gizra$backoffice$Pages_ItemPreLiveSale_Model$Success};
				case 'Rejected':
					return {ctor: '_Tuple2', _0: _gizra$backoffice$Translate$RejectedOwnMessage, _1: _gizra$backoffice$Pages_ItemPreLiveSale_Model$Error};
				case 'RejectedBellowMinimum':
					return {ctor: '_Tuple2', _0: _gizra$backoffice$Translate$RejectedOwnMessage, _1: _gizra$backoffice$Pages_ItemPreLiveSale_Model$Error};
				case 'RejectedBidderMax':
					return {ctor: '_Tuple2', _0: _gizra$backoffice$Translate$RejectedBidderMaxMessage, _1: _gizra$backoffice$Pages_ItemPreLiveSale_Model$Error};
				case 'RejectedCreditLimit':
					return {ctor: '_Tuple2', _0: _gizra$backoffice$Translate$RejectedCreditLimitOwnMessage, _1: _gizra$backoffice$Pages_ItemPreLiveSale_Model$Error};
				case 'RejectedMailAfterSetLastFloor':
					return {ctor: '_Tuple2', _0: _gizra$backoffice$Translate$RevokedToFloorOwnMessage, _1: _gizra$backoffice$Pages_ItemPreLiveSale_Model$Error};
				case 'Outbid':
					return {ctor: '_Tuple2', _0: _gizra$backoffice$Translate$OutbidOwnMessage, _1: _gizra$backoffice$Pages_ItemPreLiveSale_Model$Notice};
				default:
					return {ctor: '_Tuple2', _0: _gizra$backoffice$Translate$AcceptedDuplicatedAmountOwnMessage, _1: _gizra$backoffice$Pages_ItemPreLiveSale_Model$Success};
			}
		}();
		var message = _p2._0;
		var bidStatusType = _p2._1;
		var _p4 = function () {
			var _p5 = bidStatusType;
			switch (_p5.ctor) {
				case 'Success':
					return {ctor: '_Tuple2', _0: 'success', _1: 'fa-check'};
				case 'Error':
					return {ctor: '_Tuple2', _0: 'error', _1: 'fa-exclamation-triangle'};
				default:
					return {ctor: '_Tuple2', _0: 'warning', _1: 'fa-exclamation'};
			}
		}();
		var messageClass = _p4._0;
		var iconClass = _p4._1;
		var getTrans = function (tag) {
			return A2(
				_gizra$backoffice$Translate$translateText,
				language,
				_gizra$backoffice$Translate$Bid(
					A2(tag, _p1.amount, currency)));
		};
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(
					A2(_elm_lang$core$Basics_ops['++'], 'popups ', messageClass)),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$i,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class(
							A2(_elm_lang$core$Basics_ops['++'], 'fa ', iconClass)),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: getTrans(message),
					_1: {ctor: '[]'}
				}
			});
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_View$viewNewBidStatus = F4(
	function (language, currency, item, creatableBidType) {
		return A3(
			_elm_community$maybe_extra$Maybe_Extra$unwrap,
			_Gizra$elm_essentials$Gizra_Html$emptyNode,
			function (editable) {
				var webData = _Gizra$elm_editable_webdata$Editable_WebData$toWebData(editable);
				var _p6 = webData;
				switch (_p6.ctor) {
					case 'Success':
						var _p8 = _p6._0;
						var maybeBid = function () {
							var _p7 = creatableBidType;
							if (_p7.ctor === 'Agent') {
								return A2(_Gizra$elm_dictlist$EveryDictList$get, _p8, item.agentBids);
							} else {
								return A2(_Gizra$elm_dictlist$EveryDictList$get, _p8, item.bookBids);
							}
						}();
						return A3(
							_elm_community$maybe_extra$Maybe_Extra$unwrap,
							_Gizra$elm_essentials$Gizra_Html$emptyNode,
							function (bid) {
								return _elm_lang$core$Native_Utils.eq(bid.deletedStatus, _gizra$backoffice$Backend_Bid_Model$NotDeleted) ? A3(_gizra$backoffice$Pages_ItemPreLiveSale_View$viewNewBidStatusMessage, language, currency, bid) : _Gizra$elm_essentials$Gizra_Html$emptyNode;
							},
							maybeBid);
					case 'Failure':
						return A2(_gizra$backoffice$Utils_WebData$viewError, language, _p6._0);
					default:
						return _Gizra$elm_essentials$Gizra_Html$emptyNode;
				}
			},
			A2(_eeue56$elm_all_dict$EveryDict$get, creatableBidType, item.newBids));
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_View$viewHighestBidderMessage = F4(
	function (language, login, _p9, item) {
		var _p10 = _p9;
		return (A3(_gizra$backoffice$Backend_Item_Utils$isWinningUser, login, _p10._0, item) && (_elm_lang$core$Native_Utils.eq(_p10._1.mailAuctionType, _gizra$backoffice$Backend_Sale_Model$Regular) && _gizra$backoffice$Backend_Item_Utils$isAvailable(item.status))) ? A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('highest-mail-bid'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_gizra$backoffice$Translate$translateText,
					language,
					_gizra$backoffice$Translate$ItemPreLiveSale(_gizra$backoffice$Translate$YouAreTheHighestBidder)),
				_1: {ctor: '[]'}
			}) : _Gizra$elm_essentials$Gizra_Html$emptyNode;
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_View$viewMyBid = F5(
	function (language, currency, login, creatableBidType, bid) {
		var transId = function () {
			var _p11 = creatableBidType;
			if (_p11.ctor === 'Agent') {
				return _gizra$backoffice$Translate$YourCurrentAgentBidIsWithAmount;
			} else {
				return _gizra$backoffice$Translate$YourCurrentBidIsWithAmount;
			}
		}();
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('bid-amount'),
				_1: {ctor: '[]'}
			},
			A2(
				_gizra$backoffice$Translate$translateHtml,
				language,
				A2(transId, bid.amount, currency)));
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_View$viewLinksToPlaceByCreatableBidType = F6(
	function (language, currency, login, saleUuid, _p12, creatableBidType) {
		var _p13 = _p12;
		var _p19 = _p13._0;
		var _p18 = _p13._1;
		var _p14 = function () {
			var _p15 = creatableBidType;
			if (_p15.ctor === 'Agent') {
				return {
					ctor: '_Tuple2',
					_0: A3(_gizra$backoffice$Backend_Bid_Utils$getOwnHighestAgentBid, login, saleUuid, _p18),
					_1: {
						ctor: '::',
						_0: A2(
							_gizra$backoffice$Translate$translateText,
							language,
							_gizra$backoffice$Translate$ItemPreLiveSale(_gizra$backoffice$Translate$OnlineAgent)),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$i,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('fa fa-black-tie'),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				};
			} else {
				return {
					ctor: '_Tuple2',
					_0: A3(_gizra$backoffice$Backend_Bid_Utils$getOwnHighestMailBid, login, saleUuid, _p18),
					_1: {
						ctor: '::',
						_0: A2(
							_gizra$backoffice$Translate$translateText,
							language,
							_gizra$backoffice$Translate$ItemPreLiveSale(_gizra$backoffice$Translate$EnterYourBid)),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$i,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('fa fa-gavel'),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				};
			}
		}();
		var maybeBid = _p14._0;
		var enterBidText = _p14._1;
		var _p16 = maybeBid;
		if (_p16.ctor === 'Just') {
			var _p17 = _p16._0;
			return _elm_lang$core$Native_Utils.eq(_p17.deletedStatus, _gizra$backoffice$Backend_Bid_Model$DeleteInProcess) ? _gizra$backoffice$Utils_Html$spinner : A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('with-bid'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('change-bid'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(
										A4(_gizra$backoffice$Pages_ItemPreLiveSale_Model$SetWidgetType, saleUuid, _p19, creatableBidType, _gizra$backoffice$Pages_ItemPreLiveSale_Model$PlaceBidForm)),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$i,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('fa fa-pencil-square-o'),
											_1: {ctor: '[]'}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_gizra$backoffice$Translate$translateText,
											language,
											_gizra$backoffice$Translate$ItemPreLiveSale(_gizra$backoffice$Translate$ChangeBidAmount)),
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: A5(_gizra$backoffice$Pages_ItemPreLiveSale_View$viewMyBid, language, currency, login, creatableBidType, _p17),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				});
		} else {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('no-bids'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$type_('button'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('btn hoverable'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(
										A4(_gizra$backoffice$Pages_ItemPreLiveSale_Model$SetWidgetType, saleUuid, _p19, creatableBidType, _gizra$backoffice$Pages_ItemPreLiveSale_Model$PlaceBidForm)),
									_1: {ctor: '[]'}
								}
							}
						},
						enterBidText),
					_1: {ctor: '[]'}
				});
		}
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_View$viewLinksToPlaceAgentBid = F5(
	function (language, currency, login, saleUuid, _p20) {
		var _p21 = _p20;
		return A6(
			_gizra$backoffice$Pages_ItemPreLiveSale_View$viewLinksToPlaceByCreatableBidType,
			language,
			currency,
			login,
			saleUuid,
			{ctor: '_Tuple2', _0: _p21._0, _1: _p21._1},
			_gizra$backoffice$Backend_Item_Model$Agent);
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_View$viewLinksToPlaceRegularBid = F5(
	function (language, currency, login, saleUuid, _p22) {
		var _p23 = _p22;
		return A6(
			_gizra$backoffice$Pages_ItemPreLiveSale_View$viewLinksToPlaceByCreatableBidType,
			language,
			currency,
			login,
			saleUuid,
			{ctor: '_Tuple2', _0: _p23._0, _1: _p23._1},
			_gizra$backoffice$Backend_Item_Model$Mail);
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_View$viewPlaceObscuredBid = F6(
	function (language, currency, login, saleUuid, _p24, model) {
		var _p25 = _p24;
		var _p27 = _p25._0;
		var _p26 = _p25._1;
		var amountAsString = A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			A2(
				_elm_lang$core$Maybe$andThen,
				function (editable) {
					var amount = _gizra$backoffice$Amount$extract(
						_stoeffel$editable$Editable$value(
							_Gizra$elm_editable_webdata$Editable_WebData$toEditable(editable)));
					return _elm_lang$core$Maybe$Just(
						_elm_lang$core$Native_Utils.eq(amount, 0) ? '' : _elm_lang$core$Basics$toString(amount));
				},
				A2(_eeue56$elm_all_dict$EveryDict$get, _gizra$backoffice$Backend_Item_Model$Mail, _p26.newBids)));
		var isLoading = A2(
			_elm_lang$core$Maybe$withDefault,
			false,
			A2(
				_elm_lang$core$Maybe$map,
				function (editable) {
					return _krisajenkins$remotedata$RemoteData$isLoading(
						_Gizra$elm_editable_webdata$Editable_WebData$toWebData(editable));
				},
				A2(_eeue56$elm_all_dict$EveryDict$get, _gizra$backoffice$Backend_Item_Model$Mail, _p26.newBids)));
		var formAttr = isLoading ? {ctor: '[]'} : {
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$action('javascript:void(0);'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onSubmit(
					A4(_gizra$backoffice$Pages_ItemPreLiveSale_Model$PlaceBid, saleUuid, _p27, _p26, _gizra$backoffice$Backend_Item_Model$Mail)),
				_1: {ctor: '[]'}
			}
		};
		var isSameAmountAsPreviousBid = A2(
			_elm_lang$core$Maybe$withDefault,
			false,
			A2(
				_elm_lang$core$Maybe$map,
				function (editable) {
					return !_stoeffel$editable$Editable$isDirty(
						_Gizra$elm_editable_webdata$Editable_WebData$toEditable(editable));
				},
				A2(_eeue56$elm_all_dict$EveryDict$get, _gizra$backoffice$Backend_Item_Model$Mail, _p26.newBids)));
		var isDisabled = _elm_lang$core$String$isEmpty(amountAsString) || (isSameAmountAsPreviousBid || isLoading);
		return A2(
			_elm_lang$html$Html$form,
			A2(
				_elm_lang$core$List$append,
				formAttr,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('submit-bid'),
					_1: {ctor: '[]'}
				}),
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('bid-amount'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('currency'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_gizra$backoffice$Currency_Utils$currencySymbol(currency)),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$input,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('form-text required'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$name('amount'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$min('0'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$required(true),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$type_('number'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$value(amountAsString),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Events$onInput(
																A3(_gizra$backoffice$Pages_ItemPreLiveSale_Model$SetAmount, saleUuid, _p27, _gizra$backoffice$Backend_Item_Model$Mail)),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('enter-obscure-bid-wrapper'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$button,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('btn enter-obscure-bid has-spinner hoverable'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$classList(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'disabled', _1: isLoading || isDisabled},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'loading', _1: isLoading},
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$disabled(isDisabled),
											_1: {ctor: '[]'}
										}
									}
								},
								{
									ctor: '::',
									_0: A3(
										_gizra$backoffice$Utils_Html$textOrSpinner,
										isLoading,
										language,
										_gizra$backoffice$Translate$ItemPreLiveSale(_gizra$backoffice$Translate$PlaceBid)),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('button cancel-bid'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(
												A4(_gizra$backoffice$Pages_ItemPreLiveSale_Model$SetWidgetType, saleUuid, _p27, _gizra$backoffice$Backend_Item_Model$Mail, _gizra$backoffice$Pages_ItemPreLiveSale_Model$LinksToPlaceBid)),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$i,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('fa fa-times'),
												_1: {
													ctor: '::',
													_0: A2(_elm_lang$html$Html_Attributes$attribute, 'aria-hidden', 'true'),
													_1: {ctor: '[]'}
												}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_View$viewDeleteAgentBidLink = F4(
	function (language, login, saleUuid, _p28) {
		var _p29 = _p28;
		var maybeBid = A3(_gizra$backoffice$Backend_Bid_Utils$getOwnHighestAgentBid, login, saleUuid, _p29._1);
		return A2(
			_elm_lang$core$Maybe$withDefault,
			_Gizra$elm_essentials$Gizra_Html$emptyNode,
			A2(
				_elm_lang$core$Maybe$map,
				function (bid) {
					return A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('delete-current-bid'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(
									A4(_gizra$backoffice$Pages_ItemPreLiveSale_Model$SetWidgetType, saleUuid, _p29._0, _gizra$backoffice$Backend_Item_Model$Agent, _gizra$backoffice$Pages_ItemPreLiveSale_Model$LinkToDeleteCurrentBid)),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_gizra$backoffice$Translate$translateText,
								language,
								_gizra$backoffice$Translate$ItemPreLiveSale(_gizra$backoffice$Translate$DeleteCurrentBid)),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$i,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('fa fa-trash'),
										_1: {ctor: '[]'}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						});
				},
				maybeBid));
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_View$viewPlaceBidByCreatableBidType = F7(
	function (language, currency, login, saleUuid, _p30, model, creatableBidType) {
		var _p31 = _p30;
		var _p37 = _p31._0;
		var _p36 = _p31._1;
		var deleteCurrentBidLink = function () {
			var _p32 = creatableBidType;
			if (_p32.ctor === 'Agent') {
				return A4(
					_gizra$backoffice$Pages_ItemPreLiveSale_View$viewDeleteAgentBidLink,
					language,
					login,
					saleUuid,
					{ctor: '_Tuple2', _0: _p37, _1: _p36});
			} else {
				return _Gizra$elm_essentials$Gizra_Html$emptyNode;
			}
		}();
		var isLoading = A2(
			_elm_lang$core$Maybe$withDefault,
			false,
			A2(
				_elm_lang$core$Maybe$map,
				function (editable) {
					return _krisajenkins$remotedata$RemoteData$isLoading(
						_Gizra$elm_editable_webdata$Editable_WebData$toWebData(editable));
				},
				A2(_eeue56$elm_all_dict$EveryDict$get, creatableBidType, _p36.newBids)));
		var _p33 = A5(_gizra$backoffice$Pages_ItemPreLiveSale_Utils$getNextBidAmountAndIncrement, login, saleUuid, _p36, creatableBidType, model);
		var nextBidIncrement = _p33._0._1;
		var nextBidDecrement = _p33._1._1;
		var bidAmount = A2(
			_elm_lang$core$Maybe$withDefault,
			_gizra$backoffice$Amount$zero,
			A2(
				_elm_lang$core$Maybe$map,
				function (editable) {
					return _stoeffel$editable$Editable$value(
						_Gizra$elm_editable_webdata$Editable_WebData$toEditable(editable));
				},
				A2(_eeue56$elm_all_dict$EveryDict$get, creatableBidType, _p36.newBids)));
		var bidIncrements = A2(
			_elm_lang$core$Maybe$withDefault,
			_gizra$backoffice$Pages_ItemPreLiveSale_Model$emptyBidIncrements,
			A2(_eeue56$elm_all_dict$EveryDict$get, creatableBidType, model.bidIncrements));
		var _p34 = function () {
			var _p35 = creatableBidType;
			if (_p35.ctor === 'Agent') {
				return {
					ctor: '_Tuple2',
					_0: A3(
						_gizra$backoffice$Amount$compareInfix,
						bidAmount,
						F2(
							function (x, y) {
								return _elm_lang$core$Native_Utils.cmp(x, y) < 1;
							}),
						_p36.startingPrice),
					_1: A3(
						_gizra$backoffice$Amount$compareInfix,
						bidAmount,
						F2(
							function (x, y) {
								return _elm_lang$core$Native_Utils.cmp(x, y) < 0;
							}),
						_p36.startingPrice)
				};
			} else {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$List$isEmpty(bidIncrements.up),
					_1: false
				};
			}
		}();
		var isBidAmountMinimum = _p34._0;
		var isDisabled = _p34._1;
		var buttonAttr = (isDisabled || isLoading) ? {ctor: '[]'} : {
			ctor: '::',
			_0: _elm_lang$html$Html_Events$onClick(
				A4(_gizra$backoffice$Pages_ItemPreLiveSale_Model$PlaceBid, saleUuid, _p37, _p36, creatableBidType)),
			_1: {ctor: '[]'}
		};
		var decButtonAttr = isBidAmountMinimum ? {ctor: '[]'} : {
			ctor: '::',
			_0: _elm_lang$html$Html_Events$onClick(
				A4(_gizra$backoffice$Pages_ItemPreLiveSale_Model$BidAmountDecrement, saleUuid, _p37, creatableBidType, nextBidDecrement)),
			_1: {ctor: '[]'}
		};
		return A2(
			_elm_lang$html$Html$form,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('submit-bid'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('mail-bid-amount'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							A2(
								_elm_lang$core$Basics_ops['++'],
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$type_('button'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('btn operator fa fa-minus-circle'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$classList(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'disabled', _1: isLoading || isBidAmountMinimum},
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(_elm_lang$html$Html_Attributes$attribute, 'operator', '-'),
												_1: {ctor: '[]'}
											}
										}
									}
								},
								decButtonAttr),
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('mail-amount'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(_gizra$backoffice$Amount$showAmountWithCurrency, bidAmount, currency),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$button,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$type_('button'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('btn operator fa fa-plus-circle'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$classList(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'disabled', _1: isLoading},
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(_elm_lang$html$Html_Attributes$attribute, 'operator', '+'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onClick(
															A4(_gizra$backoffice$Pages_ItemPreLiveSale_Model$BidAmountIncrement, saleUuid, _p37, creatableBidType, nextBidIncrement)),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('enter-obscure-bid-wrapper'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$button,
								A2(
									_elm_lang$core$List$append,
									buttonAttr,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$type_('button'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('btn enter-obscure-bid has-spinner hoverable'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$classList(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'disabled', _1: isLoading || isDisabled},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'loading', _1: isLoading},
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$disabled(isDisabled),
													_1: {ctor: '[]'}
												}
											}
										}
									}),
								{
									ctor: '::',
									_0: A3(
										_gizra$backoffice$Utils_Html$textOrSpinner,
										isLoading,
										language,
										_gizra$backoffice$Translate$ItemPreLiveSale(_gizra$backoffice$Translate$PlaceBid)),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('button cancel-bid'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(
												A4(_gizra$backoffice$Pages_ItemPreLiveSale_Model$SetWidgetType, saleUuid, _p37, creatableBidType, _gizra$backoffice$Pages_ItemPreLiveSale_Model$LinksToPlaceBid)),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$i,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('fa fa-times'),
												_1: {
													ctor: '::',
													_0: A2(_elm_lang$html$Html_Attributes$attribute, 'aria-hidden', 'true'),
													_1: {ctor: '[]'}
												}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: deleteCurrentBidLink,
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_View$viewPlaceRegularBid = F6(
	function (language, currency, login, saleUuid, _p38, model) {
		var _p39 = _p38;
		return A7(
			_gizra$backoffice$Pages_ItemPreLiveSale_View$viewPlaceBidByCreatableBidType,
			language,
			currency,
			login,
			saleUuid,
			{ctor: '_Tuple2', _0: _p39._0, _1: _p39._1},
			model,
			_gizra$backoffice$Backend_Item_Model$Mail);
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_View$viewPlaceAgentBid = F6(
	function (language, currency, login, saleUuid, _p40, model) {
		var _p41 = _p40;
		return A7(
			_gizra$backoffice$Pages_ItemPreLiveSale_View$viewPlaceBidByCreatableBidType,
			language,
			currency,
			login,
			saleUuid,
			{ctor: '_Tuple2', _0: _p41._0, _1: _p41._1},
			model,
			_gizra$backoffice$Backend_Item_Model$Agent);
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_View$viewLinksToPlaceObscuredBid = F5(
	function (language, currency, login, saleUuid, _p42) {
		var _p43 = _p42;
		var _p47 = _p43._0;
		var _p46 = _p43._1;
		var buttonLabel = _gizra$backoffice$Backend_Item_Utils$isUnsoldPostSaleAllow(_p46.status) ? _gizra$backoffice$Translate$ItemPreLiveSale(_gizra$backoffice$Translate$MakeAnOffer) : _gizra$backoffice$Translate$ItemPreLiveSale(_gizra$backoffice$Translate$EnterYourBid);
		var enterYourBidButton = A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('no-bids'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('btn hoverable'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$type_('button'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(
									A4(_gizra$backoffice$Pages_ItemPreLiveSale_Model$SetWidgetType, saleUuid, _p47, _gizra$backoffice$Backend_Item_Model$Mail, _gizra$backoffice$Pages_ItemPreLiveSale_Model$PlaceBidForm)),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: A2(_gizra$backoffice$Translate$translateText, language, buttonLabel),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
		var myCurrentBid = function (bid) {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('with-bid'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('change-bid'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(
										A4(_gizra$backoffice$Pages_ItemPreLiveSale_Model$SetWidgetType, saleUuid, _p47, _gizra$backoffice$Backend_Item_Model$Mail, _gizra$backoffice$Pages_ItemPreLiveSale_Model$PlaceBidForm)),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$i,
										{
											ctor: '::',
											_0: A2(_elm_lang$html$Html_Attributes$attribute, 'aria-hidden', 'true'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('fa fa-pencil-square-o'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_gizra$backoffice$Translate$translateText,
											language,
											_gizra$backoffice$Translate$ItemPreLiveSale(_gizra$backoffice$Translate$ChangeBidAmount)),
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('amount'),
								_1: {ctor: '[]'}
							},
							A2(
								_gizra$backoffice$Translate$translateHtml,
								language,
								A2(_gizra$backoffice$Translate$YourCurrentBidIsWithAmount, bid.amount, currency))),
						_1: {ctor: '[]'}
					}
				});
		};
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: function () {
					var _p44 = A3(_gizra$backoffice$Backend_Bid_Utils$getOwnHighestMailBid, login, saleUuid, _p46);
					if (_p44.ctor === 'Just') {
						var _p45 = _p44._0;
						return _elm_lang$core$Native_Utils.eq(_p45.deletedStatus, _gizra$backoffice$Backend_Bid_Model$DeleteInProcess) ? _gizra$backoffice$Utils_Html$spinner : myCurrentBid(_p45);
					} else {
						return enterYourBidButton;
					}
				}(),
				_1: {ctor: '[]'}
			});
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_View$viewLiveAllowed = F3(
	function (circuitBidUrl, language, _p48) {
		var _p49 = _p48;
		var saleHref = A2(
			_elm_lang$core$Basics_ops['++'],
			circuitBidUrl,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'/#sale/',
				_Gizra$elm_restful$Restful_Endpoint$fromEntityUuid(_p49._0)));
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('livesale'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_gizra$backoffice$Translate$translateText,
					language,
					_gizra$backoffice$Translate$ItemPreLiveSale(_gizra$backoffice$Translate$LiveAuctionOpen)),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$br,
						{ctor: '[]'},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$a,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$href(saleHref),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$target('_blank'),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: A2(
									_gizra$backoffice$Translate$translateText,
									language,
									_gizra$backoffice$Translate$ItemPreLiveSale(_gizra$backoffice$Translate$JoinLiveAuction)),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_View$viewisItemNotActiveButAlreadyHasLiveBids = function (language) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('item-has-live-bids'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_gizra$backoffice$Translate$translateText,
				language,
				_gizra$backoffice$Translate$ItemPreLiveSale(_gizra$backoffice$Translate$ItemNotActiveButAlreadyHasLiveBids_)),
			_1: {ctor: '[]'}
		});
};
var _gizra$backoffice$Pages_ItemPreLiveSale_View$viewWithdrawnItem = function (language) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('withdrawn'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_gizra$backoffice$Translate$translateText,
				language,
				_gizra$backoffice$Translate$ItemPreLiveSale(_gizra$backoffice$Translate$LotWithdrawnFromSale)),
			_1: {ctor: '[]'}
		});
};
var _gizra$backoffice$Pages_ItemPreLiveSale_View$viewSoldItem = F5(
	function (language, currency, login, _p51, _p50) {
		var _p52 = _p51;
		var _p53 = _p50;
		var _p54 = _p53._1;
		var bidAmount = A2(_elm_lang$core$Maybe$withDefault, _p54.startingPrice, _p54.currentPrice);
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('sold'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_gizra$backoffice$Translate$translateText,
							language,
							A3(_gizra$backoffice$Backend_Item_Utils$isWinningUser, login, _p52._0, _p54) ? _gizra$backoffice$Translate$ItemPreLiveSale(
								A2(_gizra$backoffice$Translate$YouWon, bidAmount, currency)) : _gizra$backoffice$Translate$ItemPreLiveSale(
								A2(_gizra$backoffice$Translate$SoldFor, bidAmount, currency))),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_View$viewCurrentPrice = F4(
	function (language, currency, mailAuctionType, item) {
		var isCurrentPriceVisible = _elm_lang$core$Native_Utils.eq(mailAuctionType, _gizra$backoffice$Backend_Sale_Model$Regular) && ((!_gizra$backoffice$Backend_Item_Utils$isSold(item.status)) && (_gizra$backoffice$Backend_Item_Utils$hasWinningBid(item) && _gizra$backoffice$Backend_Item_Utils$isMailAllowed(item.status)));
		return isCurrentPriceVisible ? A2(
			_elm_lang$core$Maybe$withDefault,
			_Gizra$elm_essentials$Gizra_Html$emptyNode,
			A2(
				_elm_lang$core$Maybe$map,
				function (amount) {
					return A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('mail-current-price'),
							_1: {ctor: '[]'}
						},
						A2(
							_gizra$backoffice$Translate$translateHtml,
							language,
							A2(_gizra$backoffice$Translate$MailCurrentPriceAmount, amount, currency)));
				},
				item.currentPrice)) : _Gizra$elm_essentials$Gizra_Html$emptyNode;
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_View$viewCreditIsRequired = F4(
	function (baseHostUrl, language, saleUuid, tag) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('credit-required'),
				_1: {ctor: '[]'}
			},
			A2(
				_gizra$backoffice$Translate$translateHtml,
				language,
				A2(tag, baseHostUrl, saleUuid)));
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_View$viewCreditIsRequiredButPendingForMailBids = F3(
	function (baseHostUrl, language, saleUuid) {
		return A4(_gizra$backoffice$Pages_ItemPreLiveSale_View$viewCreditIsRequired, baseHostUrl, language, saleUuid, _gizra$backoffice$Translate$CreditIsRequiredButPendingForMailBids);
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_View$viewCreditIsRequiredForMailBids = F3(
	function (baseHostUrl, language, saleUuid) {
		return A4(_gizra$backoffice$Pages_ItemPreLiveSale_View$viewCreditIsRequired, baseHostUrl, language, saleUuid, _gizra$backoffice$Translate$CreditIsRequiredForMailBids);
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_View$viewCreditIsRequiredForAgentBids = F3(
	function (baseHostUrl, language, saleUuid) {
		return A4(_gizra$backoffice$Pages_ItemPreLiveSale_View$viewCreditIsRequired, baseHostUrl, language, saleUuid, _gizra$backoffice$Translate$CreditIsRequiredForAgentBids);
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_View$viewDeleteCurrentBidForm = F4(
	function (language, saleUuid, _p55, creatableBidType) {
		var _p56 = _p55;
		var _p57 = _p56._0;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('delete-current-bid-form'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('delete-current-bid-prompt'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_gizra$backoffice$Translate$translateText,
							language,
							_gizra$backoffice$Translate$ItemPreLiveSale(_gizra$backoffice$Translate$PromptDeleteCurrentBid)),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('delete-current-bid-actions'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('confirm-delete'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(
											A3(
												_gizra$backoffice$Pages_ItemPreLiveSale_Model$DeleteCurrentBid,
												saleUuid,
												{ctor: '_Tuple2', _0: _p57, _1: _p56._1},
												creatableBidType)),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: A2(
										_gizra$backoffice$Translate$translateText,
										language,
										_gizra$backoffice$Translate$ItemPreLiveSale(_gizra$backoffice$Translate$YesDeleteIt)),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$i,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('fa fa-exclamation'),
												_1: {ctor: '[]'}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('cancel-delete'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(
												A4(_gizra$backoffice$Pages_ItemPreLiveSale_Model$SetWidgetType, saleUuid, _p57, creatableBidType, _gizra$backoffice$Pages_ItemPreLiveSale_Model$LinksToPlaceBid)),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: A2(
											_gizra$backoffice$Translate$translateText,
											language,
											_gizra$backoffice$Translate$ItemPreLiveSale(_gizra$backoffice$Translate$NoKeepMyBid)),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_View$viewAgentWidget = F7(
	function (baseHostUrl, language, currency, login, _p59, _p58, model) {
		var _p60 = _p59;
		var _p65 = _p60._0;
		var _p61 = _p58;
		var _p64 = _p61._0;
		var _p63 = _p61._1;
		var widgetType = A3(_gizra$backoffice$Pages_ItemPreLiveSale_Utils$getWidgetType, _p63, _gizra$backoffice$Backend_Item_Model$Agent, model);
		var widget = function () {
			var _p62 = widgetType;
			switch (_p62.ctor) {
				case 'LinkToDeleteCurrentBid':
					return A4(
						_gizra$backoffice$Pages_ItemPreLiveSale_View$viewDeleteCurrentBidForm,
						language,
						_p65,
						{ctor: '_Tuple2', _0: _p64, _1: _p63},
						_gizra$backoffice$Backend_Item_Model$Agent);
				case 'LinksToPlaceBid':
					return A5(
						_gizra$backoffice$Pages_ItemPreLiveSale_View$viewLinksToPlaceAgentBid,
						language,
						currency,
						login,
						_p65,
						{ctor: '_Tuple2', _0: _p64, _1: _p63});
				default:
					return A2(_gizra$backoffice$Pages_ItemPreLiveSale_Utils$hasLiveCreditOrPendingCreditRequest, login, _p65) ? A6(
						_gizra$backoffice$Pages_ItemPreLiveSale_View$viewPlaceAgentBid,
						language,
						currency,
						login,
						_p65,
						{ctor: '_Tuple2', _0: _p64, _1: _p63},
						model) : A3(_gizra$backoffice$Pages_ItemPreLiveSale_View$viewCreditIsRequiredForAgentBids, baseHostUrl, language, _p65);
			}
		}();
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('obscure-bid-block agent'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: widget,
				_1: {
					ctor: '::',
					_0: A4(_gizra$backoffice$Pages_ItemPreLiveSale_View$viewNewBidStatus, language, currency, _p63, _gizra$backoffice$Backend_Item_Model$Agent),
					_1: {ctor: '[]'}
				}
			});
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_View$viewMailWidget = F8(
	function (baseHostUrl, language, currency, login, _p67, _p66, isMakeOffer, model) {
		var _p68 = _p67;
		var _p76 = _p68._0;
		var _p75 = _p68._1;
		var _p69 = _p66;
		var _p74 = _p69._0;
		var _p73 = _p69._1;
		var widgetType = A3(_gizra$backoffice$Pages_ItemPreLiveSale_Utils$getWidgetType, _p73, _gizra$backoffice$Backend_Item_Model$Mail, model);
		var widget = function () {
			var _p70 = widgetType;
			switch (_p70.ctor) {
				case 'LinkToDeleteCurrentBid':
					return A4(
						_gizra$backoffice$Pages_ItemPreLiveSale_View$viewDeleteCurrentBidForm,
						language,
						_p76,
						{ctor: '_Tuple2', _0: _p74, _1: _p73},
						_gizra$backoffice$Backend_Item_Model$Mail);
				case 'LinksToPlaceBid':
					var _p71 = _p75.mailAuctionType;
					if (_p71.ctor === 'Regular') {
						return A5(
							_gizra$backoffice$Pages_ItemPreLiveSale_View$viewLinksToPlaceRegularBid,
							language,
							currency,
							login,
							_p76,
							{ctor: '_Tuple2', _0: _p74, _1: _p73});
					} else {
						return A5(
							_gizra$backoffice$Pages_ItemPreLiveSale_View$viewLinksToPlaceObscuredBid,
							language,
							currency,
							login,
							_p76,
							{ctor: '_Tuple2', _0: _p74, _1: _p73});
					}
				default:
					var _p72 = _p75.mailAuctionType;
					if (_p72.ctor === 'Regular') {
						return A2(_gizra$backoffice$Pages_ItemPreLiveSale_Utils$hasLiveCredit, login, _p76) ? A6(
							_gizra$backoffice$Pages_ItemPreLiveSale_View$viewPlaceRegularBid,
							language,
							currency,
							login,
							_p76,
							{ctor: '_Tuple2', _0: _p74, _1: _p73},
							model) : (A2(_gizra$backoffice$Pages_ItemPreLiveSale_Utils$hasPendingCreditRequest, login, _p76) ? A3(_gizra$backoffice$Pages_ItemPreLiveSale_View$viewCreditIsRequiredButPendingForMailBids, baseHostUrl, language, _p76) : A3(_gizra$backoffice$Pages_ItemPreLiveSale_View$viewCreditIsRequiredForMailBids, baseHostUrl, language, _p76));
					} else {
						return A6(
							_gizra$backoffice$Pages_ItemPreLiveSale_View$viewPlaceObscuredBid,
							language,
							currency,
							login,
							_p76,
							{ctor: '_Tuple2', _0: _p74, _1: _p73},
							model);
					}
			}
		}();
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'obscure-bid-block', _1: true},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'place-bid', _1: !isMakeOffer},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'make-offer', _1: isMakeOffer},
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: widget,
				_1: {
					ctor: '::',
					_0: A4(_gizra$backoffice$Pages_ItemPreLiveSale_View$viewNewBidStatus, language, currency, _p73, _gizra$backoffice$Backend_Item_Model$Mail),
					_1: {
						ctor: '::',
						_0: A4(
							_gizra$backoffice$Pages_ItemPreLiveSale_View$viewHighestBidderMessage,
							language,
							login,
							{ctor: '_Tuple2', _0: _p76, _1: _p75},
							_p73),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_View$pendingApprovalAccountView = function (language) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('pending'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_gizra$backoffice$Translate$translateText,
				language,
				_gizra$backoffice$Translate$ItemPreLiveSale(_gizra$backoffice$Translate$YourAccountIsPendingApproval)),
			_1: {ctor: '[]'}
		});
};
var _gizra$backoffice$Pages_ItemPreLiveSale_View$viewFavoriteFlag = F4(
	function (language, login, _p78, _p77) {
		var _p79 = _p78;
		var _p80 = _p77;
		var _p81 = _p80._1.favorite;
		switch (_p81.ctor) {
			case 'Success':
				var _p82 = _p81._0;
				var iconClass = _p82 ? '' : '-o';
				return A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('follow-item'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$a,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(
									A3(_gizra$backoffice$Pages_ItemPreLiveSale_Model$SetFavorite, _p79._0, _p80._0, !_p82)),
								_1: {
									ctor: '::',
									_0: _Gizra$elm_essentials$Gizra_Html$voidHref,
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: A2(
									_gizra$backoffice$Translate$translateText,
									language,
									_gizra$backoffice$Translate$ItemPreLiveSale(_gizra$backoffice$Translate$FollowLot)),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$i,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class(
												A2(_elm_lang$core$Basics_ops['++'], 'fa fa-heart', iconClass)),
											_1: {ctor: '[]'}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					});
			case 'Failure':
				return A2(_gizra$backoffice$Utils_WebData$viewError, language, _p81._0);
			case 'Loading':
				return A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('follow-item'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$a,
							{
								ctor: '::',
								_0: _Gizra$elm_essentials$Gizra_Html$voidHref,
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_gizra$backoffice$Translate$translateText,
									language,
									_gizra$backoffice$Translate$ItemPreLiveSale(_gizra$backoffice$Translate$FollowLot)),
								_1: {
									ctor: '::',
									_0: _gizra$backoffice$Utils_Html$spinner,
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					});
			default:
				return _Gizra$elm_essentials$Gizra_Html$emptyNode;
		}
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_View$viewMainWidget = F7(
	function (_p85, language, currency, login, _p84, _p83, model) {
		var _p86 = _p85;
		var _p93 = _p86._0;
		var _p87 = _p84;
		var _p92 = _p87._0;
		var _p91 = _p87._1;
		var _p88 = _p83;
		var _p90 = _p88._0;
		var _p89 = _p88._1;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$id('item-prelive-sale'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: function () {
					if (_gizra$backoffice$Backend_User_Utils$isActive(login)) {
						if (_gizra$backoffice$Backend_Item_Utils$isWithdrawn(_p89.status)) {
							return _gizra$backoffice$Pages_ItemPreLiveSale_View$viewWithdrawnItem(language);
						} else {
							if (_gizra$backoffice$Backend_Item_Utils$isSold(_p89.status)) {
								return A5(
									_gizra$backoffice$Pages_ItemPreLiveSale_View$viewSoldItem,
									language,
									currency,
									login,
									{ctor: '_Tuple2', _0: _p92, _1: _p91},
									{ctor: '_Tuple2', _0: _p90, _1: _p89});
							} else {
								if (_gizra$backoffice$Backend_Item_Utils$isUnsold(_p89.status)) {
									if (_gizra$backoffice$Backend_Item_Utils$isUnsoldPostSaleAllow(_p89.status)) {
										var saleObscured = _elm_lang$core$Native_Utils.update(
											_p91,
											{mailAuctionType: _gizra$backoffice$Backend_Sale_Model$Obscured});
										return A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('obscure-bid-block-wrapper'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A8(
													_gizra$backoffice$Pages_ItemPreLiveSale_View$viewMailWidget,
													_p93,
													language,
													currency,
													login,
													{ctor: '_Tuple2', _0: _p92, _1: saleObscured},
													{ctor: '_Tuple2', _0: _p90, _1: _p89},
													true,
													model),
												_1: {
													ctor: '::',
													_0: A4(
														_gizra$backoffice$Pages_ItemPreLiveSale_View$viewFavoriteFlag,
														language,
														login,
														{ctor: '_Tuple2', _0: _p92, _1: _p91},
														{ctor: '_Tuple2', _0: _p90, _1: _p89}),
													_1: {ctor: '[]'}
												}
											});
									} else {
										return _Gizra$elm_essentials$Gizra_Html$emptyNode;
									}
								} else {
									if (_gizra$backoffice$Backend_Item_Utils$isItemNotActiveButAlreadyHasLiveBids(_p89.status)) {
										return _gizra$backoffice$Pages_ItemPreLiveSale_View$viewisItemNotActiveButAlreadyHasLiveBids(language);
									} else {
										if (_gizra$backoffice$Backend_Item_Utils$isLiveAllowed(_p89.status)) {
											return A3(
												_gizra$backoffice$Pages_ItemPreLiveSale_View$viewLiveAllowed,
												_p86._1,
												language,
												{ctor: '_Tuple2', _0: _p92, _1: _p91});
										} else {
											if (_gizra$backoffice$Backend_Item_Utils$isMailAllowed(_p89.status)) {
												var agentWidget = login.data.disableAgent ? _Gizra$elm_essentials$Gizra_Html$emptyNode : A7(
													_gizra$backoffice$Pages_ItemPreLiveSale_View$viewAgentWidget,
													_p93,
													language,
													currency,
													login,
													{ctor: '_Tuple2', _0: _p92, _1: _p91},
													{ctor: '_Tuple2', _0: _p90, _1: _p89},
													model);
												return A2(
													_elm_lang$html$Html$div,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: A4(_gizra$backoffice$Pages_ItemPreLiveSale_View$viewCurrentPrice, language, currency, _p91.mailAuctionType, _p89),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$div,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$class('obscure-bid-block-wrapper'),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: A8(
																		_gizra$backoffice$Pages_ItemPreLiveSale_View$viewMailWidget,
																		_p93,
																		language,
																		currency,
																		login,
																		{ctor: '_Tuple2', _0: _p92, _1: _p91},
																		{ctor: '_Tuple2', _0: _p90, _1: _p89},
																		false,
																		model),
																	_1: {
																		ctor: '::',
																		_0: agentWidget,
																		_1: {
																			ctor: '::',
																			_0: A4(
																				_gizra$backoffice$Pages_ItemPreLiveSale_View$viewFavoriteFlag,
																				language,
																				login,
																				{ctor: '_Tuple2', _0: _p92, _1: _p91},
																				{ctor: '_Tuple2', _0: _p90, _1: _p89}),
																			_1: {ctor: '[]'}
																		}
																	}
																}),
															_1: {ctor: '[]'}
														}
													});
											} else {
												return _Gizra$elm_essentials$Gizra_Html$emptyNode;
											}
										}
									}
								}
							}
						}
					} else {
						return _gizra$backoffice$Pages_ItemPreLiveSale_View$pendingApprovalAccountView(language);
					}
				}(),
				_1: {ctor: '[]'}
			});
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_View$view = F7(
	function (_p94, language, currency, login, saleUuid, itemUuid, model) {
		var _p95 = _p94;
		var saleWebData = _krisajenkins$remotedata$RemoteData$toMaybe(
			A2(
				_elm_lang$core$Maybe$withDefault,
				_krisajenkins$remotedata$RemoteData$NotAsked,
				A2(_eeue56$elm_all_dict$EveryDict$get, saleUuid, login.data.sales)));
		var _p96 = {
			ctor: '_Tuple2',
			_0: saleWebData,
			_1: A3(_gizra$backoffice$PaginatedData$get, saleUuid, itemUuid, login.data.items)
		};
		if (((_p96.ctor === '_Tuple2') && (_p96._0.ctor === 'Just')) && (_p96._1.ctor === 'Just')) {
			return A7(
				_gizra$backoffice$Pages_ItemPreLiveSale_View$viewMainWidget,
				{ctor: '_Tuple2', _0: _p95._0, _1: _p95._1},
				language,
				currency,
				login,
				{ctor: '_Tuple2', _0: saleUuid, _1: _p96._0._0},
				{ctor: '_Tuple2', _0: itemUuid, _1: _p96._1._0},
				model);
		} else {
			return _gizra$backoffice$Utils_Html$spinner;
		}
	});
var _gizra$backoffice$Pages_ItemPreLiveSale_View$viewAnon = F7(
	function (_p97, language, currency, login, saleUuid, itemUuid, model) {
		var _p98 = _p97;
		var saleWebData = _krisajenkins$remotedata$RemoteData$toMaybe(
			A2(
				_elm_lang$core$Maybe$withDefault,
				_krisajenkins$remotedata$RemoteData$NotAsked,
				A2(_eeue56$elm_all_dict$EveryDict$get, saleUuid, login.data.sales)));
		var _p99 = {
			ctor: '_Tuple2',
			_0: saleWebData,
			_1: A3(_gizra$backoffice$PaginatedData$get, saleUuid, itemUuid, login.data.items)
		};
		if (((_p99.ctor === '_Tuple2') && (_p99._0.ctor === 'Just')) && (_p99._1.ctor === 'Just')) {
			return A4(_gizra$backoffice$Pages_ItemPreLiveSale_View$viewCurrentPrice, language, currency, _p99._0._0.mailAuctionType, _p99._1._0);
		} else {
			return _Gizra$elm_essentials$Gizra_Html$emptyNode;
		}
	});

var _gizra$backoffice$Pages_Login_View$view = F4(
	function (baseHostUrl, language, userData, model) {
		var baseUrl = _sporto$erl$Erl$toString(baseHostUrl);
		var forgotPasswordHref = _sporto$erl$Erl$toString(
			_elm_lang$core$Native_Utils.update(
				baseHostUrl,
				{
					path: A2(
						_elm_lang$core$List$append,
						baseHostUrl.path,
						{
							ctor: '::',
							_0: 'forgot_password',
							_1: {ctor: '[]'}
						})
				}));
		var forgotPasswordLink = A2(
			_elm_lang$html$Html$a,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('forgotlink'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$href(forgotPasswordHref),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_gizra$backoffice$Translate$translateText,
					language,
					_gizra$backoffice$Translate$Login(_gizra$backoffice$Translate$ForgotYourPassword)),
				_1: {ctor: '[]'}
			});
		var formError = _elm_community$maybe_extra$Maybe_Extra$isJust(
			_Gizra$elm_restful$Restful_Login$getError(userData)) ? A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('alert alert-danger'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_gizra$backoffice$Translate$translateText,
					language,
					_gizra$backoffice$Translate$UserBlock(_gizra$backoffice$Translate$UnrecognizedCredentials)),
				_1: {ctor: '[]'}
			}) : _Gizra$elm_essentials$Gizra_Html$emptyNode;
		var isLoading = _Gizra$elm_restful$Restful_Login$isChecking(userData);
		var submitBlock = A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('form-item form-checkboxes'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('control-label'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$input,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$type_('checkbox'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$name('accept_terms'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('form-checkbox required'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$required(true),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$span,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('terms-conditions'),
											_1: {ctor: '[]'}
										},
										A2(
											_gizra$backoffice$Translate$translateHtml,
											language,
											_gizra$backoffice$Translate$AgreedWithTerms(baseUrl))),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('form-actions form-wrapper'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$button,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('btn form-submit'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$disabled(isLoading),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$type_('submit'),
											_1: {ctor: '[]'}
										}
									}
								},
								{
									ctor: '::',
									_0: A3(
										_gizra$backoffice$Utils_Html$textOrSpinner,
										isLoading,
										language,
										_gizra$backoffice$Translate$Login(_gizra$backoffice$Translate$SignInNow)),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('user-login'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$form,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onSubmit(_gizra$backoffice$Pages_Login_Model$TryLogin),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$action('javascript:void(0);'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('user-pages'),
										_1: {ctor: '[]'}
									}
								}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$h1,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: A2(
													_gizra$backoffice$Translate$translateText,
													language,
													_gizra$backoffice$Translate$Login(_gizra$backoffice$Translate$SignInToYourAccount)),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('instructions'),
													_1: {ctor: '[]'}
												},
												A2(_gizra$backoffice$Translate$translateHtml, language, _gizra$backoffice$Translate$LoginInstructions)),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('field-type-text'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$div,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('control-label'),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: A2(
																	_gizra$backoffice$Translate$translateText,
																	language,
																	_gizra$backoffice$Translate$General(_gizra$backoffice$Translate$Email)),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$input,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$class('form-control form-text required'),
																	_1: {
																		ctor: '::',
																		_0: A2(_elm_lang$html$Html_Attributes$attribute, 'maxlength', '240'),
																		_1: {
																			ctor: '::',
																			_0: A2(_elm_lang$html$Html_Attributes$attribute, 'data-toggle', 'tooltip'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$id('edit-name'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$name('email'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html_Events$onInput(_gizra$backoffice$Pages_Login_Model$SetName),
																						_1: {
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$pattern('\\S+'),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$placeholder(
																									A2(
																										_gizra$backoffice$Translate$translate,
																										language,
																										_gizra$backoffice$Translate$General(_gizra$backoffice$Translate$Email))),
																								_1: {
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$required(true),
																									_1: {
																										ctor: '::',
																										_0: _elm_lang$html$Html_Attributes$type_('text'),
																										_1: {
																											ctor: '::',
																											_0: _elm_lang$html$Html_Attributes$value(model.name),
																											_1: {ctor: '[]'}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																},
																{ctor: '[]'}),
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$div,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('form-item form-item-pass-pass1 form-type-password form-group has-feedback'),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$div,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$class('control-label'),
																	_1: {
																		ctor: '::',
																		_0: A2(_elm_lang$html$Html_Attributes$attribute, 'for', 'edit-pass-pass1'),
																		_1: {ctor: '[]'}
																	}
																},
																{
																	ctor: '::',
																	_0: A2(
																		_gizra$backoffice$Translate$translateText,
																		language,
																		_gizra$backoffice$Translate$Register(_gizra$backoffice$Translate$Password)),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$input,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$class('password-field form-control form-text password-processed'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$id('edit-pass'),
																			_1: {
																				ctor: '::',
																				_0: A2(_elm_lang$html$Html_Attributes$attribute, 'maxlength', '128'),
																				_1: {
																					ctor: '::',
																					_0: A2(_elm_lang$html$Html_Attributes$attribute, 'size', '25'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$name('pass[pass1]'),
																						_1: {
																							ctor: '::',
																							_0: _elm_lang$html$Html_Events$onInput(_gizra$backoffice$Pages_Login_Model$SetPassword),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$placeholder(
																									A2(
																										_gizra$backoffice$Translate$translate,
																										language,
																										_gizra$backoffice$Translate$Register(_gizra$backoffice$Translate$Password))),
																								_1: {
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$required(true),
																									_1: {
																										ctor: '::',
																										_0: _elm_lang$html$Html_Attributes$type_(
																											model.passwordVisible ? 'text' : 'password'),
																										_1: {
																											ctor: '::',
																											_0: _elm_lang$html$Html_Attributes$value(model.pass),
																											_1: {ctor: '[]'}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	},
																	{ctor: '[]'}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$i,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$class(
																				model.passwordVisible ? 'fa fa-eye' : 'fa fa-eye-slash'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: 'top', _1: '37px'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'right', _1: '9px'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'cursor', _1: 'pointer'},
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$id('togglePassword'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html_Events$onClick(_gizra$backoffice$Pages_Login_Model$TogglePasswordVisibility),
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		},
																		{ctor: '[]'}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$span,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$class('glyphicon form-control-feedback'),
																				_1: {ctor: '[]'}
																			},
																			{ctor: '[]'}),
																		_1: {ctor: '[]'}
																	}
																}
															}
														}),
													_1: {
														ctor: '::',
														_0: submitBlock,
														_1: {
															ctor: '::',
															_0: formError,
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$div,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$class('form-item remember'),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: forgotPasswordLink,
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});

var _gizra$backoffice$Pages_MyAccount_View$viewForm = F3(
	function (language, login, _p0) {
		var _p1 = _p0;
		var _p3 = _p1.form;
		var isLoading = _krisajenkins$remotedata$RemoteData$isLoading(login.data.myAccount);
		var submit = A2(
			_elm_lang$html$Html$button,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'btn form-submit', _1: true},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'loading', _1: isLoading},
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$disabled(isLoading),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(_gizra$backoffice$Pages_MyAccount_Model$Save),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: A3(
					_gizra$backoffice$Utils_Html$textOrSpinner,
					isLoading,
					language,
					_gizra$backoffice$Translate$MyAccount(_gizra$backoffice$Translate$UpdateMyAccount)),
				_1: {ctor: '[]'}
			});
		var formStatus = function () {
			var _p2 = login.data.myAccount;
			switch (_p2.ctor) {
				case 'Success':
					return A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('alert alert-info'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_gizra$backoffice$Translate$translateText,
								language,
								_gizra$backoffice$Translate$MyAccount(_gizra$backoffice$Translate$YourAccountDetailsHaveBeenUpdated)),
							_1: {ctor: '[]'}
						});
				case 'Failure':
					return A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('alert alert-danger'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(_gizra$backoffice$Utils_WebData$viewError, language, _p2._0),
							_1: {ctor: '[]'}
						});
				default:
					return _gizra$backoffice$Utils_Html$emptyNode;
			}
		}();
		return A2(
			_elm_lang$html$Html$form,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$action('javascript:void(0);'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('user-pages'),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$h1,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_gizra$backoffice$Translate$translateText,
							language,
							_gizra$backoffice$Translate$UserBlock(_gizra$backoffice$Translate$MyAccount_)),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A8(_gizra$backoffice$Utils_UserForms$textField, language, _p3, _gizra$backoffice$Pages_MyAccount_Model$MsgForm, 'field-type-text', 'control-label', false, _gizra$backoffice$Utils_UserForms$Required, _gizra$backoffice$Utils_UserForms$FirstName),
					_1: {
						ctor: '::',
						_0: A8(_gizra$backoffice$Utils_UserForms$textField, language, _p3, _gizra$backoffice$Pages_MyAccount_Model$MsgForm, 'field-type-text', 'control-label', false, _gizra$backoffice$Utils_UserForms$Required, _gizra$backoffice$Utils_UserForms$LastName),
						_1: {
							ctor: '::',
							_0: A8(_gizra$backoffice$Utils_UserForms$emailField, language, _p3, _gizra$backoffice$Pages_MyAccount_Model$MsgForm, 'field-type-text', 'control-label', false, _gizra$backoffice$Utils_UserForms$Required, _gizra$backoffice$Utils_UserForms$Email),
							_1: {
								ctor: '::',
								_0: A8(_gizra$backoffice$Utils_UserForms$phoneField, language, _p3, _gizra$backoffice$Pages_MyAccount_Model$MsgForm, 'field-type-text', 'control-label', false, _gizra$backoffice$Utils_UserForms$Required, _gizra$backoffice$Utils_UserForms$PhoneNumber),
								_1: {
									ctor: '::',
									_0: A3(_gizra$backoffice$Utils_UserForms$addressField, language, _p3, _gizra$backoffice$Pages_MyAccount_Model$MsgForm),
									_1: {
										ctor: '::',
										_0: A5(_gizra$backoffice$Utils_UserForms$languageField, language, login.data.site, _p3, _gizra$backoffice$Pages_MyAccount_Model$MsgForm, false),
										_1: {
											ctor: '::',
											_0: A8(_gizra$backoffice$Utils_UserForms$textAreaField, language, _p3, _gizra$backoffice$Pages_MyAccount_Model$MsgForm, 'form-textarea-wrapper resizable textarea-processed resizable-textarea', 'control-label', false, _gizra$backoffice$Utils_UserForms$NotRequired, _gizra$backoffice$Utils_UserForms$References),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$fieldset,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$label,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('control-label form-type-password'),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: A2(
																	_gizra$backoffice$Translate$translateText,
																	language,
																	_gizra$backoffice$Translate$MyAccount(_gizra$backoffice$Translate$ChangePassword)),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$div,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$class('password-fields'),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: A8(_gizra$backoffice$Utils_UserForms$passwordField, language, _p3, _gizra$backoffice$Pages_MyAccount_Model$MsgForm, 'form-item-pass-pass1 form-type-password form-group has-feedback', 'control-label', false, _gizra$backoffice$Utils_UserForms$NotRequired, _gizra$backoffice$Utils_UserForms$NewPassword),
																	_1: {
																		ctor: '::',
																		_0: A8(_gizra$backoffice$Utils_UserForms$passwordField, language, _p3, _gizra$backoffice$Pages_MyAccount_Model$MsgForm, 'form-item-pass-pass2 form-type-password form-group has-feedback', 'control-label', false, _gizra$backoffice$Utils_UserForms$NotRequired, _gizra$backoffice$Utils_UserForms$ConfirmPassword),
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: A8(_gizra$backoffice$Utils_UserForms$checkboxField, language, _p3, _gizra$backoffice$Pages_MyAccount_Model$MsgForm, 'form-item form-checkboxes', 'control-label', false, _gizra$backoffice$Utils_UserForms$NotRequired, _gizra$backoffice$Utils_UserForms$SubscribeToNewsLetter),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$div,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('submit-button-wrapper'),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: submit,
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: formStatus,
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			});
	});
var _gizra$backoffice$Pages_MyAccount_View$view = F3(
	function (language, login, model) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('account'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A3(_gizra$backoffice$Pages_MyAccount_View$viewForm, language, login, model),
				_1: {ctor: '[]'}
			});
	});

var _mgold$elm_date_format$Date_Local$dutch = {
	date: {
		months: {jan: 'januari', feb: 'februari', mar: 'maart', apr: 'april', may: 'mei', jun: 'juni', jul: 'juli', aug: 'augustus', sep: 'september', oct: 'oktober', nov: 'november', dec: 'december'},
		monthsAbbrev: {jan: 'jan', feb: 'feb', mar: 'mrt', apr: 'apr', may: 'mei', jun: 'jun', jul: 'jul', aug: 'aug', sep: 'sep', oct: 'okt', nov: 'nov', dec: 'dec'},
		wdays: {mon: 'maandag', tue: 'dinsdag', wed: 'woensdag', thu: 'donderdag', fri: 'vrijdag', sat: 'zaterdag', sun: 'zondag'},
		wdaysAbbrev: {mon: 'ma', tue: 'di', wed: 'wo', thu: 'do', fri: 'vr', sat: 'za', sun: 'zo'},
		defaultFormat: _elm_lang$core$Maybe$Nothing
	},
	time: {
		am: 'am',
		pm: 'pm',
		defaultFormat: _elm_lang$core$Maybe$Just('%H:%M')
	},
	timeZones: _elm_lang$core$Maybe$Nothing,
	defaultFormat: _elm_lang$core$Maybe$Nothing
};
var _mgold$elm_date_format$Date_Local$greek = {
	date: {
		months: {jan: 'Ιανουαρίου', feb: 'Φεβρουαρίου', mar: 'Μαρτίου', apr: 'Απριλίου', may: 'Μαΐου', jun: 'Ιουνίου', jul: 'Ιουλίου', aug: 'Αυγούστου', sep: 'Σεπτεμβρίου', oct: 'Οκτωβρίου', nov: 'Νοεμβρίου', dec: 'Δεκεμβρίου'},
		monthsAbbrev: {jan: 'Ιαν', feb: 'Φεβ', mar: 'Μαρ', apr: 'Απρ', may: 'Μαϊ', jun: 'Ιουν', jul: 'Ιουλ', aug: 'Αυγ', sep: 'Σεπ', oct: 'Οκτ', nov: 'Νοε', dec: 'Δεκ'},
		wdays: {mon: 'Δευτέρα', tue: 'Τρίτη', wed: 'Τετάρτη', thu: 'Πέμπτη', fri: 'Παρασκευή', sat: 'Σάββατο', sun: 'Κυριακή'},
		wdaysAbbrev: {mon: 'Δευ', tue: 'Τρι', wed: 'Τετ', thu: 'Πεμ', fri: 'Παρ', sat: 'Σαβ', sun: 'Κυρ'},
		defaultFormat: _elm_lang$core$Maybe$Nothing
	},
	time: {am: 'πμ', pm: 'μμ', defaultFormat: _elm_lang$core$Maybe$Nothing},
	timeZones: _elm_lang$core$Maybe$Nothing,
	defaultFormat: _elm_lang$core$Maybe$Nothing
};
var _mgold$elm_date_format$Date_Local$german = {
	date: {
		months: {jan: 'Januar', feb: 'Februar', mar: 'März', apr: 'April', may: 'Mai', jun: 'Juni', jul: 'Juli', aug: 'August', sep: 'September', oct: 'Oktober', nov: 'November', dec: 'Dezember'},
		monthsAbbrev: {jan: 'Jan', feb: 'Feb', mar: 'Mär', apr: 'Apr', may: 'Mai', jun: 'Jun', jul: 'Jul', aug: 'Aug', sep: 'Sep', oct: 'Okt', nov: 'Nov', dec: 'Dez'},
		wdays: {mon: 'Montag', tue: 'Dienstag', wed: 'Mittwoch', thu: 'Donnerstag', fri: 'Freitag', sat: 'Samstag', sun: 'Sonntag'},
		wdaysAbbrev: {mon: 'Mo', tue: 'Di', wed: 'Mi', thu: 'Do', fri: 'Fr', sat: 'Sa', sun: 'So'},
		defaultFormat: _elm_lang$core$Maybe$Just('%e. %B %Y')
	},
	time: {
		am: 'am',
		pm: 'pm',
		defaultFormat: _elm_lang$core$Maybe$Just('%k:%M')
	},
	timeZones: _elm_lang$core$Maybe$Nothing,
	defaultFormat: _elm_lang$core$Maybe$Nothing
};
var _mgold$elm_date_format$Date_Local$brazilian = {
	date: {
		months: {jan: 'Janeiro', feb: 'Fevereiro', mar: 'Março', apr: 'Abril', may: 'Maio', jun: 'Junho', jul: 'Julho', aug: 'Agosto', sep: 'Setembro', oct: 'Outubro', nov: 'Novembro', dec: 'Dezembro'},
		monthsAbbrev: {jan: 'Jan', feb: 'Fev', mar: 'Mar', apr: 'Abr', may: 'Mai', jun: 'Jun', jul: 'Jul', aug: 'Ago', sep: 'Set', oct: 'Out', nov: 'Nov', dec: 'Dez'},
		wdays: {mon: 'Segunda-feira', tue: 'Terça-feira', wed: 'Quarta-feira', thu: 'Quinta-feira', fri: 'Sexta-feira', sat: 'Sábado', sun: 'Domingo'},
		wdaysAbbrev: {mon: 'Seg', tue: 'Ter', wed: 'Qua', thu: 'Qui', fri: 'Sex', sat: 'Sáb', sun: 'Dom'},
		defaultFormat: _elm_lang$core$Maybe$Just('%e de %B de %Y')
	},
	time: {
		am: 'am',
		pm: 'pm',
		defaultFormat: _elm_lang$core$Maybe$Just('%k:%M')
	},
	timeZones: _elm_lang$core$Maybe$Nothing,
	defaultFormat: _elm_lang$core$Maybe$Nothing
};
var _mgold$elm_date_format$Date_Local$french = {
	date: {
		months: {jan: 'Janvier', feb: 'Février', mar: 'Mars', apr: 'Avril', may: 'Mai', jun: 'Juin', jul: 'Juillet', aug: 'Août', sep: 'Septembre', oct: 'Octobre', nov: 'Novembre', dec: 'Décembre'},
		monthsAbbrev: {jan: 'Jan', feb: 'Fév', mar: 'Mar', apr: 'Avr', may: 'Mai', jun: 'Jui', jul: 'Jul', aug: 'Aoû', sep: 'Sep', oct: 'Oct', nov: 'Nov', dec: 'Déc'},
		wdays: {mon: 'Lundi', tue: 'Mardi', wed: 'Mercredi', thu: 'Jeudi', fri: 'Vendredi', sat: 'Samedi', sun: 'Dimanche'},
		wdaysAbbrev: {mon: 'Lun', tue: 'Mar', wed: 'Mer', thu: 'Jeu', fri: 'Ven', sat: 'Sam', sun: 'Dim'},
		defaultFormat: _elm_lang$core$Maybe$Nothing
	},
	time: {am: 'am', pm: 'pm', defaultFormat: _elm_lang$core$Maybe$Nothing},
	timeZones: _elm_lang$core$Maybe$Nothing,
	defaultFormat: _elm_lang$core$Maybe$Nothing
};
var _mgold$elm_date_format$Date_Local$international = {
	date: {
		months: {jan: 'January', feb: 'February', mar: 'March', apr: 'April', may: 'May', jun: 'June', jul: 'July', aug: 'August', sep: 'September', oct: 'October', nov: 'November', dec: 'December'},
		monthsAbbrev: {jan: 'Jan', feb: 'Feb', mar: 'Mar', apr: 'Apr', may: 'May', jun: 'Jun', jul: 'Jul', aug: 'Aug', sep: 'Sep', oct: 'Oct', nov: 'Nov', dec: 'Dec'},
		wdays: {mon: 'Monday', tue: 'Tuesday', wed: 'Wednesday', thu: 'Thursday', fri: 'Friday', sat: 'Saturday', sun: 'Sunday'},
		wdaysAbbrev: {mon: 'Mon', tue: 'Tue', wed: 'Wed', thu: 'Thu', fri: 'Fri', sat: 'Sat', sun: 'Sun'},
		defaultFormat: _elm_lang$core$Maybe$Nothing
	},
	time: {am: 'am', pm: 'pm', defaultFormat: _elm_lang$core$Maybe$Nothing},
	timeZones: _elm_lang$core$Maybe$Nothing,
	defaultFormat: _elm_lang$core$Maybe$Nothing
};
var _mgold$elm_date_format$Date_Local$Local = F4(
	function (a, b, c, d) {
		return {date: a, time: b, timeZones: c, defaultFormat: d};
	});
var _mgold$elm_date_format$Date_Local$Months = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return {jan: a, feb: b, mar: c, apr: d, may: e, jun: f, jul: g, aug: h, sep: i, oct: j, nov: k, dec: l};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _mgold$elm_date_format$Date_Local$WeekDays = F7(
	function (a, b, c, d, e, f, g) {
		return {mon: a, tue: b, wed: c, thu: d, fri: e, sat: f, sun: g};
	});

var _mgold$elm_date_format$Date_Format$padWith = function (padding) {
	var padder = function () {
		var _p0 = padding;
		switch (_p0.ctor) {
			case 'NoPadding':
				return _elm_lang$core$Basics$identity;
			case 'Zero':
				return A2(
					_elm_lang$core$String$padLeft,
					2,
					_elm_lang$core$Native_Utils.chr('0'));
			case 'ZeroThreeDigits':
				return A2(
					_elm_lang$core$String$padLeft,
					3,
					_elm_lang$core$Native_Utils.chr('0'));
			default:
				return A2(
					_elm_lang$core$String$padLeft,
					2,
					_elm_lang$core$Native_Utils.chr(' '));
		}
	}();
	return function (_p1) {
		return padder(
			_elm_lang$core$Basics$toString(_p1));
	};
};
var _mgold$elm_date_format$Date_Format$zero2twelve = function (n) {
	return _elm_lang$core$Native_Utils.eq(n, 0) ? 12 : n;
};
var _mgold$elm_date_format$Date_Format$mod12 = function (h) {
	return A2(_elm_lang$core$Basics_ops['%'], h, 12);
};
var _mgold$elm_date_format$Date_Format$dayOfWeekToWord = F2(
	function (loc, dow) {
		var _p2 = dow;
		switch (_p2.ctor) {
			case 'Mon':
				return loc.mon;
			case 'Tue':
				return loc.tue;
			case 'Wed':
				return loc.wed;
			case 'Thu':
				return loc.thu;
			case 'Fri':
				return loc.fri;
			case 'Sat':
				return loc.sat;
			default:
				return loc.sun;
		}
	});
var _mgold$elm_date_format$Date_Format$monthToWord = F2(
	function (loc, m) {
		var _p3 = m;
		switch (_p3.ctor) {
			case 'Jan':
				return loc.jan;
			case 'Feb':
				return loc.feb;
			case 'Mar':
				return loc.mar;
			case 'Apr':
				return loc.apr;
			case 'May':
				return loc.may;
			case 'Jun':
				return loc.jun;
			case 'Jul':
				return loc.jul;
			case 'Aug':
				return loc.aug;
			case 'Sep':
				return loc.sep;
			case 'Oct':
				return loc.oct;
			case 'Nov':
				return loc.nov;
			default:
				return loc.dec;
		}
	});
var _mgold$elm_date_format$Date_Format$monthToInt = function (m) {
	var _p4 = m;
	switch (_p4.ctor) {
		case 'Jan':
			return 1;
		case 'Feb':
			return 2;
		case 'Mar':
			return 3;
		case 'Apr':
			return 4;
		case 'May':
			return 5;
		case 'Jun':
			return 6;
		case 'Jul':
			return 7;
		case 'Aug':
			return 8;
		case 'Sep':
			return 9;
		case 'Oct':
			return 10;
		case 'Nov':
			return 11;
		default:
			return 12;
	}
};
var _mgold$elm_date_format$Date_Format$re = _elm_lang$core$Regex$regex('%(_|-|0)?(%|Y|y|m|B|b|d|e|a|A|H|k|I|l|L|p|P|M|S)');
var _mgold$elm_date_format$Date_Format$ZeroThreeDigits = {ctor: 'ZeroThreeDigits'};
var _mgold$elm_date_format$Date_Format$Zero = {ctor: 'Zero'};
var _mgold$elm_date_format$Date_Format$Space = {ctor: 'Space'};
var _mgold$elm_date_format$Date_Format$NoPadding = {ctor: 'NoPadding'};
var _mgold$elm_date_format$Date_Format$formatToken = F3(
	function (loc, d, m) {
		var _p5 = function () {
			var _p6 = m.submatches;
			_v4_4:
			do {
				if (_p6.ctor === '::') {
					if (_p6._0.ctor === 'Just') {
						if (((_p6._1.ctor === '::') && (_p6._1._0.ctor === 'Just')) && (_p6._1._1.ctor === '[]')) {
							switch (_p6._0._0) {
								case '-':
									return {
										ctor: '_Tuple2',
										_0: _elm_lang$core$Maybe$Just(_mgold$elm_date_format$Date_Format$NoPadding),
										_1: _p6._1._0._0
									};
								case '_':
									return {
										ctor: '_Tuple2',
										_0: _elm_lang$core$Maybe$Just(_mgold$elm_date_format$Date_Format$Space),
										_1: _p6._1._0._0
									};
								case '0':
									return {
										ctor: '_Tuple2',
										_0: _elm_lang$core$Maybe$Just(_mgold$elm_date_format$Date_Format$Zero),
										_1: _p6._1._0._0
									};
								default:
									break _v4_4;
							}
						} else {
							break _v4_4;
						}
					} else {
						if (((_p6._1.ctor === '::') && (_p6._1._0.ctor === 'Just')) && (_p6._1._1.ctor === '[]')) {
							return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: _p6._1._0._0};
						} else {
							break _v4_4;
						}
					}
				} else {
					break _v4_4;
				}
			} while(false);
			return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: ' '};
		}();
		var padding = _p5._0;
		var symbol = _p5._1;
		var _p7 = symbol;
		switch (_p7) {
			case '%':
				return '%';
			case 'Y':
				return _elm_lang$core$Basics$toString(
					_elm_lang$core$Date$year(d));
			case 'y':
				return A2(
					_elm_lang$core$String$right,
					2,
					_elm_lang$core$Basics$toString(
						_elm_lang$core$Date$year(d)));
			case 'm':
				return A2(
					_mgold$elm_date_format$Date_Format$padWith,
					A2(_elm_lang$core$Maybe$withDefault, _mgold$elm_date_format$Date_Format$Zero, padding),
					_mgold$elm_date_format$Date_Format$monthToInt(
						_elm_lang$core$Date$month(d)));
			case 'B':
				return A2(
					_mgold$elm_date_format$Date_Format$monthToWord,
					loc.date.months,
					_elm_lang$core$Date$month(d));
			case 'b':
				return A2(
					_mgold$elm_date_format$Date_Format$monthToWord,
					loc.date.monthsAbbrev,
					_elm_lang$core$Date$month(d));
			case 'd':
				return A2(
					_mgold$elm_date_format$Date_Format$padWith,
					A2(_elm_lang$core$Maybe$withDefault, _mgold$elm_date_format$Date_Format$Zero, padding),
					_elm_lang$core$Date$day(d));
			case 'e':
				return A2(
					_mgold$elm_date_format$Date_Format$padWith,
					A2(_elm_lang$core$Maybe$withDefault, _mgold$elm_date_format$Date_Format$Space, padding),
					_elm_lang$core$Date$day(d));
			case 'a':
				return A2(
					_mgold$elm_date_format$Date_Format$dayOfWeekToWord,
					loc.date.wdaysAbbrev,
					_elm_lang$core$Date$dayOfWeek(d));
			case 'A':
				return A2(
					_mgold$elm_date_format$Date_Format$dayOfWeekToWord,
					loc.date.wdays,
					_elm_lang$core$Date$dayOfWeek(d));
			case 'H':
				return A2(
					_mgold$elm_date_format$Date_Format$padWith,
					A2(_elm_lang$core$Maybe$withDefault, _mgold$elm_date_format$Date_Format$Zero, padding),
					_elm_lang$core$Date$hour(d));
			case 'k':
				return A2(
					_mgold$elm_date_format$Date_Format$padWith,
					A2(_elm_lang$core$Maybe$withDefault, _mgold$elm_date_format$Date_Format$Space, padding),
					_elm_lang$core$Date$hour(d));
			case 'I':
				return A2(
					_mgold$elm_date_format$Date_Format$padWith,
					A2(_elm_lang$core$Maybe$withDefault, _mgold$elm_date_format$Date_Format$Zero, padding),
					_mgold$elm_date_format$Date_Format$zero2twelve(
						_mgold$elm_date_format$Date_Format$mod12(
							_elm_lang$core$Date$hour(d))));
			case 'l':
				return A2(
					_mgold$elm_date_format$Date_Format$padWith,
					A2(_elm_lang$core$Maybe$withDefault, _mgold$elm_date_format$Date_Format$Space, padding),
					_mgold$elm_date_format$Date_Format$zero2twelve(
						_mgold$elm_date_format$Date_Format$mod12(
							_elm_lang$core$Date$hour(d))));
			case 'p':
				return (_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$Date$hour(d),
					12) < 0) ? _elm_lang$core$String$toUpper(loc.time.am) : _elm_lang$core$String$toUpper(loc.time.pm);
			case 'P':
				return (_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$Date$hour(d),
					12) < 0) ? loc.time.am : loc.time.pm;
			case 'M':
				return A2(
					_mgold$elm_date_format$Date_Format$padWith,
					A2(_elm_lang$core$Maybe$withDefault, _mgold$elm_date_format$Date_Format$Zero, padding),
					_elm_lang$core$Date$minute(d));
			case 'S':
				return A2(
					_mgold$elm_date_format$Date_Format$padWith,
					A2(_elm_lang$core$Maybe$withDefault, _mgold$elm_date_format$Date_Format$Zero, padding),
					_elm_lang$core$Date$second(d));
			case 'L':
				return A2(
					_mgold$elm_date_format$Date_Format$padWith,
					A2(_elm_lang$core$Maybe$withDefault, _mgold$elm_date_format$Date_Format$ZeroThreeDigits, padding),
					_elm_lang$core$Date$millisecond(d));
			default:
				return '';
		}
	});
var _mgold$elm_date_format$Date_Format$localFormat = F3(
	function (loc, s, d) {
		return A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_mgold$elm_date_format$Date_Format$re,
			A2(_mgold$elm_date_format$Date_Format$formatToken, loc, d),
			s);
	});
var _mgold$elm_date_format$Date_Format$format = F2(
	function (s, d) {
		return A3(_mgold$elm_date_format$Date_Format$localFormat, _mgold$elm_date_format$Date_Local$international, s, d);
	});
var _mgold$elm_date_format$Date_Format$formatISO8601 = _mgold$elm_date_format$Date_Format$format('%Y-%m-%dT%H:%M:%SZ');

var _gizra$backoffice$Pages_MyBids_View$viewBidsList = F5(
	function (language, currency, login, saleUuid, item) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('mybidslist'),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$List$map,
				function (_p0) {
					var _p1 = _p0;
					var _p2 = _p1._1;
					return A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$classList(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'mybid', _1: true},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'agent-bid',
											_1: _gizra$backoffice$Backend_Bid_Utils$isAgentBid(_p2)
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'mail-bid',
												_1: _gizra$backoffice$Backend_Bid_Utils$isMailBid(_p2)
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: 'live-bid',
													_1: _gizra$backoffice$Backend_Bid_Utils$isLiveBid(_p2)
												},
												_1: {ctor: '[]'}
											}
										}
									}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(_gizra$backoffice$Amount$showAmountWithCurrency, _p2.amount, currency),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text(' '),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$span,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('bidtype'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												A2(
													_elm_lang$core$Basics_ops['++'],
													'(',
													A2(
														_elm_lang$core$Basics_ops['++'],
														A2(_gizra$backoffice$Backend_Bid_Utils$getBidTypeAsString, language, _p2),
														')'))),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('date'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(
													A2(_mgold$elm_date_format$Date_Format$format, '%d %b - %H:%M', _p2.created)),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}
							}
						});
				},
				A2(
					_elm_lang$core$List$sortWith,
					F2(
						function (_p4, _p3) {
							var _p5 = _p4;
							var _p6 = _p3;
							return A2(
								_elm_lang$core$Basics$compare,
								_Gizra$elm_restful$Restful_Endpoint$fromEntityId(_p5._0),
								_Gizra$elm_restful$Restful_Endpoint$fromEntityId(_p6._0));
						}),
					_Gizra$elm_dictlist$EveryDictList$toList(
						A2(
							_Gizra$elm_dictlist$EveryDictList$append,
							A3(_gizra$backoffice$Backend_Bid_Utils$getOwnValidOrAmountDuplicatedBids, login, saleUuid, item.agentBids),
							A2(
								_Gizra$elm_dictlist$EveryDictList$append,
								A3(_gizra$backoffice$Backend_Bid_Utils$getOwnValidOrAmountDuplicatedBids, login, saleUuid, item.bookBids),
								A3(_gizra$backoffice$Backend_Bid_Utils$getOwnValidOrAmountDuplicatedBids, login, saleUuid, item.bids)))))));
	});
var _gizra$backoffice$Pages_MyBids_View$viewItem = F6(
	function (baseHostUrl, language, currency, login, saleUuid, _p7) {
		var _p8 = _p7;
		var _p10 = _p8._1._1;
		var _p9 = _p8._1._0;
		var baseHostUrlAsString = _sporto$erl$Erl$toString(baseHostUrl);
		var itemUrl = A2(
			_elm_lang$core$Basics_ops['++'],
			baseHostUrlAsString,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'/item-uuid/',
				_Gizra$elm_restful$Restful_Endpoint$fromEntityUuid(_p9.uuid)));
		var description = A3(
			_elm_community$maybe_extra$Maybe_Extra$unwrap,
			_Gizra$elm_essentials$Gizra_Html$emptyNode,
			function (description) {
				return A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('lot-title-body'),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html_Attributes$property,
								'innerHTML',
								_elm_lang$core$Json_Encode$string(description)),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'});
			},
			_p10.description);
		var estimatedPrice = A3(
			_elm_community$maybe_extra$Maybe_Extra$unwrap,
			{ctor: '[]'},
			function (price) {
				return A2(
					_gizra$backoffice$Translate$translateHtml,
					language,
					A2(_gizra$backoffice$Translate$EstPrice, price, currency));
			},
			_p10.estimatedPrice);
		var startPrice = A2(
			_gizra$backoffice$Translate$translateHtml,
			language,
			A2(_gizra$backoffice$Translate$Start, _p9.startingPrice, currency));
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(
					A2(_elm_lang$core$Basics_ops['++'], 'lot lot-', _p9.lotId)),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('lot-image'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$img,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$src(_p10.imageSmall),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$alt(_p10.name),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('lot-data'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$href(itemUrl),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$h3,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: A2(
												_gizra$backoffice$Translate$translateText,
												language,
												_gizra$backoffice$Translate$MyBids(
													_gizra$backoffice$Translate$LotWithId(_p9.lotId))),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html$text(' '),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$span,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('item-title'),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(_p9.name),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('prices'),
										_1: {ctor: '[]'}
									},
									A2(_elm_lang$core$List$append, startPrice, estimatedPrice)),
								_1: {
									ctor: '::',
									_0: description,
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('view-details'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$a,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$href(itemUrl),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: A2(
															_gizra$backoffice$Translate$translateText,
															language,
															_gizra$backoffice$Translate$MyBids(_gizra$backoffice$Translate$ViewMoreLotDetails)),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('my-bids'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$h4,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_gizra$backoffice$Translate$translateText,
											language,
											_gizra$backoffice$Translate$UserBlock(_gizra$backoffice$Translate$MyBids_)),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A5(_gizra$backoffice$Pages_MyBids_View$viewBidsList, language, currency, login, saleUuid, _p9),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _gizra$backoffice$Pages_MyBids_View$view = F5(
	function (baseHostUrl, language, currency, login, saleUuid) {
		var isLoadingItems = A3(
			_eeue56$elm_all_dict$EveryDict$foldl,
			F3(
				function (_p11, webData, accum) {
					return accum ? accum : _krisajenkins$remotedata$RemoteData$isLoading(webData);
				}),
			false,
			A2(_gizra$backoffice$PaginatedData$getPager, saleUuid, login.data.items));
		var totalCount = A2(_gizra$backoffice$PaginatedData$getTotalCount, saleUuid, login.data.items);
		var itemsSize = _Gizra$elm_dictlist$EveryDictList$size(
			A2(_gizra$backoffice$PaginatedData$getAll, saleUuid, login.data.items));
		var hasItemsWithMyBids = _elm_lang$core$Native_Utils.cmp(itemsSize, 0) > 0;
		var itemTuples = A3(
			_Gizra$elm_dictlist$EveryDictList$foldl,
			F3(
				function (itemUuid, item, accum) {
					var _p12 = A2(_eeue56$elm_all_dict$EveryDict$get, itemUuid, login.data.staticItems.data);
					if (_p12.ctor === 'Just') {
						return {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: itemUuid,
								_1: {ctor: '_Tuple2', _0: item, _1: _p12._0}
							},
							_1: accum
						};
					} else {
						var _p13 = A2(_elm_lang$core$Debug$log, 'Missing static item', itemUuid);
						return accum;
					}
				}),
			{ctor: '[]'},
			A2(_gizra$backoffice$PaginatedData$getAll, saleUuid, login.data.items));
		var isLoading = isLoadingItems || (!_elm_lang$core$Native_Utils.eq(
			itemsSize,
			_elm_lang$core$List$length(itemTuples)));
		var maybeSpinner = (isLoading || _elm_community$maybe_extra$Maybe_Extra$isNothing(totalCount)) ? A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('spinner-wrapper'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _gizra$backoffice$Utils_Html$spinnerLarge,
				_1: {ctor: '[]'}
			}) : _Gizra$elm_essentials$Gizra_Html$emptyNode;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('my-bids-page'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: maybeSpinner,
				_1: {
					ctor: '::',
					_0: ((!isLoadingItems) && ((!hasItemsWithMyBids) && _elm_community$maybe_extra$Maybe_Extra$isJust(totalCount))) ? A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('no-bids-wrapper'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_gizra$backoffice$Translate$translateText,
								language,
								_gizra$backoffice$Translate$MyBids(_gizra$backoffice$Translate$NoBidsPlaced)),
							_1: {ctor: '[]'}
						}) : A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('my-bids-wrapper'),
							_1: {ctor: '[]'}
						},
						A2(
							_elm_lang$core$List$map,
							A5(_gizra$backoffice$Pages_MyBids_View$viewItem, baseHostUrl, language, currency, login, saleUuid),
							itemTuples)),
					_1: {ctor: '[]'}
				}
			});
	});

var _gizra$backoffice$Pages_MyCredit_Decoder$decodeSelectedAmountRestriction = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'currentTarget',
		_1: {
			ctor: '::',
			_0: 'value',
			_1: {ctor: '[]'}
		}
	},
	_gizra$backoffice$Amount$decodeAmountRestriction);

var _gizra$backoffice$Pages_MyCredit_View$viewAmountRestriction = F4(
	function (language, currency, saleUuid, _p0) {
		var _p1 = _p0;
		var _p8 = _p1._1;
		var _p7 = _p1._0;
		var tagToInt = function (tag) {
			var _p2 = tag;
			switch (_p2.ctor) {
				case 'None':
					return 0;
				case 'Regular':
					return _gizra$backoffice$Amount$extract(_p2._0);
				default:
					return -1;
			}
		};
		var entity = _stoeffel$editable$Editable$value(
			_Gizra$elm_editable_webdata$Editable_WebData$toEditable(_p8));
		var amountRestriction = A2(
			_elm_lang$core$Maybe$withDefault,
			_gizra$backoffice$Amount$Unlimited,
			A2(_eeue56$elm_all_dict$EveryDict$get, _gizra$backoffice$Backend_BidderInfo_Model$MaxBid, entity.amountRestrictions));
		var regularInput = function () {
			var _p3 = amountRestriction;
			if (_p3.ctor === 'Regular') {
				return A2(
					_elm_lang$html$Html$input,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$type_('number'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('form-control'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$min('1'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$max(
										_elm_lang$core$Basics$toString(_gizra$backoffice$Utils_Number$maximalInt)),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$required(true),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$value(
												_elm_lang$core$Basics$toString(
													_gizra$backoffice$Amount$extract(_p3._0))),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onInput(
													A2(_gizra$backoffice$Pages_MyCredit_Model$SetAmountRestrictionInput, saleUuid, _p7)),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					},
					{ctor: '[]'});
			} else {
				return _Gizra$elm_essentials$Gizra_Html$emptyNode;
			}
		}();
		var isSelected = function (tag) {
			var _p4 = {ctor: '_Tuple2', _0: amountRestriction, _1: tag};
			_v3_3:
			do {
				if (_p4.ctor === '_Tuple2') {
					switch (_p4._0.ctor) {
						case 'None':
							if (_p4._1.ctor === 'None') {
								return true;
							} else {
								break _v3_3;
							}
						case 'Regular':
							if (_p4._1.ctor === 'Regular') {
								return true;
							} else {
								break _v3_3;
							}
						default:
							if (_p4._1.ctor === 'Unlimited') {
								return true;
							} else {
								break _v3_3;
							}
					}
				} else {
					break _v3_3;
				}
			} while(false);
			return false;
		};
		var addOption = function (tag) {
			return A2(
				_elm_lang$html$Html$option,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$value(
						_elm_lang$core$Basics$toString(
							tagToInt(tag))),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$selected(
							isSelected(tag)),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_gizra$backoffice$Translate$translateText,
						language,
						_gizra$backoffice$Translate$BiddingInfo(
							_gizra$backoffice$Translate$AmountRestrictionLabel(tag))),
					_1: {ctor: '[]'}
				});
		};
		var regularOption = function () {
			var _p5 = amountRestriction;
			if (_p5.ctor === 'Regular') {
				return amountRestriction;
			} else {
				var previousEntity = _stoeffel$editable$Editable$value(
					_stoeffel$editable$Editable$cancel(
						_Gizra$elm_editable_webdata$Editable_WebData$toEditable(_p8)));
				var previousAmountRestriction = A2(
					_elm_lang$core$Maybe$withDefault,
					_gizra$backoffice$Amount$Unlimited,
					A2(_eeue56$elm_all_dict$EveryDict$get, _gizra$backoffice$Backend_BidderInfo_Model$MaxBid, previousEntity.amountRestrictions));
				var _p6 = previousAmountRestriction;
				if (_p6.ctor === 'Regular') {
					return _gizra$backoffice$Amount$Regular(_p6._0);
				} else {
					return _gizra$backoffice$Amount$Regular(
						_gizra$backoffice$Amount$Amount(1));
				}
			}
		}();
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$select,
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html_Events$on,
							'change',
							A2(
								_elm_lang$core$Json_Decode$map,
								A2(_gizra$backoffice$Pages_MyCredit_Model$SetSelectedAmountRestriction, saleUuid, _p7),
								_gizra$backoffice$Pages_MyCredit_Decoder$decodeSelectedAmountRestriction)),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: addOption(regularOption),
						_1: {
							ctor: '::',
							_0: addOption(_gizra$backoffice$Amount$Unlimited),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: regularInput,
					_1: {ctor: '[]'}
				}
			});
	});
var _gizra$backoffice$Pages_MyCredit_View$viewBidderMax = F4(
	function (language, currency, login, saleUuid) {
		var isLiveCreditUnlimited = A3(
			_elm_community$maybe_extra$Maybe_Extra$unwrap,
			false,
			function (_p9) {
				var _p10 = _p9;
				return A2(
					_gizra$backoffice$Backend_BidderInfo_Utils$isCreditUnlimited,
					_gizra$backoffice$Backend_BidderInfo_Model$LiveCredit,
					_gizra$backoffice$Utils_EditableWebData$getOriginalValue(_p10._1));
			},
			A2(_gizra$backoffice$Backend_User_Utils$getWebsiteBidderInfoEditable, login, saleUuid));
		return (!isLiveCreditUnlimited) ? _Gizra$elm_essentials$Gizra_Html$emptyNode : A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			A2(
				_elm_lang$core$List$map,
				function (_p11) {
					var _p12 = _p11;
					var _p17 = _p12._1;
					var _p16 = _p12._0;
					var formStatus = function () {
						var _p13 = _Gizra$elm_editable_webdata$Editable_WebData$toWebData(_p17);
						switch (_p13.ctor) {
							case 'Success':
								return A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('alert alert-info'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_gizra$backoffice$Translate$translateText,
											language,
											_gizra$backoffice$Translate$Credit(_gizra$backoffice$Translate$YourBidderLimitHasBeenUpdated)),
										_1: {ctor: '[]'}
									});
							case 'Failure':
								return A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('alert alert-danger'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(_gizra$backoffice$Utils_WebData$viewError, language, _p13._0),
										_1: {ctor: '[]'}
									});
							default:
								return _Gizra$elm_essentials$Gizra_Html$emptyNode;
						}
					}();
					var isChanged = _stoeffel$editable$Editable$isDirty(
						_Gizra$elm_editable_webdata$Editable_WebData$toEditable(_p17));
					var isLoading = _krisajenkins$remotedata$RemoteData$isLoading(
						_Gizra$elm_editable_webdata$Editable_WebData$toWebData(_p17));
					var _p14 = (isLoading || (!isChanged)) ? {
						ctor: '_Tuple3',
						_0: true,
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$disabled(true),
							_1: {ctor: '[]'}
						},
						_2: {ctor: '[]'}
					} : {
						ctor: '_Tuple3',
						_0: false,
						_1: {ctor: '[]'},
						_2: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onSubmit(
								A2(_gizra$backoffice$Pages_MyCredit_Model$SaveBidderInfo, saleUuid, _p16)),
							_1: {ctor: '[]'}
						}
					};
					var buttonDisabled = _p14._0;
					var buttonAttr = _p14._1;
					var formMsg = _p14._2;
					var formAttr = A2(
						_elm_lang$core$List$append,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$action('javascript:void(0);'),
							_1: {ctor: '[]'}
						},
						formMsg);
					var buttonText = isLoading ? _gizra$backoffice$Utils_Html$spinner : A2(
						_elm_lang$html$Html$span,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$i,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('fa fa-check'),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_gizra$backoffice$Translate$translateText,
									language,
									_gizra$backoffice$Translate$General(_gizra$backoffice$Translate$Save)),
								_1: {ctor: '[]'}
							}
						});
					var originalEntity = _gizra$backoffice$Utils_EditableWebData$getOriginalValue(_p17);
					var currentMaximum = A2(
						_elm_lang$core$Maybe$withDefault,
						_gizra$backoffice$Amount$Unlimited,
						A2(_eeue56$elm_all_dict$EveryDict$get, _gizra$backoffice$Backend_BidderInfo_Model$MaxBid, originalEntity.amountRestrictions));
					var entity = _gizra$backoffice$Utils_EditableWebData$getValue(_p17);
					var bidderLimitNote = function () {
						var _p15 = entity.bidderNumber;
						if (_p15.ctor === 'Mail') {
							return A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: A2(
										_gizra$backoffice$Translate$translateText,
										language,
										_gizra$backoffice$Translate$Credit(_gizra$backoffice$Translate$BidderLimitNote)),
									_1: {ctor: '[]'}
								});
						} else {
							return _Gizra$elm_essentials$Gizra_Html$emptyNode;
						}
					}();
					return A2(
						_elm_lang$html$Html$form,
						A2(
							_elm_lang$core$List$append,
							formAttr,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$action('javascript:void(0);'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('user-pages'),
									_1: {ctor: '[]'}
								}
							}),
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$h1,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: A2(
										_gizra$backoffice$Translate$translateText,
										language,
										_gizra$backoffice$Translate$BiddingInfo(
											_gizra$backoffice$Translate$BidderLimit(entity.bidderNumber))),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('alert alert-info'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_gizra$backoffice$Translate$translateText,
											language,
											_gizra$backoffice$Translate$Credit(
												A2(_gizra$backoffice$Translate$CurrentMaximum, currentMaximum, currency))),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A4(
										_gizra$backoffice$Pages_MyCredit_View$viewAmountRestriction,
										language,
										currency,
										saleUuid,
										{ctor: '_Tuple2', _0: _p16, _1: _p17}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: A2(
													_gizra$backoffice$Translate$translateText,
													language,
													_gizra$backoffice$Translate$Credit(_gizra$backoffice$Translate$BidderLimitDescription)),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: bidderLimitNote,
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('submit-button-wrapper'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$button,
															A2(
																_elm_lang$core$List$append,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$class('btn btn-default'),
																	_1: {ctor: '[]'}
																},
																buttonAttr),
															{
																ctor: '::',
																_0: buttonText,
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: formStatus,
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						});
				},
				A2(_gizra$backoffice$Backend_BidderInfo_Utils$getMailAndWebsiteBidderInfoEditables, login, saleUuid)));
	});
var _gizra$backoffice$Pages_MyCredit_View$viewRequestForm = F4(
	function (language, currency, login, saleUuid) {
		var userUuid = login.credentials.user.uuid;
		var maybeTuple = A2(_gizra$backoffice$Backend_User_Utils$getWebsiteBidderInfoEditable, login, saleUuid);
		var _p18 = {ctor: '_Tuple2', _0: maybeTuple, _1: login.data.creditRequests};
		if ((((_p18.ctor === '_Tuple2') && (_p18._0.ctor === 'Just')) && (_p18._0._0.ctor === '_Tuple2')) && (_p18._1.ctor === 'Success')) {
			var entity = _gizra$backoffice$Utils_EditableWebData$getOriginalValue(_p18._0._0._1);
			var liveCredit = A2(
				_elm_lang$core$Maybe$withDefault,
				_gizra$backoffice$Amount$None,
				A2(_eeue56$elm_all_dict$EveryDict$get, _gizra$backoffice$Backend_BidderInfo_Model$LiveCredit, entity.amountRestrictions));
			var _p19 = liveCredit;
			if (_p19.ctor === 'Unlimited') {
				return A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('user-pages'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h1,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_gizra$backoffice$Translate$translateText,
									language,
									_gizra$backoffice$Translate$Credit(_gizra$backoffice$Translate$CreditRequest)),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('alert alert-info'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_gizra$backoffice$Translate$translateText,
										language,
										_gizra$backoffice$Translate$Credit(_gizra$backoffice$Translate$CreditUnlimited)),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					});
			} else {
				var _p20 = A2(_gizra$backoffice$Backend_CreditRequest_Utils$getPendingOrNew, userUuid, _p18._1._0);
				var storageKey = _p20._0;
				var editable = _p20._1;
				var record = _stoeffel$editable$Editable$value(
					_Gizra$elm_editable_webdata$Editable_WebData$toEditable(editable));
				var amountAsString = function () {
					var _p21 = record.credit;
					switch (_p21.ctor) {
						case 'None':
							return 'None';
						case 'Unlimited':
							return 'Unlimited';
						default:
							return _elm_lang$core$Basics$toString(
								_gizra$backoffice$Amount$extract(_p21._0));
					}
				}();
				var isLoading = _krisajenkins$remotedata$RemoteData$isLoading(
					_Gizra$elm_editable_webdata$Editable_WebData$toWebData(editable));
				var buttonText = isLoading ? _gizra$backoffice$Utils_Html$spinner : A2(
					_elm_lang$html$Html$span,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$i,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('fa fa-check'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_gizra$backoffice$Translate$translateText,
								language,
								_gizra$backoffice$Translate$General(_gizra$backoffice$Translate$Send)),
							_1: {ctor: '[]'}
						}
					});
				var isChanged = _stoeffel$editable$Editable$isDirty(
					_Gizra$elm_editable_webdata$Editable_WebData$toEditable(editable));
				var _p22 = (isLoading || ((!isChanged) || _elm_lang$core$String$isEmpty(amountAsString))) ? {
					ctor: '_Tuple3',
					_0: true,
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$disabled(true),
						_1: {ctor: '[]'}
					},
					_2: {ctor: '[]'}
				} : {
					ctor: '_Tuple3',
					_0: false,
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(
							A2(_gizra$backoffice$Pages_MyCredit_Model$CreditRequestSave, saleUuid, storageKey)),
						_1: {ctor: '[]'}
					},
					_2: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onSubmit(
							A2(_gizra$backoffice$Pages_MyCredit_Model$CreditRequestSave, saleUuid, storageKey)),
						_1: {ctor: '[]'}
					}
				};
				var buttonDisabled = _p22._0;
				var clickAttr = _p22._1;
				var formAttr = _p22._2;
				var buttonAttr = A2(
					_elm_lang$core$List$append,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('btn btn-default'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$type_('button'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$disabled(buttonDisabled),
								_1: {ctor: '[]'}
							}
						}
					},
					clickAttr);
				var _p23 = function () {
					if (_Gizra$elm_storage_key$StorageKey$isExisting(storageKey)) {
						var pendingCredit = function (_) {
							return _.credit;
						}(
							_stoeffel$editable$Editable$value(
								_stoeffel$editable$Editable$cancel(
									_Gizra$elm_editable_webdata$Editable_WebData$toEditable(editable))));
						return {
							ctor: '_Tuple2',
							_0: A2(
								_gizra$backoffice$Translate$translateText,
								language,
								_gizra$backoffice$Translate$Credit(_gizra$backoffice$Translate$CreditRequestPending)),
							_1: _gizra$backoffice$Translate$Credit(
								A3(_gizra$backoffice$Translate$CurrentCreditAndPending, liveCredit, pendingCredit, currency))
						};
					} else {
						return {
							ctor: '_Tuple2',
							_0: _Gizra$elm_essentials$Gizra_Html$emptyNode,
							_1: _gizra$backoffice$Translate$Credit(
								A2(_gizra$backoffice$Translate$CurrentCredit, liveCredit, currency))
						};
					}
				}();
				var pendingTrans = _p23._0;
				var exisingTrans = _p23._1;
				var formStatus = function () {
					var _p24 = _Gizra$elm_editable_webdata$Editable_WebData$toWebData(editable);
					switch (_p24.ctor) {
						case 'Success':
							return A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('alert alert-info'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_gizra$backoffice$Translate$translateText,
										language,
										_gizra$backoffice$Translate$Credit(_gizra$backoffice$Translate$YourBidderLimitHasBeenUpdated)),
									_1: {ctor: '[]'}
								});
						case 'Failure':
							return A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('alert alert-danger'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(_gizra$backoffice$Utils_WebData$viewError, language, _p24._0),
									_1: {ctor: '[]'}
								});
						default:
							return _Gizra$elm_essentials$Gizra_Html$emptyNode;
					}
				}();
				return A2(
					_elm_lang$html$Html$form,
					A2(
						_elm_lang$core$List$append,
						formAttr,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$action('javascript:void(0);'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('user-pages'),
								_1: {ctor: '[]'}
							}
						}),
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h1,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_gizra$backoffice$Translate$translateText,
									language,
									_gizra$backoffice$Translate$Credit(_gizra$backoffice$Translate$CreditRequest)),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('instructions'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$p,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: A2(
												_gizra$backoffice$Translate$translateText,
												language,
												_gizra$backoffice$Translate$Credit(_gizra$backoffice$Translate$CreditRequestDescription)),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: A2(
													_gizra$backoffice$Translate$translateText,
													language,
													_gizra$backoffice$Translate$Credit(_gizra$backoffice$Translate$NumberInput)),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('alert alert-info'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: pendingTrans,
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: A2(_gizra$backoffice$Translate$translateText, language, exisingTrans),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(_gizra$backoffice$Utils_WebData$editableWebDataViewMaybeError, language, editable),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('input-group'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$input,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$type_('number'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('form-control'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$min('1'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$max(
																		_elm_lang$core$Basics$toString(_gizra$backoffice$Utils_Number$maximalInt)),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Events$onInput(
																			_gizra$backoffice$Pages_MyCredit_Model$CreditRequestSetAmount(storageKey)),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$value(amountAsString),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$required(true),
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}
														}
													},
													{ctor: '[]'}),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('submit-button-wrapper'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$button,
														buttonAttr,
														{
															ctor: '::',
															_0: buttonText,
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: formStatus,
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					});
			}
		} else {
			return _Gizra$elm_essentials$Gizra_Html$emptyNode;
		}
	});
var _gizra$backoffice$Pages_MyCredit_View$view = F4(
	function (language, currency, login, saleUuid) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('my-credit'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A4(_gizra$backoffice$Pages_MyCredit_View$viewRequestForm, language, currency, login, saleUuid),
				_1: {
					ctor: '::',
					_0: A4(_gizra$backoffice$Pages_MyCredit_View$viewBidderMax, language, currency, login, saleUuid),
					_1: {ctor: '[]'}
				}
			});
	});

var _gizra$backoffice$Pages_Register_View$viewForm = F4(
	function (baseHostUrl, language, login, model) {
		var isLoading = _krisajenkins$remotedata$RemoteData$isLoading(login.data.register);
		var formStatus = function () {
			var _p0 = login.data.register;
			switch (_p0.ctor) {
				case 'Success':
					return A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('alert alert-info'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_gizra$backoffice$Translate$translateText,
								language,
								_gizra$backoffice$Translate$Register(_gizra$backoffice$Translate$YourAccountDetailsHaveBeenSaved)),
							_1: {ctor: '[]'}
						});
				case 'Failure':
					return A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('alert alert-danger'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(_gizra$backoffice$Utils_WebData$viewError, language, _p0._0),
							_1: {ctor: '[]'}
						});
				default:
					return _gizra$backoffice$Utils_Html$emptyNode;
			}
		}();
		var baseUrl = _sporto$erl$Erl$toString(baseHostUrl);
		var form = model.form;
		var isDisabled = isLoading || (_elm_community$maybe_extra$Maybe_Extra$isNothing(
			_etaque$elm_form$Form$getOutput(form)) || _elm_community$maybe_extra$Maybe_Extra$isNothing(model.recaptchaToken));
		var buttonAttr = isDisabled ? {ctor: '[]'} : (_elm_community$maybe_extra$Maybe_Extra$isJust(
			_etaque$elm_form$Form$getOutput(form)) ? {
			ctor: '::',
			_0: _elm_lang$html$Html_Events$onClick(_gizra$backoffice$Pages_Register_Model$Save),
			_1: {ctor: '[]'}
		} : {ctor: '[]'});
		var submit = A2(
			_elm_lang$html$Html$button,
			A2(
				_elm_lang$core$List$append,
				buttonAttr,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$classList(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'btn form-submit', _1: true},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'disabled', _1: isDisabled},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'loading', _1: isLoading},
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {ctor: '[]'}
				}),
			{
				ctor: '::',
				_0: A2(
					_gizra$backoffice$Translate$translateText,
					language,
					_gizra$backoffice$Translate$Register(_gizra$backoffice$Translate$SignUpNow)),
				_1: {ctor: '[]'}
			});
		return A2(
			_elm_lang$html$Html$form,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$action('javascript:void(0);'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('user-pages'),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$h1,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_gizra$backoffice$Translate$translateText,
							language,
							_gizra$backoffice$Translate$Register(_gizra$backoffice$Translate$CreateAnAccount)),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('instructions'),
							_1: {ctor: '[]'}
						},
						A2(_gizra$backoffice$Translate$translateHtml, language, _gizra$backoffice$Translate$RegisterInstructions)),
					_1: {
						ctor: '::',
						_0: A8(_gizra$backoffice$Utils_UserForms$textField, language, form, _gizra$backoffice$Pages_Register_Model$MsgForm, 'field-type-text', 'control-label', false, _gizra$backoffice$Utils_UserForms$Required, _gizra$backoffice$Utils_UserForms$FirstName),
						_1: {
							ctor: '::',
							_0: A8(_gizra$backoffice$Utils_UserForms$textField, language, form, _gizra$backoffice$Pages_Register_Model$MsgForm, 'field-type-text', 'control-label', false, _gizra$backoffice$Utils_UserForms$Required, _gizra$backoffice$Utils_UserForms$LastName),
							_1: {
								ctor: '::',
								_0: A8(_gizra$backoffice$Utils_UserForms$emailField, language, form, _gizra$backoffice$Pages_Register_Model$MsgForm, 'field-type-text', 'control-label', false, _gizra$backoffice$Utils_UserForms$Required, _gizra$backoffice$Utils_UserForms$Email),
								_1: {
									ctor: '::',
									_0: A8(_gizra$backoffice$Utils_UserForms$phoneField, language, form, _gizra$backoffice$Pages_Register_Model$MsgForm, 'field-type-text', 'control-label', false, _gizra$backoffice$Utils_UserForms$Required, _gizra$backoffice$Utils_UserForms$PhoneNumber),
									_1: {
										ctor: '::',
										_0: A3(_gizra$backoffice$Utils_UserForms$addressField, language, form, _gizra$backoffice$Pages_Register_Model$MsgForm),
										_1: {
											ctor: '::',
											_0: A5(_gizra$backoffice$Utils_UserForms$languageField, language, login.data.site, form, _gizra$backoffice$Pages_Register_Model$MsgForm, true),
											_1: {
												ctor: '::',
												_0: A8(_gizra$backoffice$Utils_UserForms$textAreaField, language, form, _gizra$backoffice$Pages_Register_Model$MsgForm, 'form-textarea-wrapper resizable textarea-processed resizable-textarea', 'control-label', false, _gizra$backoffice$Utils_UserForms$NotRequired, _gizra$backoffice$Utils_UserForms$References),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$fieldset,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('password-fields'),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: A8(_gizra$backoffice$Utils_UserForms$passwordField, language, form, _gizra$backoffice$Pages_Register_Model$MsgForm, 'form-item-pass-pass1 form-type-password form-group has-feedback', 'control-label', false, _gizra$backoffice$Utils_UserForms$Required, _gizra$backoffice$Utils_UserForms$Password),
															_1: {
																ctor: '::',
																_0: A8(_gizra$backoffice$Utils_UserForms$passwordField, language, form, _gizra$backoffice$Pages_Register_Model$MsgForm, 'form-item-pass-pass2 form-type-password form-group has-feedback', 'control-label', false, _gizra$backoffice$Utils_UserForms$Required, _gizra$backoffice$Utils_UserForms$ConfirmPassword),
																_1: {ctor: '[]'}
															}
														}),
													_1: {
														ctor: '::',
														_0: A8(_gizra$backoffice$Utils_UserForms$viewAgreeToTermsAndConditions, baseUrl, language, form, _gizra$backoffice$Pages_Register_Model$MsgForm, 'form-item form-checkboxes', false, _gizra$backoffice$Utils_UserForms$Required, _gizra$backoffice$Utils_UserForms$AcceptTerms),
														_1: {
															ctor: '::',
															_0: A8(_gizra$backoffice$Utils_UserForms$checkboxField, language, form, _gizra$backoffice$Pages_Register_Model$MsgForm, 'form-item form-checkboxes', 'control-label', false, _gizra$backoffice$Utils_UserForms$NotRequired, _gizra$backoffice$Utils_UserForms$SubscribeToNewsLetter),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$div,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$id(_gizra$backoffice$App_Utils$getRecaptchaId),
																		_1: {ctor: '[]'}
																	},
																	{ctor: '[]'}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$div,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$class('submit-button-wrapper'),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: submit,
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: formStatus,
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			});
	});
var _gizra$backoffice$Pages_Register_View$view = F4(
	function (baseHostUrl, language, login, model) {
		var loginUrl = _sporto$erl$Erl$toString(
			_elm_lang$core$Native_Utils.update(
				baseHostUrl,
				{
					path: A2(
						_elm_lang$core$List$append,
						baseHostUrl.path,
						{
							ctor: '::',
							_0: 'login',
							_1: {ctor: '[]'}
						})
				}));
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('account'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A4(_gizra$backoffice$Pages_Register_View$viewForm, baseHostUrl, language, login, model),
				_1: {ctor: '[]'}
			});
	});

var _gizra$backoffice$Pages_ResetPassword_View$view = F2(
	function (baseHostUrl, language) {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _gizra$backoffice$Utils_Html$spinner,
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$h1,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_gizra$backoffice$Translate$translateText,
								language,
								_gizra$backoffice$Translate$ForgotPassword(_gizra$backoffice$Translate$RedirectingToMyAccountPageMessage)),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});

var _gizra$backoffice$Pages_UserBlock_View$viewAuthenticated = F5(
	function (baseHostUrl, language, user, maybeSaleUuid, isDropdownExpanded) {
		var baseUrl = _sporto$erl$Erl$toString(baseHostUrl);
		var _p0 = A3(
			_elm_community$maybe_extra$Maybe_Extra$unwrap,
			{ctor: '_Tuple2', _0: _Gizra$elm_essentials$Gizra_Html$emptyNode, _1: _Gizra$elm_essentials$Gizra_Html$emptyNode},
			function (saleUuid) {
				return {
					ctor: '_Tuple2',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('dropdown-item'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$href(
									A2(
										_elm_lang$core$Basics_ops['++'],
										baseUrl,
										A2(
											_elm_lang$core$Basics_ops['++'],
											'/my-bids/',
											_Gizra$elm_restful$Restful_Endpoint$fromEntityUuid(saleUuid)))),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_gizra$backoffice$Translate$translateText,
								language,
								_gizra$backoffice$Translate$UserBlock(_gizra$backoffice$Translate$MyBids_)),
							_1: {ctor: '[]'}
						}),
					_1: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('dropdown-item'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$href(
									A2(
										_elm_lang$core$Basics_ops['++'],
										baseUrl,
										A2(
											_elm_lang$core$Basics_ops['++'],
											'/my-credit/',
											_Gizra$elm_restful$Restful_Endpoint$fromEntityUuid(saleUuid)))),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_gizra$backoffice$Translate$translateText,
								language,
								_gizra$backoffice$Translate$UserBlock(_gizra$backoffice$Translate$MyCredit_)),
							_1: {ctor: '[]'}
						})
				};
			},
			maybeSaleUuid);
		var myBids = _p0._0;
		var myCredit = _p0._1;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('logged-in '),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'dropdown', _1: true},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'open', _1: isDropdownExpanded},
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('btn btn-secondary'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$id('dropdownMenuButton'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$type_('button'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(
												_gizra$backoffice$Pages_UserBlock_Model$SetDropdownState(true)),
											_1: {ctor: '[]'}
										}
									}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									A2(
										_elm_lang$core$Basics_ops['++'],
										user.firstName,
										A2(_elm_lang$core$Basics_ops['++'], ' ', user.lastName))),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$i,
										{
											ctor: '::',
											_0: A2(_elm_lang$html$Html_Attributes$attribute, 'aria-hidden', 'true'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('fa fa-chevron-down'),
												_1: {ctor: '[]'}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('dropdown-menu'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$a,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('dropdown-item'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$href(
													A2(_elm_lang$core$Basics_ops['++'], baseUrl, '/my-account')),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: A2(
												_gizra$backoffice$Translate$translateText,
												language,
												_gizra$backoffice$Translate$UserBlock(_gizra$backoffice$Translate$MyAccount_)),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: myCredit,
										_1: {
											ctor: '::',
											_0: myBids,
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$a,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('dropdown-item last'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Events$onClick(_gizra$backoffice$Pages_UserBlock_Model$Logout),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$href('#'),
																_1: {ctor: '[]'}
															}
														}
													},
													{
														ctor: '::',
														_0: A2(
															_gizra$backoffice$Translate$translateText,
															language,
															_gizra$backoffice$Translate$UserBlock(_gizra$backoffice$Translate$Logout)),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}
										}
									}
								}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			});
	});
var _gizra$backoffice$Pages_UserBlock_View$viewAnonymous = F3(
	function (location, _p1, language) {
		var _p2 = _p1;
		var _p6 = _p2._1;
		var _p5 = _p2._0;
		var register = _sporto$erl$Erl$toString(
			_elm_lang$core$Native_Utils.update(
				_p5,
				{
					path: A2(
						_elm_lang$core$List$append,
						_p5.path,
						{
							ctor: '::',
							_0: 'register',
							_1: {ctor: '[]'}
						}),
					query: A3(
						_sporto$erl$Erl_Query$add,
						'redirect',
						_sporto$erl$Erl$toAbsoluteString(_p6),
						_p5.query)
				}));
		var login = _sporto$erl$Erl$toString(
			_elm_lang$core$Native_Utils.update(
				_p5,
				{
					path: A2(
						_elm_lang$core$List$append,
						_p5.path,
						{
							ctor: '::',
							_0: 'login',
							_1: {ctor: '[]'}
						}),
					query: A3(
						_sporto$erl$Erl_Query$add,
						'redirect',
						_sporto$erl$Erl$toAbsoluteString(_p6),
						_p5.query)
				}));
		var _p3 = function () {
			var defaultContent = {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$a,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$href(login),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_gizra$backoffice$Translate$translateText,
							language,
							_gizra$backoffice$Translate$UserBlock(_gizra$backoffice$Translate$Login_)),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(' '),
					_1: {
						ctor: '::',
						_0: A2(
							_gizra$backoffice$Translate$translateText,
							language,
							_gizra$backoffice$Translate$General(_gizra$backoffice$Translate$Or)),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html$text(' '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$href(register),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_gizra$backoffice$Translate$translateText,
											language,
											_gizra$backoffice$Translate$UserBlock(_gizra$backoffice$Translate$Register_)),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			};
			var defaultClass = 'logged-out';
			var _p4 = location;
			if (_p4.ctor === 'Header') {
				return {ctor: '_Tuple2', _0: defaultContent, _1: defaultClass};
			} else {
				return {
					ctor: '_Tuple2',
					_0: A2(
						_elm_lang$core$Basics_ops['++'],
						defaultContent,
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								A2(
									_elm_lang$core$Basics_ops['++'],
									' ',
									A2(
										_gizra$backoffice$Translate$translate,
										language,
										_gizra$backoffice$Translate$UserBlock(_gizra$backoffice$Translate$ToPlaceBid)))),
							_1: {ctor: '[]'}
						}),
					_1: A2(_elm_lang$core$Basics_ops['++'], defaultClass, ' item-block')
				};
			}
		}();
		var content = _p3._0;
		var cssClass = _p3._1;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(cssClass),
				_1: {ctor: '[]'}
			},
			content);
	});
var _gizra$backoffice$Pages_UserBlock_View$view = F5(
	function (_p8, language, maybeUser, maybeSaleUuid, _p7) {
		var _p9 = _p8;
		var _p12 = _p9._0;
		var _p10 = _p7;
		var _p11 = _p10.isDropdownExpanded;
		return A2(
			_elm_lang$html$Html$div,
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('user-block'),
					_1: {ctor: '[]'}
				},
				_p11 ? {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(
						_gizra$backoffice$Pages_UserBlock_Model$SetDropdownState(false)),
					_1: {ctor: '[]'}
				} : {ctor: '[]'}),
			{
				ctor: '::',
				_0: A3(
					_elm_community$maybe_extra$Maybe_Extra$unwrap,
					A3(
						_gizra$backoffice$Pages_UserBlock_View$viewAnonymous,
						_gizra$backoffice$Pages_UserBlock_Model$Header,
						{ctor: '_Tuple2', _0: _p12, _1: _p9._1},
						language),
					function (user) {
						return A5(_gizra$backoffice$Pages_UserBlock_View$viewAuthenticated, _p12, language, user, maybeSaleUuid, _p11);
					},
					maybeUser),
				_1: {ctor: '[]'}
			});
	});

var _gizra$backoffice$App_View$view = function (model) {
	var debug = false;
	var errorElement = debug ? A2(_gizra$backoffice$Error_View$view, model.language, model.errors) : _gizra$backoffice$Utils_Html$emptyNode;
	if (_Gizra$elm_restful$Restful_Login$isCheckingAccessToken(model.userAndData)) {
		return _gizra$backoffice$Utils_Html$emptyNode;
	} else {
		var _p0 = model.activePage;
		_v0_9:
		do {
			switch (_p0.ctor) {
				case 'ItemPreLiveSale':
					if ((_p0._0.ctor === 'Just') && (_p0._1.ctor === 'Just')) {
						var _p3 = _p0._0._0;
						var _p2 = _p0._1._0;
						var _p1 = model.userAndData;
						if (_p1.ctor === 'Authenticated') {
							return A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('items-pre-live-sale--authenticated'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: errorElement,
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$map,
											_gizra$backoffice$App_Model$MsgPagesItemPreLiveSale,
											A7(
												_gizra$backoffice$Pages_ItemPreLiveSale_View$view,
												{ctor: '_Tuple2', _0: model.baseHostUrl, _1: model.circuitBidUrl},
												model.language,
												model.currency,
												_p1._0,
												_p3,
												_p2,
												model.pageItemPreLiveSale)),
										_1: {ctor: '[]'}
									}
								});
						} else {
							return A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('items-pre-live-sale--anonymous'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: errorElement,
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$map,
											_gizra$backoffice$App_Model$MsgPagesItemPreLiveSale,
											A7(
												_gizra$backoffice$Pages_ItemPreLiveSale_View$viewAnon,
												{ctor: '_Tuple2', _0: model.baseHostUrl, _1: model.circuitBidUrl},
												model.language,
												model.currency,
												_p1._0,
												_p3,
												_p2,
												model.pageItemPreLiveSale)),
										_1: {
											ctor: '::',
											_0: A3(
												_gizra$backoffice$Pages_UserBlock_View$viewAnonymous,
												_gizra$backoffice$Pages_UserBlock_Model$ItemBlock,
												{ctor: '_Tuple2', _0: model.baseHostUrl, _1: model.hostUrl},
												model.language),
											_1: {ctor: '[]'}
										}
									}
								});
						}
					} else {
						break _v0_9;
					}
				case 'LoginPage':
					var _p4 = model.userAndData;
					if (_p4.ctor === 'Authenticated') {
						return _gizra$backoffice$Utils_Html$emptyNode;
					} else {
						return A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: errorElement,
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$map,
										_gizra$backoffice$App_Model$MsgPagesLogin,
										A4(_gizra$backoffice$Pages_Login_View$view, model.baseHostUrl, model.language, model.userAndData, model.pageLogin)),
									_1: {ctor: '[]'}
								}
							});
					}
				case 'MyAccount':
					var _p5 = model.userAndData;
					if (_p5.ctor === 'Authenticated') {
						return A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: errorElement,
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$map,
										_gizra$backoffice$App_Model$MsgPagesMyAccount,
										A3(_gizra$backoffice$Pages_MyAccount_View$view, model.language, _p5._0, model.pageMyAccount)),
									_1: {ctor: '[]'}
								}
							});
					} else {
						return _gizra$backoffice$Utils_Html$emptyNode;
					}
				case 'MyBids':
					if (_p0._0.ctor === 'Just') {
						var _p6 = model.userAndData;
						if (_p6.ctor === 'Authenticated') {
							return A2(
								_elm_lang$html$Html$div,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: errorElement,
									_1: {
										ctor: '::',
										_0: A5(_gizra$backoffice$Pages_MyBids_View$view, model.baseHostUrl, model.language, model.currency, _p6._0, _p0._0._0),
										_1: {ctor: '[]'}
									}
								});
						} else {
							return _gizra$backoffice$Utils_Html$emptyNode;
						}
					} else {
						break _v0_9;
					}
				case 'MyCredit':
					if (_p0._0.ctor === 'Just') {
						var _p7 = model.userAndData;
						if (_p7.ctor === 'Authenticated') {
							return A2(
								_elm_lang$html$Html$div,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: errorElement,
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$map,
											_gizra$backoffice$App_Model$MsgPagesMyCredit,
											A4(_gizra$backoffice$Pages_MyCredit_View$view, model.language, model.currency, _p7._0, _p0._0._0)),
										_1: {ctor: '[]'}
									}
								});
						} else {
							return _gizra$backoffice$Utils_Html$emptyNode;
						}
					} else {
						break _v0_9;
					}
				case 'Register':
					var _p8 = model.userAndData;
					if (_p8.ctor === 'Anonymous') {
						return A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: errorElement,
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$map,
										_gizra$backoffice$App_Model$MsgPagesRegister,
										A4(_gizra$backoffice$Pages_Register_View$view, model.baseHostUrl, model.language, _p8._0, model.pageRegister)),
									_1: {ctor: '[]'}
								}
							});
					} else {
						return _gizra$backoffice$Utils_Html$emptyNode;
					}
				case 'ResetPassword':
					if (_p0._0.ctor === 'Just') {
						return A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: errorElement,
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$map,
										_gizra$backoffice$App_Model$MsgPagesResetPassword,
										A2(_gizra$backoffice$Pages_ResetPassword_View$view, model.baseHostUrl, model.language)),
									_1: {ctor: '[]'}
								}
							});
					} else {
						break _v0_9;
					}
				case 'ForgotPassword':
					var _p9 = model.userAndData;
					if (_p9.ctor === 'Anonymous') {
						return A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: errorElement,
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$map,
										_gizra$backoffice$App_Model$MsgPagesForgotPassword,
										A3(_gizra$backoffice$Pages_ForgotPassword_View$view, model.language, _p9._0, model.pageForgotPassword)),
									_1: {ctor: '[]'}
								}
							});
					} else {
						return _gizra$backoffice$Utils_Html$emptyNode;
					}
				case 'UserBlock':
					var maybeUser = _Gizra$elm_restful$Restful_Login$getUser(model.userAndData);
					return A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: errorElement,
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$map,
									_gizra$backoffice$App_Model$MsgPagesUserBlock,
									A5(
										_gizra$backoffice$Pages_UserBlock_View$view,
										{ctor: '_Tuple2', _0: model.baseHostUrl, _1: model.hostUrl},
										model.language,
										maybeUser,
										_p0._0,
										model.pageUserBlock)),
								_1: {ctor: '[]'}
							}
						});
				default:
					break _v0_9;
			}
		} while(false);
		return _gizra$backoffice$Utils_Html$emptyNode;
	}
};

var _gizra$backoffice$Main$applyFetch = F3(
	function (fetch, update, resultSoFar) {
		applyFetch:
		while (true) {
			var msgs = fetch(
				_elm_lang$core$Tuple$first(resultSoFar));
			if (_elm_lang$core$List$isEmpty(msgs)) {
				return resultSoFar;
			} else {
				var _v0 = fetch,
					_v1 = update,
					_v2 = A3(_ccapndave$elm_update_extra$Update_Extra$sequence, update, msgs, resultSoFar);
				fetch = _v0;
				update = _v1;
				resultSoFar = _v2;
				continue applyFetch;
			}
		}
	});
var _gizra$backoffice$Main$updateAndThenFetchWhatTheViewNeeds = F2(
	function (msg, model) {
		return A3(
			_gizra$backoffice$Main$applyFetch,
			_gizra$backoffice$App_Fetch$fetch,
			_gizra$backoffice$App_Update$update,
			A2(_gizra$backoffice$App_Update$update, msg, model));
	});
var _gizra$backoffice$Main$main = _elm_lang$html$Html$programWithFlags(
	{init: _gizra$backoffice$App_Update$init, update: _gizra$backoffice$Main$updateAndThenFetchWhatTheViewNeeds, view: _gizra$backoffice$App_View$view, subscriptions: _gizra$backoffice$App_Update$subscriptions})(
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (accessToken) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (backendUrl) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						function (baseHostUrl) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								function (bidServerAuthStatusRequiredByBo) {
									return A2(
										_elm_lang$core$Json_Decode$andThen,
										function (circuitBidUrl) {
											return A2(
												_elm_lang$core$Json_Decode$andThen,
												function (currency) {
													return A2(
														_elm_lang$core$Json_Decode$andThen,
														function (hostUrl) {
															return A2(
																_elm_lang$core$Json_Decode$andThen,
																function (itemUuid) {
																	return A2(
																		_elm_lang$core$Json_Decode$andThen,
																		function (language) {
																			return A2(
																				_elm_lang$core$Json_Decode$andThen,
																				function (page) {
																					return A2(
																						_elm_lang$core$Json_Decode$andThen,
																						function (saleUuid) {
																							return A2(
																								_elm_lang$core$Json_Decode$andThen,
																								function (siteShortName) {
																									return _elm_lang$core$Json_Decode$succeed(
																										{accessToken: accessToken, backendUrl: backendUrl, baseHostUrl: baseHostUrl, bidServerAuthStatusRequiredByBo: bidServerAuthStatusRequiredByBo, circuitBidUrl: circuitBidUrl, currency: currency, hostUrl: hostUrl, itemUuid: itemUuid, language: language, page: page, saleUuid: saleUuid, siteShortName: siteShortName});
																								},
																								A2(_elm_lang$core$Json_Decode$field, 'siteShortName', _elm_lang$core$Json_Decode$string));
																						},
																						A2(
																							_elm_lang$core$Json_Decode$field,
																							'saleUuid',
																							_elm_lang$core$Json_Decode$oneOf(
																								{
																									ctor: '::',
																									_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
																									_1: {
																										ctor: '::',
																										_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string),
																										_1: {ctor: '[]'}
																									}
																								})));
																				},
																				A2(_elm_lang$core$Json_Decode$field, 'page', _elm_lang$core$Json_Decode$string));
																		},
																		A2(_elm_lang$core$Json_Decode$field, 'language', _elm_lang$core$Json_Decode$string));
																},
																A2(
																	_elm_lang$core$Json_Decode$field,
																	'itemUuid',
																	_elm_lang$core$Json_Decode$oneOf(
																		{
																			ctor: '::',
																			_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
																			_1: {
																				ctor: '::',
																				_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string),
																				_1: {ctor: '[]'}
																			}
																		})));
														},
														A2(_elm_lang$core$Json_Decode$field, 'hostUrl', _elm_lang$core$Json_Decode$string));
												},
												A2(_elm_lang$core$Json_Decode$field, 'currency', _elm_lang$core$Json_Decode$string));
										},
										A2(_elm_lang$core$Json_Decode$field, 'circuitBidUrl', _elm_lang$core$Json_Decode$string));
								},
								A2(_elm_lang$core$Json_Decode$field, 'bidServerAuthStatusRequiredByBo', _elm_lang$core$Json_Decode$bool));
						},
						A2(_elm_lang$core$Json_Decode$field, 'baseHostUrl', _elm_lang$core$Json_Decode$string));
				},
				A2(_elm_lang$core$Json_Decode$field, 'backendUrl', _elm_lang$core$Json_Decode$string));
		},
		A2(
			_elm_lang$core$Json_Decode$field,
			'accessToken',
			_elm_lang$core$Json_Decode$oneOf(
				{
					ctor: '::',
					_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string),
						_1: {ctor: '[]'}
					}
				}))));

var Elm = {};
Elm['Main'] = Elm['Main'] || {};
if (typeof _gizra$backoffice$Main$main !== 'undefined') {
    _gizra$backoffice$Main$main(Elm['Main'], 'Main', undefined);
}

if (typeof define === "function" && define['amd'])
{
  define([], function() { return Elm; });
  return;
}

if (typeof module === "object")
{
  module['exports'] = Elm;
  return;
}

var globalElm = this['Elm'];
if (typeof globalElm === "undefined")
{
  this['Elm'] = Elm;
  return;
}

for (var publicModule in Elm)
{
  if (publicModule in globalElm)
  {
    throw new Error('There are two Elm modules called `' + publicModule + '` on this page! Rename one of them.');
  }
  globalElm[publicModule] = Elm[publicModule];
}

}).call(this);

